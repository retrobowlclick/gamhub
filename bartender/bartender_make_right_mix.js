// Generated by Haxe 3.4.7
(function ($hx_exports, $global) {
  "use strict";
  $hx_exports["lime"] = $hx_exports["lime"] || {};
  $hx_exports["openfl"] = $hx_exports["openfl"] || {};
  $hx_exports["bartender_make_right_mix"] =
    $hx_exports["bartender_make_right_mix"] || {};
  var $hxClasses = {},
    $estr = function () {
      return js_Boot.__string_rec(this, "");
    };
  function $extend(from, fields) {
    function Inherit() {}
    Inherit.prototype = from;
    var proto = new Inherit();
    for (var name in fields) proto[name] = fields[name];
    if (fields.toString !== Object.prototype.toString)
      proto.toString = fields.toString;
    return proto;
  }
  var openfl_events_IEventDispatcher = function () {};
  $hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
  openfl_events_IEventDispatcher.__name__ = [
    "openfl",
    "events",
    "IEventDispatcher",
  ];
  openfl_events_IEventDispatcher.prototype = {
    addEventListener: null,
    dispatchEvent: null,
    hasEventListener: null,
    removeEventListener: null,
    willTrigger: null,
    __class__: openfl_events_IEventDispatcher,
  };
  var openfl_events_EventDispatcher = function (target) {
    if (target != null) {
      this.__targetDispatcher = target;
    }
  };
  $hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
  openfl_events_EventDispatcher.__name__ = [
    "openfl",
    "events",
    "EventDispatcher",
  ];
  openfl_events_EventDispatcher.__interfaces__ = [
    openfl_events_IEventDispatcher,
  ];
  openfl_events_EventDispatcher.__sortByPriority = function (l1, l2) {
    if (l1.priority == l2.priority) {
      return 0;
    } else if (l1.priority > l2.priority) {
      return -1;
    } else {
      return 1;
    }
  };
  openfl_events_EventDispatcher.prototype = {
    __eventMap: null,
    __iterators: null,
    __targetDispatcher: null,
    addEventListener: function (
      type,
      listener,
      useCapture,
      priority,
      useWeakReference
    ) {
      if (useWeakReference == null) {
        useWeakReference = false;
      }
      if (priority == null) {
        priority = 0;
      }
      if (useCapture == null) {
        useCapture = false;
      }
      if (listener == null) {
        return;
      }
      if (this.__eventMap == null) {
        this.__eventMap = new haxe_ds_StringMap();
        this.__iterators = new haxe_ds_StringMap();
      }
      var _this = this.__eventMap;
      if (
        !(__map_reserved[type] != null
          ? _this.existsReserved(type)
          : _this.h.hasOwnProperty(type))
      ) {
        var list = [];
        list.push(
          new openfl_events__$EventDispatcher_Listener(
            listener,
            useCapture,
            priority
          )
        );
        var iterator = new openfl_events__$EventDispatcher_DispatchIterator(
          list
        );
        var _this1 = this.__eventMap;
        if (__map_reserved[type] != null) {
          _this1.setReserved(type, list);
        } else {
          _this1.h[type] = list;
        }
        var _this2 = this.__iterators;
        var value = [iterator];
        if (__map_reserved[type] != null) {
          _this2.setReserved(type, value);
        } else {
          _this2.h[type] = value;
        }
      } else {
        var _this3 = this.__eventMap;
        var list1 =
          __map_reserved[type] != null
            ? _this3.getReserved(type)
            : _this3.h[type];
        var _g1 = 0;
        var _g = list1.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (list1[i].match(listener, useCapture)) {
            return;
          }
        }
        var _this4 = this.__iterators;
        var iterators =
          __map_reserved[type] != null
            ? _this4.getReserved(type)
            : _this4.h[type];
        var _g2 = 0;
        while (_g2 < iterators.length) {
          var iterator1 = iterators[_g2];
          ++_g2;
          if (iterator1.active) {
            iterator1.copy();
          }
        }
        list1.push(
          new openfl_events__$EventDispatcher_Listener(
            listener,
            useCapture,
            priority
          )
        );
        list1.sort(openfl_events_EventDispatcher.__sortByPriority);
      }
    },
    dispatchEvent: function (event) {
      if (this.__targetDispatcher != null) {
        event.target = this.__targetDispatcher;
      } else {
        event.target = this;
      }
      return this.__dispatchEvent(event);
    },
    hasEventListener: function (type) {
      if (this.__eventMap == null) {
        return false;
      }
      var _this = this.__eventMap;
      if (__map_reserved[type] != null) {
        return _this.existsReserved(type);
      } else {
        return _this.h.hasOwnProperty(type);
      }
    },
    removeEventListener: function (type, listener, useCapture) {
      if (useCapture == null) {
        useCapture = false;
      }
      if (this.__eventMap == null || listener == null) {
        return;
      }
      var _this = this.__eventMap;
      var list =
        __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
      if (list == null) {
        return;
      }
      var _this1 = this.__iterators;
      var iterators =
        __map_reserved[type] != null
          ? _this1.getReserved(type)
          : _this1.h[type];
      var _g1 = 0;
      var _g = list.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (list[i].match(listener, useCapture)) {
          var _g2 = 0;
          while (_g2 < iterators.length) {
            var iterator = iterators[_g2];
            ++_g2;
            iterator.remove(list[i], i);
          }
          list.splice(i, 1);
          break;
        }
      }
      if (list.length == 0) {
        this.__eventMap.remove(type);
        this.__iterators.remove(type);
      }
      var _this2 = this.__eventMap;
      if (
        !new haxe_ds__$StringMap_StringMapIterator(
          _this2,
          _this2.arrayKeys()
        ).hasNext()
      ) {
        this.__eventMap = null;
        this.__iterators = null;
      }
    },
    toString: function () {
      var full = Type.getClassName(js_Boot.getClass(this));
      var $short = full.split(".").pop();
      return "[object " + $short + "]";
    },
    willTrigger: function (type) {
      return this.hasEventListener(type);
    },
    __dispatchEvent: function (event) {
      if (this.__eventMap == null || event == null) {
        return true;
      }
      var type = event.type;
      var _this = this.__eventMap;
      var list =
        __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
      if (list == null) {
        return true;
      }
      if (event.target == null) {
        if (this.__targetDispatcher != null) {
          event.target = this.__targetDispatcher;
        } else {
          event.target = this;
        }
      }
      event.currentTarget = this;
      var capture = event.eventPhase == 1;
      var index = 0;
      var _this1 = this.__iterators;
      var iterators =
        __map_reserved[type] != null
          ? _this1.getReserved(type)
          : _this1.h[type];
      var iterator = iterators[0];
      if (iterator.active) {
        iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
        iterators.push(iterator);
      }
      iterator.reset(list);
      var listener = iterator;
      while (listener.hasNext()) {
        var listener1 = listener.next();
        if (listener1 == null) {
          continue;
        }
        if (listener1.useCapture == capture) {
          listener1.callback(event);
          if (event.__isCanceledNow) {
            break;
          }
        }
      }
      if (iterator != iterators[0]) {
        HxOverrides.remove(iterators, iterator);
      }
      return true;
    },
    __class__: openfl_events_EventDispatcher,
  };
  var openfl_display_IBitmapDrawable = function () {};
  $hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
  openfl_display_IBitmapDrawable.__name__ = [
    "openfl",
    "display",
    "IBitmapDrawable",
  ];
  openfl_display_IBitmapDrawable.prototype = {
    __blendMode: null,
    __transform: null,
    __worldTransform: null,
    __worldColorTransform: null,
    __renderCairo: null,
    __renderCairoMask: null,
    __renderCanvas: null,
    __renderCanvasMask: null,
    __renderGL: null,
    __updateChildren: null,
    __updateTransforms: null,
    __updateMask: null,
    __class__: openfl_display_IBitmapDrawable,
  };
  var openfl_display_DisplayObject = function () {
    openfl_events_EventDispatcher.call(this);
    this.__alpha = 1;
    this.__blendMode = 10;
    this.__cacheAsBitmap = false;
    this.__transform = new openfl_geom_Matrix();
    this.__visible = true;
    this.__rotation = 0;
    this.__rotationSine = 0;
    this.__rotationCosine = 1;
    this.__scaleX = 1;
    this.__scaleY = 1;
    this.__worldAlpha = 1;
    this.__worldTransform = new openfl_geom_Matrix();
    this.__worldColorTransform = new openfl_geom_ColorTransform();
    this.__renderTransform = new openfl_geom_Matrix();
    this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
  };
  $hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
  openfl_display_DisplayObject.__name__ = [
    "openfl",
    "display",
    "DisplayObject",
  ];
  openfl_display_DisplayObject.__interfaces__ = [
    openfl_display_IBitmapDrawable,
  ];
  openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
  openfl_display_DisplayObject.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      opaqueBackground: null,
      parent: null,
      scale9Grid: null,
      stage: null,
      __alpha: null,
      __blendMode: null,
      __cacheAsBitmap: null,
      __cacheAsBitmapMatrix: null,
      __cairo: null,
      __children: null,
      __filters: null,
      __forceCacheAsBitmap: null,
      __graphics: null,
      __interactive: null,
      __isMask: null,
      __loaderInfo: null,
      __mask: null,
      __name: null,
      __objectTransform: null,
      __renderable: null,
      __renderDirty: null,
      __renderParent: null,
      __renderTransform: null,
      __renderTransformCache: null,
      __renderTransformChanged: null,
      __rotation: null,
      __rotationCosine: null,
      __rotationSine: null,
      __scaleX: null,
      __scaleY: null,
      __scrollRect: null,
      __transform: null,
      __transformDirty: null,
      __visible: null,
      __worldAlpha: null,
      __worldAlphaChanged: null,
      __worldClip: null,
      __worldClipChanged: null,
      __worldColorTransform: null,
      __worldTransform: null,
      __worldVisible: null,
      __worldVisibleChanged: null,
      __worldZ: null,
      __canvas: null,
      __context: null,
      __style: null,
      addEventListener: function (
        type,
        listener,
        useCapture,
        priority,
        useWeakReference
      ) {
        if (useWeakReference == null) {
          useWeakReference = false;
        }
        if (priority == null) {
          priority = 0;
        }
        if (useCapture == null) {
          useCapture = false;
        }
        switch (type) {
          case "activate":
          case "deactivate":
          case "enterFrame":
          case "exitFrame":
          case "frameConstructed":
          case "render":
            if (!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
              openfl_display_DisplayObject.__broadcastEvents.set(type, []);
            }
            var dispatchers =
              openfl_display_DisplayObject.__broadcastEvents.get(type);
            if (dispatchers.indexOf(this) == -1) {
              dispatchers.push(this);
            }
            break;
          default:
        }
        openfl_events_EventDispatcher.prototype.addEventListener.call(
          this,
          type,
          listener,
          useCapture,
          priority,
          useWeakReference
        );
      },
      dispatchEvent: function (event) {
        if (js_Boot.__instanceof(event, openfl_events_MouseEvent)) {
          var mouseEvent = event;
          var _this = this.__getRenderTransform();
          mouseEvent.stageX =
            mouseEvent.localX * _this.a +
            mouseEvent.localY * _this.c +
            _this.tx;
          var _this1 = this.__getRenderTransform();
          mouseEvent.stageY =
            mouseEvent.localX * _this1.b +
            mouseEvent.localY * _this1.d +
            _this1.ty;
        } else if (js_Boot.__instanceof(event, openfl_events_TouchEvent)) {
          var touchEvent = event;
          var _this2 = this.__getRenderTransform();
          touchEvent.stageX =
            touchEvent.localX * _this2.a +
            touchEvent.localY * _this2.c +
            _this2.tx;
          var _this3 = this.__getRenderTransform();
          touchEvent.stageY =
            touchEvent.localX * _this3.b +
            touchEvent.localY * _this3.d +
            _this3.ty;
        }
        return openfl_events_EventDispatcher.prototype.dispatchEvent.call(
          this,
          event
        );
      },
      getBounds: function (targetCoordinateSpace) {
        var matrix;
        if (targetCoordinateSpace != null) {
          matrix = this.__getWorldTransform().clone();
          matrix.concat(
            targetCoordinateSpace.__getWorldTransform().clone().invert()
          );
        } else {
          matrix = openfl_geom_Matrix.__temp;
          matrix.identity();
        }
        var bounds = new openfl_geom_Rectangle();
        this.__getBounds(bounds, matrix);
        return bounds;
      },
      getRect: function (targetCoordinateSpace) {
        return this.getBounds(targetCoordinateSpace);
      },
      globalToLocal: function (pos) {
        pos = pos.clone();
        var _this = this.__getRenderTransform();
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          pos.x = -_this.tx;
          pos.y = -_this.ty;
        } else {
          var px =
            (1.0 / norm) *
            (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
          pos.y =
            (1.0 / norm) *
            (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
          pos.x = px;
        }
        return pos;
      },
      hitTestObject: function (obj) {
        if (obj != null && obj.parent != null && this.parent != null) {
          var currentBounds = this.getBounds(this);
          var targetBounds = obj.getBounds(this);
          return currentBounds.intersects(targetBounds);
        }
        return false;
      },
      hitTestPoint: function (x, y, shapeFlag) {
        if (shapeFlag == null) {
          shapeFlag = false;
        }
        if (this.stage != null) {
          return this.__hitTest(x, y, shapeFlag, null, true, this);
        } else {
          return false;
        }
      },
      localToGlobal: function (point) {
        return this.__getRenderTransform().transformPoint(point);
      },
      removeEventListener: function (type, listener, useCapture) {
        if (useCapture == null) {
          useCapture = false;
        }
        openfl_events_EventDispatcher.prototype.removeEventListener.call(
          this,
          type,
          listener,
          useCapture
        );
        switch (type) {
          case "activate":
          case "deactivate":
          case "enterFrame":
          case "exitFrame":
          case "frameConstructed":
          case "render":
            if (!this.hasEventListener(type)) {
              if (openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
                HxOverrides.remove(
                  openfl_display_DisplayObject.__broadcastEvents.get(type),
                  this
                );
              }
            }
            break;
          default:
        }
      },
      __cleanup: function () {
        this.__cairo = null;
        this.__canvas = null;
        this.__context = null;
        if (this.__graphics != null) {
          this.__graphics.__cleanup();
        }
      },
      __dispatch: function (event) {
        if (this.__eventMap != null && this.hasEventListener(event.type)) {
          var result =
            openfl_events_EventDispatcher.prototype.__dispatchEvent.call(
              this,
              event
            );
          if (event.__isCanceled) {
            return true;
          }
          return result;
        }
        return true;
      },
      __dispatchChildren: function (event) {
        return this.__dispatchEvent(event);
      },
      __dispatchEvent: function (event) {
        var result =
          openfl_events_EventDispatcher.prototype.__dispatchEvent.call(
            this,
            event
          );
        if (event.__isCanceled) {
          return true;
        }
        if (event.bubbles && this.parent != null && this.parent != this) {
          event.eventPhase = 3;
          if (event.target == null) {
            event.target = this;
          }
          this.parent.__dispatchEvent(event);
        }
        return result;
      },
      __enterFrame: function (deltaTime) {},
      __getBounds: function (rect, matrix) {
        if (this.__graphics != null) {
          this.__graphics.__getBounds(rect, matrix);
        }
      },
      __getCursor: function () {
        return null;
      },
      __getInteractive: function (stack) {
        return false;
      },
      __getLocalBounds: function (rect) {
        this.__getBounds(rect, this.__transform);
      },
      __getRenderBounds: function (rect, matrix) {
        if (this.__scrollRect == null) {
          this.__getBounds(rect, matrix);
        } else {
          var r = openfl_geom_Rectangle.__temp;
          r.copyFrom(this.__scrollRect);
          r.__transform(r, matrix);
          rect.__expand(matrix.tx, matrix.ty, r.width, r.height);
        }
      },
      __getRenderTransform: function () {
        this.__getWorldTransform();
        return this.__renderTransform;
      },
      __getWorldTransform: function () {
        if (
          this.__transformDirty ||
          openfl_display_DisplayObject.__worldTransformDirty > 0
        ) {
          var list = [];
          var current = this;
          var transformDirty = this.__transformDirty;
          if (this.parent == null) {
            if (transformDirty) {
              this.__update(true, false);
            }
          } else {
            while (current != this.stage) {
              list.push(current);
              current = current.parent;
              if (current == null) {
                break;
              }
              if (current != this.stage && current.__transformDirty) {
                transformDirty = true;
              }
            }
          }
          if (transformDirty) {
            var i = list.length;
            while (--i >= 0) list[i].__update(true, false);
          }
        }
        return this.__worldTransform;
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (this.__graphics != null) {
          if (!hitObject.get_visible() || this.__isMask) {
            return false;
          }
          if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
            return false;
          }
          if (
            this.__graphics.__hitTest(
              x,
              y,
              shapeFlag,
              this.__getRenderTransform()
            )
          ) {
            if (stack != null && !interactiveOnly) {
              stack.push(hitObject);
            }
            return true;
          }
        }
        return false;
      },
      __hitTestMask: function (x, y) {
        if (this.__graphics != null) {
          if (
            this.__graphics.__hitTest(x, y, true, this.__getRenderTransform())
          ) {
            return true;
          }
        }
        return false;
      },
      __readGraphicsData: function (graphicsData, recurse) {
        if (this.__graphics != null) {
          this.__graphics.__readGraphicsData(graphicsData);
        }
      },
      __renderCairo: function (renderSession) {},
      __renderCairoMask: function (renderSession) {},
      __renderCanvas: function (renderSession) {
        if (
          this.get_mask() == null ||
          (this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0)
        ) {
          if (!(this.opaqueBackground == null && this.__graphics == null)) {
            if (!(!this.__renderable || this.__worldAlpha <= 0)) {
              if (
                this.opaqueBackground != null &&
                this.get_width() > 0 &&
                this.get_height() > 0
              ) {
                renderSession.maskManager.pushObject(this);
                var context = renderSession.context;
                var transform = this.__renderTransform;
                if (renderSession.roundPixels) {
                  context.setTransform(
                    transform.a,
                    transform.b,
                    transform.c,
                    transform.d,
                    transform.tx | 0,
                    transform.ty | 0
                  );
                } else {
                  context.setTransform(
                    transform.a,
                    transform.b,
                    transform.c,
                    transform.d,
                    transform.tx,
                    transform.ty
                  );
                }
                var color = this.opaqueBackground;
                context.fillStyle =
                  "rgb(" +
                  ((color >>> 16) & 255) +
                  "," +
                  ((color >>> 8) & 255) +
                  "," +
                  (color & 255) +
                  ")";
                context.fillRect(0, 0, this.get_width(), this.get_height());
                renderSession.maskManager.popObject(this);
              }
              if (this.__graphics != null) {
                if (!(!this.__renderable || this.__worldAlpha <= 0)) {
                  var graphics = this.__graphics;
                  if (graphics != null) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.render(
                      graphics,
                      renderSession,
                      this.__renderTransform
                    );
                    var bounds = graphics.__bounds;
                    var width = graphics.__width;
                    var height = graphics.__height;
                    if (graphics.__canvas != null) {
                      var context1 = renderSession.context;
                      var scrollRect = this.__scrollRect;
                      if (
                        width > 0 &&
                        height > 0 &&
                        (scrollRect == null ||
                          (scrollRect.width > 0 && scrollRect.height > 0))
                      ) {
                        renderSession.maskManager.pushObject(this);
                        context1.globalAlpha = this.__worldAlpha;
                        var transform1 = graphics.__worldTransform;
                        if (renderSession.roundPixels) {
                          context1.setTransform(
                            transform1.a,
                            transform1.b,
                            transform1.c,
                            transform1.d,
                            transform1.tx | 0,
                            transform1.ty | 0
                          );
                        } else {
                          context1.setTransform(
                            transform1.a,
                            transform1.b,
                            transform1.c,
                            transform1.d,
                            transform1.tx,
                            transform1.ty
                          );
                        }
                        context1.drawImage(graphics.__canvas, 0, 0);
                        renderSession.maskManager.popObject(this);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      __renderCanvasMask: function (renderSession) {
        if (this.__graphics != null) {
          openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(
            this.__graphics,
            renderSession
          );
        }
      },
      __renderDOM: function (renderSession) {},
      __renderGL: function (renderSession) {
        if (!(this.opaqueBackground == null && this.__graphics == null)) {
          if (!(!this.__renderable || this.__worldAlpha <= 0)) {
            if (
              this.opaqueBackground != null &&
              this.get_width() > 0 &&
              this.get_height() > 0
            ) {
              renderSession.maskManager.pushObject(this);
              var gl = renderSession.gl;
              var rect = openfl_geom_Rectangle.__temp;
              rect.setTo(0, 0, this.get_width(), this.get_height());
              renderSession.maskManager.pushRect(rect, this.__renderTransform);
              var color = this.opaqueBackground;
              gl.__context.clearColor(
                ((color >>> 16) & 255) / 255,
                ((color >>> 8) & 255) / 255,
                (color & 255) / 255,
                1
              );
              gl.__context.clear(gl.COLOR_BUFFER_BIT);
              renderSession.maskManager.popRect();
              renderSession.maskManager.popObject(this);
            }
            if (this.__graphics != null) {
              if (!(!this.__renderable || this.__worldAlpha <= 0)) {
                var graphics = this.__graphics;
                if (graphics != null) {
                  openfl__$internal_renderer_canvas_CanvasGraphics.render(
                    graphics,
                    renderSession,
                    this.__renderTransform
                  );
                  var bounds = graphics.__bounds;
                  if (graphics.__bitmap != null && graphics.__visible) {
                    var renderer = renderSession.renderer;
                    var gl1 = renderSession.gl;
                    renderSession.blendModeManager.setBlendMode(
                      this.get_blendMode()
                    );
                    renderSession.maskManager.pushObject(this);
                    var shader = renderSession.filterManager.pushObject(this);
                    shader.get_data().uImage0.input = graphics.__bitmap;
                    shader.get_data().uImage0.smoothing =
                      renderSession.allowSmoothing;
                    shader.get_data().uMatrix.value = renderer.getMatrix(
                      graphics.__worldTransform
                    );
                    renderSession.shaderManager.setShader(shader);
                    var target = gl1.ARRAY_BUFFER;
                    var buffer = graphics.__bitmap.getBuffer(
                      gl1,
                      this.__worldAlpha
                    );
                    gl1.__context.bindBuffer(target, buffer);
                    var index = shader.get_data().aPosition.index;
                    var type = gl1.FLOAT;
                    var offset =
                      lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
                    gl1.__context.vertexAttribPointer(
                      index,
                      3,
                      type,
                      false,
                      24,
                      offset
                    );
                    var index1 = shader.get_data().aTexCoord.index;
                    var type1 = gl1.FLOAT;
                    var offset1 =
                      lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
                    gl1.__context.vertexAttribPointer(
                      index1,
                      2,
                      type1,
                      false,
                      24,
                      offset1
                    );
                    var index2 = shader.get_data().aAlpha.index;
                    var type2 = gl1.FLOAT;
                    var offset2 =
                      lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
                    gl1.__context.vertexAttribPointer(
                      index2,
                      1,
                      type2,
                      false,
                      24,
                      offset2
                    );
                    gl1.__context.drawArrays(gl1.TRIANGLE_STRIP, 0, 4);
                    renderSession.filterManager.popObject(this);
                    renderSession.maskManager.popObject(this);
                  }
                }
              }
            }
          }
        }
      },
      __setRenderDirty: function () {
        if (!this.__renderDirty) {
          this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
      },
      __setStageReference: function (stage) {
        this.stage = stage;
      },
      __setTransformDirty: function () {
        if (!this.__transformDirty) {
          this.__transformDirty = true;
          openfl_display_DisplayObject.__worldTransformDirty++;
        }
      },
      __stopAllMovieClips: function () {},
      __update: function (transformOnly, updateChildren, maskGraphics) {
        this.__renderable =
          this.get_visible() &&
          this.__scaleX != 0 &&
          this.__scaleY != 0 &&
          !this.__isMask &&
          (this.parent == null || !this.parent.__isMask);
        this.__updateTransforms();
        if (updateChildren && this.__transformDirty) {
          this.__transformDirty = false;
          openfl_display_DisplayObject.__worldTransformDirty--;
        }
        if (maskGraphics != null) {
          this.__updateMask(maskGraphics);
        }
        if (!transformOnly) {
          if (
            !this.__worldColorTransform.__equals(
              this.get_transform().get_colorTransform()
            )
          ) {
            this.__worldColorTransform = this.get_transform()
              .get_colorTransform()
              .__clone();
          }
          var __parent =
            this.parent != null ? this.parent : this.__renderParent;
          if (__parent != null) {
            this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
            this.__worldColorTransform.__combine(
              __parent.__worldColorTransform
            );
            if (this.get_blendMode() == null || this.get_blendMode() == 10) {
              this.__blendMode = __parent.__blendMode;
            }
          } else {
            this.__worldAlpha = this.get_alpha();
          }
          if (updateChildren && this.__renderDirty) {
            this.__renderDirty = false;
          }
        }
      },
      __updateChildren: function (transformOnly) {
        this.__renderable =
          this.get_visible() &&
          this.__scaleX != 0 &&
          this.__scaleY != 0 &&
          !this.__isMask &&
          (this.parent == null || !this.parent.__isMask);
        this.__worldAlpha = this.get_alpha();
        if (this.__transformDirty) {
          this.__transformDirty = false;
          openfl_display_DisplayObject.__worldTransformDirty--;
        }
      },
      __updateMask: function (maskGraphics) {
        if (this.__graphics != null) {
          maskGraphics.__commands.overrideMatrix(this.__worldTransform);
          maskGraphics.__commands.append(this.__graphics.__commands);
          maskGraphics.set___dirty(true);
          maskGraphics.__visible = true;
          if (maskGraphics.__bounds == null) {
            maskGraphics.__bounds = new openfl_geom_Rectangle();
          }
          this.__graphics.__getBounds(
            maskGraphics.__bounds,
            openfl_geom_Matrix.__identity
          );
        }
      },
      __updateTransforms: function (overrideTransform) {
        var overrided = overrideTransform != null;
        var local = overrided ? overrideTransform : this.__transform;
        if (this.__worldTransform == null) {
          this.__worldTransform = new openfl_geom_Matrix();
        }
        if (this.__renderTransform == null) {
          this.__renderTransform = new openfl_geom_Matrix();
        }
        if (!overrided && this.parent != null) {
          var parentTransform = this.parent.__worldTransform;
          this.__worldTransform.a =
            local.a * parentTransform.a + local.b * parentTransform.c;
          this.__worldTransform.b =
            local.a * parentTransform.b + local.b * parentTransform.d;
          this.__worldTransform.c =
            local.c * parentTransform.a + local.d * parentTransform.c;
          this.__worldTransform.d =
            local.c * parentTransform.b + local.d * parentTransform.d;
          this.__worldTransform.tx =
            local.tx * parentTransform.a +
            local.ty * parentTransform.c +
            parentTransform.tx;
          this.__worldTransform.ty =
            local.tx * parentTransform.b +
            local.ty * parentTransform.d +
            parentTransform.ty;
          parentTransform = this.parent.__renderTransform;
          this.__renderTransform.a =
            local.a * parentTransform.a + local.b * parentTransform.c;
          this.__renderTransform.b =
            local.a * parentTransform.b + local.b * parentTransform.d;
          this.__renderTransform.c =
            local.c * parentTransform.a + local.d * parentTransform.c;
          this.__renderTransform.d =
            local.c * parentTransform.b + local.d * parentTransform.d;
          this.__renderTransform.tx =
            local.tx * parentTransform.a +
            local.ty * parentTransform.c +
            parentTransform.tx;
          this.__renderTransform.ty =
            local.tx * parentTransform.b +
            local.ty * parentTransform.d +
            parentTransform.ty;
        } else {
          this.__worldTransform.copyFrom(local);
          this.__renderTransform.copyFrom(local);
        }
        if (this.__scrollRect != null) {
          var _this = this.__renderTransform;
          var px = -this.__scrollRect.x;
          var py = -this.__scrollRect.y;
          _this.tx = px * _this.a + py * _this.c + _this.tx;
          _this.ty = px * _this.b + py * _this.d + _this.ty;
        }
      },
      get_alpha: function () {
        return this.__alpha;
      },
      set_alpha: function (value) {
        if (value > 1.0) {
          value = 1.0;
        }
        if (value != this.__alpha) {
          if (!this.__renderDirty) {
            this.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
        }
        return (this.__alpha = value);
      },
      get_blendMode: function () {
        return this.__blendMode;
      },
      set_blendMode: function (value) {
        if (value == null) {
          value = 10;
        }
        return (this.__blendMode = value);
      },
      get_cacheAsBitmap: function () {
        if (this.__filters == null) {
          return this.__cacheAsBitmap;
        } else {
          return true;
        }
      },
      set_cacheAsBitmap: function (value) {
        if (!this.__renderDirty) {
          this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
        return (this.__cacheAsBitmap = value);
      },
      get_cacheAsBitmapMatrix: function () {
        return this.__cacheAsBitmapMatrix;
      },
      set_cacheAsBitmapMatrix: function (value) {
        if (!this.__renderDirty) {
          this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
        return (this.__cacheAsBitmapMatrix = value.clone());
      },
      get_filters: function () {
        if (this.__filters == null) {
          return [];
        } else {
          return this.__filters.slice();
        }
      },
      set_filters: function (value) {
        if (value != null && value.length > 0) {
          this.__filters = value;
        } else {
          this.__filters = null;
        }
        if (!this.__renderDirty) {
          this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
        return value;
      },
      get_height: function () {
        var bounds = new openfl_geom_Rectangle();
        this.__getBounds(bounds, this.__transform);
        return bounds.height;
      },
      set_height: function (value) {
        var bounds = new openfl_geom_Rectangle();
        var matrix = openfl_geom_Matrix.__temp;
        matrix.identity();
        this.__getBounds(bounds, matrix);
        if (value != bounds.height) {
          this.set_scaleY(value / bounds.height);
        } else {
          this.set_scaleY(1);
        }
        return value;
      },
      get_loaderInfo: function () {
        if (this.stage != null) {
          return openfl_Lib.current.__loaderInfo;
        }
        return null;
      },
      get_mask: function () {
        return this.__mask;
      },
      set_mask: function (value) {
        if (value != this.__mask) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          if (!this.__renderDirty) {
            this.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
        }
        if (this.__mask != null) {
          this.__mask.__isMask = false;
          var _this = this.__mask;
          if (!_this.__transformDirty) {
            _this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          var _this1 = this.__mask;
          if (!_this1.__renderDirty) {
            _this1.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
        }
        if (value != null) {
          value.__isMask = true;
        }
        return (this.__mask = value);
      },
      get_mouseX: function () {
        var mouseX =
          this.stage != null
            ? this.stage.__mouseX
            : openfl_Lib.current.stage.__mouseX;
        var mouseY =
          this.stage != null
            ? this.stage.__mouseY
            : openfl_Lib.current.stage.__mouseY;
        var _this = this.__getRenderTransform();
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          return -_this.tx;
        } else {
          return (
            (1.0 / norm) *
            (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx))
          );
        }
      },
      get_mouseY: function () {
        var mouseX =
          this.stage != null
            ? this.stage.__mouseX
            : openfl_Lib.current.stage.__mouseX;
        var mouseY =
          this.stage != null
            ? this.stage.__mouseY
            : openfl_Lib.current.stage.__mouseY;
        var _this = this.__getRenderTransform();
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          return -_this.ty;
        } else {
          return (
            (1.0 / norm) *
            (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX))
          );
        }
      },
      get_name: function () {
        return this.__name;
      },
      set_name: function (value) {
        return (this.__name = value);
      },
      get_root: function () {
        if (this.stage != null) {
          return openfl_Lib.current;
        }
        return null;
      },
      get_rotation: function () {
        return this.__rotation;
      },
      set_rotation: function (value) {
        if (value != this.__rotation) {
          this.__rotation = value;
          var radians = this.__rotation * (Math.PI / 180);
          this.__rotationSine = Math.sin(radians);
          this.__rotationCosine = Math.cos(radians);
          this.__transform.a = this.__rotationCosine * this.__scaleX;
          this.__transform.b = this.__rotationSine * this.__scaleX;
          this.__transform.c = -this.__rotationSine * this.__scaleY;
          this.__transform.d = this.__rotationCosine * this.__scaleY;
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
        }
        return value;
      },
      get_scaleX: function () {
        return this.__scaleX;
      },
      set_scaleX: function (value) {
        if (value != this.__scaleX) {
          this.__scaleX = value;
          if (this.__transform.b == 0) {
            if (value != this.__transform.a) {
              if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
              }
            }
            this.__transform.a = value;
          } else {
            var a = this.__rotationCosine * value;
            var b = this.__rotationSine * value;
            if (this.__transform.a != a || this.__transform.b != b) {
              if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
              }
            }
            this.__transform.a = a;
            this.__transform.b = b;
          }
        }
        return value;
      },
      get_scaleY: function () {
        return this.__scaleY;
      },
      set_scaleY: function (value) {
        if (value != this.__scaleY) {
          this.__scaleY = value;
          if (this.__transform.c == 0) {
            if (value != this.__transform.d) {
              if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
              }
            }
            this.__transform.d = value;
          } else {
            var c = -this.__rotationSine * value;
            var d = this.__rotationCosine * value;
            if (this.__transform.d != d || this.__transform.c != c) {
              if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
              }
            }
            this.__transform.c = c;
            this.__transform.d = d;
          }
        }
        return value;
      },
      get_scrollRect: function () {
        if (this.__scrollRect == null) {
          return null;
        }
        return this.__scrollRect.clone();
      },
      set_scrollRect: function (value) {
        if (value != this.__scrollRect) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
        }
        return (this.__scrollRect = value);
      },
      get_transform: function () {
        if (this.__objectTransform == null) {
          this.__objectTransform = new openfl_geom_Transform(this);
        }
        return this.__objectTransform;
      },
      set_transform: function (value) {
        if (value == null) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_TypeError("Parameter transform must be non-null.")
          );
        }
        if (this.__objectTransform == null) {
          this.__objectTransform = new openfl_geom_Transform(this);
        }
        if (!this.__transformDirty) {
          this.__transformDirty = true;
          openfl_display_DisplayObject.__worldTransformDirty++;
        }
        this.__objectTransform.set_matrix(value.get_matrix());
        this.__objectTransform.set_colorTransform(
          value.get_colorTransform().__clone()
        );
        return this.__objectTransform;
      },
      get_visible: function () {
        return this.__visible;
      },
      set_visible: function (value) {
        if (value != this.__visible) {
          if (!this.__renderDirty) {
            this.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
        }
        return (this.__visible = value);
      },
      get_width: function () {
        var bounds = new openfl_geom_Rectangle();
        this.__getBounds(bounds, this.__transform);
        return bounds.width;
      },
      set_width: function (value) {
        var bounds = new openfl_geom_Rectangle();
        var matrix = openfl_geom_Matrix.__temp;
        matrix.identity();
        this.__getBounds(bounds, matrix);
        if (value != bounds.width) {
          this.set_scaleX(value / bounds.width);
        } else {
          this.set_scaleX(1);
        }
        return value;
      },
      get_x: function () {
        return this.__transform.tx;
      },
      set_x: function (value) {
        if (value != this.__transform.tx) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
        }
        return (this.__transform.tx = value);
      },
      get_y: function () {
        return this.__transform.ty;
      },
      set_y: function (value) {
        if (value != this.__transform.ty) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
        }
        return (this.__transform.ty = value);
      },
      __class__: openfl_display_DisplayObject,
      __properties__: {
        set_y: "set_y",
        get_y: "get_y",
        set_x: "set_x",
        get_x: "get_x",
        set_width: "set_width",
        get_width: "get_width",
        set_visible: "set_visible",
        get_visible: "get_visible",
        set_transform: "set_transform",
        get_transform: "get_transform",
        set_scrollRect: "set_scrollRect",
        get_scrollRect: "get_scrollRect",
        set_scaleY: "set_scaleY",
        get_scaleY: "get_scaleY",
        set_scaleX: "set_scaleX",
        get_scaleX: "get_scaleX",
        set_rotation: "set_rotation",
        get_rotation: "get_rotation",
        get_root: "get_root",
        set_name: "set_name",
        get_name: "get_name",
        get_mouseY: "get_mouseY",
        get_mouseX: "get_mouseX",
        set_mask: "set_mask",
        get_mask: "get_mask",
        get_loaderInfo: "get_loaderInfo",
        set_height: "set_height",
        get_height: "get_height",
        set_filters: "set_filters",
        get_filters: "get_filters",
        set_cacheAsBitmapMatrix: "set_cacheAsBitmapMatrix",
        get_cacheAsBitmapMatrix: "get_cacheAsBitmapMatrix",
        set_cacheAsBitmap: "set_cacheAsBitmap",
        get_cacheAsBitmap: "get_cacheAsBitmap",
        set_blendMode: "set_blendMode",
        get_blendMode: "get_blendMode",
        set_alpha: "set_alpha",
        get_alpha: "get_alpha",
      },
    }
  );
  var openfl_display_InteractiveObject = function () {
    openfl_display_DisplayObject.call(this);
    this.doubleClickEnabled = false;
    this.mouseEnabled = true;
    this.needsSoftKeyboard = false;
    this.__tabEnabled = false;
    this.tabIndex = -1;
  };
  $hxClasses["openfl.display.InteractiveObject"] =
    openfl_display_InteractiveObject;
  openfl_display_InteractiveObject.__name__ = [
    "openfl",
    "display",
    "InteractiveObject",
  ];
  openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
  openfl_display_InteractiveObject.prototype = $extend(
    openfl_display_DisplayObject.prototype,
    {
      doubleClickEnabled: null,
      focusRect: null,
      mouseEnabled: null,
      needsSoftKeyboard: null,
      softKeyboardInputAreaOfInterest: null,
      tabIndex: null,
      __tabEnabled: null,
      requestSoftKeyboard: function () {
        openfl_Lib.notImplemented({
          fileName: "InteractiveObject.hx",
          lineNumber: 42,
          className: "openfl.display.InteractiveObject",
          methodName: "requestSoftKeyboard",
        });
        return false;
      },
      __getInteractive: function (stack) {
        if (stack != null) {
          stack.push(this);
          if (this.parent != null) {
            this.parent.__getInteractive(stack);
          }
        }
        return true;
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (
          !hitObject.get_visible() ||
          this.__isMask ||
          (interactiveOnly && !this.mouseEnabled)
        ) {
          return false;
        }
        return openfl_display_DisplayObject.prototype.__hitTest.call(
          this,
          x,
          y,
          shapeFlag,
          stack,
          interactiveOnly,
          hitObject
        );
      },
      get_tabEnabled: function () {
        return this.__tabEnabled;
      },
      set_tabEnabled: function (value) {
        return (this.__tabEnabled = value);
      },
      __class__: openfl_display_InteractiveObject,
      __properties__: $extend(
        openfl_display_DisplayObject.prototype.__properties__,
        { set_tabEnabled: "set_tabEnabled", get_tabEnabled: "get_tabEnabled" }
      ),
    }
  );
  var openfl_display_DisplayObjectContainer = function () {
    openfl_display_InteractiveObject.call(this);
    this.mouseChildren = true;
    this.__children = [];
    this.__removedChildren =
      openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
  };
  $hxClasses["openfl.display.DisplayObjectContainer"] =
    openfl_display_DisplayObjectContainer;
  openfl_display_DisplayObjectContainer.__name__ = [
    "openfl",
    "display",
    "DisplayObjectContainer",
  ];
  openfl_display_DisplayObjectContainer.__super__ =
    openfl_display_InteractiveObject;
  openfl_display_DisplayObjectContainer.prototype = $extend(
    openfl_display_InteractiveObject.prototype,
    {
      mouseChildren: null,
      tabChildren: null,
      __removedChildren: null,
      addChild: function (child) {
        return this.addChildAt(child, this.get_numChildren());
      },
      addChildAt: function (child, index) {
        if (index > this.__children.length || index < 0) {
          throw new js__$Boot_HaxeError("Invalid index position " + index);
        }
        if (child.parent == this) {
          if (this.__children[index] != child) {
            HxOverrides.remove(this.__children, child);
            this.__children.splice(index, 0, child);
          }
        } else {
          if (child.parent != null) {
            child.parent.removeChild(child);
          }
          this.__children.splice(index, 0, child);
          child.parent = this;
          var addedToStage = this.stage != null && child.stage == null;
          if (addedToStage) {
            this.__setStageReference(this.stage);
          }
          if (!child.__transformDirty) {
            child.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          if (!child.__renderDirty) {
            child.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
          if (!this.__renderDirty) {
            this.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
          var event = new openfl_events_Event("added", true);
          event.target = child;
          child.__dispatchEvent(event);
          if (addedToStage) {
            child.__dispatchChildren(
              new openfl_events_Event("addedToStage", false, false)
            );
          }
        }
        return child;
      },
      areInaccessibleObjectsUnderPoint: function (point) {
        return false;
      },
      contains: function (child) {
        while (child != this && child != null) child = child.parent;
        return child == this;
      },
      getChildAt: function (index) {
        if (index >= 0 && index < this.__children.length) {
          return this.__children[index];
        }
        return null;
      },
      getChildByName: function (name) {
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          if (child.get_name() == name) {
            return child;
          }
        }
        return null;
      },
      getChildIndex: function (child) {
        var _g1 = 0;
        var _g = this.__children.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (this.__children[i] == child) {
            return i;
          }
        }
        return -1;
      },
      getObjectsUnderPoint: function (point) {
        var stack = [];
        this.__hitTest(point.x, point.y, false, stack, false, this);
        stack.reverse();
        return stack;
      },
      removeChild: function (child) {
        if (child != null && child.parent == this) {
          if (!child.__transformDirty) {
            child.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          if (!child.__renderDirty) {
            child.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
          if (!this.__renderDirty) {
            this.__renderDirty = true;
            openfl_display_DisplayObject.__worldRenderDirty++;
          }
          child.__dispatchEvent(new openfl_events_Event("removed", true));
          if (this.stage != null) {
            if (child.stage != null && this.stage.get_focus() == child) {
              this.stage.set_focus(null);
            }
            child.__dispatchChildren(
              new openfl_events_Event("removedFromStage", false, false)
            );
            child.__setStageReference(null);
          }
          child.parent = null;
          HxOverrides.remove(this.__children, child);
          this.__removedChildren.push(child);
          if (!child.__transformDirty) {
            child.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
        }
        return child;
      },
      removeChildAt: function (index) {
        if (index >= 0 && index < this.__children.length) {
          return this.removeChild(this.__children[index]);
        }
        return null;
      },
      removeChildren: function (beginIndex, endIndex) {
        if (endIndex == null) {
          endIndex = 2147483647;
        }
        if (beginIndex == null) {
          beginIndex = 0;
        }
        if (endIndex == 2147483647) {
          endIndex = this.__children.length - 1;
          if (endIndex < 0) {
            return;
          }
        }
        if (beginIndex > this.__children.length - 1) {
          return;
        } else if (
          endIndex < beginIndex ||
          beginIndex < 0 ||
          endIndex > this.__children.length
        ) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_RangeError("The supplied index is out of bounds.")
          );
        }
        var numRemovals = endIndex - beginIndex;
        while (numRemovals >= 0) {
          this.removeChildAt(beginIndex);
          --numRemovals;
        }
      },
      resolve: function (fieldName) {
        if (this.__children == null) {
          return null;
        }
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          if (child.get_name() == fieldName) {
            return child;
          }
        }
        return null;
      },
      setChildIndex: function (child, index) {
        if (
          index >= 0 &&
          index <= this.__children.length &&
          child.parent == this
        ) {
          HxOverrides.remove(this.__children, child);
          this.__children.splice(index, 0, child);
        }
      },
      stopAllMovieClips: function () {
        this.__stopAllMovieClips();
      },
      swapChildren: function (child1, child2) {
        if (child1.parent == this && child2.parent == this) {
          var index1 = this.__children.indexOf(child1);
          var index2 = this.__children.indexOf(child2);
          this.__children[index1] = child2;
          this.__children[index2] = child1;
        }
      },
      swapChildrenAt: function (index1, index2) {
        var swap = this.__children[index1];
        this.__children[index1] = this.__children[index2];
        this.__children[index2] = swap;
        swap = null;
      },
      __dispatchChildren: function (event) {
        var success = this.__dispatchEvent(event);
        if (success && this.__children != null) {
          var _g = 0;
          var _g1 = this.__children;
          while (_g < _g1.length) {
            var child = _g1[_g];
            ++_g;
            event.target = child;
            if (!child.__dispatchChildren(event)) {
              return false;
            }
          }
        }
        return success;
      },
      __enterFrame: function (deltaTime) {
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          child.__enterFrame(deltaTime);
        }
      },
      __getBounds: function (rect, matrix) {
        openfl_display_InteractiveObject.prototype.__getBounds.call(
          this,
          rect,
          matrix
        );
        if (this.__children.length == 0) {
          return;
        }
        if (matrix != null) {
          this.__updateTransforms(matrix);
          this.__updateChildren(true);
        }
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          if (child.__scaleX == 0 || child.__scaleY == 0) {
            continue;
          }
          child.__getBounds(rect, child.__worldTransform);
        }
        if (matrix != null) {
          this.__updateTransforms();
          this.__updateChildren(true);
        }
      },
      __getRenderBounds: function (rect, matrix) {
        if (this.__scrollRect != null) {
          openfl_display_InteractiveObject.prototype.__getRenderBounds.call(
            this,
            rect,
            matrix
          );
          return;
        } else {
          openfl_display_InteractiveObject.prototype.__getBounds.call(
            this,
            rect,
            matrix
          );
        }
        if (this.__children.length == 0) {
          return;
        }
        if (matrix != null) {
          this.__updateTransforms(matrix);
          this.__updateChildren(true);
        }
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          if (child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
            continue;
          }
          child.__getRenderBounds(rect, child.__worldTransform);
        }
        if (matrix != null) {
          this.__updateTransforms();
          this.__updateChildren(true);
        }
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (
          !hitObject.get_visible() ||
          this.__isMask ||
          (interactiveOnly && !this.mouseEnabled && !this.mouseChildren)
        ) {
          return false;
        }
        if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
          return false;
        }
        if (this.__scrollRect != null) {
          var point = openfl_geom_Point.__temp;
          point.setTo(x, y);
          var _this = this.__getRenderTransform();
          var norm = _this.a * _this.d - _this.b * _this.c;
          if (norm == 0) {
            point.x = -_this.tx;
            point.y = -_this.ty;
          } else {
            var px =
              (1.0 / norm) *
              (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
            point.y =
              (1.0 / norm) *
              (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
            point.x = px;
          }
          if (!this.__scrollRect.containsPoint(point)) {
            return false;
          }
        }
        var i = this.__children.length;
        if (interactiveOnly) {
          if (stack == null || !this.mouseChildren) {
            while (--i >= 0)
              if (
                this.__children[i].__hitTest(
                  x,
                  y,
                  shapeFlag,
                  null,
                  true,
                  this.__children[i]
                )
              ) {
                if (stack != null) {
                  stack.push(hitObject);
                }
                return true;
              }
          } else if (stack != null) {
            var length = stack.length;
            var interactive = false;
            var hitTest = false;
            while (--i >= 0) {
              interactive = this.__children[i].__getInteractive(null);
              if (interactive || (this.mouseEnabled && !hitTest)) {
                if (
                  this.__children[i].__hitTest(
                    x,
                    y,
                    shapeFlag,
                    stack,
                    true,
                    this.__children[i]
                  )
                ) {
                  hitTest = true;
                  if (interactive) {
                    break;
                  }
                }
              }
            }
            if (hitTest) {
              stack.splice(length, 0, hitObject);
              return true;
            }
          }
        } else {
          while (--i >= 0)
            this.__children[i].__hitTest(
              x,
              y,
              shapeFlag,
              stack,
              false,
              this.__children[i]
            );
        }
        return false;
      },
      __hitTestMask: function (x, y) {
        var i = this.__children.length;
        while (--i >= 0)
          if (this.__children[i].__hitTestMask(x, y)) {
            return true;
          }
        return false;
      },
      __readGraphicsData: function (graphicsData, recurse) {
        openfl_display_InteractiveObject.prototype.__readGraphicsData.call(
          this,
          graphicsData,
          recurse
        );
        if (recurse) {
          var _g = 0;
          var _g1 = this.__children;
          while (_g < _g1.length) {
            var child = _g1[_g];
            ++_g;
            child.__readGraphicsData(graphicsData, recurse);
          }
        }
      },
      __renderCairo: function (renderSession) {},
      __renderCairoMask: function (renderSession) {},
      __renderCanvas: function (renderSession) {
        if (
          !this.__renderable ||
          this.__worldAlpha <= 0 ||
          (this.get_mask() != null &&
            (this.get_mask().get_width() <= 0 ||
              this.get_mask().get_height() <= 0))
        ) {
          return;
        }
        openfl_display_InteractiveObject.prototype.__renderCanvas.call(
          this,
          renderSession
        );
        renderSession.maskManager.pushObject(this);
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          child.__renderCanvas(renderSession);
        }
        var _g2 = 0;
        var _g11 = this.__removedChildren;
        while (_g2 < _g11.get_length()) {
          var orphan = _g11.get(_g2);
          ++_g2;
          if (orphan.stage == null) {
            orphan.__cleanup();
          }
        }
        this.__removedChildren.set_length(0);
        renderSession.maskManager.popObject(this);
      },
      __renderCanvasMask: function (renderSession) {
        if (this.__graphics != null) {
          openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(
            this.__graphics,
            renderSession
          );
        }
        var bounds = new openfl_geom_Rectangle();
        this.__getBounds(bounds, this.__transform);
        renderSession.context.rect(0, 0, bounds.width, bounds.height);
      },
      __renderDOM: function (renderSession) {},
      __renderGL: function (renderSession) {
        if (!this.__renderable || this.__worldAlpha <= 0) {
          return;
        }
        openfl_display_InteractiveObject.prototype.__renderGL.call(
          this,
          renderSession
        );
        renderSession.maskManager.pushObject(this);
        renderSession.filterManager.pushObject(this);
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          child.__renderGL(renderSession);
        }
        var _g2 = 0;
        var _g11 = this.__removedChildren;
        while (_g2 < _g11.get_length()) {
          var orphan = _g11.get(_g2);
          ++_g2;
          if (orphan.stage == null) {
            orphan.__cleanup();
          }
        }
        this.__removedChildren.set_length(0);
        renderSession.filterManager.popObject(this);
        renderSession.maskManager.popObject(this);
      },
      __setStageReference: function (stage) {
        openfl_display_InteractiveObject.prototype.__setStageReference.call(
          this,
          stage
        );
        if (this.__children != null) {
          var _g = 0;
          var _g1 = this.__children;
          while (_g < _g1.length) {
            var child = _g1[_g];
            ++_g;
            child.__setStageReference(stage);
          }
        }
      },
      __stopAllMovieClips: function () {
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          child.__stopAllMovieClips();
        }
      },
      __update: function (transformOnly, updateChildren, maskGraphics) {
        openfl_display_InteractiveObject.prototype.__update.call(
          this,
          transformOnly,
          updateChildren,
          maskGraphics
        );
        if (updateChildren) {
          var _g = 0;
          var _g1 = this.__children;
          while (_g < _g1.length) {
            var child = _g1[_g];
            ++_g;
            child.__update(transformOnly, true, maskGraphics);
          }
        }
      },
      __updateChildren: function (transformOnly) {
        openfl_display_InteractiveObject.prototype.__updateChildren.call(
          this,
          transformOnly
        );
        var _g = 0;
        var _g1 = this.__children;
        while (_g < _g1.length) {
          var child = _g1[_g];
          ++_g;
          child.__update(transformOnly, true);
        }
      },
      get_numChildren: function () {
        return this.__children.length;
      },
      __class__: openfl_display_DisplayObjectContainer,
      __properties__: $extend(
        openfl_display_InteractiveObject.prototype.__properties__,
        { get_numChildren: "get_numChildren" }
      ),
    }
  );
  var openfl_display_Sprite = function () {
    openfl_display_DisplayObjectContainer.call(this);
    this.buttonMode = false;
    this.useHandCursor = true;
  };
  $hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
  openfl_display_Sprite.__name__ = ["openfl", "display", "Sprite"];
  openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
  openfl_display_Sprite.prototype = $extend(
    openfl_display_DisplayObjectContainer.prototype,
    {
      buttonMode: null,
      dropTarget: null,
      hitArea: null,
      useHandCursor: null,
      startDrag: function (lockCenter, bounds) {
        if (lockCenter == null) {
          lockCenter = false;
        }
        if (this.stage != null) {
          this.stage.__startDrag(this, lockCenter, bounds);
        }
      },
      stopDrag: function () {
        if (this.stage != null) {
          this.stage.__stopDrag(this);
        }
      },
      __getCursor: function () {
        if (this.buttonMode && this.useHandCursor) {
          return lime_ui_MouseCursor.POINTER;
        } else {
          return null;
        }
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (this.hitArea != null) {
          if (!this.hitArea.mouseEnabled) {
            this.hitArea.mouseEnabled = true;
            var hitTest = this.hitArea.__hitTest(
              x,
              y,
              shapeFlag,
              null,
              true,
              hitObject
            );
            this.hitArea.mouseEnabled = false;
            if (hitTest) {
              stack[stack.length] = hitObject;
            }
            return hitTest;
          }
        } else {
          if (
            !hitObject.get_visible() ||
            this.__isMask ||
            (interactiveOnly && !this.mouseEnabled && !this.mouseChildren)
          ) {
            return false;
          }
          if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
            return false;
          }
          if (this.__scrollRect != null) {
            var point = openfl_geom_Point.__temp;
            point.setTo(x, y);
            var _this = this.__getRenderTransform();
            var norm = _this.a * _this.d - _this.b * _this.c;
            if (norm == 0) {
              point.x = -_this.tx;
              point.y = -_this.ty;
            } else {
              var px =
                (1.0 / norm) *
                (_this.c * (_this.ty - point.y) +
                  _this.d * (point.x - _this.tx));
              point.y =
                (1.0 / norm) *
                (_this.a * (point.y - _this.ty) +
                  _this.b * (_this.tx - point.x));
              point.x = px;
            }
            if (!this.__scrollRect.containsPoint(point)) {
              return false;
            }
          }
          if (
            openfl_display_DisplayObjectContainer.prototype.__hitTest.call(
              this,
              x,
              y,
              shapeFlag,
              stack,
              interactiveOnly,
              hitObject
            )
          ) {
            return interactiveOnly;
          } else if (
            (!interactiveOnly || this.mouseEnabled) &&
            this.__graphics != null &&
            this.__graphics.__hitTest(
              x,
              y,
              shapeFlag,
              this.__getRenderTransform()
            )
          ) {
            if (stack != null) {
              stack.push(hitObject);
            }
            return true;
          }
        }
        return false;
      },
      __hitTestMask: function (x, y) {
        if (
          openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(
            this,
            x,
            y
          )
        ) {
          return true;
        } else if (
          this.__graphics != null &&
          this.__graphics.__hitTest(x, y, true, this.__getRenderTransform())
        ) {
          return true;
        }
        return false;
      },
      get_graphics: function () {
        if (this.__graphics == null) {
          this.__graphics = new openfl_display_Graphics(this);
        }
        return this.__graphics;
      },
      get_tabEnabled: function () {
        if (!this.__tabEnabled) {
          return this.buttonMode;
        } else {
          return true;
        }
      },
      __class__: openfl_display_Sprite,
      __properties__: $extend(
        openfl_display_DisplayObjectContainer.prototype.__properties__,
        { get_graphics: "get_graphics" }
      ),
    }
  );
  var BaseSprite = function (_EventType) {
    openfl_display_Sprite.call(this);
    this.EventType = _EventType;
    this.addEventListener(
      "removedFromStage",
      $bind(this, this.handleRemovedFromStage),
      false,
      0,
      true
    );
  };
  $hxClasses["BaseSprite"] = BaseSprite;
  BaseSprite.__name__ = ["BaseSprite"];
  BaseSprite.__super__ = openfl_display_Sprite;
  BaseSprite.prototype = $extend(openfl_display_Sprite.prototype, {
    EventType: null,
    handleRemovedFromStage: function (e) {
      this.removeEventListener(
        "removedFromStage",
        $bind(this, this.handleRemovedFromStage)
      );
      this.RemoveDispatcher();
    },
    AddDispatcher: function () {
      Main.GetInstance().addEventListener(
        this.EventType,
        $bind(this, this.Update),
        false,
        0,
        true
      );
    },
    RemoveDispatcher: function (e) {
      Main.GetInstance().removeEventListener(
        this.EventType,
        $bind(this, this.Update)
      );
    },
    Update: function (e) {},
    __class__: BaseSprite,
  });
  var Achievements = function () {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Achievements.AchievementsGlobal = this;
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Achievements"] = Achievements;
  Achievements.__name__ = ["Achievements"];
  Achievements.GetInstance = function () {
    return Achievements.AchievementsGlobal;
  };
  Achievements.__super__ = BaseSprite;
  Achievements.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sheetAchievements: null,
    sptBG: null,
    sptGroup: null,
    btnBack: null,
    btnMoreGames: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sheetAchievements = new BaseSheet(
        "images/achievement.png",
        "images/achievement.json"
      );
      this.sptBG = Global.loadImage("images", "bg_intro.png");
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.btnBack = Global.createButtonSheet(
        this.sheetButton,
        "btn_back1.png",
        "btn_back2.png",
        "btn_back2.png"
      );
      this.btnMoreGames = Global.createButtonSheet(
        this.sheetButton,
        "btn_moregames1.png",
        "btn_moregames2.png",
        "btn_moregames2.png"
      );
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      var papan = Global.loadImage("images", "papan.png");
      papan.set_x(26);
      papan.set_y(13);
      this.sptGroup.addChild(papan);
      var shine = Global.loadImage("images", "bg_cahaya.png");
      shine.set_x(-204);
      shine.set_y(-180);
      this.sptGroup.addChild(shine);
      var judul = Global.loadImage("images", "ket_achieve.png");
      judul.set_x(177);
      judul.set_y(10);
      this.sptGroup.addChild(judul);
      this.btnMoreGames.set_x(186);
      this.btnMoreGames.set_y(394);
      this.sptGroup.addChild(this.btnMoreGames);
      this.btnBack.set_x(407);
      this.btnBack.set_y(394);
      this.sptGroup.addChild(this.btnBack);
      if (Y8Api.isSponsor == true) {
        this.btnMoreGames.set_visible(false);
        this.btnBack.set_x(300);
      }
      var _g = 1;
      while (_g < 13) {
        var i = _g++;
        var bgAc = this.sheetAchievements.loadImage("bg_achieve.png");
        bgAc.set_x(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "x")
        );
        bgAc.set_y(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "y")
        );
        var ket = this.sheetAchievements.loadImage("text_lock" + i + ".png");
        ket.set_x(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "x") + 63
        );
        ket.set_y(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "y") + 18
        );
        var icon;
        if (DataSave.achievements[i - 1] == false) {
          icon = this.sheetAchievements.loadImage("icon_lock13.png");
        } else {
          icon = this.sheetAchievements.loadImage("icon_lock" + i + ".png");
        }
        icon.set_x(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "x") + 4
        );
        icon.set_y(
          Reflect.field(Reflect.field(DataPosition, "ACHIEVE" + i), "y") + 7
        );
        this.sptGroup.addChild(bgAc);
        this.sptGroup.addChild(ket);
        this.sptGroup.addChild(icon);
      }
    },
    assetsAddEventListener: function () {
      this.btnBack.addEventListener(
        "click",
        $bind(this, this.onBackWindow),
        false,
        0,
        true
      );
      this.btnMoreGames.addEventListener(
        "click",
        Global.moreGames,
        false,
        0,
        true
      );
    },
    onBackWindow: function (e) {
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
      Main.GetInstance().changeWindow("Achievements", DataGame.windowPrev);
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      this.btnBack.removeEventListener("click", $bind(this, this.onBackWindow));
      this.btnMoreGames.removeEventListener("click", Global.moreGames);
      Global.killChildren(this, false);
      this.sptBG = null;
      this.sptGroup = null;
      this.btnBack = null;
      this.btnMoreGames = null;
    },
    Update: function (e) {},
    __class__: Achievements,
  });
  var ApplicationMain = function () {};
  $hxClasses["ApplicationMain"] = ApplicationMain;
  ApplicationMain.__name__ = ["ApplicationMain"];
  ApplicationMain.main = function () {
    var projectName = "bartender_make_right_mix";
    var config = {
      build: "1",
      company: "gopandagames",
      file: "bartender_make_right_mix",
      fps: 30,
      name: "Bartender Make Right Mix",
      orientation: "",
      packageName: "com.gopandagames.bartendermakerightmix",
      version: "1.0.0",
      windows: [
        {
          allowHighDPI: false,
          antialiasing: 0,
          background: 16777215,
          borderless: false,
          depthBuffer: false,
          display: 0,
          fullscreen: false,
          hardware: true,
          height: 0,
          hidden: null,
          maximized: null,
          minimized: null,
          parameters: {},
          resizable: true,
          stencilBuffer: true,
          title: "Bartender Make Right Mix",
          vsync: false,
          width: 0,
          x: null,
          y: null,
        },
      ],
    };
    lime_system_System.__registerEntryPoint(
      projectName,
      ApplicationMain.create,
      config
    );
  };
  ApplicationMain.create = function (config) {
    var app = new openfl_display_Application();
    app.create(config);
    ManifestResources.init(config);
    var preloader = new openfl_display_Preloader(new Preloader());
    app.setPreloader(preloader);
    preloader.create(config);
    var a1 = app.__windows[0].stage;
    var tmp = function () {
      ApplicationMain.start(a1);
    };
    preloader.onComplete.add(tmp);
    var _g = 0;
    var _g1 = ManifestResources.preloadLibraries;
    while (_g < _g1.length) {
      var library = _g1[_g];
      ++_g;
      preloader.addLibrary(library);
    }
    var _g2 = 0;
    var _g11 = ManifestResources.preloadLibraryNames;
    while (_g2 < _g11.length) {
      var name = _g11[_g2];
      ++_g2;
      preloader.addLibraryName(name);
    }
    preloader.load();
    var result = app.exec();
  };
  ApplicationMain._embed = $hx_exports["bartender_make_right_mix"]["embed"] =
    function (element, width, height, background, assetsPrefix) {
      lime_system_System.embed(
        "bartender_make_right_mix",
        element,
        width,
        height,
        { background: background, assetsPrefix: assetsPrefix }
      );
    };
  ApplicationMain._embed2 = $hx_exports["openfl"]["embed"] = function (
    element,
    width,
    height,
    background,
    assetsPrefix
  ) {
    lime_system_System.embed(
      "bartender_make_right_mix",
      element,
      width,
      height,
      { background: background, assetsPrefix: assetsPrefix }
    );
  };
  ApplicationMain.start = function (stage) {
    try {
      var current = stage.getChildAt(0);
      if (
        current == null ||
        !js_Boot.__instanceof(current, openfl_display_DisplayObjectContainer)
      ) {
        current = new openfl_display_MovieClip();
        stage.addChild(current);
      }
      new DocumentClass(current);
    } catch (e) {
      haxe_CallStack.lastException = e;
      if (e instanceof js__$Boot_HaxeError) e = e.val;
      stage.__handleError(e);
    }
    stage.dispatchEvent(new openfl_events_Event("resize", false, false));
    if (stage.window.__fullscreen) {
      stage.dispatchEvent(
        new openfl_events_FullScreenEvent(
          "fullScreen",
          false,
          false,
          true,
          true
        )
      );
    }
  };
  var Main = function () {
    this.aspectRatio = 0;
    this.oldState = 1;
    this.state = 1;
    this.isPauseGame = false;
    this.isBlockOrientation = false;
    this.isLandscape = true;
    this.isInit = true;
    this.fps = new FPSMemory(5, 5, 16777215);
    openfl_display_Sprite.call(this);
    Main.MainGlobal = this;
    if (Setting.isIDNET) {
      Y8Api.init();
    }
    this.setupAspectRatio();
    window.onblur = function () {
      Main.GetInstance().onBlur();
    };
    window.onfocus = function () {
      Main.GetInstance().onFocus();
    };
    pauseGame = function () {
      Main.GetInstance().pauseGame();
    };
    resumeGame = function () {
      Main.GetInstance().resumeGame();
    };
    this.getUserAgent();
    this.sptOrientation = Global.loadImage("preloader", "orientation.png");
    var myTimer = new openfl_utils_Timer(1000, 0);
    myTimer.addEventListener("timer", $bind(this, this.checkResolution));
    myTimer.start();
    var timerClearMemory = new openfl_utils_Timer(3000, 0);
    timerClearMemory.addEventListener("timer", $bind(this, this.clearMemory));
    timerClearMemory.start();
    this.onEnterFrame();
    this.addEventListener(
      "enterFrame",
      $bind(this, this.onEnterFrame),
      false,
      0,
      true
    );
  };
  $hxClasses["Main"] = Main;
  Main.__name__ = ["Main"];
  Main.GetInstance = function () {
    return Main.MainGlobal;
  };
  Main.__super__ = openfl_display_Sprite;
  Main.prototype = $extend(openfl_display_Sprite.prototype, {
    fps: null,
    isInit: null,
    userAgent: null,
    sptOrientation: null,
    isLandscape: null,
    isBlockOrientation: null,
    oldStageWidth: null,
    oldStageHeight: null,
    isPauseGame: null,
    windowMainMenu: null,
    windowMiniMenu: null,
    windowGame1: null,
    windowIntro: null,
    windowResult: null,
    windowAchievement: null,
    windowCollection: null,
    windowY8Connect: null,
    libTimer: null,
    state: null,
    oldState: null,
    aspectRatio: null,
    windowNow: null,
    windowBefore: null,
    btnSound: null,
    clearMemory: function (e) {
      openfl_system_System.gc();
      openfl_utils_Assets.cache.clear();
    },
    showSound: function (bolVisible) {
      this.btnSound.set_visible(bolVisible);
    },
    initButtonSound: function () {
      this.btnSound = new SoundButton();
      this.addChild(this.btnSound);
      this.alignSound();
    },
    alignSound: function (status) {
      if (status == null) {
        status = "";
      }
      if (status == "Game1") {
        Global.align(this.btnSound, 0.5, 0.5, 86, 205);
      } else {
        Global.align(this.btnSound, 1, 0, 15, 15);
      }
    },
    init: function () {
      if (this.isLandscape && this.isBlockOrientation == false) {
        this.isInit = false;
        this.setupAspectRatio();
        this.initButtonSound();
        if (Setting.isIDNET == true) {
          this.showWindow("Y8Connect");
        } else {
          this.showWindow("MainMenu");
        }
      }
    },
    setupAspectRatio: function () {
      this.oldStageWidth = this.stage.stageWidth;
      this.oldStageHeight = this.stage.stageHeight;
      this.aspectRatio = Math.min(
        this.stage.stageWidth / 800,
        this.stage.stageHeight / 480
      );
      this.set_scaleX(this.aspectRatio);
      this.set_scaleY(this.aspectRatio);
      Main.SCREEN_WIDTH = this.stage.stageWidth / this.aspectRatio;
      Main.SCREEN_HEIGHT = this.stage.stageHeight / this.aspectRatio;
    },
    showWindow: function (windowName, childIndex) {
      if (childIndex == null) {
        childIndex = 0;
      }
      this.windowNow = windowName;
      this["window" + windowName] = Type.createInstance(
        Type.resolveClass(windowName),
        []
      );
      this.addChildAt(Reflect.field(this, "window" + windowName), childIndex);
      this.alignSound();
      Global.log("showWindow " + windowName);
    },
    killWindow: function (windowName) {
      this.windowBefore = windowName;
      motion_Actuate.reset();
      Reflect.field(this, "window" + windowName).destroy();
      Reflect.field(this, "window" + windowName).parent.removeChild(
        Reflect.field(this, "window" + windowName)
      );
      this["window" + windowName] = null;
      Global.resetAlignList();
      Global.log("killWindow " + windowName);
    },
    changeWindow: function (fromWindow, toWindow, isSpecial) {
      if (isSpecial == null) {
        isSpecial = false;
      }
      this.addChildAt(
        new Transisi(fromWindow, toWindow),
        this.getChildIndex(this.btnSound)
      );
      this.alignSound();
      this.showSound(true);
    },
    onEnterFrame: function (e) {
      this.libTimer = openfl_Lib.getTimer();
      this.checkOrientation();
      this.checkInit();
      if (this.fps.parent != null) {
        this.setChildIndex(this.fps, this.get_numChildren() - 1);
      }
      if (this.state == 1) {
        this.dispatchEvent(new openfl_events_Event("update"));
      }
    },
    checkInit: function () {
      if (this.isInit) {
        if (Setting.isIDNET == false) {
          this.init();
        } else if (Setting.isIDNET) {
          this.init();
        }
      }
    },
    pauseGame: function () {
      this.onBlur();
      this.isPauseGame = true;
    },
    resumeGame: function () {
      this.isPauseGame = false;
      this.onFocus();
    },
    onBlur: function () {
      if (this.isPauseGame == false) {
        this.oldState = this.state;
        this.state = 0;
        motion_Actuate.pauseAll();
        SoundGame.muted();
        Global.log("PAUSE GAME BLURR");
      }
    },
    onFocus: function () {
      if (this.isPauseGame == false) {
        this.state = this.oldState;
        motion_Actuate.resumeAll();
        if (SoundGame.isMuted == false) {
          SoundGame.unmuted();
        }
        Global.log("RESUME GAME FOCUS");
      }
    },
    getUserAgent: function () {
      this.userAgent = openfl_external_ExternalInterface.call(
        "window.navigator.userAgent.toString"
      );
      if (
        this.userAgent.indexOf("Browser") > -1 ||
        this.userAgent.indexOf("Trident") > -1 ||
        this.userAgent.indexOf("MSIE") > -1 ||
        this.userAgent.indexOf("Android") > -1
      ) {
        if (
          this.userAgent.indexOf("Firefox") == -1 &&
          this.userAgent.indexOf("Chrome") == -1
        ) {
          SoundGame.isSFX = false;
        }
      }
    },
    checkOrientation: function () {
      if (this.stage.stageWidth < this.stage.stageHeight) {
        this.isLandscape = false;
      } else if (this.stage.stageWidth > this.stage.stageHeight) {
        this.isLandscape = true;
      }
      if (!this.isLandscape && !this.isBlockOrientation) {
        this.setupAspectRatio();
        this.isBlockOrientation = true;
        this.addChild(this.sptOrientation);
        Global.align(this.sptOrientation, 0.5, 0.5, 0, 0);
        this.onBlur();
      } else if (this.isLandscape && this.isBlockOrientation) {
        this.isBlockOrientation = false;
        this.removeChild(this.sptOrientation);
        this.setupAspectRatio();
        this.onFocus();
      }
    },
    checkResolution: function (e) {
      if (
        this.oldStageWidth != this.stage.stageWidth ||
        this.oldStageHeight != this.stage.stageHeight
      ) {
        this.setupAspectRatio();
        Global.reAlignList();
        Global.reDrawFullScreenList();
        Global.log("change resolution");
      }
    },
    __class__: Main,
  });
  var DocumentClass = function (current) {
    current.addChild(this);
    Main.call(this);
    this.dispatchEvent(new openfl_events_Event("addedToStage", false, false));
  };
  $hxClasses["DocumentClass"] = DocumentClass;
  DocumentClass.__name__ = ["DocumentClass"];
  DocumentClass.__super__ = Main;
  DocumentClass.prototype = $extend(Main.prototype, {
    __class__: DocumentClass,
  });
  var BaseAnimation = function (
    imgPath,
    jsonPath,
    autoAnimation,
    pivotX,
    pivotY,
    bolSound
  ) {
    if (bolSound == null) {
      bolSound = false;
    }
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    if (autoAnimation == null) {
      autoAnimation = true;
    }
    this.lastTime = Main.GetInstance().libTimer;
    BaseSprite.call(this, "update");
    if (autoAnimation) {
      this.AddDispatcher();
    }
    if (bolSound == false) {
      Global.animationList.push(this);
    }
    var frames = [];
    var framesName = [];
    var framesSheet;
    var tileJson;
    var tileProperties;
    tileJson = JSON.parse(openfl_utils_Assets.getText(jsonPath));
    framesName = Reflect.fields(tileJson.frames);
    framesName.sort(function (f, a) {
      if (f < a) {
        return -1;
      }
      if (f > a) {
        return 1;
      }
      return 0;
    });
    var offsetX = 0;
    var offsetY = 0;
    var _g1 = 0;
    var _g = framesName.length;
    while (_g1 < _g) {
      var i = _g1++;
      tileProperties = Reflect.field(tileJson.frames, framesName[i]);
      switch (pivotX) {
        case 0:
          offsetX = Math.floor(
            tileProperties.spriteSourceSize.x -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.x
          );
          break;
        case 1:
          offsetX = Math.floor(
            tileProperties.spriteSourceSize.x -
              Reflect.field(tileJson.frames, framesName[0]).frame.w -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.x
          );
          break;
        case 0.5:
          offsetX = Math.floor(
            tileProperties.spriteSourceSize.x -
              Reflect.field(tileJson.frames, framesName[0]).frame.w / 2 -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.x
          );
          break;
      }
      switch (pivotY) {
        case 0:
          offsetY = Math.floor(
            tileProperties.spriteSourceSize.y -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.y
          );
          break;
        case 1:
          offsetY = Math.floor(
            tileProperties.spriteSourceSize.y -
              Reflect.field(tileJson.frames, framesName[0]).frame.h -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.y
          );
          break;
        case 0.5:
          offsetY = Math.floor(
            tileProperties.spriteSourceSize.y -
              Reflect.field(tileJson.frames, framesName[0]).frame.h / 2 -
              Reflect.field(tileJson.frames, framesName[0]).spriteSourceSize.y
          );
          break;
      }
      framesSheet = new spritesheet_data_SpritesheetFrame(
        tileProperties.frame.x,
        tileProperties.frame.y,
        tileProperties.frame.w,
        tileProperties.frame.h,
        offsetX,
        offsetY
      );
      frames.push(framesSheet);
    }
    this.spritesheet = new spritesheet_Spritesheet(
      openfl_utils_Assets.getBitmapData(imgPath),
      frames
    );
    this.animated = new spritesheet_AnimatedSprite(this.spritesheet, true);
    this.addChild(this.animated);
  };
  $hxClasses["BaseAnimation"] = BaseAnimation;
  BaseAnimation.__name__ = ["BaseAnimation"];
  BaseAnimation.__super__ = BaseSprite;
  BaseAnimation.prototype = $extend(BaseSprite.prototype, {
    animated: null,
    spritesheet: null,
    lastTime: null,
    delta: null,
    destroy: function (isSplice) {
      if (isSplice == null) {
        isSplice = true;
      }
      if (this.parent != null) {
        this.parent.removeChild(this);
      }
      this.RemoveDispatcher();
      if (isSplice == true) {
        Global.animationList[Global.animationList.indexOf(this)] = null;
        Global.animationList.splice(Global.animationList.indexOf(this), 1);
      }
      Global.log("destroy animation");
    },
    addBehavior: function (
      name,
      startFrame,
      endFrame,
      loop,
      frameRate,
      reverse
    ) {
      if (reverse == null) {
        reverse = false;
      }
      if (frameRate == null) {
        frameRate = 30;
      }
      if (loop == null) {
        loop = false;
      }
      if (name == null) {
        name = "";
      }
      var frames = [];
      if (reverse == true) {
        var _g1 = startFrame;
        var _g = endFrame + 1;
        while (_g1 < _g) {
          var i = _g1++;
          frames.push(endFrame + startFrame - i);
        }
      } else {
        var _g11 = startFrame;
        var _g2 = endFrame + 1;
        while (_g11 < _g2) {
          var i1 = _g11++;
          frames.push(i1);
        }
      }
      this.spritesheet.addBehavior(
        new spritesheet_data_BehaviorData(name, frames, loop, frameRate)
      );
    },
    gotoAndStop: function (frame) {
      this.animated.currentFrameIndex = frame;
      var frame1 = this.animated.spritesheet.getFrame(
        this.animated.currentBehavior.frames[this.animated.currentFrameIndex]
      );
      this.animated.bitmap.set_bitmapData(frame1.bitmapData);
      this.animated.bitmap.smoothing = this.animated.smoothing;
      this.animated.bitmap.set_x(
        frame1.offsetX - this.animated.currentBehavior.originX
      );
      this.animated.bitmap.set_y(
        frame1.offsetY - this.animated.currentBehavior.originY
      );
    },
    currentFrame: function () {
      return this.animated.currentFrameIndex;
    },
    currentLabel: function () {
      return this.animated.currentBehavior.name;
    },
    nextFrame: function () {
      this.animated.currentFrameIndex++;
      var frame = this.animated.spritesheet.getFrame(
        this.animated.currentBehavior.frames[this.animated.currentFrameIndex]
      );
      this.animated.bitmap.set_bitmapData(frame.bitmapData);
      this.animated.bitmap.smoothing = this.animated.smoothing;
      this.animated.bitmap.set_x(
        frame.offsetX - this.animated.currentBehavior.originX
      );
      this.animated.bitmap.set_y(
        frame.offsetY - this.animated.currentBehavior.originY
      );
    },
    prevFrame: function () {
      this.animated.currentFrameIndex--;
      var frame = this.animated.spritesheet.getFrame(
        this.animated.currentBehavior.frames[this.animated.currentFrameIndex]
      );
      this.animated.bitmap.set_bitmapData(frame.bitmapData);
      this.animated.bitmap.smoothing = this.animated.smoothing;
      this.animated.bitmap.set_x(
        frame.offsetX - this.animated.currentBehavior.originX
      );
      this.animated.bitmap.set_y(
        frame.offsetY - this.animated.currentBehavior.originY
      );
    },
    totalFrames: function () {
      return this.animated.currentBehavior.frames.length;
    },
    resetTime: function () {
      this.lastTime = Main.GetInstance().libTimer;
    },
    Update: function (e) {
      this.delta = Main.GetInstance().libTimer - this.lastTime;
      this.animated.update(this.delta);
      this.lastTime = Main.GetInstance().libTimer;
    },
    __class__: BaseAnimation,
  });
  var BaseSheet = function (imgPath, jsonPath) {
    this.tileArray = [];
    this.framesName = [];
    this.tileset = new openfl_display_Tileset(
      openfl_utils_Assets.getBitmapData(imgPath)
    );
    this.tileJson = JSON.parse(openfl_utils_Assets.getText(jsonPath));
    this.framesName = Reflect.fields(this.tileJson.frames);
    var _g1 = 0;
    var _g = this.framesName.length;
    while (_g1 < _g) {
      var i = _g1++;
      this.tileProperties = Reflect.field(
        this.tileJson.frames,
        this.framesName[i]
      );
      this.tileset.addRect(
        new openfl_geom_Rectangle(
          this.tileProperties.frame.x,
          this.tileProperties.frame.y,
          this.tileProperties.frame.w,
          this.tileProperties.frame.h
        )
      );
    }
  };
  $hxClasses["BaseSheet"] = BaseSheet;
  BaseSheet.__name__ = ["BaseSheet"];
  BaseSheet.prototype = {
    tileJson: null,
    tilemap: null,
    tileset: null,
    framesName: null,
    tileProperties: null,
    tileArray: null,
    loadImage: function (imgName, pivotX, pivotY) {
      if (pivotY == null) {
        pivotY = 0;
      }
      if (pivotX == null) {
        pivotX = 0;
      }
      var pos = new openfl_geom_Point();
      this.tileProperties = Reflect.field(
        this.tileJson.frames,
        this.framesName[this.framesName.indexOf(imgName)]
      );
      var tilemap = new openfl_display_Tilemap(
        this.tileProperties.frame.w,
        this.tileProperties.frame.h,
        this.tileset
      );
      var tile = new openfl_display_Tile(this.framesName.indexOf(imgName));
      tilemap.addTile(tile);
      switch (pivotX) {
        case 0:
          pos.x = 0;
          break;
        case 1:
          pos.x = -tilemap.get_width();
          break;
        case 0.5:
          pos.x = -tilemap.get_width() / 2;
          break;
      }
      switch (pivotY) {
        case 0:
          pos.y = 0;
          break;
        case 1:
          pos.y = -tilemap.get_height();
          break;
        case 0.5:
          pos.y = -tilemap.get_height() / 2;
          break;
      }
      tilemap.set_x(pos.x);
      tilemap.set_y(pos.y);
      var newSprite = new openfl_display_Sprite();
      newSprite.get_graphics().beginFill(16711680, 0);
      newSprite
        .get_graphics()
        .drawRect(pos.x, pos.y, tilemap.get_width(), tilemap.get_height());
      newSprite.addChild(tilemap);
      return newSprite;
    },
    reloadImage: function (imgName, oldSprite, pivotX, pivotY) {
      if (pivotY == null) {
        pivotY = 0;
      }
      if (pivotX == null) {
        pivotX = 0;
      }
      oldSprite.get_graphics().clear();
      Global.killChildren(oldSprite, false);
      var pos = new openfl_geom_Point();
      this.tileProperties = Reflect.field(
        this.tileJson.frames,
        this.framesName[this.framesName.indexOf(imgName)]
      );
      var tilemap = new openfl_display_Tilemap(
        this.tileProperties.frame.w,
        this.tileProperties.frame.h,
        this.tileset
      );
      var tile = new openfl_display_Tile(this.framesName.indexOf(imgName));
      tilemap.addTile(tile);
      switch (pivotX) {
        case 0:
          pos.x = 0;
          break;
        case 1:
          pos.x = -tilemap.get_width();
          break;
        case 0.5:
          pos.x = -tilemap.get_width() / 2;
          break;
      }
      switch (pivotY) {
        case 0:
          pos.y = 0;
          break;
        case 1:
          pos.y = -tilemap.get_height();
          break;
        case 0.5:
          pos.y = -tilemap.get_height() / 2;
          break;
      }
      tilemap.set_x(pos.x);
      tilemap.set_y(pos.y);
      oldSprite.get_graphics().beginFill(16711680, 0);
      oldSprite
        .get_graphics()
        .drawRect(pos.x, pos.y, tilemap.get_width(), tilemap.get_height());
      oldSprite.addChild(tilemap);
    },
    __class__: BaseSheet,
  };
  var EReg = function (r, opt) {
    this.r = new RegExp(r, opt.split("u").join(""));
  };
  $hxClasses["EReg"] = EReg;
  EReg.__name__ = ["EReg"];
  EReg.prototype = {
    r: null,
    match: function (s) {
      if (this.r.global) {
        this.r.lastIndex = 0;
      }
      this.r.m = this.r.exec(s);
      this.r.s = s;
      return this.r.m != null;
    },
    matched: function (n) {
      if (this.r.m != null && n >= 0 && n < this.r.m.length) {
        return this.r.m[n];
      } else {
        throw new js__$Boot_HaxeError("EReg::matched");
      }
    },
    matchedRight: function () {
      if (this.r.m == null) {
        throw new js__$Boot_HaxeError("No string matched");
      }
      var sz = this.r.m.index + this.r.m[0].length;
      return HxOverrides.substr(this.r.s, sz, this.r.s.length - sz);
    },
    matchedPos: function () {
      if (this.r.m == null) {
        throw new js__$Boot_HaxeError("No string matched");
      }
      return { pos: this.r.m.index, len: this.r.m[0].length };
    },
    matchSub: function (s, pos, len) {
      if (len == null) {
        len = -1;
      }
      if (this.r.global) {
        this.r.lastIndex = pos;
        var tmp = this.r;
        var tmp1 = len < 0 ? s : HxOverrides.substr(s, 0, pos + len);
        this.r.m = tmp.exec(tmp1);
        var b = this.r.m != null;
        if (b) {
          this.r.s = s;
        }
        return b;
      } else {
        var b1 = this.match(
          len < 0
            ? HxOverrides.substr(s, pos, null)
            : HxOverrides.substr(s, pos, len)
        );
        if (b1) {
          this.r.s = s;
          this.r.m.index += pos;
        }
        return b1;
      }
    },
    split: function (s) {
      var d = "#__delim__#";
      return s.replace(this.r, d).split(d);
    },
    map: function (s, f) {
      var offset = 0;
      var buf_b = "";
      while (true) {
        if (offset >= s.length) {
          break;
        } else if (!this.matchSub(s, offset)) {
          buf_b += Std.string(HxOverrides.substr(s, offset, null));
          break;
        }
        var p = this.matchedPos();
        buf_b += Std.string(HxOverrides.substr(s, offset, p.pos - offset));
        buf_b += Std.string(f(this));
        if (p.len == 0) {
          buf_b += Std.string(HxOverrides.substr(s, p.pos, 1));
          offset = p.pos + 1;
        } else {
          offset = p.pos + p.len;
        }
        if (!this.r.global) {
          break;
        }
      }
      if (!this.r.global && offset > 0 && offset < s.length) {
        buf_b += Std.string(HxOverrides.substr(s, offset, null));
      }
      return buf_b;
    },
    __class__: EReg,
  };
  var openfl_text_TextField = function () {
    openfl_display_InteractiveObject.call(this);
    this.__caretIndex = -1;
    this.__displayAsPassword = false;
    this.__graphics = new openfl_display_Graphics(this);
    this.__textEngine = new openfl__$internal_text_TextEngine(this);
    this.__layoutDirty = true;
    this.__offsetX = 0;
    this.__offsetY = 0;
    this.__tabEnabled = true;
    this.__mouseWheelEnabled = true;
    this.__text = "";
    if (openfl_text_TextField.__defaultTextFormat == null) {
      openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat(
        "Times New Roman",
        12,
        0,
        false,
        false,
        false,
        "",
        "",
        3,
        0,
        0,
        0,
        0
      );
      openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
      openfl_text_TextField.__defaultTextFormat.bullet = false;
      openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
      openfl_text_TextField.__defaultTextFormat.kerning = false;
    }
    this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
    this.__textEngine.textFormatRanges.push(
      new openfl__$internal_text_TextFormatRange(this.__textFormat, 0, 0)
    );
    this.addEventListener("mouseDown", $bind(this, this.this_onMouseDown));
  };
  $hxClasses["openfl.text.TextField"] = openfl_text_TextField;
  openfl_text_TextField.__name__ = ["openfl", "text", "TextField"];
  openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
  openfl_text_TextField.prototype = $extend(
    openfl_display_InteractiveObject.prototype,
    {
      __bounds: null,
      __caretIndex: null,
      __cursorTimer: null,
      __dirty: null,
      __displayAsPassword: null,
      __inputEnabled: null,
      __isHTML: null,
      __layoutDirty: null,
      __mouseWheelEnabled: null,
      __offsetX: null,
      __offsetY: null,
      __selectionIndex: null,
      __showCursor: null,
      __symbol: null,
      __text: null,
      __htmlText: null,
      __textEngine: null,
      __textFormat: null,
      __div: null,
      appendText: function (text) {
        if (text == null || text == "") {
          return;
        }
        this.__dirty = true;
        this.__layoutDirty = true;
        this.__updateText(this.__text + text);
        this.__textEngine.textFormatRanges.get(
          this.__textEngine.textFormatRanges.get_length() - 1
        ).end = this.__text.length;
      },
      getCharBoundaries: function (charIndex) {
        if (charIndex < 0 || charIndex > this.__text.length - 1) {
          return null;
        }
        this.__updateLayout();
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
            var x = group.offsetX;
            var _g3 = 0;
            var _g2 = charIndex - group.startIndex;
            while (_g3 < _g2) {
              var i = _g3++;
              x += group.advances[i];
            }
            return new openfl_geom_Rectangle(
              x,
              group.offsetY,
              group.advances[charIndex - group.startIndex],
              group.ascent + group.descent
            );
          }
        }
        return null;
      },
      getCharIndexAtPoint: function (x, y) {
        if (
          x <= 2 ||
          x > this.get_width() + 4 ||
          y <= 0 ||
          y > this.get_height() + 4
        ) {
          return -1;
        }
        this.__updateLayout();
        x += this.get_scrollH();
        var _g1 = 0;
        var _g = this.get_scrollV() - 1;
        while (_g1 < _g) {
          var i = _g1++;
          y += this.__textEngine.lineHeights.get(i);
        }
        var _g2 = 0;
        var _g11 = this.__textEngine.layoutGroups;
        while (_g2 < _g11.get_length()) {
          var group = _g11.get(_g2);
          ++_g2;
          if (y >= group.offsetY && y <= group.offsetY + group.height) {
            if (x >= group.offsetX && x <= group.offsetX + group.width) {
              var advance = 0.0;
              var _g3 = 0;
              var _g21 = group.advances.length;
              while (_g3 < _g21) {
                var i1 = _g3++;
                advance += group.advances[i1];
                if (x <= group.offsetX + advance) {
                  return group.startIndex + i1;
                }
              }
              return group.endIndex;
            }
          }
        }
        return -1;
      },
      getFirstCharInParagraph: function (charIndex) {
        if (charIndex < 0 || charIndex > this.__text.length - 1) {
          return 0;
        }
        var index = this.__textEngine.getLineBreakIndex();
        var startIndex = 0;
        while (index > -1) {
          if (index <= charIndex) {
            startIndex = index + 1;
          } else if (index > charIndex) {
            break;
          }
          index = this.__textEngine.getLineBreakIndex(index + 1);
        }
        return startIndex;
      },
      getLineIndexAtPoint: function (x, y) {
        this.__updateLayout();
        if (
          x <= 2 ||
          x > this.get_width() + 4 ||
          y <= 0 ||
          y > this.get_height() + 4
        ) {
          return -1;
        }
        var _g1 = 0;
        var _g = this.get_scrollV() - 1;
        while (_g1 < _g) {
          var i = _g1++;
          y += this.__textEngine.lineHeights.get(i);
        }
        var _g2 = 0;
        var _g11 = this.__textEngine.layoutGroups;
        while (_g2 < _g11.get_length()) {
          var group = _g11.get(_g2);
          ++_g2;
          if (y >= group.offsetY && y <= group.offsetY + group.height) {
            return group.lineIndex;
          }
        }
        return -1;
      },
      getLineIndexOfChar: function (charIndex) {
        if (charIndex < 0 || charIndex > this.__text.length) {
          return -1;
        }
        this.__updateLayout();
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (group.startIndex <= charIndex && group.endIndex >= charIndex) {
            return group.lineIndex;
          }
        }
        return -1;
      },
      getLineLength: function (lineIndex) {
        this.__updateLayout();
        if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
          return 0;
        }
        var startIndex = -1;
        var endIndex = -1;
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (group.lineIndex == lineIndex) {
            if (startIndex == -1) {
              startIndex = group.startIndex;
            }
          } else if (group.lineIndex == lineIndex + 1) {
            endIndex = group.startIndex;
            break;
          }
        }
        if (endIndex == -1) {
          endIndex = this.__text.length;
        }
        return endIndex - startIndex;
      },
      getLineMetrics: function (lineIndex) {
        this.__updateLayout();
        var ascender = this.__textEngine.lineAscents.get(lineIndex);
        var descender = this.__textEngine.lineDescents.get(lineIndex);
        var leading = this.__textEngine.lineLeadings.get(lineIndex);
        var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
        var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
        var margin;
        var _g = this.__textFormat.align;
        switch (_g) {
          case 0:
            margin = (this.__textEngine.width - lineWidth) / 2;
            break;
          case 1:
          case 4:
            margin = this.__textEngine.width - lineWidth - 2;
            break;
          case 2:
          case 3:
          case 5:
            margin = 2;
            break;
        }
        return new openfl_text_TextLineMetrics(
          margin,
          lineWidth,
          lineHeight,
          ascender,
          descender,
          leading
        );
      },
      getLineOffset: function (lineIndex) {
        this.__updateLayout();
        if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
          return -1;
        }
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (group.lineIndex == lineIndex) {
            return group.startIndex;
          }
        }
        return 0;
      },
      getLineText: function (lineIndex) {
        this.__updateLayout();
        if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
          return null;
        }
        var startIndex = -1;
        var endIndex = -1;
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (group.lineIndex == lineIndex) {
            if (startIndex == -1) {
              startIndex = group.startIndex;
            }
          } else if (group.lineIndex == lineIndex + 1) {
            endIndex = group.startIndex;
            break;
          }
        }
        if (endIndex == -1) {
          endIndex = this.__text.length;
        }
        return this.__textEngine.text.substring(startIndex, endIndex);
      },
      getParagraphLength: function (charIndex) {
        if (charIndex < 0 || charIndex > this.__text.length - 1) {
          return 0;
        }
        var startIndex = this.getFirstCharInParagraph(charIndex);
        var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
        if (endIndex == 0) {
          endIndex = this.__text.length;
        }
        return endIndex - startIndex;
      },
      getTextFormat: function (beginIndex, endIndex) {
        if (endIndex == null) {
          endIndex = 0;
        }
        if (beginIndex == null) {
          beginIndex = 0;
        }
        var format = null;
        var _g = 0;
        var _g1 = this.__textEngine.textFormatRanges;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (
            (group.start <= beginIndex && group.end >= beginIndex) ||
            (group.start <= endIndex && group.end >= endIndex)
          ) {
            if (format == null) {
              format = group.format.clone();
            } else {
              if (group.format.font != format.font) {
                format.font = null;
              }
              if (group.format.size != format.size) {
                format.size = null;
              }
              if (group.format.color != format.color) {
                format.color = null;
              }
              if (group.format.bold != format.bold) {
                format.bold = null;
              }
              if (group.format.italic != format.italic) {
                format.italic = null;
              }
              if (group.format.underline != format.underline) {
                format.underline = null;
              }
              if (group.format.url != format.url) {
                format.url = null;
              }
              if (group.format.target != format.target) {
                format.target = null;
              }
              if (group.format.align != format.align) {
                format.align = null;
              }
              if (group.format.leftMargin != format.leftMargin) {
                format.leftMargin = null;
              }
              if (group.format.rightMargin != format.rightMargin) {
                format.rightMargin = null;
              }
              if (group.format.indent != format.indent) {
                format.indent = null;
              }
              if (group.format.leading != format.leading) {
                format.leading = null;
              }
              if (group.format.blockIndent != format.blockIndent) {
                format.blockIndent = null;
              }
              if (group.format.bullet != format.bullet) {
                format.bullet = null;
              }
              if (group.format.kerning != format.kerning) {
                format.kerning = null;
              }
              if (group.format.letterSpacing != format.letterSpacing) {
                format.letterSpacing = null;
              }
              if (group.format.tabStops != format.tabStops) {
                format.tabStops = null;
              }
            }
          }
        }
        return format;
      },
      replaceSelectedText: function (value) {
        if (value == "" && this.__selectionIndex == this.__caretIndex) {
          return;
        }
        var startIndex =
          this.__caretIndex < this.__selectionIndex
            ? this.__caretIndex
            : this.__selectionIndex;
        var endIndex =
          this.__caretIndex > this.__selectionIndex
            ? this.__caretIndex
            : this.__selectionIndex;
        this.replaceText(startIndex, endIndex, value);
        var i = startIndex + value.length;
        this.setSelection(i, i);
      },
      replaceText: function (beginIndex, endIndex, newText) {
        if (
          endIndex < beginIndex ||
          beginIndex < 0 ||
          endIndex > this.__text.length ||
          newText == null
        ) {
          return;
        }
        this.__updateText(
          this.__text.substring(0, beginIndex) +
            newText +
            this.__text.substring(endIndex)
        );
        var offset = newText.length - (endIndex - beginIndex);
        var i = 0;
        var range;
        while (i < this.__textEngine.textFormatRanges.get_length()) {
          range = this.__textEngine.textFormatRanges.get(i);
          if (range.start <= beginIndex && range.end >= endIndex) {
            range.end += offset;
            ++i;
          } else if (range.start >= beginIndex && range.end <= endIndex) {
            if (i > 0) {
              this.__textEngine.textFormatRanges.splice(i, 1);
            } else {
              range.start = 0;
              range.end = beginIndex + newText.length;
              ++i;
            }
            offset -= range.end - range.start;
          } else if (range.start > beginIndex && range.start <= endIndex) {
            range.start += offset;
            ++i;
          } else {
            ++i;
          }
        }
        this.__dirty = true;
        this.__layoutDirty = true;
      },
      setSelection: function (beginIndex, endIndex) {
        this.__selectionIndex = beginIndex;
        this.__caretIndex = endIndex;
      },
      setTextFormat: function (format, beginIndex, endIndex) {
        if (endIndex == null) {
          endIndex = 0;
        }
        if (beginIndex == null) {
          beginIndex = 0;
        }
        var max = this.get_text().length;
        var range;
        if (beginIndex < 0) {
          beginIndex = 0;
        }
        if (endIndex < 0) {
          endIndex = 0;
        }
        if (endIndex == 0) {
          if (beginIndex == 0) {
            endIndex = max;
          } else {
            endIndex = beginIndex + 1;
          }
        }
        if (endIndex < beginIndex) {
          return;
        }
        if (beginIndex == 0 && endIndex == max) {
          this.__textFormat.__merge(format);
          if (this.__textEngine.textFormatRanges.get_length() > 1) {
            this.__textEngine.textFormatRanges.splice(
              1,
              this.__textEngine.textFormatRanges.get_length() - 1
            );
            range = this.__textEngine.textFormatRanges.get(0);
            range.format = this.__textFormat;
            range.start = 0;
            range.end = max;
          }
        } else {
          var index = this.__textEngine.textFormatRanges.get_length();
          var searchIndex;
          while (index > 0) {
            --index;
            range = this.__textEngine.textFormatRanges.get(index);
            if (range.start == beginIndex && range.end == endIndex) {
              range.format = openfl_text_TextField.__defaultTextFormat.clone();
              range.format.__merge(format);
              return;
            }
            if (range.start > beginIndex && range.end < endIndex) {
              searchIndex = this.__textEngine.textFormatRanges.indexOf(
                range,
                0
              );
              if (searchIndex > -1) {
                this.__textEngine.textFormatRanges.splice(searchIndex, 1);
              }
            }
          }
          var prevRange = null;
          var nextRange = null;
          var _g1 = 0;
          var _g = this.__textEngine.textFormatRanges.get_length();
          while (_g1 < _g) {
            var i = _g1++;
            range = this.__textEngine.textFormatRanges.get(i);
            if (beginIndex > 0) {
              if (prevRange == null && range.end >= beginIndex) {
                prevRange = range;
              }
            }
            if (endIndex < max) {
              if (range.start <= endIndex) {
                nextRange = range;
              }
            }
          }
          if (nextRange == prevRange) {
            nextRange = new openfl__$internal_text_TextFormatRange(
              nextRange.format.clone(),
              nextRange.start,
              nextRange.end
            );
            this.__textEngine.textFormatRanges.push(nextRange);
          }
          if (prevRange != null) {
            prevRange.end = beginIndex;
            if (prevRange.end <= prevRange.start) {
              searchIndex = this.__textEngine.textFormatRanges.indexOf(
                prevRange,
                0
              );
              if (searchIndex > -1) {
                this.__textEngine.textFormatRanges.splice(searchIndex, 1);
              }
              prevRange = null;
            }
          }
          if (nextRange != null) {
            nextRange.start = endIndex;
            if (nextRange.start >= nextRange.end) {
              searchIndex = this.__textEngine.textFormatRanges.indexOf(
                nextRange,
                0
              );
              if (searchIndex > -1) {
                this.__textEngine.textFormatRanges.splice(searchIndex, 1);
              }
              nextRange = null;
            }
          }
          var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
          textFormat.__merge(format);
          this.__textEngine.textFormatRanges.push(
            new openfl__$internal_text_TextFormatRange(
              textFormat,
              beginIndex,
              endIndex
            )
          );
          this.__textEngine.textFormatRanges.sort(function (a, b) {
            if (a.start < b.start || a.end < b.end) {
              return -1;
            } else if (a.start > b.start || a.end > b.end) {
              return 1;
            }
            return 0;
          });
        }
        this.__dirty = true;
        this.__layoutDirty = true;
      },
      __caretBeginningOfLine: function () {
        if (
          this.__selectionIndex == this.__caretIndex ||
          this.__caretIndex < this.__selectionIndex
        ) {
          this.__caretIndex = this.getLineOffset(
            this.getLineIndexOfChar(this.__caretIndex)
          );
        } else {
          this.__selectionIndex = this.getLineOffset(
            this.getLineIndexOfChar(this.__selectionIndex)
          );
        }
      },
      __caretEndOfLine: function () {
        var lineIndex;
        if (this.__selectionIndex == this.__caretIndex) {
          lineIndex = this.getLineIndexOfChar(this.__caretIndex);
        } else {
          lineIndex = this.getLineIndexOfChar(
            Math.max(this.__caretIndex, this.__selectionIndex) | 0
          );
        }
        if (lineIndex < this.__textEngine.numLines - 1) {
          this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
        } else {
          this.__caretIndex = this.__text.length;
        }
      },
      __caretNextCharacter: function () {
        if (this.__caretIndex < this.__text.length) {
          this.__caretIndex++;
        }
      },
      __caretNextLine: function (lineIndex, caretIndex) {
        if (lineIndex == null) {
          lineIndex = this.getLineIndexOfChar(this.__caretIndex);
        }
        if (lineIndex < this.__textEngine.numLines - 1) {
          if (caretIndex == null) {
            caretIndex = this.__caretIndex;
          }
          this.__caretIndex = this.__getCharIndexOnDifferentLine(
            caretIndex,
            lineIndex + 1
          );
        } else {
          this.__caretIndex = this.__text.length;
        }
      },
      __caretPreviousCharacter: function () {
        if (this.__caretIndex > 0) {
          this.__caretIndex--;
        }
      },
      __caretPreviousLine: function (lineIndex, caretIndex) {
        if (lineIndex == null) {
          lineIndex = this.getLineIndexOfChar(this.__caretIndex);
        }
        if (lineIndex > 0) {
          if (caretIndex == null) {
            caretIndex = this.__caretIndex;
          }
          this.__caretIndex = this.__getCharIndexOnDifferentLine(
            caretIndex,
            lineIndex - 1
          );
        } else {
          this.__caretIndex = 0;
        }
      },
      __dispatch: function (event) {
        if (event.eventPhase == 2 && event.type == "mouseUp") {
          var event1 = event;
          var group = this.__getGroup(
            this.get_mouseX(),
            this.get_mouseY(),
            true
          );
          if (group != null) {
            var url = group.format.url;
            if (url != "") {
              if (StringTools.startsWith(url, "event:")) {
                this.dispatchEvent(
                  new openfl_events_TextEvent(
                    "link",
                    false,
                    false,
                    HxOverrides.substr(url, 6, null)
                  )
                );
              } else {
                openfl_Lib.getURL(new openfl_net_URLRequest(url));
              }
            }
          }
        }
        return openfl_display_InteractiveObject.prototype.__dispatch.call(
          this,
          event
        );
      },
      __fromSymbol: function (swf, symbol) {
        this.__symbol = symbol;
        this.set_width(symbol.width);
        this.set_height(symbol.height);
        this.__offsetX = symbol.x;
        this.__offsetY = symbol.y;
        this.set_multiline(symbol.multiline);
        this.set_wordWrap(symbol.wordWrap);
        this.set_displayAsPassword(symbol.password);
        if (symbol.border) {
          this.set_border(true);
          this.set_background(true);
        }
        this.set_selectable(symbol.selectable);
        if (symbol.input) {
          this.set_type(1);
        }
        var format = new openfl_text_TextFormat();
        if (symbol.color != null) {
          format.color = symbol.color & 16777215;
        }
        format.size = Math.round(symbol.fontHeight / 20);
        var font = swf.symbols.h[symbol.fontID];
        var tmp = font != null;
        format.font = symbol.fontName;
        var found = false;
        var _g = format.font;
        if (_g == null) {
          found = true;
        } else {
          switch (_g) {
            case "":
            case "_sans":
            case "_serif":
            case "_typewriter":
              found = true;
              break;
            default:
              var _g1 = 0;
              var _g11 = openfl_text_Font.enumerateFonts();
              while (_g1 < _g11.length) {
                var font1 = _g11[_g1];
                ++_g1;
                if (font1.name == format.font) {
                  found = true;
                  break;
                }
              }
          }
        }
        if (found) {
          this.set_embedFonts(true);
        } else {
          var key = format.font;
          var _this = openfl_text_TextField.__missingFontWarning;
          if (
            !(__map_reserved[key] != null
              ? _this.existsReserved(key)
              : _this.h.hasOwnProperty(key))
          ) {
            var k = format.font;
            var _this1 = openfl_text_TextField.__missingFontWarning;
            if (__map_reserved[k] != null) {
              _this1.setReserved(k, true);
            } else {
              _this1.h[k] = true;
            }
            lime_utils_Log.warn(
              'Could not find required font "' +
                format.font +
                '", it has not been embedded',
              {
                fileName: "TextField.hx",
                lineNumber: 977,
                className: "openfl.text.TextField",
                methodName: "__fromSymbol",
              }
            );
          }
        }
        if (symbol.align != null) {
          if (symbol.align == "center") {
            format.align = 0;
          } else if (symbol.align == "right") {
            format.align = 4;
          } else if (symbol.align == "justify") {
            format.align = 2;
          }
          format.leftMargin = (symbol.leftMargin / 20) | 0;
          format.rightMargin = (symbol.rightMargin / 20) | 0;
          format.indent = (symbol.indent / 20) | 0;
          format.leading = (symbol.leading / 20) | 0;
          if (this.get_embedFonts()) {
            format.leading += 4;
          }
        }
        this.set_defaultTextFormat(format);
        if (symbol.text != null) {
          if (symbol.html) {
            this.set_htmlText(symbol.text);
          } else {
            this.set_text(symbol.text);
          }
        }
      },
      __getAttributeMatch: function (regex) {
        if (regex.matched(2) != null) {
          return regex.matched(2);
        } else {
          return regex.matched(3);
        }
      },
      __getBounds: function (rect, matrix) {
        this.__updateLayout();
        var bounds = openfl_geom_Rectangle.__temp;
        bounds.copyFrom(this.__textEngine.bounds);
        bounds.x += this.__offsetX;
        bounds.y += this.__offsetY;
        bounds.__transform(bounds, matrix);
        rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
      },
      __getCharIndexOnDifferentLine: function (charIndex, lineIndex) {
        if (charIndex < 0 || charIndex > this.__text.length) {
          return -1;
        }
        if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
          return -1;
        }
        var x = null;
        var y = null;
        var _g = 0;
        var _g1 = this.__textEngine.layoutGroups;
        while (_g < _g1.get_length()) {
          var group = _g1.get(_g);
          ++_g;
          if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
            x = group.offsetX;
            var _g3 = 0;
            var _g2 = charIndex - group.startIndex;
            while (_g3 < _g2) {
              var i = _g3++;
              x += group.advances[i];
            }
            if (y != null) {
              return this.__getPosition(x, y);
            }
          }
          if (group.lineIndex == lineIndex) {
            y = group.offsetY + group.height / 2;
            if (x != null) {
              return this.__getPosition(x, y);
            }
          }
        }
        return -1;
      },
      __getCursor: function () {
        var group = this.__getGroup(this.get_mouseX(), this.get_mouseY(), true);
        if (group != null && group.format.url != "") {
          return lime_ui_MouseCursor.POINTER;
        } else if (this.__textEngine.selectable) {
          return lime_ui_MouseCursor.TEXT;
        }
        return null;
      },
      __getGroup: function (x, y, precise) {
        if (precise == null) {
          precise = false;
        }
        this.__updateLayout();
        x += this.get_scrollH();
        var _g1 = 0;
        var _g = this.get_scrollV() - 1;
        while (_g1 < _g) {
          var i = _g1++;
          y += this.__textEngine.lineHeights.get(i);
        }
        if (!precise && y > this.__textEngine.textHeight) {
          y = this.__textEngine.textHeight;
        }
        var firstGroup = true;
        var group;
        var nextGroup;
        var _g11 = 0;
        var _g2 = this.__textEngine.layoutGroups.get_length();
        while (_g11 < _g2) {
          var i1 = _g11++;
          group = this.__textEngine.layoutGroups.get(i1);
          if (i1 < this.__textEngine.layoutGroups.get_length() - 1) {
            nextGroup = this.__textEngine.layoutGroups.get(i1 + 1);
          } else {
            nextGroup = null;
          }
          if (firstGroup) {
            if (y < group.offsetY) {
              y = group.offsetY;
            }
            if (x < group.offsetX) {
              x = group.offsetX;
            }
            firstGroup = false;
          }
          if (
            (y >= group.offsetY && y <= group.offsetY + group.height) ||
            (!precise && nextGroup == null)
          ) {
            if (
              (x >= group.offsetX && x <= group.offsetX + group.width) ||
              (!precise &&
                (nextGroup == null || nextGroup.lineIndex != group.lineIndex))
            ) {
              return group;
            }
          }
        }
        return null;
      },
      __getPosition: function (x, y) {
        var group = this.__getGroup(x, y);
        if (group == null) {
          return this.__text.length;
        }
        var advance = 0.0;
        var _g1 = 0;
        var _g = group.advances.length;
        while (_g1 < _g) {
          var i = _g1++;
          advance += group.advances[i];
          if (x <= group.offsetX + advance) {
            if (
              x <=
              group.offsetX +
                (advance - group.advances[i]) +
                group.advances[i] / 2
            ) {
              return group.startIndex + i;
            } else if (group.startIndex + i < group.endIndex) {
              return group.startIndex + i + 1;
            } else {
              return group.endIndex;
            }
          }
        }
        return group.endIndex;
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (
          !hitObject.get_visible() ||
          this.__isMask ||
          (interactiveOnly && !this.mouseEnabled)
        ) {
          return false;
        }
        if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
          return false;
        }
        this.__getRenderTransform();
        this.__updateLayout();
        var _this = this.__renderTransform;
        var norm = _this.a * _this.d - _this.b * _this.c;
        var px =
          norm == 0
            ? -_this.tx
            : (1.0 / norm) *
              (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
        var _this1 = this.__renderTransform;
        var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
        var py =
          norm1 == 0
            ? -_this1.ty
            : (1.0 / norm1) *
              (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
        if (this.__textEngine.bounds.contains(px, py)) {
          if (stack != null) {
            stack.push(hitObject);
          }
          return true;
        }
        return false;
      },
      __hitTestMask: function (x, y) {
        this.__getRenderTransform();
        this.__updateLayout();
        var _this = this.__renderTransform;
        var norm = _this.a * _this.d - _this.b * _this.c;
        var px =
          norm == 0
            ? -_this.tx
            : (1.0 / norm) *
              (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
        var _this1 = this.__renderTransform;
        var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
        var py =
          norm1 == 0
            ? -_this1.ty
            : (1.0 / norm1) *
              (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
        if (this.__textEngine.bounds.contains(px, py)) {
          return true;
        }
        return false;
      },
      __renderCairo: function (renderSession) {},
      __renderCanvas: function (renderSession) {
        var transform = this.__worldTransform;
        var textEngine = this.__textEngine;
        var bounds = textEngine.bounds;
        var graphics = this.__graphics;
        if (this.__dirty) {
          this.__updateLayout();
          if (graphics.__bounds == null) {
            graphics.__bounds = new openfl_geom_Rectangle();
          }
          graphics.__bounds.copyFrom(bounds);
        }
        graphics.__update();
        if (this.__dirty || graphics.__dirty) {
          var width = graphics.__width;
          var height = graphics.__height;
          if (
            ((textEngine.text == null || textEngine.text == "") &&
              !textEngine.background &&
              !textEngine.border &&
              !textEngine.__hasFocus &&
              (textEngine.type != 1 || !textEngine.selectable)) ||
            ((textEngine.width <= 0 || textEngine.height <= 0) &&
              textEngine.autoSize != 2)
          ) {
            this.__graphics.__canvas = null;
            this.__graphics.__context = null;
            this.__graphics.__bitmap = null;
            this.__graphics.set___dirty(false);
            this.__dirty = false;
          } else {
            if (this.__graphics.__canvas == null) {
              this.__graphics.__canvas =
                window.document.createElement("canvas");
              this.__graphics.__context =
                this.__graphics.__canvas.getContext("2d");
            }
            openfl__$internal_renderer_canvas_CanvasTextField.context =
              graphics.__context;
            var transform1 = graphics.__renderTransform;
            graphics.__canvas.width = width;
            graphics.__canvas.height = height;
            openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(
              transform1.a,
              transform1.b,
              transform1.c,
              transform1.d,
              transform1.tx,
              transform1.ty
            );
            if (
              openfl__$internal_renderer_canvas_CanvasTextField.clearRect ==
              null
            ) {
              openfl__$internal_renderer_canvas_CanvasTextField.clearRect =
                typeof navigator !== "undefined" &&
                typeof navigator["isCocoonJS"] !== "undefined";
            }
            if (openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
              openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(
                0,
                0,
                graphics.__canvas.width,
                graphics.__canvas.height
              );
            }
            if (
              (textEngine.text != null && textEngine.text != "") ||
              textEngine.__hasFocus
            ) {
              var text = textEngine.text;
              if (
                !renderSession.allowSmoothing ||
                (textEngine.antiAliasType == 0 && textEngine.sharpness == 400)
              ) {
                graphics.__context.mozImageSmoothingEnabled = false;
                graphics.__context.msImageSmoothingEnabled = false;
                graphics.__context.imageSmoothingEnabled = false;
              } else {
                graphics.__context.mozImageSmoothingEnabled = true;
                graphics.__context.msImageSmoothingEnabled = true;
                graphics.__context.imageSmoothingEnabled = true;
              }
              if (textEngine.border || textEngine.background) {
                openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                  0.5,
                  0.5,
                  bounds.width - 1,
                  bounds.height - 1
                );
                if (textEngine.background) {
                  var tmp = StringTools.hex(
                    textEngine.backgroundColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#" + tmp;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                }
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                  var tmp1 = StringTools.hex(
                    textEngine.borderColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                    "#" + tmp1;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                }
              }
              openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline =
                "top";
              openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign =
                "start";
              var scrollX = -this.get_scrollH();
              var scrollY = 0.0;
              var _g1 = 0;
              var _g = this.get_scrollV() - 1;
              while (_g1 < _g) {
                var i = _g1++;
                scrollY -= textEngine.lineHeights.get(i);
              }
              var advance;
              var offsetY = 0.0;
              var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)", "g").match(
                window.navigator.userAgent
              );
              var _g2 = 0;
              var _g11 = textEngine.layoutGroups;
              while (_g2 < _g11.get_length()) {
                var group = _g11.get(_g2);
                ++_g2;
                if (group.lineIndex < this.get_scrollV() - 1) {
                  continue;
                }
                if (
                  group.lineIndex >
                  this.get_scrollV() + textEngine.bottomScrollV - 2
                ) {
                  break;
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.font =
                  openfl__$internal_text_TextEngine.getFont(group.format);
                var tmp2 = StringTools.hex(group.format.color & 16777215, 6);
                openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                  "#" + tmp2;
                if (applyHack) {
                  offsetY = group.format.size * 0.185;
                }
                if (this.__filters != null && this.__filters.length > 0) {
                  if (
                    js_Boot.__instanceof(
                      this.__filters[0],
                      openfl_filters_GlowFilter
                    )
                  ) {
                    var glowFilter = this.__filters[0];
                    var cacheAlpha =
                      openfl__$internal_renderer_canvas_CanvasTextField.context
                        .globalAlpha;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                      cacheAlpha * glowFilter.alpha;
                    var tmp3 = StringTools.hex(glowFilter.color & 16777215, 6);
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                      "#" + tmp3;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth =
                      Math.max(glowFilter.blurX, glowFilter.blurY);
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(
                      text.substring(group.startIndex, group.endIndex),
                      group.offsetX + scrollX,
                      group.offsetY + offsetY + scrollY
                    );
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                      null;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                      cacheAlpha;
                  }
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
                  text.substring(group.startIndex, group.endIndex),
                  group.offsetX + scrollX,
                  group.offsetY + offsetY + scrollY
                );
                if (this.__caretIndex > -1 && textEngine.selectable) {
                  if (this.__selectionIndex == this.__caretIndex) {
                    if (
                      this.__showCursor &&
                      group.startIndex <= this.__caretIndex &&
                      group.endIndex >= this.__caretIndex
                    ) {
                      advance = 0.0;
                      var _g3 = 0;
                      var _g21 = this.__caretIndex - group.startIndex;
                      while (_g3 < _g21) {
                        var i1 = _g3++;
                        if (group.advances.length <= i1) {
                          break;
                        }
                        advance += group.advances[i1];
                      }
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                        group.offsetX + advance,
                        group.offsetY,
                        1,
                        group.height
                      );
                    }
                  } else if (
                    (group.startIndex <= this.__caretIndex &&
                      group.endIndex >= this.__caretIndex) ||
                    (group.startIndex <= this.__selectionIndex &&
                      group.endIndex >= this.__selectionIndex) ||
                    (group.startIndex > this.__caretIndex &&
                      group.endIndex < this.__selectionIndex) ||
                    (group.startIndex > this.__selectionIndex &&
                      group.endIndex < this.__caretIndex)
                  ) {
                    var selectionStart =
                      Math.min(this.__selectionIndex, this.__caretIndex) | 0;
                    var selectionEnd =
                      Math.max(this.__selectionIndex, this.__caretIndex) | 0;
                    if (group.startIndex > selectionStart) {
                      selectionStart = group.startIndex;
                    }
                    if (group.endIndex < selectionEnd) {
                      selectionEnd = group.endIndex;
                    }
                    var start;
                    var end;
                    start = this.getCharBoundaries(selectionStart);
                    if (selectionEnd >= textEngine.text.length) {
                      end = this.getCharBoundaries(textEngine.text.length - 1);
                      end.x += end.width + 2;
                    } else {
                      end = this.getCharBoundaries(selectionEnd);
                    }
                    if (start != null && end != null) {
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                        "#000000";
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                        start.x,
                        start.y,
                        end.x - start.x,
                        group.height
                      );
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                        "#FFFFFF";
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
                        text.substring(selectionStart, selectionEnd),
                        scrollX + start.x,
                        group.offsetY + offsetY + scrollY
                      );
                    }
                  }
                }
              }
            } else {
              if (textEngine.border || textEngine.background) {
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                    0.5,
                    0.5,
                    bounds.width - 1,
                    bounds.height - 1
                  );
                } else {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                    0,
                    0,
                    bounds.width,
                    bounds.height
                  );
                }
                if (textEngine.background) {
                  var tmp4 = StringTools.hex(
                    textEngine.backgroundColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#" + tmp4;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                }
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap =
                    "square";
                  var tmp5 = StringTools.hex(
                    textEngine.borderColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                    "#" + tmp5;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                }
              }
              if (
                this.__caretIndex > -1 &&
                textEngine.selectable &&
                this.__showCursor
              ) {
                var scrollX1 = -this.get_scrollH();
                var scrollY1 = 0.0;
                var _g12 = 0;
                var _g4 = this.get_scrollV() - 1;
                while (_g12 < _g4) {
                  var i2 = _g12++;
                  scrollY1 -= textEngine.lineHeights.get(i2);
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
                var tmp6 = StringTools.hex(
                  this.get_defaultTextFormat().color & 16777215,
                  6
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                  "#" + tmp6;
                openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(
                  scrollX1 + 2.5,
                  scrollY1 + 2.5
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(
                  scrollX1 + 2.5,
                  scrollY1 +
                    openfl__$internal_text_TextEngine.getFormatHeight(
                      this.get_defaultTextFormat()
                    ) -
                    1
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
              }
            }
            graphics.__bitmap = openfl_display_BitmapData.fromCanvas(
              this.__graphics.__canvas
            );
            graphics.__visible = true;
            this.__dirty = false;
            graphics.set___dirty(false);
          }
        }
        if (
          this.__textEngine.antiAliasType == 0 &&
          this.__textEngine.gridFitType == 1
        ) {
          var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
          if (smoothingEnabled) {
            renderSession.context.mozImageSmoothingEnabled = false;
            renderSession.context.msImageSmoothingEnabled = false;
            renderSession.context.imageSmoothingEnabled = false;
          }
          openfl_display_InteractiveObject.prototype.__renderCanvas.call(
            this,
            renderSession
          );
          if (smoothingEnabled) {
            renderSession.context.mozImageSmoothingEnabled = true;
            renderSession.context.msImageSmoothingEnabled = true;
            renderSession.context.imageSmoothingEnabled = true;
          }
        } else {
          openfl_display_InteractiveObject.prototype.__renderCanvas.call(
            this,
            renderSession
          );
        }
      },
      __renderDOM: function (renderSession) {},
      __renderGL: function (renderSession) {
        var transform = this.__worldTransform;
        var textEngine = this.__textEngine;
        var bounds = textEngine.bounds;
        var graphics = this.__graphics;
        if (this.__dirty) {
          this.__updateLayout();
          if (graphics.__bounds == null) {
            graphics.__bounds = new openfl_geom_Rectangle();
          }
          graphics.__bounds.copyFrom(bounds);
        }
        graphics.__update();
        if (this.__dirty || graphics.__dirty) {
          var width = graphics.__width;
          var height = graphics.__height;
          if (
            ((textEngine.text == null || textEngine.text == "") &&
              !textEngine.background &&
              !textEngine.border &&
              !textEngine.__hasFocus &&
              (textEngine.type != 1 || !textEngine.selectable)) ||
            ((textEngine.width <= 0 || textEngine.height <= 0) &&
              textEngine.autoSize != 2)
          ) {
            this.__graphics.__canvas = null;
            this.__graphics.__context = null;
            this.__graphics.__bitmap = null;
            this.__graphics.set___dirty(false);
            this.__dirty = false;
          } else {
            if (this.__graphics.__canvas == null) {
              this.__graphics.__canvas =
                window.document.createElement("canvas");
              this.__graphics.__context =
                this.__graphics.__canvas.getContext("2d");
            }
            openfl__$internal_renderer_canvas_CanvasTextField.context =
              graphics.__context;
            var transform1 = graphics.__renderTransform;
            graphics.__canvas.width = width;
            graphics.__canvas.height = height;
            openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(
              transform1.a,
              transform1.b,
              transform1.c,
              transform1.d,
              transform1.tx,
              transform1.ty
            );
            if (
              openfl__$internal_renderer_canvas_CanvasTextField.clearRect ==
              null
            ) {
              openfl__$internal_renderer_canvas_CanvasTextField.clearRect =
                typeof navigator !== "undefined" &&
                typeof navigator["isCocoonJS"] !== "undefined";
            }
            if (openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
              openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(
                0,
                0,
                graphics.__canvas.width,
                graphics.__canvas.height
              );
            }
            if (
              (textEngine.text != null && textEngine.text != "") ||
              textEngine.__hasFocus
            ) {
              var text = textEngine.text;
              if (
                !renderSession.allowSmoothing ||
                (textEngine.antiAliasType == 0 && textEngine.sharpness == 400)
              ) {
                graphics.__context.mozImageSmoothingEnabled = false;
                graphics.__context.msImageSmoothingEnabled = false;
                graphics.__context.imageSmoothingEnabled = false;
              } else {
                graphics.__context.mozImageSmoothingEnabled = true;
                graphics.__context.msImageSmoothingEnabled = true;
                graphics.__context.imageSmoothingEnabled = true;
              }
              if (textEngine.border || textEngine.background) {
                openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                  0.5,
                  0.5,
                  bounds.width - 1,
                  bounds.height - 1
                );
                if (textEngine.background) {
                  var tmp = StringTools.hex(
                    textEngine.backgroundColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#" + tmp;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                }
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                  var tmp1 = StringTools.hex(
                    textEngine.borderColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                    "#" + tmp1;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                }
              }
              openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline =
                "top";
              openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign =
                "start";
              var scrollX = -this.get_scrollH();
              var scrollY = 0.0;
              var _g1 = 0;
              var _g = this.get_scrollV() - 1;
              while (_g1 < _g) {
                var i = _g1++;
                scrollY -= textEngine.lineHeights.get(i);
              }
              var advance;
              var offsetY = 0.0;
              var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)", "g").match(
                window.navigator.userAgent
              );
              var _g2 = 0;
              var _g11 = textEngine.layoutGroups;
              while (_g2 < _g11.get_length()) {
                var group = _g11.get(_g2);
                ++_g2;
                if (group.lineIndex < this.get_scrollV() - 1) {
                  continue;
                }
                if (
                  group.lineIndex >
                  this.get_scrollV() + textEngine.bottomScrollV - 2
                ) {
                  break;
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.font =
                  openfl__$internal_text_TextEngine.getFont(group.format);
                var tmp2 = StringTools.hex(group.format.color & 16777215, 6);
                openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                  "#" + tmp2;
                if (applyHack) {
                  offsetY = group.format.size * 0.185;
                }
                if (this.__filters != null && this.__filters.length > 0) {
                  if (
                    js_Boot.__instanceof(
                      this.__filters[0],
                      openfl_filters_GlowFilter
                    )
                  ) {
                    var glowFilter = this.__filters[0];
                    var cacheAlpha =
                      openfl__$internal_renderer_canvas_CanvasTextField.context
                        .globalAlpha;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                      cacheAlpha * glowFilter.alpha;
                    var tmp3 = StringTools.hex(glowFilter.color & 16777215, 6);
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                      "#" + tmp3;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth =
                      Math.max(glowFilter.blurX, glowFilter.blurY);
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(
                      text.substring(group.startIndex, group.endIndex),
                      group.offsetX + scrollX,
                      group.offsetY + offsetY + scrollY
                    );
                    openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                      null;
                    openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                      cacheAlpha;
                  }
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
                  text.substring(group.startIndex, group.endIndex),
                  group.offsetX + scrollX,
                  group.offsetY + offsetY + scrollY
                );
                if (this.__caretIndex > -1 && textEngine.selectable) {
                  if (this.__selectionIndex == this.__caretIndex) {
                    if (
                      this.__showCursor &&
                      group.startIndex <= this.__caretIndex &&
                      group.endIndex >= this.__caretIndex
                    ) {
                      advance = 0.0;
                      var _g3 = 0;
                      var _g21 = this.__caretIndex - group.startIndex;
                      while (_g3 < _g21) {
                        var i1 = _g3++;
                        if (group.advances.length <= i1) {
                          break;
                        }
                        advance += group.advances[i1];
                      }
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                        group.offsetX + advance,
                        group.offsetY,
                        1,
                        group.height
                      );
                    }
                  } else if (
                    (group.startIndex <= this.__caretIndex &&
                      group.endIndex >= this.__caretIndex) ||
                    (group.startIndex <= this.__selectionIndex &&
                      group.endIndex >= this.__selectionIndex) ||
                    (group.startIndex > this.__caretIndex &&
                      group.endIndex < this.__selectionIndex) ||
                    (group.startIndex > this.__selectionIndex &&
                      group.endIndex < this.__caretIndex)
                  ) {
                    var selectionStart =
                      Math.min(this.__selectionIndex, this.__caretIndex) | 0;
                    var selectionEnd =
                      Math.max(this.__selectionIndex, this.__caretIndex) | 0;
                    if (group.startIndex > selectionStart) {
                      selectionStart = group.startIndex;
                    }
                    if (group.endIndex < selectionEnd) {
                      selectionEnd = group.endIndex;
                    }
                    var start;
                    var end;
                    start = this.getCharBoundaries(selectionStart);
                    if (selectionEnd >= textEngine.text.length) {
                      end = this.getCharBoundaries(textEngine.text.length - 1);
                      end.x += end.width + 2;
                    } else {
                      end = this.getCharBoundaries(selectionEnd);
                    }
                    if (start != null && end != null) {
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                        "#000000";
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                        start.x,
                        start.y,
                        end.x - start.x,
                        group.height
                      );
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                        "#FFFFFF";
                      openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
                        text.substring(selectionStart, selectionEnd),
                        scrollX + start.x,
                        group.offsetY + offsetY + scrollY
                      );
                    }
                  }
                }
              }
            } else {
              if (textEngine.border || textEngine.background) {
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                    0.5,
                    0.5,
                    bounds.width - 1,
                    bounds.height - 1
                  );
                } else {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                    0,
                    0,
                    bounds.width,
                    bounds.height
                  );
                }
                if (textEngine.background) {
                  var tmp4 = StringTools.hex(
                    textEngine.backgroundColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#" + tmp4;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                }
                if (textEngine.border) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap =
                    "square";
                  var tmp5 = StringTools.hex(
                    textEngine.borderColor & 16777215,
                    6
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                    "#" + tmp5;
                  openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                }
              }
              if (
                this.__caretIndex > -1 &&
                textEngine.selectable &&
                this.__showCursor
              ) {
                var scrollX1 = -this.get_scrollH();
                var scrollY1 = 0.0;
                var _g12 = 0;
                var _g4 = this.get_scrollV() - 1;
                while (_g12 < _g4) {
                  var i2 = _g12++;
                  scrollY1 -= textEngine.lineHeights.get(i2);
                }
                openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
                var tmp6 = StringTools.hex(
                  this.get_defaultTextFormat().color & 16777215,
                  6
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                  "#" + tmp6;
                openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(
                  scrollX1 + 2.5,
                  scrollY1 + 2.5
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(
                  scrollX1 + 2.5,
                  scrollY1 +
                    openfl__$internal_text_TextEngine.getFormatHeight(
                      this.get_defaultTextFormat()
                    ) -
                    1
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
              }
            }
            graphics.__bitmap = openfl_display_BitmapData.fromCanvas(
              this.__graphics.__canvas
            );
            graphics.__visible = true;
            this.__dirty = false;
            graphics.set___dirty(false);
          }
        }
        openfl_display_InteractiveObject.prototype.__renderGL.call(
          this,
          renderSession
        );
      },
      __startCursorTimer: function () {
        this.__cursorTimer = haxe_Timer.delay(
          $bind(this, this.__startCursorTimer),
          600
        );
        this.__showCursor = !this.__showCursor;
        this.__dirty = true;
      },
      __startTextInput: function () {
        if (this.__caretIndex < 0) {
          this.__caretIndex = this.__text.length;
          this.__selectionIndex = this.__caretIndex;
        }
        if (this.stage != null) {
          this.stage.window.backend.setEnableTextEvents(true);
          if (!this.__inputEnabled) {
            this.stage.window.backend.setEnableTextEvents(true);
            if (
              !this.stage.window.onTextInput.has(
                $bind(this, this.window_onTextInput)
              )
            ) {
              this.stage.window.onTextInput.add(
                $bind(this, this.window_onTextInput)
              );
              this.stage.window.onKeyDown.add(
                $bind(this, this.window_onKeyDown)
              );
            }
            this.__inputEnabled = true;
            this.__startCursorTimer();
          }
        }
      },
      __stopCursorTimer: function () {
        if (this.__cursorTimer != null) {
          this.__cursorTimer.stop();
          this.__cursorTimer = null;
        }
        if (this.__showCursor) {
          this.__showCursor = false;
          this.__dirty = true;
        }
      },
      __stopTextInput: function () {
        if (this.__inputEnabled && this.stage != null) {
          this.stage.window.backend.setEnableTextEvents(false);
          this.stage.window.onTextInput.remove(
            $bind(this, this.window_onTextInput)
          );
          this.stage.window.onKeyDown.remove(
            $bind(this, this.window_onKeyDown)
          );
          this.__inputEnabled = false;
          this.__stopCursorTimer();
        }
      },
      __updateLayout: function () {
        if (this.__layoutDirty) {
          var cacheWidth = this.__textEngine.width;
          var cacheHeight = this.__textEngine.height;
          this.__textEngine.update();
          if (this.__textEngine.autoSize != 2) {
            if (this.__textEngine.width != cacheWidth) {
              var _g = this.__textEngine.autoSize;
              switch (_g) {
                case 0:
                  var _g1 = this;
                  _g1.set_x(
                    _g1.get_x() + (cacheWidth - this.__textEngine.width) / 2
                  );
                  break;
                case 3:
                  var _g2 = this;
                  _g2.set_x(
                    _g2.get_x() + (cacheWidth - this.__textEngine.width)
                  );
                  break;
                default:
              }
            }
            this.__textEngine.getBounds();
          }
          this.__layoutDirty = false;
        }
      },
      __updateText: function (value) {
        this.__text = value;
        if (this.__text.length < this.__caretIndex) {
          this.__selectionIndex = this.__caretIndex = this.__text.length;
        }
        if (!this.__displayAsPassword) {
          this.__textEngine.set_text(this.__text);
        } else {
          var length = this.get_text().length;
          var mask = "";
          var _g1 = 0;
          var _g = length;
          while (_g1 < _g) {
            var i = _g1++;
            mask += "*";
          }
          this.__textEngine.set_text(mask);
        }
      },
      __updateTransforms: function (overrideTransform) {
        openfl_display_InteractiveObject.prototype.__updateTransforms.call(
          this,
          overrideTransform
        );
        var _this = this.__renderTransform;
        var px = this.__offsetX;
        var py = this.__offsetY;
        _this.tx = px * _this.a + py * _this.c + _this.tx;
        _this.ty = px * _this.b + py * _this.d + _this.ty;
      },
      get_antiAliasType: function () {
        return this.__textEngine.antiAliasType;
      },
      set_antiAliasType: function (value) {
        var tmp = value != this.__textEngine.antiAliasType;
        return (this.__textEngine.antiAliasType = value);
      },
      get_autoSize: function () {
        return this.__textEngine.autoSize;
      },
      set_autoSize: function (value) {
        if (value != this.__textEngine.autoSize) {
          this.__dirty = true;
          this.__layoutDirty = true;
        }
        return (this.__textEngine.autoSize = value);
      },
      get_background: function () {
        return this.__textEngine.background;
      },
      set_background: function (value) {
        if (value != this.__textEngine.background) {
          this.__dirty = true;
        }
        return (this.__textEngine.background = value);
      },
      get_backgroundColor: function () {
        return this.__textEngine.backgroundColor;
      },
      set_backgroundColor: function (value) {
        if (value != this.__textEngine.backgroundColor) {
          this.__dirty = true;
        }
        return (this.__textEngine.backgroundColor = value);
      },
      get_border: function () {
        return this.__textEngine.border;
      },
      set_border: function (value) {
        if (value != this.__textEngine.border) {
          this.__dirty = true;
        }
        return (this.__textEngine.border = value);
      },
      get_borderColor: function () {
        return this.__textEngine.borderColor;
      },
      set_borderColor: function (value) {
        if (value != this.__textEngine.borderColor) {
          this.__dirty = true;
        }
        return (this.__textEngine.borderColor = value);
      },
      get_bottomScrollV: function () {
        this.__updateLayout();
        return this.__textEngine.bottomScrollV;
      },
      get_caretIndex: function () {
        return this.__caretIndex;
      },
      get_defaultTextFormat: function () {
        return this.__textFormat.clone();
      },
      set_defaultTextFormat: function (value) {
        this.__textFormat.__merge(value);
        this.__layoutDirty = true;
        this.__dirty = true;
        return value;
      },
      get_displayAsPassword: function () {
        return this.__displayAsPassword;
      },
      set_displayAsPassword: function (value) {
        if (value != this.__displayAsPassword) {
          this.__dirty = true;
          this.__layoutDirty = true;
          this.__displayAsPassword = value;
          this.__updateText(this.__text);
        }
        return value;
      },
      get_embedFonts: function () {
        return this.__textEngine.embedFonts;
      },
      set_embedFonts: function (value) {
        return (this.__textEngine.embedFonts = value);
      },
      get_gridFitType: function () {
        return this.__textEngine.gridFitType;
      },
      set_gridFitType: function (value) {
        return (this.__textEngine.gridFitType = value);
      },
      get_height: function () {
        this.__updateLayout();
        return this.__textEngine.height * Math.abs(this.get_scaleY());
      },
      set_height: function (value) {
        if (value != this.__textEngine.height) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          this.__dirty = true;
          this.__layoutDirty = true;
          this.__textEngine.height = value;
        }
        return this.__textEngine.height * Math.abs(this.get_scaleY());
      },
      get_htmlText: function () {
        return this.__text;
      },
      set_htmlText: function (value) {
        if (!this.__isHTML || this.__text != value) {
          this.__dirty = true;
          this.__layoutDirty = true;
        }
        this.__isHTML = true;
        if (this.__div == null) {
          value = value.replace(openfl_text_TextField.__regexBreakTag.r, "\n");
          value = value.replace(
            openfl_text_TextField.__regexEntities[0].r,
            '"'
          );
          value = value.replace(
            openfl_text_TextField.__regexEntities[1].r,
            "'"
          );
          value = value.replace(
            openfl_text_TextField.__regexEntities[2].r,
            "&"
          );
          var segments = value.split("<");
          if (segments.length == 1) {
            value = value.replace(openfl_text_TextField.__regexHTMLTag.r, "");
            if (this.__textEngine.textFormatRanges.get_length() > 1) {
              this.__textEngine.textFormatRanges.splice(
                1,
                this.__textEngine.textFormatRanges.get_length() - 1
              );
            }
            value = value.replace(
              openfl_text_TextField.__regexEntities[3].r,
              "<"
            );
            value = value.replace(
              openfl_text_TextField.__regexEntities[4].r,
              ">"
            );
            var range = this.__textEngine.textFormatRanges.get(0);
            range.format = this.__textFormat;
            range.start = 0;
            range.end = value.length;
            this.__updateText(value);
            return value;
          } else {
            this.__textEngine.textFormatRanges.splice(
              0,
              this.__textEngine.textFormatRanges.get_length()
            );
            value = "";
            var segment;
            var _g1 = 0;
            var _g = segments.length;
            while (_g1 < _g) {
              var i = _g1++;
              segment = segments[i];
              segment = segment.replace(
                openfl_text_TextField.__regexEntities[3].r,
                "<"
              );
              segment = segment.replace(
                openfl_text_TextField.__regexEntities[4].r,
                ">"
              );
              segments[i] = segment;
            }
            var formatStack = [this.__textFormat.clone()];
            var sub;
            var noLineBreak = false;
            var _g2 = 0;
            while (_g2 < segments.length) {
              var segment1 = segments[_g2];
              ++_g2;
              if (segment1 == "") {
                continue;
              }
              var isClosingTag = HxOverrides.substr(segment1, 0, 1) == "/";
              var tagEndIndex = segment1.indexOf(">");
              var start = tagEndIndex + 1;
              var spaceIndex = segment1.indexOf(" ");
              var tagName = segment1.substring(
                isClosingTag ? 1 : 0,
                spaceIndex > -1 && spaceIndex < tagEndIndex
                  ? spaceIndex
                  : tagEndIndex
              );
              var format;
              if (isClosingTag) {
                formatStack.pop();
                format = formatStack[formatStack.length - 1].clone();
                if (
                  tagName.toLowerCase() == "p" &&
                  this.__textEngine.textFormatRanges.get_length() > 0
                ) {
                  value += "\n";
                  noLineBreak = true;
                }
                if (start < segment1.length) {
                  sub = HxOverrides.substr(segment1, start, null);
                  this.__textEngine.textFormatRanges.push(
                    new openfl__$internal_text_TextFormatRange(
                      format,
                      value.length,
                      value.length + sub.length
                    )
                  );
                  value += sub;
                  noLineBreak = false;
                }
              } else {
                format = formatStack[formatStack.length - 1].clone();
                if (tagEndIndex > -1) {
                  var _g11 = tagName.toLowerCase();
                  switch (_g11) {
                    case "a":
                      if (openfl_text_TextField.__regexHref.match(segment1)) {
                        format.url = this.__getAttributeMatch(
                          openfl_text_TextField.__regexHref
                        );
                      }
                      break;
                    case "b":
                      format.bold = true;
                      break;
                    case "em":
                    case "i":
                      format.italic = true;
                      break;
                    case "font":
                      if (openfl_text_TextField.__regexFace.match(segment1)) {
                        format.font = this.__getAttributeMatch(
                          openfl_text_TextField.__regexFace
                        );
                      }
                      if (openfl_text_TextField.__regexColor.match(segment1)) {
                        format.color = Std.parseInt(
                          "0x" +
                            this.__getAttributeMatch(
                              openfl_text_TextField.__regexColor
                            )
                        );
                      }
                      if (openfl_text_TextField.__regexSize.match(segment1)) {
                        var sizeAttr = this.__getAttributeMatch(
                          openfl_text_TextField.__regexSize
                        );
                        var firstChar = HxOverrides.cca(sizeAttr, 0);
                        if (firstChar == 43 || firstChar == 45) {
                          var parentFormat =
                            formatStack.length >= 2
                              ? formatStack[formatStack.length - 2]
                              : this.__textFormat;
                          format.size =
                            parentFormat.size + Std.parseInt(sizeAttr);
                        } else {
                          format.size = Std.parseInt(sizeAttr);
                        }
                      }
                      break;
                    case "p":
                      if (
                        this.__textEngine.textFormatRanges.get_length() > 0 &&
                        !noLineBreak
                      ) {
                        value += "\n";
                      }
                      if (openfl_text_TextField.__regexAlign.match(segment1)) {
                        format.align =
                          openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(
                            this.__getAttributeMatch(
                              openfl_text_TextField.__regexAlign
                            ).toLowerCase()
                          );
                      }
                      break;
                    case "textformat":
                      if (
                        openfl_text_TextField.__regexBlockIndent.match(segment1)
                      ) {
                        format.blockIndent = Std.parseInt(
                          this.__getAttributeMatch(
                            openfl_text_TextField.__regexBlockIndent
                          )
                        );
                      }
                      if (openfl_text_TextField.__regexIndent.match(segment1)) {
                        format.indent = Std.parseInt(
                          this.__getAttributeMatch(
                            openfl_text_TextField.__regexIndent
                          )
                        );
                      }
                      if (
                        openfl_text_TextField.__regexLeading.match(segment1)
                      ) {
                        format.leading = Std.parseInt(
                          this.__getAttributeMatch(
                            openfl_text_TextField.__regexLeading
                          )
                        );
                      }
                      if (
                        openfl_text_TextField.__regexLeftMargin.match(segment1)
                      ) {
                        format.leftMargin = Std.parseInt(
                          this.__getAttributeMatch(
                            openfl_text_TextField.__regexLeftMargin
                          )
                        );
                      }
                      if (
                        openfl_text_TextField.__regexRightMargin.match(segment1)
                      ) {
                        format.rightMargin = Std.parseInt(
                          this.__getAttributeMatch(
                            openfl_text_TextField.__regexRightMargin
                          )
                        );
                      }
                      if (
                        openfl_text_TextField.__regexTabStops.match(segment1)
                      ) {
                        var values = this.__getAttributeMatch(
                          openfl_text_TextField.__regexTabStops
                        ).split(" ");
                        var tabStops = [];
                        var _g12 = 0;
                        while (_g12 < values.length) {
                          var stop = values[_g12];
                          ++_g12;
                          tabStops.push(Std.parseInt(stop));
                        }
                        format.tabStops = tabStops;
                      }
                      break;
                    case "u":
                      format.underline = true;
                      break;
                  }
                  formatStack.push(format);
                  if (start < segment1.length) {
                    sub = segment1.substring(start);
                    this.__textEngine.textFormatRanges.push(
                      new openfl__$internal_text_TextFormatRange(
                        format,
                        value.length,
                        value.length + sub.length
                      )
                    );
                    value += sub;
                    noLineBreak = false;
                  }
                } else {
                  this.__textEngine.textFormatRanges.push(
                    new openfl__$internal_text_TextFormatRange(
                      format,
                      value.length,
                      value.length + segment1.length
                    )
                  );
                  value += segment1;
                  noLineBreak = false;
                }
              }
            }
            if (this.__textEngine.textFormatRanges.get_length() == 0) {
              this.__textEngine.textFormatRanges.push(
                new openfl__$internal_text_TextFormatRange(formatStack[0], 0, 0)
              );
            }
          }
        }
        this.__updateText(value);
        return value;
      },
      get_length: function () {
        if (this.__text != null) {
          return this.__text.length;
        }
        return 0;
      },
      get_maxChars: function () {
        return this.__textEngine.maxChars;
      },
      set_maxChars: function (value) {
        if (value != this.__textEngine.maxChars) {
          this.__dirty = true;
          this.__layoutDirty = true;
        }
        return (this.__textEngine.maxChars = value);
      },
      get_maxScrollH: function () {
        this.__updateLayout();
        return this.__textEngine.maxScrollH;
      },
      get_maxScrollV: function () {
        this.__updateLayout();
        return this.__textEngine.maxScrollV;
      },
      get_mouseWheelEnabled: function () {
        return this.__mouseWheelEnabled;
      },
      set_mouseWheelEnabled: function (value) {
        return (this.__mouseWheelEnabled = value);
      },
      get_multiline: function () {
        return this.__textEngine.multiline;
      },
      set_multiline: function (value) {
        if (value != this.__textEngine.multiline) {
          this.__dirty = true;
          this.__layoutDirty = true;
        }
        return (this.__textEngine.multiline = value);
      },
      get_numLines: function () {
        this.__updateLayout();
        return this.__textEngine.numLines;
      },
      get_restrict: function () {
        return this.__textEngine.restrict;
      },
      set_restrict: function (value) {
        return this.__textEngine.set_restrict(value);
      },
      get_scrollH: function () {
        return this.__textEngine.scrollH;
      },
      set_scrollH: function (value) {
        this.__updateLayout();
        if (value > this.__textEngine.maxScrollH) {
          value = this.__textEngine.maxScrollH;
        }
        if (value < 0) {
          value = 0;
        }
        if (value != this.__textEngine.scrollH) {
          this.__dirty = true;
        }
        return (this.__textEngine.scrollH = value);
      },
      get_scrollV: function () {
        return this.__textEngine.scrollV;
      },
      set_scrollV: function (value) {
        this.__updateLayout();
        if (value > this.__textEngine.maxScrollV) {
          value = this.__textEngine.maxScrollV;
        }
        if (value < 1) {
          value = 1;
        }
        if (value != this.__textEngine.scrollV) {
          this.__dirty = true;
        }
        return (this.__textEngine.scrollV = value);
      },
      get_selectable: function () {
        return this.__textEngine.selectable;
      },
      set_selectable: function (value) {
        if (value != this.__textEngine.selectable && this.get_type() == 1) {
          if (this.stage != null && this.stage.get_focus() == this) {
            this.__startTextInput();
          } else if (!value) {
            this.__stopTextInput();
          }
        }
        return (this.__textEngine.selectable = value);
      },
      get_selectionBeginIndex: function () {
        return Math.min(this.__caretIndex, this.__selectionIndex) | 0;
      },
      get_selectionEndIndex: function () {
        return Math.max(this.__caretIndex, this.__selectionIndex) | 0;
      },
      get_sharpness: function () {
        return this.__textEngine.sharpness;
      },
      set_sharpness: function (value) {
        if (value != this.__textEngine.sharpness) {
          this.__dirty = true;
        }
        return (this.__textEngine.sharpness = value);
      },
      get_text: function () {
        return this.__text;
      },
      set_text: function (value) {
        if (this.__isHTML || this.__text != value) {
          this.__dirty = true;
          this.__layoutDirty = true;
        } else {
          return value;
        }
        if (this.__textEngine.textFormatRanges.get_length() > 1) {
          this.__textEngine.textFormatRanges.splice(
            1,
            this.__textEngine.textFormatRanges.get_length() - 1
          );
        }
        var range = this.__textEngine.textFormatRanges.get(0);
        range.format = this.__textFormat;
        range.start = 0;
        range.end = value.length;
        this.__isHTML = false;
        this.__updateText(value);
        return value;
      },
      get_textColor: function () {
        return this.__textFormat.color;
      },
      set_textColor: function (value) {
        if (value != this.__textFormat.color) {
          this.__dirty = true;
        }
        var _g = 0;
        var _g1 = this.__textEngine.textFormatRanges;
        while (_g < _g1.get_length()) {
          var range = _g1.get(_g);
          ++_g;
          range.format.color = value;
        }
        return (this.__textFormat.color = value);
      },
      get_textWidth: function () {
        this.__updateLayout();
        return this.__textEngine.textWidth;
      },
      get_textHeight: function () {
        this.__updateLayout();
        return this.__textEngine.textHeight;
      },
      get_type: function () {
        return this.__textEngine.type;
      },
      set_type: function (value) {
        if (value != this.__textEngine.type) {
          if (value == 1) {
            this.addEventListener("focusIn", $bind(this, this.this_onFocusIn));
            this.addEventListener(
              "focusOut",
              $bind(this, this.this_onFocusOut)
            );
            this.addEventListener(
              "addedToStage",
              $bind(this, this.this_onAddedToStage)
            );
            this.this_onFocusIn(null);
            this.__textEngine.__useIntAdvances = true;
          } else {
            this.removeEventListener(
              "focusIn",
              $bind(this, this.this_onFocusIn)
            );
            this.removeEventListener(
              "focusOut",
              $bind(this, this.this_onFocusOut)
            );
            this.removeEventListener(
              "addedToStage",
              $bind(this, this.this_onAddedToStage)
            );
            this.__stopTextInput();
            this.__textEngine.__useIntAdvances = null;
          }
          this.__dirty = true;
        }
        return (this.__textEngine.type = value);
      },
      get_width: function () {
        this.__updateLayout();
        return this.__textEngine.width * Math.abs(this.__scaleX);
      },
      set_width: function (value) {
        if (value != this.__textEngine.width) {
          if (!this.__transformDirty) {
            this.__transformDirty = true;
            openfl_display_DisplayObject.__worldTransformDirty++;
          }
          this.__dirty = true;
          this.__layoutDirty = true;
          this.__textEngine.width = value;
        }
        return this.__textEngine.width * Math.abs(this.__scaleX);
      },
      get_wordWrap: function () {
        return this.__textEngine.wordWrap;
      },
      set_wordWrap: function (value) {
        if (value != this.__textEngine.wordWrap) {
          this.__dirty = true;
          this.__layoutDirty = true;
        }
        return (this.__textEngine.wordWrap = value);
      },
      stage_onMouseMove: function (event) {
        if (this.stage == null) {
          return;
        }
        if (this.__textEngine.selectable && this.__selectionIndex >= 0) {
          this.__updateLayout();
          var position = this.__getPosition(
            this.get_mouseX(),
            this.get_mouseY()
          );
          if (position != this.__caretIndex) {
            this.__caretIndex = position;
            this.__dirty = true;
          }
        }
      },
      stage_onMouseUp: function (event) {
        if (this.stage == null) {
          return;
        }
        this.stage.removeEventListener(
          "mouseMove",
          $bind(this, this.stage_onMouseMove)
        );
        this.stage.removeEventListener(
          "mouseUp",
          $bind(this, this.stage_onMouseUp)
        );
        if (this.stage.get_focus() == this) {
          this.__getWorldTransform();
          this.__updateLayout();
          var _this = this.__worldTransform;
          var px = this.get_x();
          var py = this.get_y();
          var norm = _this.a * _this.d - _this.b * _this.c;
          var px1 =
            norm == 0
              ? -_this.tx
              : (1.0 / norm) *
                (_this.c * (_this.ty - py) + _this.d * (px - _this.tx));
          var _this1 = this.__worldTransform;
          var px2 = this.get_x();
          var py1 = this.get_y();
          var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
          var py2 =
            norm1 == 0
              ? -_this1.ty
              : (1.0 / norm1) *
                (_this1.a * (py1 - _this1.ty) + _this1.b * (_this1.tx - px2));
          var upPos = this.__getPosition(this.get_mouseX(), this.get_mouseY());
          var leftPos;
          var rightPos;
          leftPos = Math.min(this.__selectionIndex, upPos) | 0;
          rightPos = Math.max(this.__selectionIndex, upPos) | 0;
          this.__selectionIndex = leftPos;
          this.__caretIndex = rightPos;
          if (this.__inputEnabled) {
            this.this_onFocusIn(null);
            this.__stopCursorTimer();
            this.__startCursorTimer();
          }
        }
      },
      this_onAddedToStage: function (event) {
        this.this_onFocusIn(null);
      },
      this_onFocusIn: function (event) {
        if (
          this.get_selectable() &&
          this.get_type() == 1 &&
          this.stage != null &&
          this.stage.get_focus() == this
        ) {
          this.__startTextInput();
        }
      },
      this_onFocusOut: function (event) {
        this.__stopTextInput();
      },
      this_onMouseDown: function (event) {
        if (!this.get_selectable()) {
          return;
        }
        this.__updateLayout();
        this.__caretIndex = this.__getPosition(
          this.get_mouseX(),
          this.get_mouseY()
        );
        this.__selectionIndex = this.__caretIndex;
        this.__dirty = true;
        this.stage.addEventListener(
          "mouseMove",
          $bind(this, this.stage_onMouseMove)
        );
        this.stage.addEventListener(
          "mouseUp",
          $bind(this, this.stage_onMouseUp)
        );
      },
      window_onKeyDown: function (key, modifier) {
        switch (key) {
          case 8:
            if (
              this.__selectionIndex == this.__caretIndex &&
              this.__caretIndex > 0
            ) {
              this.__selectionIndex = this.__caretIndex - 1;
            }
            if (this.__selectionIndex != this.__caretIndex) {
              this.replaceSelectedText("");
              this.__selectionIndex = this.__caretIndex;
              this.dispatchEvent(new openfl_events_Event("change", true));
            }
            break;
          case 97:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) ||
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)
            ) {
              this.__caretIndex = this.__text.length;
              this.__selectionIndex = 0;
            }
            break;
          case 99:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) ||
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)
            ) {
              lime_system_Clipboard.set_text(
                this.__text.substring(this.__caretIndex, this.__selectionIndex)
              );
            }
            break;
          case 120:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) ||
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)
            ) {
              lime_system_Clipboard.set_text(
                this.__text.substring(this.__caretIndex, this.__selectionIndex)
              );
              if (this.__caretIndex != this.__selectionIndex) {
                this.replaceSelectedText("");
                this.dispatchEvent(new openfl_events_Event("change", true));
              }
            }
            break;
          case 127:
            if (
              this.__selectionIndex == this.__caretIndex &&
              this.__caretIndex < this.__text.length
            ) {
              this.__selectionIndex = this.__caretIndex + 1;
            }
            if (this.__selectionIndex != this.__caretIndex) {
              this.replaceSelectedText("");
              this.__selectionIndex = this.__caretIndex;
              this.dispatchEvent(new openfl_events_Event("change", true));
            }
            break;
          case 1073741898:
            this.__caretBeginningOfLine();
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 1073741901:
            this.__caretEndOfLine();
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 1073741903:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)
            ) {
              this.__caretEndOfLine();
              if (
                !lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(
                  modifier
                )
              ) {
                this.__selectionIndex = this.__caretIndex;
              }
            } else if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)
            ) {
              this.__caretNextCharacter();
            } else {
              if (this.__selectionIndex == this.__caretIndex) {
                this.__caretNextCharacter();
              } else {
                this.__caretIndex =
                  Math.max(this.__caretIndex, this.__selectionIndex) | 0;
              }
              this.__selectionIndex = this.__caretIndex;
            }
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 1073741904:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)
            ) {
              this.__caretBeginningOfLine();
              if (
                !lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(
                  modifier
                )
              ) {
                this.__selectionIndex = this.__caretIndex;
              }
            } else if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)
            ) {
              this.__caretPreviousCharacter();
            } else {
              if (this.__selectionIndex == this.__caretIndex) {
                this.__caretPreviousCharacter();
              } else {
                this.__caretIndex =
                  Math.min(this.__caretIndex, this.__selectionIndex) | 0;
              }
              this.__selectionIndex = this.__caretIndex;
            }
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 1073741905:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)
            ) {
              this.__caretNextLine();
            } else {
              if (this.__selectionIndex == this.__caretIndex) {
                this.__caretNextLine();
              } else {
                var lineIndex = this.getLineIndexOfChar(
                  Math.max(this.__caretIndex, this.__selectionIndex) | 0
                );
                this.__caretNextLine(
                  lineIndex,
                  Math.min(this.__caretIndex, this.__selectionIndex) | 0
                );
              }
              this.__selectionIndex = this.__caretIndex;
            }
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 1073741906:
            if (
              lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)
            ) {
              this.__caretPreviousLine();
            } else {
              if (this.__selectionIndex == this.__caretIndex) {
                this.__caretPreviousLine();
              } else {
                var lineIndex1 = this.getLineIndexOfChar(
                  Math.min(this.__caretIndex, this.__selectionIndex) | 0
                );
                this.__caretPreviousLine(
                  lineIndex1,
                  Math.min(this.__caretIndex, this.__selectionIndex) | 0
                );
              }
              this.__selectionIndex = this.__caretIndex;
            }
            this.__stopCursorTimer();
            this.__startCursorTimer();
            break;
          case 13:
          case 1073741912:
            if (this.__textEngine.multiline) {
              this.replaceSelectedText("\n");
              this.dispatchEvent(new openfl_events_Event("change", true));
            }
            break;
          default:
        }
      },
      window_onTextInput: function (value) {
        this.replaceSelectedText(value);
        this.dispatchEvent(new openfl_events_Event("change", true));
      },
      __class__: openfl_text_TextField,
      __properties__: $extend(
        openfl_display_InteractiveObject.prototype.__properties__,
        {
          set_wordWrap: "set_wordWrap",
          get_wordWrap: "get_wordWrap",
          set_type: "set_type",
          get_type: "get_type",
          get_textWidth: "get_textWidth",
          get_textHeight: "get_textHeight",
          set_textColor: "set_textColor",
          get_textColor: "get_textColor",
          set_text: "set_text",
          get_text: "get_text",
          set_sharpness: "set_sharpness",
          get_sharpness: "get_sharpness",
          get_selectionEndIndex: "get_selectionEndIndex",
          get_selectionBeginIndex: "get_selectionBeginIndex",
          set_selectable: "set_selectable",
          get_selectable: "get_selectable",
          set_scrollV: "set_scrollV",
          get_scrollV: "get_scrollV",
          set_scrollH: "set_scrollH",
          get_scrollH: "get_scrollH",
          set_restrict: "set_restrict",
          get_restrict: "get_restrict",
          get_numLines: "get_numLines",
          set_multiline: "set_multiline",
          get_multiline: "get_multiline",
          set_mouseWheelEnabled: "set_mouseWheelEnabled",
          get_mouseWheelEnabled: "get_mouseWheelEnabled",
          get_maxScrollV: "get_maxScrollV",
          get_maxScrollH: "get_maxScrollH",
          set_maxChars: "set_maxChars",
          get_maxChars: "get_maxChars",
          get_length: "get_length",
          set_htmlText: "set_htmlText",
          get_htmlText: "get_htmlText",
          set_gridFitType: "set_gridFitType",
          get_gridFitType: "get_gridFitType",
          set_embedFonts: "set_embedFonts",
          get_embedFonts: "get_embedFonts",
          set_displayAsPassword: "set_displayAsPassword",
          get_displayAsPassword: "get_displayAsPassword",
          set_defaultTextFormat: "set_defaultTextFormat",
          get_defaultTextFormat: "get_defaultTextFormat",
          get_caretIndex: "get_caretIndex",
          get_bottomScrollV: "get_bottomScrollV",
          set_borderColor: "set_borderColor",
          get_borderColor: "get_borderColor",
          set_border: "set_border",
          get_border: "get_border",
          set_backgroundColor: "set_backgroundColor",
          get_backgroundColor: "get_backgroundColor",
          set_background: "set_background",
          get_background: "get_background",
          set_autoSize: "set_autoSize",
          get_autoSize: "get_autoSize",
          set_antiAliasType: "set_antiAliasType",
          get_antiAliasType: "get_antiAliasType",
        }
      ),
    }
  );
  var BaseText = function (
    fontName,
    size,
    color,
    allowSelectable,
    formatAutoSize,
    formatAlign
  ) {
    if (allowSelectable == null) {
      allowSelectable = false;
    }
    openfl_text_TextField.call(this);
    this.formatTxt = new openfl_text_TextFormat(
      openfl_utils_Assets.getFont("fonts/" + fontName).name,
      size,
      color
    );
    if (formatAutoSize == null) {
      this.set_autoSize(0);
    } else {
      this.set_autoSize(formatAutoSize);
    }
    if (formatAlign == null) {
      this.formatTxt.align = 1;
    } else {
      this.formatTxt.align = formatAlign;
    }
    this.set_embedFonts(true);
    this.set_selectable(allowSelectable);
    this.set_defaultTextFormat(this.formatTxt);
  };
  $hxClasses["BaseText"] = BaseText;
  BaseText.__name__ = ["BaseText"];
  BaseText.__super__ = openfl_text_TextField;
  BaseText.prototype = $extend(openfl_text_TextField.prototype, {
    formatTxt: null,
    glowFilter: function (
      color,
      alpha,
      blurX,
      blurY,
      strength,
      quality,
      inner,
      knockout
    ) {
      if (knockout == null) {
        knockout = false;
      }
      if (inner == null) {
        inner = false;
      }
      if (quality == null) {
        quality = 1;
      }
      if (strength == null) {
        strength = 5;
      }
      if (blurY == null) {
        blurY = 5;
      }
      if (blurX == null) {
        blurX = 5;
      }
      if (alpha == null) {
        alpha = 1;
      }
    },
    __class__: BaseText,
  });
  var Collection = function () {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Collection.CollectionGlobal = this;
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Collection"] = Collection;
  Collection.__name__ = ["Collection"];
  Collection.GetInstance = function () {
    return Collection.CollectionGlobal;
  };
  Collection.__super__ = BaseSprite;
  Collection.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sptBG: null,
    sptGroup: null,
    btnBack: null,
    btnMoreGames: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sptBG = Global.loadImage("images", "bg_intro.png");
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.btnBack = Global.createButtonSheet(
        this.sheetButton,
        "btn_back1.png",
        "btn_back2.png",
        "btn_back2.png"
      );
      this.btnMoreGames = Global.createButtonSheet(
        this.sheetButton,
        "btn_moregames1.png",
        "btn_moregames2.png",
        "btn_moregames2.png"
      );
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      var papan = Global.loadImage("images", "papan.png");
      papan.set_x(26);
      papan.set_y(13);
      this.sptGroup.addChild(papan);
      var shine = Global.loadImage("images", "bg_cahaya.png");
      shine.set_x(-204);
      shine.set_y(-180);
      this.sptGroup.addChild(shine);
      var judul = Global.loadImage("images", "ket_collect.png");
      judul.set_x(195);
      judul.set_y(30);
      this.sptGroup.addChild(judul);
      var bgPol = Global.loadImage("images", "bg_polaroid.png");
      bgPol.set_x(116);
      bgPol.set_y(138);
      this.sptGroup.addChild(bgPol);
      var _g = 1;
      while (_g < 11) {
        var i = _g++;
        var photo;
        if (DataGame.koleksiEnding[i - 1] == false) {
          photo = Global.loadImage("images", "photo0.png");
        } else {
          photo = Global.loadImage("images", "photo" + i + ".png");
        }
        photo.set_x(
          Reflect.field(Reflect.field(DataPosition, "PHOTO" + i), "x")
        );
        photo.set_y(
          Reflect.field(Reflect.field(DataPosition, "PHOTO" + i), "y")
        );
        this.sptGroup.addChild(photo);
      }
      this.btnMoreGames.set_x(186);
      this.btnMoreGames.set_y(394);
      this.sptGroup.addChild(this.btnMoreGames);
      this.btnBack.set_x(407);
      this.btnBack.set_y(394);
      this.sptGroup.addChild(this.btnBack);
      if (Y8Api.isSponsor == true) {
        this.btnMoreGames.set_visible(false);
        this.btnBack.set_x(300);
      }
    },
    assetsAddEventListener: function () {
      this.btnBack.addEventListener(
        "click",
        $bind(this, this.onBackWindow),
        false,
        0,
        true
      );
      this.btnMoreGames.addEventListener(
        "click",
        Global.moreGames,
        false,
        0,
        true
      );
    },
    onBackWindow: function (e) {
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
      Main.GetInstance().changeWindow("Collection", "Result");
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      this.btnBack.removeEventListener("click", $bind(this, this.onBackWindow));
      this.btnMoreGames.removeEventListener("click", Global.moreGames);
      Global.killChildren(this, false);
      this.sptBG = null;
      this.sptGroup = null;
    },
    Update: function (e) {},
    __class__: Collection,
  });
  var DataGame = function () {};
  $hxClasses["DataGame"] = DataGame;
  DataGame.__name__ = ["DataGame"];
  var openfl_geom_Point = function (x, y) {
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.x = x;
    this.y = y;
  };
  $hxClasses["openfl.geom.Point"] = openfl_geom_Point;
  openfl_geom_Point.__name__ = ["openfl", "geom", "Point"];
  openfl_geom_Point.distance = function (pt1, pt2) {
    var dx = pt1.x - pt2.x;
    var dy = pt1.y - pt2.y;
    return Math.sqrt(dx * dx + dy * dy);
  };
  openfl_geom_Point.interpolate = function (pt1, pt2, f) {
    return new openfl_geom_Point(
      pt2.x + f * (pt1.x - pt2.x),
      pt2.y + f * (pt1.y - pt2.y)
    );
  };
  openfl_geom_Point.polar = function (len, angle) {
    return new openfl_geom_Point(len * Math.cos(angle), len * Math.sin(angle));
  };
  openfl_geom_Point.prototype = {
    x: null,
    y: null,
    add: function (v) {
      return new openfl_geom_Point(v.x + this.x, v.y + this.y);
    },
    clone: function () {
      return new openfl_geom_Point(this.x, this.y);
    },
    copyFrom: function (sourcePoint) {
      this.x = sourcePoint.x;
      this.y = sourcePoint.y;
    },
    equals: function (toCompare) {
      if (toCompare != null && toCompare.x == this.x) {
        return toCompare.y == this.y;
      } else {
        return false;
      }
    },
    normalize: function (thickness) {
      if (this.x == 0 && this.y == 0) {
        return;
      } else {
        var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
        this.x *= norm;
        this.y *= norm;
      }
    },
    offset: function (dx, dy) {
      this.x += dx;
      this.y += dy;
    },
    setTo: function (xa, ya) {
      this.x = xa;
      this.y = ya;
    },
    subtract: function (v) {
      return new openfl_geom_Point(this.x - v.x, this.y - v.y);
    },
    toString: function () {
      return "(x=" + this.x + ", y=" + this.y + ")";
    },
    __toLimeVector2: function () {
      if (openfl_geom_Point.__limeVector2 == null) {
        openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
      }
      var _this = openfl_geom_Point.__limeVector2;
      _this.x = this.x;
      _this.y = this.y;
      return openfl_geom_Point.__limeVector2;
    },
    get_length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    __class__: openfl_geom_Point,
    __properties__: { get_length: "get_length" },
  };
  var DataPosition = function () {};
  $hxClasses["DataPosition"] = DataPosition;
  DataPosition.__name__ = ["DataPosition"];
  var js_Browser = function () {};
  $hxClasses["js.Browser"] = js_Browser;
  js_Browser.__name__ = ["js", "Browser"];
  js_Browser.getLocalStorage = function () {
    try {
      var s = window.localStorage;
      s.getItem("");
      return s;
    } catch (e) {
      haxe_CallStack.lastException = e;
      return null;
    }
  };
  js_Browser.alert = function (v) {
    window.alert(js_Boot.__string_rec(v, ""));
  };
  var DataSave = function () {};
  $hxClasses["DataSave"] = DataSave;
  DataSave.__name__ = ["DataSave"];
  DataSave.loadData = function (nama) {
    if (nama == "datagame") {
      DataGame.totalPlayGame = DataSave.saveData.totalPlayGame;
      DataGame.totalPushButton = DataSave.saveData.totalPushButton;
      DataGame.totalOnOffSound = DataSave.saveData.totalOnOffSound;
      DataGame.bolTouchBotol = DataSave.saveData.bolTouchBotol;
      DataGame.koleksiEnding = DataSave.saveData.koleksiEnding;
    } else {
      DataSave.saveData.totalPlayGame = DataGame.totalPlayGame;
      DataSave.saveData.totalPushButton = DataGame.totalPushButton;
      DataSave.saveData.totalOnOffSound = DataGame.totalOnOffSound;
      DataSave.saveData.bolTouchBotol = DataGame.bolTouchBotol;
      DataSave.saveData.koleksiEnding = DataGame.koleksiEnding;
    }
  };
  DataSave.loadGame = function () {
    if (Y8Api.isSaveOnline) {
      Y8Api.retrieveSave(Setting.saveName);
    } else {
      DataSave.loadLocal();
    }
    Global.log("LOAD GAME = " + JSON.stringify(DataSave.saveData));
  };
  DataSave.saveGame = function () {
    if (Y8Api.isSaveOnline) {
      DataSave.saveOnline();
    } else {
      DataSave.saveLocal();
    }
  };
  DataSave.saveAchievements = function (idx, functionComplete) {
    if (DataSave.achievements[idx] == false) {
      DataSave.achievements[idx] = true;
      Main.GetInstance().addChild(
        new Y8AchievementsNotification(idx + 1, functionComplete)
      );
      if (Y8Api.isLogin == true) {
        Y8Api.submitAchievements(
          Setting.achievementsData[idx].name,
          Setting.achievementsData[idx].key
        );
      } else {
        DataSave.saveLocalAchievements();
      }
    } else {
      functionComplete();
    }
  };
  DataSave.loadAchievements = function () {
    Global.log("load achieve");
    if (Y8Api.isLogin == true) {
      Y8Api.retrieveAchievements();
      Global.log("Y8 load achieve");
    } else {
      DataSave.loadLocalAchievements();
      Global.log("LOCAL load achieve");
    }
  };
  DataSave.loadLocal = function () {
    var dataStorage = JSON.parse(
      DataSave.localStorage.getItem(Setting.saveName)
    );
    if (dataStorage != null) {
      DataSave.saveData = dataStorage;
      DataSave.loadData("datagame");
    }
  };
  DataSave.saveLocal = function () {
    DataSave.loadData("savedata");
    DataSave.localStorage.setItem(
      Setting.saveName,
      JSON.stringify(DataSave.saveData)
    );
  };
  DataSave.loadOnline = function (jsondata) {
    Global.log("load online success " + Std.string(jsondata));
    DataSave.saveData = jsondata;
    DataSave.loadData("datagame");
  };
  DataSave.saveOnline = function () {
    DataSave.loadData("savedata");
    Y8Api.submitSave(Setting.saveName, DataSave.saveData);
  };
  DataSave.saveLocalAchievements = function () {
    DataSave.localStorage.setItem(
      Setting.achievementsName,
      JSON.stringify(DataSave.achievements)
    );
  };
  DataSave.loadLocalAchievements = function () {
    var dataStorage = JSON.parse(
      DataSave.localStorage.getItem(Setting.achievementsName)
    );
    if (dataStorage != null) {
      DataSave.achievements = dataStorage;
    }
  };
  DataSave.loadOnlineAchievements = function (data) {
    Global.log("load online achievements");
    if (data.achievements != null) {
      var _g1 = 0;
      var _g = data.achievements.length;
      while (_g1 < _g) {
        var i = _g1++;
        Global.log(
          "achievements " +
            data.achievements[i].achievement +
            " = " +
            JSON.stringify(data.achievements[i].player)
        );
        if (
          data.achievements[i].achievementkey == Setting.achievementsData[0].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[0] = true;
          } else {
            DataSave.achievements[0] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[1].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[1] = true;
          } else {
            DataSave.achievements[1] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[2].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[2] = true;
          } else {
            DataSave.achievements[2] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[3].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[3] = true;
          } else {
            DataSave.achievements[3] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[4].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[4] = true;
          } else {
            DataSave.achievements[4] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[5].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[5] = true;
          } else {
            DataSave.achievements[5] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[6].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[6] = true;
          } else {
            DataSave.achievements[6] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[7].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[7] = true;
          } else {
            DataSave.achievements[7] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[8].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[8] = true;
          } else {
            DataSave.achievements[8] = false;
          }
        } else if (
          data.achievements[i].achievementkey == Setting.achievementsData[9].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[9] = true;
          } else {
            DataSave.achievements[9] = false;
          }
        } else if (
          data.achievements[i].achievementkey ==
          Setting.achievementsData[10].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[10] = true;
          } else {
            DataSave.achievements[10] = false;
          }
        } else if (
          data.achievements[i].achievementkey ==
          Setting.achievementsData[11].key
        ) {
          if (data.achievements[i].player != null) {
            DataSave.achievements[11] = true;
          } else {
            DataSave.achievements[11] = false;
          }
        }
      }
    }
  };
  var Ending = function () {
    this.warnaNow = 0;
    this.arrWarna = [16711680, 65280, 255, 16776960, 65535];
    this.counterWarna = 0;
    this.bolWarna = false;
    this.counterIdle = 0;
    this.bolIdle = false;
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Ending.EndingGlobal = this;
    this.bolIdle = false;
    this.counterIdle = 0;
    DataGame.koleksiEnding[DataGame.noEnding - 1] = true;
    DataSave.saveGame();
    if (
      DataGame.koleksiEnding.indexOf(false) < 0 &&
      DataSave.achievements[10] == false
    ) {
      DataSave.saveAchievements(10, function () {});
    }
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
  };
  $hxClasses["Ending"] = Ending;
  Ending.__name__ = ["Ending"];
  Ending.GetInstance = function () {
    return Ending.EndingGlobal;
  };
  Ending.__super__ = BaseSprite;
  Ending.prototype = $extend(BaseSprite.prototype, {
    bgWarna: null,
    warnaMeja: null,
    bolIdle: null,
    counterIdle: null,
    bolWarna: null,
    counterWarna: null,
    arrWarna: null,
    warnaNow: null,
    assetsLoad: function () {},
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      var _gthis = this;
      if (DataGame.noEnding == 2) {
        SoundGame.playSFX("sounds", "ending21", DataGame.volEnding2, 0.7);
        SoundGame.playSFX("sounds", "ending2", DataGame.volEnding2, 2.2);
        var animA = new BaseAnimation(
          "images/ending/endinga2.png",
          "images/ending/endinga2.json"
        );
        var animB = new BaseAnimation(
          "images/ending/endingb2.png",
          "images/ending/endingb2.json"
        );
        animB.addBehavior("anim ending", 0, 178, false);
        animB.animated.showBehavior("anim ending");
        animA.addBehavior("anim ending", 0, 178, false);
        animA.animated.showBehavior("anim ending");
        animA.animated.addEventListener("complete", function (e) {
          _gthis.bolIdle = true;
        });
        animB.set_x(617);
        animB.set_y(14);
        this.addChild(animB);
        animA.set_x(422);
        animA.set_y(-205);
        this.addChild(animA);
        var meja = Global.loadImage("images/char", "meja.png");
        meja.set_x(464);
        meja.set_y(321);
        this.addChild(meja);
      } else if (DataGame.noEnding == 3) {
        SoundGame.playSFX("sounds", "ending3", DataGame.volEnding3, 0.7);
        var animA1 = new BaseAnimation(
          "images/ending/endinga3.png",
          "images/ending/endinga3.json"
        );
        var animB1 = new BaseAnimation(
          "images/ending/endingb3.png",
          "images/ending/endingb3.json"
        );
        animB1.addBehavior("anim ending", 0, 190, false);
        animB1.animated.showBehavior("anim ending");
        animA1.addBehavior("anim ending", 0, 190, false);
        animA1.animated.showBehavior("anim ending");
        animA1.animated.addEventListener("complete", function (e1) {
          _gthis.bolIdle = true;
        });
        animB1.set_x(617);
        animB1.set_y(26);
        this.addChild(animB1);
        animA1.set_x(654);
        animA1.set_y(14);
        this.addChild(animA1);
        var meja1 = Global.loadImage("images/char", "meja.png");
        meja1.set_x(464);
        meja1.set_y(321);
        this.addChild(meja1);
      } else if (DataGame.noEnding == 4) {
        SoundGame.playSFX("sounds", "scream", DataGame.volScream, 2.46);
        SoundGame.playSFX("sounds", "horror", DataGame.volHorror, 2.63);
        var animA2 = new BaseAnimation(
          "images/ending/endinga4.png",
          "images/ending/endinga4.json"
        );
        var animB11 = new BaseAnimation(
          "images/ending/endingb41.png",
          "images/ending/endingb41.json"
        );
        var animB2 = new BaseAnimation(
          "images/ending/endingb42.png",
          "images/ending/endingb42.json"
        );
        var bgEnd = Global.loadImage("images/ending", "bg_ending4.png");
        animB11.addBehavior("anim ending", 0, 139, false);
        animB11.animated.showBehavior("anim ending");
        animB2.addBehavior("anim ending", 0, 139, false);
        animB2.animated.showBehavior("anim ending");
        animA2.addBehavior("anim ending", 0, 139, false);
        animA2.animated.showBehavior("anim ending");
        animA2.animated.addEventListener("complete", function (e2) {
          _gthis.bolIdle = true;
        });
        animB11.set_x(616);
        animB11.set_y(14);
        this.addChild(animB11);
        animB2.set_x(641);
        animB2.set_y(423);
        this.addChild(animB2);
        var meja2 = Global.loadImage("images/char", "meja.png");
        meja2.set_x(464);
        meja2.set_y(321);
        this.addChild(meja2);
        bgEnd.set_x(-300);
        bgEnd.set_y(-180);
        this.addChild(bgEnd);
        bgEnd.set_alpha(0);
        motion_Actuate
          .tween(bgEnd, 0.8, { alpha: 1 })
          .ease(motion_easing_Linear.get_easeNone())
          .delay(2.6);
        animA2.set_x(422);
        animA2.set_y(-205);
        this.addChild(animA2);
      } else if (DataGame.noEnding == 5) {
        SoundGame.playSFX("sounds", "puke", DataGame.volPuke);
        SoundGame.playSFX("sounds", "ah", DataGame.volAh, 1.7);
        var a = new openfl_display_Sprite();
        motion_Actuate.tween(a, 1.7, { x: 0 }).onComplete(function () {
          SoundGame.playLOOP("sounds", "rainbow", DataGame.volRainbow);
        });
        var animB3 = new BaseAnimation(
          "images/ending/endingb5.png",
          "images/ending/endingb5.json"
        );
        animB3.addBehavior("anim ending", 0, 49, false);
        animB3.animated.showBehavior("anim ending");
        animB3.animated.addEventListener("complete", function (e3) {
          animB3.set_visible(false);
          _gthis.bgWarna = new openfl_display_Sprite();
          _gthis.bgWarna
            .get_graphics()
            .beginFill(_gthis.arrWarna[_gthis.warnaNow], 0.5);
          _gthis.bgWarna.get_graphics().drawRect(0, 0, 1400, 840);
          _gthis.bgWarna.set_x(-300);
          _gthis.bgWarna.set_y(-180);
          _gthis.addChild(_gthis.bgWarna);
          var badan = Global.loadImage("images/ending", "badan5.png");
          badan.set_x(581);
          badan.set_y(203);
          _gthis.addChild(badan);
          var kepala = new BaseAnimation(
            "images/ending/kepala5.png",
            "images/ending/kepala5.json"
          );
          kepala.addBehavior("anim kepala", 0, 7, true);
          kepala.animated.showBehavior("anim kepala");
          kepala.set_x(-114);
          kepala.set_y(28);
          _gthis.addChild(kepala);
          var mejaKecil = Global.loadImage("images/ending", "meja_kecil5.png");
          mejaKecil.set_x(464);
          mejaKecil.set_y(258);
          _gthis.addChild(mejaKecil);
          _gthis.warnaMeja = new openfl_display_Sprite();
          _gthis.warnaMeja
            .get_graphics()
            .beginFill(_gthis.arrWarna[_gthis.warnaNow], 0.5);
          _gthis.warnaMeja.get_graphics().drawRect(0, 0, 338, 106);
          _gthis.warnaMeja.set_x(464);
          _gthis.warnaMeja.set_y(343);
          _gthis.addChild(_gthis.warnaMeja);
          _gthis.counterWarna = 0;
          _gthis.bolWarna = true;
        });
        animB3.set_x(616);
        animB3.set_y(14);
        this.addChild(animB3);
        var meja3 = Global.loadImage("images/char", "meja.png");
        meja3.set_x(464);
        meja3.set_y(321);
        this.addChild(meja3);
      } else if (DataGame.noEnding == 6) {
        SoundGame.playSFX("sounds", "ending6", DataGame.volEnding6, 1);
        var animA3 = new BaseAnimation(
          "images/ending/ending62.png",
          "images/ending/ending62.json"
        );
        var animB4 = new BaseAnimation(
          "images/ending/ending61.png",
          "images/ending/ending61.json"
        );
        animB4.addBehavior("anim ending1", 0, 136, false);
        animB4.animated.showBehavior("anim ending1");
        animA3.addBehavior("idle", 0, 0, false);
        animA3.addBehavior("anim ending2", 0, 93, false);
        animA3.animated.showBehavior("idle");
        animB4.animated.addEventListener("complete", function (e4) {
          animB4.set_visible(false);
          animA3.set_visible(true);
          animA3.animated.showBehavior("anim ending2");
          animA3.animated.addEventListener("complete", function (e5) {
            _gthis.bolIdle = true;
          });
        });
        animB4.set_x(616);
        animB4.set_y(14);
        this.addChild(animB4);
        animA3.set_x(610);
        animA3.set_y(-3);
        this.addChild(animA3);
        animA3.set_visible(false);
        var meja4 = Global.loadImage("images/char", "meja.png");
        meja4.set_x(464);
        meja4.set_y(321);
        this.addChild(meja4);
      } else if (DataGame.noEnding == 7) {
        SoundGame.playSFX(
          "sounds",
          "ending7",
          DataGame.volEnding7,
          1.5333333333333334
        );
        var anim1 = new BaseAnimation(
          "images/ending/ending71.png",
          "images/ending/ending71.json"
        );
        var anim2 = new BaseAnimation(
          "images/ending/ending72.png",
          "images/ending/ending72.json"
        );
        var anim3 = new BaseAnimation(
          "images/ending/ending73.png",
          "images/ending/ending73.json"
        );
        var anim4 = new BaseAnimation(
          "images/ending/ending74.png",
          "images/ending/ending74.json"
        );
        anim1.addBehavior("anim ending", 0, 168, false);
        anim1.animated.showBehavior("anim ending");
        anim2.addBehavior("anim ending", 0, 168, false);
        anim2.animated.showBehavior("anim ending");
        anim3.addBehavior("anim ending", 0, 168, false);
        anim3.animated.showBehavior("anim ending");
        anim4.addBehavior("anim ending", 0, 168, false);
        anim4.animated.showBehavior("anim ending");
        anim1.animated.addEventListener("complete", function (e6) {
          _gthis.bolIdle = true;
        });
        anim1.set_x(713);
        anim1.set_y(0);
        this.addChild(anim1);
        anim2.set_x(616);
        anim2.set_y(203);
        this.addChild(anim2);
        anim3.set_x(653);
        anim3.set_y(14);
        this.addChild(anim3);
        anim4.set_x(492);
        anim4.set_y(0);
        this.addChild(anim4);
        var meja5 = Global.loadImage("images/char", "meja.png");
        meja5.set_x(464);
        meja5.set_y(321);
        this.addChild(meja5);
      } else if (DataGame.noEnding == 8) {
        SoundGame.playSFX(
          "sounds",
          "ending8",
          DataGame.volEnding8,
          2.3333333333333335
        );
        var animA4 = new BaseAnimation(
          "images/ending/ending8.png",
          "images/ending/ending8.json"
        );
        animA4.addBehavior("anim ending", 0, 191, false);
        animA4.animated.showBehavior("anim ending");
        animA4.animated.addEventListener("complete", function (e7) {
          _gthis.bolIdle = true;
        });
        animA4.set_x(616);
        animA4.set_y(14);
        this.addChild(animA4);
        var meja6 = Global.loadImage("images/char", "meja.png");
        meja6.set_x(464);
        meja6.set_y(321);
        this.addChild(meja6);
      } else if (DataGame.noEnding == 9) {
        SoundGame.playSFX(
          "sounds",
          "ending9",
          DataGame.volEnding9,
          0.066666666666666666
        );
        var a1 = new openfl_display_Sprite();
        motion_Actuate.tween(a1, 2.8, { x: 0 }).onComplete(function () {
          SoundGame.playLOOP("sounds", "torch", DataGame.volTorch);
        });
        var bgItem = new openfl_display_Sprite();
        bgItem.get_graphics().beginFill(0, 0.45);
        bgItem.get_graphics().drawRect(0, 0, 1400, 840);
        bgItem.set_alpha(0);
        bgItem.set_x(-300);
        bgItem.set_y(-180);
        this.addChild(bgItem);
        motion_Actuate
          .tween(bgItem, 0.8, { alpha: 1 })
          .ease(motion_easing_Linear.get_easeNone())
          .delay(1.6333333333333333);
        var anim11 = new BaseAnimation(
          "images/ending/ending91.png",
          "images/ending/ending91.json"
        );
        var anim21 = new BaseAnimation(
          "images/ending/ending92.png",
          "images/ending/ending92.json"
        );
        var anim31 = new BaseAnimation(
          "images/ending/ending93.png",
          "images/ending/ending93.json"
        );
        var anim311 = new BaseAnimation(
          "images/ending/ending931.png",
          "images/ending/ending931.json"
        );
        var anim41 = new BaseAnimation(
          "images/ending/ending94.png",
          "images/ending/ending94.json"
        );
        var anim5 = new BaseAnimation(
          "images/ending/ending95.png",
          "images/ending/ending95.json"
        );
        anim11.addBehavior("loop ending", 86, 149, true);
        anim11.addBehavior("anim ending", 0, 149, false);
        anim11.animated.showBehavior("anim ending");
        anim21.addBehavior("loop ending", 86, 149, true);
        anim21.addBehavior("anim ending", 0, 149, false);
        anim21.animated.showBehavior("anim ending");
        anim31.addBehavior("loop ending", 86, 149, true);
        anim31.addBehavior("anim ending", 0, 149, false);
        anim31.animated.showBehavior("anim ending");
        anim311.addBehavior("loop ending", 86, 149, true);
        anim311.addBehavior("anim ending", 0, 149, false);
        anim311.animated.showBehavior("anim ending");
        anim41.addBehavior("loop ending", 86, 149, true);
        anim41.addBehavior("anim ending", 0, 149, false);
        anim41.animated.showBehavior("anim ending");
        anim5.addBehavior("loop ending", 86, 149, true);
        anim5.addBehavior("anim ending", 0, 149, false);
        anim5.animated.showBehavior("anim ending");
        anim11.animated.addEventListener("complete", function (e8) {
          _gthis.bolIdle = true;
          anim11.animated.showBehavior("loop ending");
          anim21.animated.showBehavior("loop ending");
          anim31.animated.showBehavior("loop ending");
          anim311.animated.showBehavior("loop ending");
          anim41.animated.showBehavior("loop ending");
          anim5.animated.showBehavior("loop ending");
        });
        anim11.set_x(630);
        anim11.set_y(14);
        this.addChild(anim11);
        anim21.set_x(422);
        anim21.set_y(-105);
        this.addChild(anim21);
        anim31.set_x(422);
        anim31.set_y(45);
        this.addChild(anim31);
        anim311.set_x(422);
        anim311.set_y(-55);
        this.addChild(anim311);
        anim41.set_x(422);
        anim41.set_y(-155);
        this.addChild(anim41);
        anim5.set_x(422);
        anim5.set_y(-205);
        this.addChild(anim5);
        var bgDepan = Global.loadImage("images", "bg_depan.png");
        bgDepan.set_x(-300);
        bgDepan.set_y(-180);
        this.addChild(bgDepan);
        var bgIce = Global.loadImage("images", "bg_ice.png");
        bgIce.set_x(38);
        bgIce.set_y(245);
        this.addChild(bgIce);
        var sendokEs = Global.loadImage("images", "sendok_es.png");
        sendokEs.set_x(34);
        sendokEs.set_y(223);
        this.addChild(sendokEs);
        var bgFruit = Global.loadImage("images", "bg_fruit.png");
        bgFruit.set_x(106);
        bgFruit.set_y(279);
        this.addChild(bgFruit);
        var bgItemFire = Global.loadImage("images/ending", "bg_itemfire.png");
        bgItemFire.set_x(-300);
        bgItemFire.set_y(-180);
        this.addChild(bgItemFire);
        bgItemFire.set_alpha(0);
        motion_Actuate
          .tween(bgItemFire, 0.8, { alpha: 1 })
          .ease(motion_easing_Linear.get_easeNone())
          .delay(1.6333333333333333);
      }
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killChildren(this, false);
      this.bgWarna = null;
    },
    Update: function (e) {
      if (this.bolIdle == true) {
        this.counterIdle++;
        if (this.counterIdle == 40) {
          SoundGame.stopLOOP();
          DataGame.totalPlayGame++;
          Main.GetInstance().changeWindow("Game1", "Result");
        }
      }
      if (this.bolWarna == true && this.bgWarna != null) {
        this.counterWarna++;
        if (this.counterWarna % 2 == 0) {
          this.warnaNow++;
          if (this.warnaNow >= 5) {
            this.warnaNow = 0;
          }
          this.bgWarna.get_graphics().clear();
          this.warnaMeja.get_graphics().clear();
          this.bgWarna
            .get_graphics()
            .beginFill(this.arrWarna[this.warnaNow], 0.5);
          this.bgWarna.get_graphics().drawRect(0, 0, 1400, 840);
          this.warnaMeja
            .get_graphics()
            .beginFill(this.arrWarna[this.warnaNow], 0.5);
          this.warnaMeja.get_graphics().drawRect(0, 0, 338, 106);
        }
        if (this.counterWarna == 46) {
          this.bolIdle = true;
        }
      }
    },
    __class__: Ending,
  });
  var Ending1 = function () {
    this.counterIdle = 0;
    this.bolIdle = false;
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Ending1.Ending1Global = this;
    this.bolIdle = false;
    this.counterIdle = 0;
    DataGame.noEnding = 1;
    DataGame.koleksiEnding[0] = true;
    DataSave.saveGame();
    if (
      DataGame.koleksiEnding.indexOf(false) < 0 &&
      DataSave.achievements[10] == false
    ) {
      DataSave.saveAchievements(10, function () {});
    }
    SoundGame.playSFX("sounds", "crack", DataGame.volCrack);
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
  };
  $hxClasses["Ending1"] = Ending1;
  Ending1.__name__ = ["Ending1"];
  Ending1.GetInstance = function () {
    return Ending1.Ending1Global;
  };
  Ending1.__super__ = BaseSprite;
  Ending1.prototype = $extend(BaseSprite.prototype, {
    sheetPiece: null,
    pecahAtas1: null,
    pecahAtas2: null,
    pecahBawah: null,
    meja: null,
    bgPecah: null,
    piece1: null,
    piece2: null,
    piece3: null,
    piece4: null,
    piece5: null,
    piece6: null,
    piece7: null,
    piece8: null,
    piece9: null,
    piece10: null,
    piece11: null,
    piece12: null,
    piece13: null,
    piece14: null,
    piece15: null,
    piece16: null,
    piece17: null,
    piece18: null,
    piece19: null,
    piece20: null,
    piece21: null,
    piece22: null,
    piece23: null,
    piece24: null,
    piece25: null,
    piece26: null,
    piece27: null,
    piece28: null,
    bolIdle: null,
    counterIdle: null,
    assetsLoad: function () {
      this.sheetPiece = new BaseSheet(
        "images/ending1/piece.png",
        "images/ending1/piece.json"
      );
      this.pecahAtas1 = new BaseAnimation(
        "images/ending1/pecaha.png",
        "images/ending1/pecaha.json"
      );
      this.pecahAtas2 = new BaseAnimation(
        "images/ending1/pecahat.png",
        "images/ending1/pecahat.json"
      );
      this.pecahBawah = new BaseAnimation(
        "images/ending1/pecahb.png",
        "images/ending1/pecahb.json"
      );
      this.meja = Global.loadImage("images/ending1", "mejap.png");
      this.bgPecah = Global.loadImage("images/ending1", "bg_pecah.png");
    },
    assetsInitAnimation: function () {
      this.pecahAtas1.addBehavior("anim", 0, 24, false);
      this.pecahAtas1.animated.showBehavior("anim");
      this.pecahAtas2.addBehavior("anim", 0, 24, false);
      this.pecahAtas2.animated.showBehavior("anim");
      this.pecahBawah.addBehavior("anim", 0, 24, false);
      this.pecahBawah.animated.showBehavior("anim");
      this.pecahBawah.animated.addEventListener(
        "complete",
        $bind(this, this.selesaiRetak),
        false,
        0,
        true
      );
    },
    selesaiRetak: function (e) {
      this.pecahAtas1.set_visible(
        this.pecahAtas2.set_visible(
          this.pecahBawah.set_visible(this.meja.set_visible(false))
        )
      );
      this.bgPecah.set_visible(true);
      var _g = 1;
      while (_g < 29) {
        var i = _g++;
        Reflect.setProperty(
          this,
          "piece" + i,
          this.sheetPiece.loadImage("piece" + i + ".png")
        );
        js_Boot
          .__cast(Reflect.field(this, "piece" + i), openfl_display_Sprite)
          .set_x(Reflect.field(Reflect.field(DataPosition, "PIECE" + i), "x"));
        js_Boot
          .__cast(Reflect.field(this, "piece" + i), openfl_display_Sprite)
          .set_y(Reflect.field(Reflect.field(DataPosition, "PIECE" + i), "y"));
        this.addChild(Reflect.field(this, "piece" + i));
        if (i == 1) {
          motion_Actuate
            .tween(
              Reflect.field(this, "piece" + i),
              Reflect.field(
                Reflect.field(DataPosition, "PIECE" + i),
                "durasi"
              ) / 30,
              {
                y: Reflect.field(
                  Reflect.field(DataPosition, "PIECE" + i),
                  "y1"
                ),
              }
            )
            .ease(motion_easing_Quad.get_easeIn())
            .delay(
              Reflect.field(Reflect.field(DataPosition, "PIECE" + i), "delay") /
                30
            )
            .onComplete($bind(this, this.selesaiAnimEnding));
        } else {
          motion_Actuate
            .tween(
              Reflect.field(this, "piece" + i),
              Reflect.field(
                Reflect.field(DataPosition, "PIECE" + i),
                "durasi"
              ) / 30,
              {
                y: Reflect.field(
                  Reflect.field(DataPosition, "PIECE" + i),
                  "y1"
                ),
              }
            )
            .ease(motion_easing_Quad.get_easeIn())
            .delay(
              Reflect.field(Reflect.field(DataPosition, "PIECE" + i), "delay") /
                30
            );
        }
      }
    },
    selesaiAnimEnding: function () {
      this.bolIdle = true;
    },
    assetsAddChild: function () {
      this.pecahBawah.set_x(567);
      this.pecahBawah.set_y(15);
      this.addChild(this.pecahBawah);
      this.meja.set_x(16);
      this.meja.set_y(321);
      this.addChild(this.meja);
      this.pecahAtas1.set_x(295);
      this.pecahAtas1.set_y(117);
      this.addChild(this.pecahAtas1);
      this.pecahAtas2.set_x(-112);
      this.pecahAtas2.set_y(-164);
      this.addChild(this.pecahAtas2);
      this.bgPecah.set_x(-112);
      this.bgPecah.set_y(-161);
      this.addChild(this.bgPecah);
      this.bgPecah.set_visible(false);
    },
    destroy: function () {
      this.RemoveDispatcher();
      this.pecahBawah.animated.removeEventListener(
        "complete",
        $bind(this, this.selesaiRetak)
      );
      Global.killChildren(this, false);
      this.pecahAtas1 = null;
      this.pecahAtas2 = null;
      this.pecahBawah = null;
      this.meja = null;
      var _g = 1;
      while (_g < 29) {
        var i = _g++;
        Reflect.setProperty(this, "piece" + i, null);
      }
    },
    Update: function (e) {
      if (this.bolIdle == true) {
        this.counterIdle++;
        if (this.counterIdle == 40) {
          DataGame.totalPlayGame++;
          Main.GetInstance().changeWindow("Game1", "Result");
        }
      }
    },
    __class__: Ending1,
  });
  var Ending10 = function () {
    this.counterBird = 0;
    this.bolBird = true;
    this.counterIdle = 0;
    this.bolIdle = false;
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Ending10.Ending10Global = this;
    DataGame.noEnding = 10;
    DataGame.koleksiEnding[9] = true;
    DataSave.saveGame();
    DataSave.saveAchievements(7, function () {
      if (
        DataGame.koleksiEnding.indexOf(false) < 0 &&
        DataSave.achievements[10] == false
      ) {
        DataSave.saveAchievements(10, function () {});
      }
    });
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
  };
  $hxClasses["Ending10"] = Ending10;
  Ending10.__name__ = ["Ending10"];
  Ending10.GetInstance = function () {
    return Ending10.Ending10Global;
  };
  Ending10.__super__ = BaseSprite;
  Ending10.prototype = $extend(BaseSprite.prototype, {
    sheetBotol: null,
    bgBiru: null,
    bgJingga: null,
    matahari: null,
    awan: null,
    bgTengahB: null,
    bgTengahJ: null,
    bartender: null,
    silau: null,
    bolIdle: null,
    counterIdle: null,
    bolBird: null,
    counterBird: null,
    assetsLoad: function () {
      this.bgBiru = Global.loadImage("images/ending10", "bg_biru.png");
      this.bgJingga = Global.loadImage("images/ending10", "bg_jingga.png");
      this.matahari = Global.loadImage("images/ending10", "matahari.png");
      this.awan = Global.loadImage("images/ending10", "awan.png");
      this.bgTengahB = Global.loadImage("images/ending10", "bg_tengahbiru.png");
      this.bgTengahJ = Global.loadImage(
        "images/ending10",
        "bg_tengahjingga.png"
      );
      this.bartender = new BaseAnimation(
        "images/ending10/bartender.png",
        "images/ending10/bartender.json"
      );
      this.sheetBotol = new BaseSheet("images/botol.png", "images/botol.json");
      this.silau = Global.loadImage("images/ending10", "silau.png", 0.5, 0.5);
    },
    assetsInitAnimation: function () {
      this.bartender.addBehavior("anim ending", 0, 270, false);
      this.bartender.animated.showBehavior("anim ending");
    },
    assetsAddChild: function () {
      var _gthis = this;
      SoundGame.playSFX("sounds", "oh", DataGame.volOh);
      this.bgBiru.set_x(-300);
      this.bgBiru.set_y(-180);
      this.addChild(this.bgBiru);
      motion_Actuate
        .tween(this.bgBiru, 0.001, { alpha: 0 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(2.5666666666666669)
        .onComplete(function () {
          _gthis.bgBiru.set_visible(false);
        });
      this.bgJingga.set_x(-300);
      this.bgJingga.set_y(-180);
      this.addChild(this.bgJingga);
      this.bgJingga.set_alpha(0);
      motion_Actuate
        .tween(this.bgJingga, 1.2, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(1.4);
      this.matahari.set_x(296);
      this.matahari.set_y(-236);
      this.addChild(this.matahari);
      motion_Actuate
        .tween(this.matahari, 4.4333333333333336, {
          x: 356,
          y: 93,
          scaleX: 0.413,
          scaleY: 0.413,
        })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(2.3)
        .onComplete(function () {
          _gthis.matahari.set_visible(false);
        });
      this.awan.set_x(-299);
      this.awan.set_y(-180);
      this.addChild(this.awan);
      this.bgTengahB.set_x(-300);
      this.bgTengahB.set_y(-180);
      this.addChild(this.bgTengahB);
      motion_Actuate
        .tween(this.bgTengahB, 1.2, { alpha: 0 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(1.3666666666666667)
        .onComplete(function () {
          _gthis.bgTengahB.set_visible(false);
        });
      this.bgTengahJ.set_x(-300);
      this.bgTengahJ.set_y(-180);
      this.addChild(this.bgTengahJ);
      this.bgTengahJ.set_alpha(0);
      motion_Actuate
        .tween(this.bgTengahJ, 1.2, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(1.3666666666666667);
      var _g = 1;
      while (_g < 21) {
        var btl = _g++;
        var botol = this.sheetBotol.loadImage("botol" + btl + ".png");
        botol.set_x(
          Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "x")
        );
        botol.set_y(
          Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "y")
        );
        this.addChild(botol);
        if ((btl >= 7 && btl <= 10) || (btl >= 16 && btl <= 20)) {
          motion_Actuate
            .tween(botol, 1.1333333333333333, {
              x:
                Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "x") +
                391,
            })
            .ease(motion_easing_Linear.get_easeNone())
            .delay(2.5666666666666669);
        } else {
          motion_Actuate
            .tween(botol, 1.1333333333333333, {
              x:
                Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "x") -
                291,
            })
            .ease(motion_easing_Linear.get_easeNone())
            .delay(2.5666666666666669);
        }
      }
      SoundGame.playSFX(
        "sounds",
        "slide",
        DataGame.volSlide,
        2.5666666666666669
      );
      this.bartender.set_x(616);
      this.bartender.set_y(14);
      this.addChild(this.bartender);
      this.bartender.animated.addEventListener(
        "complete",
        $bind(this, this.selesaiAnimasi),
        false,
        0,
        true
      );
      var animal1 = Global.loadImage("images/ending10", "animal1.png");
      animal1.set_x(-27);
      animal1.set_y(346);
      this.addChild(animal1);
      animal1.set_alpha(0);
      motion_Actuate
        .tween(animal1, 0.001, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(7.7333333333333334)
        .onComplete(function () {
          motion_Actuate
            .tween(animal1, 0.83333333333333337, { y: 157 })
            .ease(motion_easing_Linear.get_easeNone());
          SoundGame.playSFX("sounds", "sing", DataGame.volSing);
        });
      var animal2 = Global.loadImage("images/ending10", "animal2.png");
      animal2.set_x(-84);
      animal2.set_y(409);
      this.addChild(animal2);
      animal2.set_alpha(0);
      motion_Actuate
        .tween(animal2, 0.001, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(7.3)
        .onComplete(function () {
          motion_Actuate
            .tween(animal2, 0.83333333333333337, { y: 220 })
            .ease(motion_easing_Linear.get_easeNone());
        });
      var bgDepan = Global.loadImage("images", "bg_depan.png");
      bgDepan.set_x(-300);
      bgDepan.set_y(-180);
      this.addChild(bgDepan);
      var bgIce = Global.loadImage("images", "bg_ice.png");
      bgIce.set_x(38);
      bgIce.set_y(245);
      this.addChild(bgIce);
      var sendokEs = Global.loadImage("images", "sendok_es.png");
      sendokEs.set_x(34);
      sendokEs.set_y(223);
      this.addChild(sendokEs);
      var bgFruit = Global.loadImage("images", "bg_fruit.png");
      bgFruit.set_x(106);
      bgFruit.set_y(279);
      this.addChild(bgFruit);
      this.silau.set_scaleX(this.silau.set_scaleY(0.194));
      this.silau.set_alpha(0);
      this.silau.set_x(397);
      this.silau.set_y(121);
      this.addChild(this.silau);
      motion_Actuate
        .tween(this.silau, 0.001, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(6.3)
        .onComplete(function () {
          SoundGame.playLOOP("sounds", "shine", DataGame.volShine);
          motion_Actuate
            .tween(_gthis.silau, 0.16666666666666666, {
              scaleX: 1,
              scaleY: 1,
              rotation: 360,
            })
            .ease(motion_easing_Linear.get_easeNone())
            .onComplete(function () {
              _gthis.silauKecil();
            });
        });
    },
    silauKecil: function () {
      this.silau.set_rotation(0);
      motion_Actuate
        .tween(this.silau, 0.8666666666666667, {
          scaleX: 0.617,
          scaleY: 0.617,
          rotation: 360,
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onComplete($bind(this, this.silauBesar));
    },
    silauBesar: function () {
      this.silau.set_rotation(0);
      motion_Actuate
        .tween(this.silau, 0.8666666666666667, {
          scaleX: 1,
          scaleY: 1,
          rotation: 360,
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onComplete($bind(this, this.silauKecil));
    },
    selesaiAnimasi: function (e) {
      this.bolIdle = true;
    },
    destroy: function () {
      this.RemoveDispatcher();
      this.bartender.animated.removeEventListener(
        "complete",
        $bind(this, this.selesaiAnimasi)
      );
      Global.killChildren(this, false);
      this.bgBiru = null;
      this.bgJingga = null;
      this.matahari = null;
      this.awan = null;
      this.bgTengahB = null;
      this.bgTengahJ = null;
      this.silau = null;
    },
    Update: function (e) {
      if (this.bolIdle == true) {
        this.counterIdle++;
        if (this.counterIdle == 40) {
          DataGame.totalPlayGame++;
          SoundGame.stopLOOP();
          this.bolBird = false;
          Main.GetInstance().changeWindow("Game1", "Result");
        }
      }
      if (this.bolBird == true) {
        this.counterBird++;
        if (this.counterBird >= 42) {
          if (this.counterBird % 90 == 0) {
            SoundGame.playSFX("sounds", "seagull", DataGame.volSeagull);
          }
        }
      }
    },
    __class__: Ending10,
  });
  var FPSMemory = function (inX, inY, inCol) {
    if (inCol == null) {
      inCol = 0;
    }
    if (inY == null) {
      inY = 10.0;
    }
    if (inX == null) {
      inX = 10.0;
    }
    this.memPeak = 0;
    openfl_text_TextField.call(this);
    this.set_x(inX);
    this.set_y(inY);
    this.set_selectable(false);
    this.set_defaultTextFormat(
      new openfl_text_TextFormat("_sans", 16, inCol, true)
    );
    this.set_text("FPS: ");
    this.times = [];
    this.addEventListener("enterFrame", $bind(this, this.onEnter));
    this.set_width(150);
    this.set_height(70);
  };
  $hxClasses["FPSMemory"] = FPSMemory;
  FPSMemory.__name__ = ["FPSMemory"];
  FPSMemory.__super__ = openfl_text_TextField;
  FPSMemory.prototype = $extend(openfl_text_TextField.prototype, {
    times: null,
    memPeak: null,
    onEnter: function (_) {
      var now = new Date().getTime() / 1000;
      this.times.push(now);
      while (this.times[0] < now - 1) this.times.shift();
      var mem =
        Math.round(
          (openfl_system_System.get_totalMemory() / 1024 / 1024) * 100
        ) / 100;
      if (mem > this.memPeak) {
        this.memPeak = mem;
      }
      if (this.get_visible()) {
        this.set_text(
          "FPS: " +
            this.times.length +
            "\nMEM: " +
            mem +
            " MB\nMEM peak: " +
            this.memPeak +
            " MB"
        );
      }
    },
    __class__: FPSMemory,
  });
  var Fruit = function (assetPng, px, py) {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Fruit.FruitGlobal = this;
    this.assetsFruit = assetPng;
    this.posX = px;
    this.posY = py;
    var rand = Global.calculateRandom(1, 100);
    if (
      this.assetsFruit == "1" ||
      this.assetsFruit == "2" ||
      this.assetsFruit == "3"
    ) {
      this.firepower = Global.calculateRandom(101, 130);
      if (rand <= 50) {
        this.angle = Global.calculateRandom(240, 260);
      } else {
        this.angle = Global.calculateRandom(280, 300);
      }
    } else {
      this.firepower = Global.calculateRandom(120, 140);
      if (rand <= 50) {
        this.angle = Global.calculateRandom(230, 260);
      } else {
        this.angle = Global.calculateRandom(280, 310);
      }
    }
    this.dirx = Math.cos((this.angle * Math.PI) / 180) * this.firepower;
    this.diry = Math.sin((this.angle * Math.PI) / 180) * this.firepower;
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
  };
  $hxClasses["Fruit"] = Fruit;
  Fruit.__name__ = ["Fruit"];
  Fruit.GetInstance = function () {
    return Fruit.FruitGlobal;
  };
  Fruit.__super__ = BaseSprite;
  Fruit.prototype = $extend(BaseSprite.prototype, {
    sheetFruit: null,
    sptFruit: null,
    assetsFruit: null,
    posX: null,
    posY: null,
    angle: null,
    firepower: null,
    dirx: null,
    diry: null,
    assetsLoad: function () {
      this.sheetFruit = new BaseSheet(
        "images/sheet_fruit.png",
        "images/sheet_fruit.json"
      );
      this.sptFruit = this.sheetFruit.loadImage(
        "fruit" + this.assetsFruit + ".png",
        0.5,
        0.5
      );
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.set_x(this.posX);
      this.set_y(this.posY);
      this.addChild(this.sptFruit);
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killChildren(this, false);
      this.sptFruit = null;
    },
    Update: function (e) {
      if (this.angle < 270) {
        var _g = this;
        _g.set_rotation(_g.get_rotation() - 2);
      } else {
        var _g1 = this;
        _g1.set_rotation(_g1.get_rotation() + 2);
      }
      if (
        this.assetsFruit == "1" ||
        this.assetsFruit == "2" ||
        this.assetsFruit == "3"
      ) {
        this.diry += 8;
        var _g2 = this;
        _g2.set_x(_g2.get_x() + this.dirx / 24);
        var _g3 = this;
        _g3.set_y(_g3.get_y() + this.diry / 8);
        if (this.get_y() >= 330) {
          DataGame.adaFruit[Global.stringToInt(this.assetsFruit)] = false;
          this.destroy();
        }
      } else {
        this.diry += 9;
        var _g4 = this;
        _g4.set_x(_g4.get_x() + this.dirx / 23);
        var _g5 = this;
        _g5.set_y(_g5.get_y() + this.diry / 8);
        if (this.get_y() >= 370) {
          this.destroy();
        }
      }
    },
    __class__: Fruit,
  });
  var Game1 = function () {
    this.stopShake = 0;
    this.totalShake = 0;
    this.totalScore = 0;
    this.bolAdaAcc = false;
    this.bolDownShake = false;
    this.counterUkur = 0;
    this.arrIsiGelas = [];
    this.bolTuangEs = false;
    this.bolTuangFruit = false;
    this.totalRotasi = 134;
    this.bolPartikel = false;
    this.bolPour = false;
    this.batasGelas = 36;
    this.counterGelas = 0;
    this.jenisAnim = "";
    this.statusBartender = "idle";
    this.bolMulaiGame = false;
    this.counterSelesai = 0;
    this.selesaiStage = false;
    this.counterNothing = 0;
    this.bolNothing = false;
    this.counterStuck = 0;
    this.bolStuck = false;
    this.durasiBotol = 0.3;
    this.noBotolBefore = "";
    this.noBotolNow = "";
    BaseSprite.call(this, "update");
    Game1.Game1Global = this;
    this.AddDispatcher();
    DataGame.totalScore = 0;
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Game1"] = Game1;
  Game1.__name__ = ["Game1"];
  Game1.GetInstance = function () {
    return Game1.Game1Global;
  };
  Game1.__super__ = BaseSprite;
  Game1.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sheetBotol: null,
    sheetBtnIngame: null,
    sptGroup: null,
    sptBG: null,
    bgDepan: null,
    rak: null,
    sendokEs: null,
    btnServe: null,
    btnShake: null,
    btnPour: null,
    btnSound: null,
    bgText: null,
    txtInfo1: null,
    txtInfo2: null,
    groupChar: null,
    tanganB: null,
    body: null,
    kepala: null,
    cikrak: null,
    tanganAKanan: null,
    tanganAKiri: null,
    gelasKosong: null,
    gelasKosongAcc: null,
    gelasSalah: null,
    gelasSalahAcc: null,
    gelasBener: null,
    gelasBenerAcc: null,
    mejaChar: null,
    gelasTuang: null,
    partikelAir: null,
    bgIce: null,
    bgFruit: null,
    olGelas: null,
    maskGelas: null,
    isiGelas: null,
    bajuG: null,
    tanganBG: null,
    tanganGG: null,
    lenganG: null,
    lenganGerak: null,
    buletKecil: null,
    noBotolNow: null,
    noBotolBefore: null,
    durasiBotol: null,
    bolStuck: null,
    counterStuck: null,
    bolNothing: null,
    counterNothing: null,
    botol1: null,
    botol2: null,
    botol3: null,
    botol4: null,
    botol5: null,
    botol6: null,
    botol7: null,
    botol8: null,
    botol9: null,
    botol10: null,
    botol11: null,
    botol12: null,
    botol13: null,
    botol14: null,
    botol15: null,
    botol16: null,
    botol17: null,
    botol18: null,
    botol19: null,
    botol20: null,
    selesaiStage: null,
    counterSelesai: null,
    bolMulaiGame: null,
    statusBartender: null,
    jenisAnim: null,
    counterGelas: null,
    batasGelas: null,
    bolPour: null,
    bolPartikel: null,
    totalRotasi: null,
    bolTuangFruit: null,
    bolTuangEs: null,
    arrIsiGelas: null,
    counterUkur: null,
    bolDownShake: null,
    bolAdaAcc: null,
    totalScore: null,
    totalShake: null,
    stopShake: null,
    endingGame1: null,
    endingGame: null,
    endingGame10: null,
    percik: null,
    cipratan: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sheetBotol = new BaseSheet("images/botol.png", "images/botol.json");
      this.sheetBtnIngame = new BaseSheet(
        "images/btn_ingame.png",
        "images/btn_ingame.json"
      );
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.sptBG = Global.loadImage("images", "bg_intro.png");
      this.rak = Global.loadImage("images", "rak.png");
      this.bgDepan = Global.loadImage("images", "bg_depan.png");
      this.sendokEs = Global.loadImage("images", "sendok_es.png");
      this.btnServe = Global.createButtonSheet(
        this.sheetBtnIngame,
        "btn_serve1.png",
        "btn_serve2.png",
        "btn_serve2.png"
      );
      this.btnPour = Global.createButtonSheet(
        this.sheetBtnIngame,
        "btn_pour1.png",
        "btn_pour2.png",
        "btn_pour2.png"
      );
      this.btnShake = Global.createButtonSheet(
        this.sheetBtnIngame,
        "btn_shake1.png",
        "btn_shake2.png",
        "btn_shake2.png"
      );
      if (SoundGame.isMuted == false) {
        this.btnSound = this.sheetBtnIngame.loadImage("btn_sound2.png");
      } else {
        this.btnSound = this.sheetBtnIngame.loadImage("btn_sound1.png");
      }
      this.txtInfo1 = new BaseText("RifficFree-Bold.ttf", 17, 16755200, false);
      this.txtInfo2 = new BaseText("RifficFree-Bold.ttf", 17, 16755200, false);
      this.bgText = Global.loadImage("images", "bg_text.png");
      this.groupChar = new openfl_display_Sprite();
      this.body = Global.loadImage("images/char", "body.png");
      this.tanganB = new BaseAnimation(
        "images/char/tangan_bawah.png",
        "images/char/tangan_bawah.json"
      );
      this.kepala = new BaseAnimation(
        "images/char/kepala.png",
        "images/char/kepala.json"
      );
      this.cikrak = new BaseAnimation(
        "images/char/cikrak.png",
        "images/char/cikrak.json"
      );
      this.tanganAKanan = new BaseAnimation(
        "images/char/tangana_kanan.png",
        "images/char/tangana_kanan.json"
      );
      this.tanganAKiri = new BaseAnimation(
        "images/char/tangana_kiri.png",
        "images/char/tangana_kiri.json"
      );
      this.gelasKosong = new BaseAnimation(
        "images/char/gelas_kosong.png",
        "images/char/gelas_kosong.json"
      );
      this.gelasSalah = new BaseAnimation(
        "images/char/gelas_salah.png",
        "images/char/gelas_salah.json"
      );
      this.gelasBener = new BaseAnimation(
        "images/char/gelas_bener.png",
        "images/char/gelas_bener.json"
      );
      this.gelasKosongAcc = new BaseAnimation(
        "images/char/gelas_kosongacc.png",
        "images/char/gelas_kosongacc.json"
      );
      this.gelasSalahAcc = new BaseAnimation(
        "images/char/gelas_salahacc.png",
        "images/char/gelas_salahacc.json"
      );
      this.gelasBenerAcc = new BaseAnimation(
        "images/char/gelas_beneracc.png",
        "images/char/gelas_beneracc.json"
      );
      this.gelasTuang = new BaseAnimation(
        "images/char/gelas_tuang.png",
        "images/char/gelas_tuang.json"
      );
      this.mejaChar = Global.loadImage("images/char", "meja.png");
      this.bgIce = Global.loadImage("images", "bg_ice.png");
      this.bgFruit = Global.loadImage("images", "bg_fruit.png");
      this.olGelas = Global.loadImage("images", "ol_gelas.png");
      this.isiGelas = new openfl_display_Sprite();
      this.isiGelas.get_graphics().beginFill(16777215, 1);
      this.isiGelas.get_graphics().drawRect(0, 0, 36, 36);
      this.maskGelas = new openfl_display_Sprite();
      this.maskGelas.get_graphics().beginFill(0);
      this.maskGelas.get_graphics().moveTo(588, 404);
      this.maskGelas.get_graphics().lineTo(597, 439);
      this.maskGelas.get_graphics().lineTo(613, 439);
      this.maskGelas.get_graphics().lineTo(621, 404);
      this.maskGelas.get_graphics().endFill();
      this.lenganGerak = Global.loadImage(
        "images/char",
        "lengan_gerak.png",
        1,
        0.5
      );
      this.lenganG = new openfl_display_Sprite();
      this.tanganBG = Global.loadImage(
        "images/char",
        "tanganb_gerak.png",
        0.5,
        0.5
      );
      this.bajuG = Global.loadImage("images/char", "baju_gerak.png", 1, 0.5);
      this.tanganGG = new BaseAnimation(
        "images/char/tangang_gerak.png",
        "images/char/tangang_gerak.json",
        true,
        0.5,
        0.5
      );
      this.partikelAir = new openfl_display_Sprite();
      this.buletKecil = new openfl_display_Sprite();
      this.buletKecil.get_graphics().beginFill(16711680, 0.001);
      this.buletKecil.get_graphics().drawCircle(0, 0, 3.5);
      this.percik = new BaseAnimation(
        "images/percik.png",
        "images/percik.json"
      );
      this.cipratan = new BaseAnimation(
        "images/cipratan.png",
        "images/cipratan.json"
      );
    },
    toogleSound: function (bolOn) {
      if (bolOn == true) {
        this.sheetBtnIngame.reloadImage("btn_sound1.png", this.btnSound);
      } else {
        this.sheetBtnIngame.reloadImage("btn_sound2.png", this.btnSound);
      }
    },
    tataTextInfo: function (info1, info2) {
      if (info2 == null) {
        info2 = "";
      }
      if (info1 == null) {
        info1 = "";
      }
      this.txtInfo1.set_visible(this.txtInfo2.set_visible(false));
      if (info1 != "" && info2 != "") {
        this.txtInfo1.set_visible(this.txtInfo2.set_visible(true));
        this.txtInfo1.set_text(info1);
        this.txtInfo2.set_text(info2);
        this.txtInfo1.set_x(
          this.bgText.get_x() +
            this.bgText.get_width() / 2 -
            this.txtInfo1.get_width() / 2
        );
        this.txtInfo1.set_y(
          this.bgText.get_y() +
            this.bgText.get_height() / 2 -
            this.txtInfo1.get_height()
        );
        this.txtInfo2.set_x(
          this.bgText.get_x() +
            this.bgText.get_width() / 2 -
            this.txtInfo2.get_width() / 2
        );
        this.txtInfo2.set_y(
          this.bgText.get_y() + this.bgText.get_height() / 2 - 1
        );
      } else {
        this.txtInfo1.set_visible(true);
        this.txtInfo1.set_text(info1);
        this.txtInfo1.set_x(
          this.bgText.get_x() +
            this.bgText.get_width() / 2 -
            this.txtInfo1.get_width() / 2
        );
        this.txtInfo1.set_y(
          this.bgText.get_y() +
            this.bgText.get_height() / 2 -
            this.txtInfo1.get_height() / 2
        );
        if (info1 == "Time to shake") {
          this.txtInfo1.set_x(this.bgText.get_x() + 89);
        }
      }
    },
    addBehaviorChar: function (mcPart) {
      mcPart.addBehavior("idle", 0, 0, false);
      mcPart.addBehavior("siap ambil barang", 1, 10, false);
      mcPart.addBehavior("balik idle", 0, 10, false, 30, true);
      mcPart.addBehavior("siap ambil botol", 11, 11, false);
      mcPart.addBehavior("ambil fruit", 12, 38, false);
      mcPart.addBehavior("tuang fruit", 39, 42, false);
      mcPart.addBehavior("fruit jatuh", 47, 67, false);
      mcPart.addBehavior("tuang es", 98, 108, false);
      mcPart.addBehavior("es jatuh", 109, 110, false);
      mcPart.addBehavior("balikin fruit", 12, 38, false, 30, true);
      mcPart.addBehavior("ambil es", 68, 93, false);
      mcPart.addBehavior("balikin es", 68, 93, false, 30, true);
      mcPart.addBehavior("taruh gelas", 264, 275, false);
      mcPart.addBehavior("masuk shake", 139, 156, false);
      mcPart.addBehavior("masuk shake idle", 149, 156, false);
      mcPart.addBehavior("idle shake", 156, 156, false);
      mcPart.addBehavior("loop shake", 157, 188, false);
      mcPart.addBehavior("potong garnish", 197, 263, false);
      mcPart.addBehavior("shake turun", 189, 196, false);
      mcPart.addBehavior("shake turun tuang", 189, 196, false);
      mcPart.addBehavior("pour shaker", 276, 292, false);
      mcPart.addBehavior("proses minum", 472, 490, false, 20);
      mcPart.addBehavior("mau minum", 335, 469, false, 20);
      mcPart.addBehavior("stuck minum", 472, 472, false, 20);
      mcPart.addBehavior("stuck minum tangan", 472, 472, false, 20);
    },
    setAnimGelas: function (mcGelas, namaAnim) {
      this.gelasKosong.set_visible(
        this.gelasBener.set_visible(this.gelasSalah.set_visible(false))
      );
      this.gelasKosongAcc.set_visible(
        this.gelasBenerAcc.set_visible(this.gelasSalahAcc.set_visible(false))
      );
      mcGelas.set_visible(true);
      this.gelasKosong.resetTime();
      this.gelasKosong.animated.showBehavior(namaAnim);
      this.gelasBener.resetTime();
      this.gelasBener.animated.showBehavior(namaAnim);
      this.gelasSalah.resetTime();
      this.gelasSalah.animated.showBehavior(namaAnim);
      this.gelasKosongAcc.resetTime();
      this.gelasKosongAcc.animated.showBehavior(namaAnim);
      this.gelasBenerAcc.resetTime();
      this.gelasBenerAcc.animated.showBehavior(namaAnim);
      this.gelasSalahAcc.resetTime();
      this.gelasSalahAcc.animated.showBehavior(namaAnim);
    },
    playAnimChar: function (namaAnim) {
      if (namaAnim == "loop shake") {
        this.totalShake++;
      }
      if (this.totalShake >= 11) {
        this.bolDownShake = false;
        this.groupChar.set_visible(false);
        Main.GetInstance().showSound(false);
        this.btnPour.removeEventListener(
          "mouseDown",
          $bind(this, this.onDownPour)
        );
        this.btnShake.removeEventListener(
          "mouseDown",
          $bind(this, this.onDownShake)
        );
        this.btnServe.removeEventListener(
          "mouseDown",
          $bind(this, this.onDownServe)
        );
        this.removeEventListener("mouseUp", $bind(this, this.onMouseUp));
        SoundGame.stopLOOP();
        Global.setMouseEnabled(this.bgFruit, false);
        this.totalScore = 0;
        DataGame.totalScore = this.totalScore;
        DataGame.noEnding = 1;
        this.endingGame1 = new Ending1();
        this.sptGroup.addChild(this.endingGame1);
      }
      this.tanganB.resetTime();
      this.tanganB.animated.showBehavior(namaAnim);
      this.tanganB.AddDispatcher();
      this.kepala.resetTime();
      this.kepala.animated.showBehavior(namaAnim);
      this.kepala.AddDispatcher();
      this.cikrak.resetTime();
      this.cikrak.animated.showBehavior(namaAnim);
      this.cikrak.AddDispatcher();
      this.tanganAKanan.resetTime();
      this.tanganAKanan.animated.showBehavior(namaAnim);
      this.tanganAKanan.AddDispatcher();
      this.tanganAKiri.resetTime();
      this.tanganAKiri.animated.showBehavior(namaAnim);
      this.tanganAKiri.AddDispatcher();
    },
    assetsInitAnimation: function () {
      this.addBehaviorChar(this.tanganB);
      this.tanganB.animated.showBehavior("idle");
      this.addBehaviorChar(this.kepala);
      this.kepala.animated.showBehavior("idle");
      this.addBehaviorChar(this.cikrak);
      this.cikrak.animated.showBehavior("idle");
      this.addBehaviorChar(this.tanganAKanan);
      this.tanganAKanan.animated.showBehavior("idle");
      this.addBehaviorChar(this.tanganAKiri);
      this.tanganAKiri.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasKosong);
      this.gelasKosong.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasSalah);
      this.gelasSalah.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasBener);
      this.gelasBener.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasKosongAcc);
      this.gelasKosongAcc.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasSalahAcc);
      this.gelasSalahAcc.animated.showBehavior("idle");
      this.addBehaviorChar(this.gelasBenerAcc);
      this.gelasBenerAcc.animated.showBehavior("idle");
      this.gelasTuang.addBehavior("idle", 0, 0, false);
      this.gelasTuang.addBehavior("idle acc", 87, 87, false);
      this.gelasTuang.addBehavior("isi salah", 1, 43, false);
      this.gelasTuang.addBehavior("isi bener", 44, 86, false);
      this.gelasTuang.addBehavior("isi salah acc", 88, 130, false);
      this.gelasTuang.addBehavior("isi bener acc", 131, 173, false);
      this.gelasTuang.animated.showBehavior("idle");
      this.tanganGG.addBehavior("idle", 0, 19, false);
      this.tanganGG.animated.showBehavior("idle");
      this.tanganGG.gotoAndStop(0);
      this.tanganGG.RemoveDispatcher();
      this.percik.addBehavior("idle", 7, 7, true);
      this.percik.addBehavior("anim percik", 0, 9, false, 20);
      this.percik.animated.showBehavior("idle");
      this.cipratan.addBehavior("idle", 14, 14, true);
      this.cipratan.addBehavior("anim ciprat", 0, 14, false);
      this.cipratan.animated.showBehavior("idle");
    },
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      this.rak.set_x(-76);
      this.rak.set_y(-159);
      this.sptGroup.addChild(this.rak);
      var _g = 1;
      while (_g < 21) {
        var btl = _g++;
        Reflect.setProperty(
          this,
          "botol" + btl,
          this.sheetBotol.loadImage("botol" + btl + ".png")
        );
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .set_x(
            Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "x")
          );
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .set_y(
            Reflect.field(Reflect.field(DataPosition, "BOTOL" + btl), "y")
          );
        this.sptGroup.addChild(Reflect.field(this, "botol" + btl));
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .set_name(btl == null ? "null" : "" + btl);
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .addEventListener(
            "mouseOver",
            $bind(this, this.onOverItem),
            false,
            0,
            true
          );
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .addEventListener(
            "mouseOut",
            $bind(this, this.onOutMouse),
            false,
            0,
            true
          );
        js_Boot
          .__cast(Reflect.field(this, "botol" + btl), openfl_display_Sprite)
          .addEventListener(
            "mouseDown",
            $bind(this, this.onDownBotol),
            false,
            0,
            true
          );
        js_Boot.__cast(
          Reflect.field(this, "botol" + btl),
          openfl_display_Sprite
        ).buttonMode = true;
        js_Boot.__cast(
          Reflect.field(this, "botol" + btl),
          openfl_display_Sprite
        ).useHandCursor = true;
      }
      this.bgDepan.set_x(-300);
      this.bgDepan.set_y(-180);
      this.sptGroup.addChild(this.bgDepan);
      Global.setMouseEnabled(this.bgDepan, false);
      this.groupChar.set_x(464);
      this.groupChar.set_y(14);
      this.sptGroup.addChild(this.groupChar);
      this.tanganB.set_x(152);
      this.tanganB.set_y(244);
      this.groupChar.addChild(this.tanganB);
      Global.setMouseEnabled(this.tanganB, false);
      this.groupChar.addChild(this.lenganG);
      this.groupChar.addChild(this.bajuG);
      this.groupChar.addChild(this.tanganBG);
      this.groupChar.addChild(this.tanganGG);
      this.tanganGG.set_name("tanganGG");
      this.lenganG.addChild(this.lenganGerak);
      this.lenganG.addChild(this.buletKecil);
      this.buletKecil.set_x(-180);
      this.lenganG.set_visible(
        this.bajuG.set_visible(
          this.tanganBG.set_visible(this.tanganGG.set_visible(false))
        )
      );
      Global.setMouseEnabled(this.lenganG, false);
      Global.setMouseEnabled(this.bajuG, false);
      Global.setMouseEnabled(this.tanganBG, false);
      this.tanganGG.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.tanganGG.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.tanganGG.addEventListener(
        "mouseDown",
        $bind(this, this.onBalikinBotol),
        false,
        0,
        true
      );
      this.groupChar.addChild(this.partikelAir);
      this.body.set_x(183);
      this.body.set_y(188);
      this.groupChar.addChild(this.body);
      Global.setMouseEnabled(this.body, false);
      this.kepala.set_x(190);
      this.kepala.set_y(0);
      this.groupChar.addChild(this.kepala);
      Global.setMouseEnabled(this.kepala, false);
      this.cikrak.set_x(-30);
      this.cikrak.set_y(0);
      this.groupChar.addChild(this.cikrak);
      Global.setMouseEnabled(this.cikrak, false);
      this.tanganAKiri.set_x(-30);
      this.tanganAKiri.set_y(0);
      this.groupChar.addChild(this.tanganAKiri);
      Global.setMouseEnabled(this.tanganAKiri, false);
      this.gelasKosong.set_x(-30);
      this.gelasKosong.set_y(0);
      this.groupChar.addChild(this.gelasKosong);
      Global.setMouseEnabled(this.gelasKosong, false);
      this.gelasSalah.set_x(-30);
      this.gelasSalah.set_y(0);
      this.groupChar.addChild(this.gelasSalah);
      Global.setMouseEnabled(this.gelasSalah, false);
      this.gelasBener.set_x(-30);
      this.gelasBener.set_y(0);
      this.groupChar.addChild(this.gelasBener);
      Global.setMouseEnabled(this.gelasBener, false);
      this.gelasKosongAcc.set_x(-30);
      this.gelasKosongAcc.set_y(0);
      this.groupChar.addChild(this.gelasKosongAcc);
      Global.setMouseEnabled(this.gelasKosongAcc, false);
      this.gelasSalahAcc.set_x(-30);
      this.gelasSalahAcc.set_y(0);
      this.groupChar.addChild(this.gelasSalahAcc);
      Global.setMouseEnabled(this.gelasSalahAcc, false);
      this.gelasBenerAcc.set_x(-30);
      this.gelasBenerAcc.set_y(0);
      this.groupChar.addChild(this.gelasBenerAcc);
      Global.setMouseEnabled(this.gelasBenerAcc, false);
      this.setAnimGelas(this.gelasBenerAcc, "idle");
      this.percik.set_x(123);
      this.percik.set_y(247);
      this.groupChar.addChild(this.percik);
      Global.setMouseEnabled(this.percik, false);
      this.tanganAKanan.set_x(261);
      this.tanganAKanan.set_y(243);
      this.groupChar.addChild(this.tanganAKanan);
      Global.setMouseEnabled(this.tanganAKanan, false);
      this.cipratan.set_x(100);
      this.cipratan.set_y(336);
      this.groupChar.addChild(this.cipratan);
      this.mejaChar.set_x(0);
      this.mejaChar.set_y(307);
      this.groupChar.addChild(this.mejaChar);
      Global.setMouseEnabled(this.mejaChar, false);
      this.gelasTuang.set_x(89);
      this.gelasTuang.set_y(298);
      this.groupChar.addChild(this.gelasTuang);
      this.gelasTuang.set_visible(false);
      Global.setMouseEnabled(this.gelasTuang, false);
      this.bgIce.set_x(38);
      this.bgIce.set_y(245);
      this.sptGroup.addChild(this.bgIce);
      this.bgIce.set_name("21");
      this.bgIce.buttonMode = true;
      this.bgIce.useHandCursor = true;
      this.sendokEs.set_x(34);
      this.sendokEs.set_y(223);
      this.sptGroup.addChild(this.sendokEs);
      this.sendokEs.set_name("21");
      this.sendokEs.buttonMode = true;
      this.sendokEs.useHandCursor = true;
      this.bgFruit.set_x(106);
      this.bgFruit.set_y(279);
      this.sptGroup.addChild(this.bgFruit);
      this.bgFruit.set_name("22");
      this.bgFruit.buttonMode = true;
      this.bgFruit.useHandCursor = true;
      this.btnPour.set_x(16);
      this.btnPour.set_y(384);
      this.sptGroup.addChild(this.btnPour);
      this.btnPour.set_name("btnPour");
      this.btnShake.set_x(154);
      this.btnShake.set_y(384);
      this.sptGroup.addChild(this.btnShake);
      this.btnShake.set_name("btnShake");
      this.btnServe.set_x(291);
      this.btnServe.set_y(381);
      this.sptGroup.addChild(this.btnServe);
      this.btnServe.set_name("btnServe");
      this.btnSound.set_x(433);
      this.btnSound.set_y(384);
      this.sptGroup.addChild(this.btnSound);
      Global.setMouseEnabled(this.btnSound, false);
      this.bgText.set_x(548);
      this.bgText.set_y(378);
      this.sptGroup.addChild(this.bgText);
      Global.setMouseEnabled(this.bgText, false);
      this.olGelas.set_x(this.bgText.get_x() + 36);
      this.olGelas.set_y(this.bgText.get_y() + 26);
      this.sptGroup.addChild(this.olGelas);
      this.isiGelas.set_x(this.bgText.get_x() + 41);
      this.isiGelas.set_y(this.bgText.get_y() + 26 + 35);
      this.sptGroup.addChild(this.isiGelas);
      this.showGelas(false);
      this.sptGroup.addChild(this.maskGelas);
      this.isiGelas.set_mask(this.maskGelas);
      this.sptGroup.addChild(this.txtInfo1);
      this.sptGroup.addChild(this.txtInfo2);
      this.tataTextInfo("What will you add?");
    },
    onBalikinBotol: function (e) {
      if (this.statusBartender == "pegang botol") {
        SoundGame.playSFX("sounds", "click", DataGame.volClick);
        this.statusBartender = "anim";
        this.jenisAnim = "balik botol";
        this.noBotolBefore = this.noBotolNow;
        this.setBalikBotol(false);
      }
    },
    showGelas: function (bol) {
      this.olGelas.set_visible(
        this.isiGelas.set_visible(this.maskGelas.set_visible(bol))
      );
    },
    assetsAddEventListener: function () {
      this.bgIce.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.bgIce.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.bgFruit.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.bgFruit.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.sendokEs.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.sendokEs.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.btnPour.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.btnShake.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.btnServe.addEventListener(
        "mouseOver",
        $bind(this, this.onOverItem),
        false,
        0,
        true
      );
      this.btnPour.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.btnShake.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.btnServe.addEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse),
        false,
        0,
        true
      );
      this.bgIce.addEventListener(
        "mouseDown",
        $bind(this, this.onDownIce),
        false,
        0,
        true
      );
      this.sendokEs.addEventListener(
        "mouseDown",
        $bind(this, this.onDownIce),
        false,
        0,
        true
      );
      this.bgFruit.addEventListener(
        "mouseDown",
        $bind(this, this.onDownFruit),
        false,
        0,
        true
      );
      this.btnPour.addEventListener(
        "mouseDown",
        $bind(this, this.onDownPour),
        false,
        0,
        true
      );
      this.btnShake.addEventListener(
        "mouseDown",
        $bind(this, this.onDownShake),
        false,
        0,
        true
      );
      this.btnServe.addEventListener(
        "mouseDown",
        $bind(this, this.onDownServe),
        false,
        0,
        true
      );
      this.addEventListener(
        "mouseUp",
        $bind(this, this.onMouseUp),
        false,
        0,
        true
      );
    },
    onDownPour: function (e) {
      var _gthis = this;
      this.counterUkur = 0;
      if (
        HxOverrides.substr(this.statusBartender, 0, 6) == "pegang" &&
        this.counterGelas < this.batasGelas
      ) {
        this.showGelas(true);
        this.bolPour = true;
        this.tataTextInfo("");
        if (this.statusBartender == "pegang es") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "tuang es";
          this.tanganAKanan.animated.showBehavior("tuang es");
          this.tanganAKanan.gotoAndStop(0);
          this.tanganAKanan.RemoveDispatcher();
          this.tanganAKiri.animated.showBehavior("tuang es");
          this.tanganAKiri.gotoAndStop(0);
          this.tanganAKiri.RemoveDispatcher();
          this.tanganB.animated.showBehavior("tuang es");
          this.tanganB.gotoAndStop(0);
          this.tanganB.RemoveDispatcher();
          this.cikrak.animated.showBehavior("tuang es");
          this.cikrak.gotoAndStop(0);
          this.cikrak.RemoveDispatcher();
          this.bolTuangEs = true;
        } else if (this.statusBartender == "pegang fruit") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "tuang fruit";
          this.tanganAKanan.animated.showBehavior("tuang fruit");
          this.tanganAKanan.gotoAndStop(0);
          this.tanganAKanan.RemoveDispatcher();
          this.tanganAKiri.animated.showBehavior("tuang fruit");
          this.tanganAKiri.gotoAndStop(0);
          this.tanganAKiri.RemoveDispatcher();
          this.tanganB.animated.showBehavior("tuang fruit");
          this.tanganB.gotoAndStop(0);
          this.tanganB.RemoveDispatcher();
          this.bolTuangFruit = true;
        } else if (this.statusBartender == "pegang botol") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          motion_Actuate.stop(this.tanganGG);
          this.statusBartender = "tuang botol";
          motion_Actuate
            .tween(
              this.lenganG,
              ((this.totalRotasi - this.tanganGG.get_rotation()) /
                this.totalRotasi) *
                0.7,
              { scaleX: 0.869, rotation: 43.3 }
            )
            .ease(motion_easing_Quad.get_easeOut())
            .onUpdate(function () {
              var tamp = _gthis.lenganGerak.localToGlobal(
                new openfl_geom_Point(
                  _gthis.buletKecil.get_x(),
                  _gthis.buletKecil.get_y()
                )
              );
              var locala = _gthis.groupChar.globalToLocal(tamp);
              _gthis.tanganGG.set_x(locala.x);
              _gthis.tanganGG.set_y(locala.y);
            });
          motion_Actuate
            .tween(
              this.tanganGG,
              ((this.totalRotasi - this.tanganGG.get_rotation()) /
                this.totalRotasi) *
                0.7,
              { rotation: this.totalRotasi }
            )
            .ease(motion_easing_Quad.get_easeOut())
            .onComplete(function () {
              _gthis.counterUkur = 0;
              _gthis.bolPartikel = true;
              if (DataGame.stopLiquid == true) {
                if (_gthis.partikelAir.get_numChildren() == 0) {
                  SoundGame.stopLOOP();
                  DataGame.isLiquid = false;
                }
              } else if (DataGame.isLiquid == false) {
                SoundGame.playLOOP("sounds", "liquid", DataGame.volLiquid);
                DataGame.isLiquid = true;
              }
              DataGame.stopLiquid = false;
              motion_Actuate
                .tween(_gthis.lenganG, 1.5, { scaleX: 0.7, rotation: 39.6 })
                .ease(motion_easing_Linear.get_easeNone())
                .repeat()
                .reflect()
                .onUpdate(function () {
                  var tamp1 = _gthis.lenganGerak.localToGlobal(
                    new openfl_geom_Point(
                      _gthis.buletKecil.get_x(),
                      _gthis.buletKecil.get_y()
                    )
                  );
                  var locala1 = _gthis.groupChar.globalToLocal(tamp1);
                  _gthis.tanganGG.set_y(locala1.y);
                });
            });
        }
      }
      if (
        DataGame.totalPushButton >= 100 &&
        DataSave.achievements[3] == false
      ) {
        DataSave.saveAchievements(3, function () {});
      }
    },
    onDownShake: function (e) {
      var _gthis = this;
      if (this.counterGelas > 0) {
        this.bgFruit.set_name("23");
        if (this.olGelas.get_visible() == true) {
          this.tataTextInfo("Click and hold", "to shake");
        }
        this.showGelas(false);
        this.bolPour = false;
        this.btnPour.removeEventListener(
          "mouseDown",
          $bind(this, this.onDownPour)
        );
        this.bolDownShake = true;
        if (this.statusBartender == "idle") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "masuk shake";
          this.playAnimChar("masuk shake idle");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
        } else if (this.statusBartender == "pegang es") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "anim";
          this.jenisAnim = "idle shake";
          this.playAnimChar("balikin es");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          motion_Actuate
            .tween(this.sendokEs, 0.001, { alpha: 1 })
            .delay(0.2)
            .onComplete(function () {
              _gthis.sendokEs.set_visible(true);
            });
        } else if (this.statusBartender == "pegang fruit") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "anim";
          this.jenisAnim = "idle shake";
          this.fruitMencelat(0.23333333333333334);
          this.playAnimChar("balikin fruit");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
        } else if (this.statusBartender == "pegang botol") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.statusBartender = "anim";
          this.jenisAnim = "balik botol shake";
          this.noBotolBefore = this.noBotolNow;
          this.setBalikBotol(false);
        } else if (this.statusBartender == "shake") {
          SoundGame.playSFX("sounds", "click", DataGame.volClick);
          DataGame.totalPushButton++;
          DataSave.saveGame();
          this.playAnimChar("loop shake");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          if (this.totalShake < 11) {
            SoundGame.playLOOP("sounds", "shake", DataGame.volShake);
          }
        }
      }
      if (
        DataGame.totalPushButton >= 100 &&
        DataSave.achievements[3] == false
      ) {
        DataSave.saveAchievements(3, function () {});
      }
    },
    onDownServe: function (e) {
      if (this.statusBartender == "shake" && this.bolDownShake == false) {
        SoundGame.playSFX("sounds", "click", DataGame.volClick);
        DataGame.totalPushButton++;
        DataSave.saveGame();
        this.btnServe.addEventListener(
          "mouseDown",
          $bind(this, this.onDownServe)
        );
        this.statusBartender = "minum";
        this.tataTextInfo("How good is your", "cocktail?");
        this.playAnimChar("shake turun tuang");
        this.kepala.animated.addEventListener(
          "complete",
          $bind(this, this.selesaiAnimasi),
          false,
          0,
          true
        );
      }
      if (
        DataGame.totalPushButton >= 100 &&
        DataSave.achievements[3] == false
      ) {
        DataSave.saveAchievements(3, function () {});
      }
    },
    onMouseUp: function (e) {
      var _gthis = this;
      this.counterNothing = 0;
      if (this.bolPour == true) {
        if (this.partikelAir.get_numChildren() == 0) {
          SoundGame.stopLOOP();
          DataGame.isLiquid = false;
        }
        this.tataTextInfo("Click and hold", "to add");
        if (this.statusBartender == "tuang botol") {
          if (this.counterUkur != 0) {
            if (
              this.arrIsiGelas
                .map(function (e1) {
                  return e1.noBotol;
                })
                .indexOf(this.tanganGG.currentFrame() + 1) < 0
            ) {
              this.arrIsiGelas.push({
                noBotol: this.tanganGG.currentFrame() + 1,
                jumlah: this.counterUkur,
              });
            } else {
              this.arrIsiGelas[
                this.arrIsiGelas
                  .map(function (e2) {
                    return e2.noBotol;
                  })
                  .indexOf(this.tanganGG.currentFrame() + 1)
              ].jumlah += this.counterUkur;
            }
          }
          DataGame.stopLiquid = true;
          motion_Actuate.stop(this.tanganGG);
          motion_Actuate.stop(this.lenganG);
          motion_Actuate
            .tween(
              this.lenganG,
              (this.tanganGG.get_rotation() / this.totalRotasi) * 0.7,
              { scaleX: 0.7, rotation: 21.5 }
            )
            .ease(motion_easing_Linear.get_easeNone())
            .onUpdate(function () {
              var tamp = _gthis.lenganGerak.localToGlobal(
                new openfl_geom_Point(
                  _gthis.buletKecil.get_x(),
                  _gthis.buletKecil.get_y()
                )
              );
              var locala = _gthis.groupChar.globalToLocal(tamp);
              _gthis.tanganGG.set_x(locala.x);
              _gthis.tanganGG.set_y(locala.y + 8);
            });
          motion_Actuate
            .tween(
              this.tanganGG,
              (this.tanganGG.get_rotation() / this.totalRotasi) * 0.7,
              { rotation: 0 }
            )
            .ease(motion_easing_Linear.get_easeNone())
            .onComplete(function () {
              _gthis.statusBartender = "pegang botol";
              DataGame.stopLiquid = false;
            });
        } else if (this.statusBartender == "tuang es") {
          this.statusBartender = "anim pegang es";
        } else if (this.statusBartender == "tuang fruit") {
          this.statusBartender = "anim pegang fruit";
        }
        this.bolPartikel = false;
        this.bolPour = false;
        this.showGelas(false);
      } else if (this.bolDownShake == true) {
        SoundGame.stopLOOP();
        this.bolDownShake = false;
        if (
          this.totalShake == 9 &&
          this.stopShake <= 1 &&
          DataSave.achievements[0] == false
        ) {
          DataSave.saveAchievements(0, function () {});
        }
        this.stopShake++;
        if (this.statusBartender == "shake") {
          this.playAnimChar("idle shake");
        }
      } else {
        SoundGame.stopLOOP();
      }
    },
    destroyPartikel: function (partikel) {
      partikel.destroy();
      partikel.parent.removeChild(partikel);
      partikel = null;
      if (this.partikelAir.get_numChildren() == 0) {
        SoundGame.stopLOOP();
        DataGame.isLiquid = false;
      }
    },
    onDownBotol: function (e) {
      var _gthis = this;
      if (this.counterGelas < this.batasGelas) {
        if (this.statusBartender == "idle") {
          DataGame.bolTouchBotol[
            Global.stringToInt(
              js_Boot.__cast(e.currentTarget, openfl_display_Sprite).get_name()
            ) - 1
          ] = true;
          DataSave.saveGame();
          this.statusBartender = "anim";
          this.jenisAnim = "ambil botol";
          this.noBotolNow = js_Boot
            .__cast(e.currentTarget, openfl_display_Sprite)
            .get_name();
          this.playAnimChar("siap ambil barang");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
        } else if (HxOverrides.substr(this.statusBartender, 0, 6) == "pegang") {
          DataGame.bolTouchBotol[
            Global.stringToInt(
              js_Boot.__cast(e.currentTarget, openfl_display_Sprite).get_name()
            ) - 1
          ] = true;
          DataSave.saveGame();
          if (this.statusBartender == "pegang es") {
            this.noBotolNow = js_Boot
              .__cast(e.currentTarget, openfl_display_Sprite)
              .get_name();
            this.statusBartender = "anim";
            this.jenisAnim = "ambil botol";
            this.playAnimChar("balikin es");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(this.sendokEs, 0.001, { alpha: 1 })
              .delay(0.2)
              .onComplete(function () {
                _gthis.sendokEs.set_visible(true);
              });
          } else if (this.statusBartender == "pegang fruit") {
            this.noBotolNow = js_Boot
              .__cast(e.currentTarget, openfl_display_Sprite)
              .get_name();
            this.statusBartender = "anim";
            this.jenisAnim = "ambil botol";
            this.fruitMencelat(0.23333333333333334);
            this.playAnimChar("balikin fruit");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else {
            this.statusBartender = "anim";
            this.jenisAnim = "ambil botol";
            this.noBotolBefore = this.noBotolNow;
            this.noBotolNow = js_Boot
              .__cast(e.currentTarget, openfl_display_Sprite)
              .get_name();
            this.setBalikBotol(true);
          }
        }
      }
      if (
        DataGame.bolTouchBotol.indexOf(false) < 0 &&
        DataSave.achievements[5] == false
      ) {
        DataSave.saveAchievements(5, function () {});
      }
    },
    onDownIce: function (e) {
      var _gthis = this;
      if (this.counterGelas < this.batasGelas) {
        if (this.statusBartender == "idle") {
          this.statusBartender = "anim";
          this.jenisAnim = "ambil es";
          this.playAnimChar("siap ambil barang");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
        } else if (HxOverrides.substr(this.statusBartender, 0, 6) == "pegang") {
          if (this.statusBartender == "pegang es") {
            this.statusBartender = "anim";
            this.jenisAnim = "idle";
            this.playAnimChar("balikin es");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(this.sendokEs, 0.001, { alpha: 1 })
              .delay(0.2)
              .onComplete(function () {
                _gthis.sendokEs.set_visible(true);
              });
          } else if (this.statusBartender == "pegang fruit") {
            this.statusBartender = "anim";
            this.jenisAnim = "ambil es";
            this.fruitMencelat(0.23333333333333334);
            this.playAnimChar("balikin fruit");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else {
            this.statusBartender = "anim";
            this.jenisAnim = "ambil es";
            this.noBotolBefore = this.noBotolNow;
            this.setBalikBotol(true);
          }
        }
      }
    },
    onDownFruit: function (e) {
      var _gthis = this;
      if (this.counterGelas < this.batasGelas) {
        if (this.statusBartender == "idle") {
          this.statusBartender = "anim";
          this.jenisAnim = "ambil fruit";
          this.playAnimChar("siap ambil barang");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
        } else if (HxOverrides.substr(this.statusBartender, 0, 6) == "pegang") {
          if (this.statusBartender == "pegang fruit") {
            this.statusBartender = "anim";
            this.jenisAnim = "idle";
            this.fruitMencelat(0.23333333333333334);
            this.playAnimChar("balikin fruit");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else if (this.statusBartender == "pegang es") {
            this.statusBartender = "anim";
            this.jenisAnim = "ambil fruit";
            this.playAnimChar("balikin es");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(this.sendokEs, 0.001, { alpha: 1 })
              .delay(0.2)
              .onComplete(function () {
                _gthis.sendokEs.set_visible(true);
              });
          } else {
            this.statusBartender = "anim";
            this.jenisAnim = "ambil fruit";
            this.noBotolBefore = this.noBotolNow;
            this.setBalikBotol(true);
          }
        } else if (this.statusBartender == "shake") {
          this.tataTextInfo("How good is your", "cocktail?");
          this.statusBartender = "potong garnish";
          this.playAnimChar("shake turun");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          this.btnServe.removeEventListener(
            "mouseDown",
            $bind(this, this.onDownServe)
          );
        }
      } else if (this.statusBartender == "shake") {
        this.tataTextInfo("How good is your", "cocktail?");
        this.statusBartender = "potong garnish";
        this.playAnimChar("shake turun");
        this.kepala.animated.addEventListener(
          "complete",
          $bind(this, this.selesaiAnimasi),
          false,
          0,
          true
        );
        this.btnServe.removeEventListener(
          "mouseDown",
          $bind(this, this.onDownServe)
        );
      }
    },
    onOverItem: function (e) {
      if (
        this.statusBartender != "minum" &&
        this.statusBartender != "potong garnish" &&
        this.bolPour == false
      ) {
        if (
          (this.statusBartender == "shake" &&
            this.counterGelas >= this.batasGelas) ||
          this.counterGelas < this.batasGelas
        ) {
          if (
            js_Boot.__instanceof(
              e.currentTarget,
              openfl_display_SimpleButton
            ) &&
            js_Boot
              .__cast(e.currentTarget, openfl_display_SimpleButton)
              .get_name() == "btnPour"
          ) {
            this.tataTextInfo("Click and hold", "to add");
          } else if (
            js_Boot.__instanceof(
              e.currentTarget,
              openfl_display_SimpleButton
            ) &&
            js_Boot
              .__cast(e.currentTarget, openfl_display_SimpleButton)
              .get_name() == "btnShake"
          ) {
            this.tataTextInfo("Click and hold", "to shake");
          } else if (
            js_Boot.__instanceof(
              e.currentTarget,
              openfl_display_SimpleButton
            ) &&
            js_Boot
              .__cast(e.currentTarget, openfl_display_SimpleButton)
              .get_name() == "btnServe"
          ) {
            this.tataTextInfo("Click once to serve");
          } else if (
            js_Boot.__instanceof(e.currentTarget, BaseAnimation) &&
            js_Boot.__cast(e.currentTarget, BaseAnimation).get_name() ==
              "tanganGG"
          ) {
            this.tataTextInfo(
              DataGame.dataBotol[
                js_Boot.__cast(e.currentTarget, BaseAnimation).currentFrame() +
                  1
              ].nama
            );
          } else if (this.statusBartender != "shake") {
            this.tataTextInfo(
              DataGame.dataBotol[
                Global.stringToInt(
                  js_Boot
                    .__cast(e.currentTarget, openfl_display_Sprite)
                    .get_name()
                )
              ].nama
            );
          } else if (
            Global.stringToInt(
              js_Boot.__cast(e.currentTarget, openfl_display_Sprite).get_name()
            ) == 23
          ) {
            this.tataTextInfo(
              DataGame.dataBotol[
                Global.stringToInt(
                  js_Boot
                    .__cast(e.currentTarget, openfl_display_Sprite)
                    .get_name()
                )
              ].nama
            );
          }
        }
      }
    },
    onOutMouse: function (e) {
      if (this.bolPour == false) {
        if (this.statusBartender == "idle") {
          if (this.counterGelas >= this.batasGelas) {
            this.showGelas(true);
            this.tataTextInfo("Time to shake");
          } else {
            this.tataTextInfo("What will you add?");
          }
        } else if (HxOverrides.substr(this.statusBartender, 0, 6) == "pegang") {
          if (this.counterGelas >= this.batasGelas) {
            this.showGelas(true);
            this.tataTextInfo("Time to shake");
          } else {
            this.tataTextInfo("Hold pour to add");
          }
        } else if (this.statusBartender == "shake") {
          this.tataTextInfo("Shake, and serve", "when ready");
        } else {
          this.tataTextInfo("How good is your", "cocktail?");
        }
      }
    },
    cekScoreMinuman: function () {
      var bolRightMix = false;
      var _g1 = 0;
      var _g = this.arrIsiGelas.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (
          this.arrIsiGelas[i].noBotol == 21 ||
          this.arrIsiGelas[i].noBotol == 22
        ) {
          this.totalScore += Math.round(
            DataGame.dataBotol[this.arrIsiGelas[i].noBotol].total *
              this.arrIsiGelas[i].jumlah
          );
        } else {
          this.totalScore += Math.round(
            (this.arrIsiGelas[i].jumlah / 36) *
              DataGame.dataBotol[this.arrIsiGelas[i].noBotol].total
          );
        }
      }
      if (this.arrIsiGelas.length == 7) {
        if (
          this.arrIsiGelas
            .map(function (e) {
              return e.noBotol;
            })
            .indexOf(11) >= 0 &&
          this.arrIsiGelas
            .map(function (e1) {
              return e1.noBotol;
            })
            .indexOf(3) >= 0 &&
          this.arrIsiGelas
            .map(function (e2) {
              return e2.noBotol;
            })
            .indexOf(6) >= 0 &&
          this.arrIsiGelas
            .map(function (e3) {
              return e3.noBotol;
            })
            .indexOf(13) >= 0 &&
          this.arrIsiGelas
            .map(function (e4) {
              return e4.noBotol;
            })
            .indexOf(10) >= 0 &&
          this.arrIsiGelas
            .map(function (e5) {
              return e5.noBotol;
            })
            .indexOf(14) >= 0 &&
          this.arrIsiGelas
            .map(function (e6) {
              return e6.noBotol;
            })
            .indexOf(21) >= 0
        ) {
          if (this.bolAdaAcc == true) {
            this.totalScore += this.totalScore;
            bolRightMix = true;
          } else if (Math.round((this.arrIsiGelas.length - 1) * 300) >= 3000) {
            this.totalScore += 3000;
          } else {
            this.totalScore += Math.round((this.arrIsiGelas.length - 1) * 300);
          }
        } else {
          var panjangArr = this.arrIsiGelas.length;
          if (
            this.arrIsiGelas
              .map(function (e7) {
                return e7.noBotol;
              })
              .indexOf(21) >= 0
          ) {
            --panjangArr;
          }
          if (
            this.arrIsiGelas
              .map(function (e8) {
                return e8.noBotol;
              })
              .indexOf(22) >= 0
          ) {
            --panjangArr;
          }
          if (panjangArr > 1) {
            if (Math.round(panjangArr * 300) >= 3000) {
              this.totalScore += 3000;
            } else {
              this.totalScore += Math.round(panjangArr * 300);
            }
          }
          if (this.bolAdaAcc == true) {
            this.totalScore += 100;
          }
        }
      } else {
        var panjangArr1 = this.arrIsiGelas.length;
        if (
          this.arrIsiGelas
            .map(function (e9) {
              return e9.noBotol;
            })
            .indexOf(21) >= 0
        ) {
          --panjangArr1;
        }
        if (
          this.arrIsiGelas
            .map(function (e10) {
              return e10.noBotol;
            })
            .indexOf(22) >= 0
        ) {
          --panjangArr1;
        }
        if (panjangArr1 > 1) {
          this.totalScore += Math.round(panjangArr1 * 400);
        }
        if (this.bolAdaAcc == true) {
          this.totalScore += 100;
        }
      }
      this.totalScore += Math.round((this.totalShake / 10) * 50);
      if (bolRightMix == false) {
        if (this.totalScore >= 8000) {
          this.totalScore = Global.calculateRandom(7800, 7999);
        }
      }
      DataGame.totalScore = this.totalScore;
      if (this.arrIsiGelas.length == 1) {
        if (
          this.arrIsiGelas[0].noBotol == 21 &&
          DataSave.achievements[1] == false
        ) {
          DataSave.saveAchievements(1, function () {});
        } else if (
          this.arrIsiGelas[0].noBotol == 22 &&
          DataSave.achievements[6] == false
        ) {
          DataSave.saveAchievements(6, function () {});
        }
      } else if (this.arrIsiGelas.length >= 10) {
        var lengthMix = this.arrIsiGelas.length;
        if (
          this.arrIsiGelas
            .map(function (e11) {
              return e11.noBotol;
            })
            .indexOf(21) >= 0
        ) {
          --lengthMix;
        }
        if (
          this.arrIsiGelas
            .map(function (e12) {
              return e12.noBotol;
            })
            .indexOf(22) >= 0
        ) {
          --lengthMix;
        }
        if (lengthMix >= 10 && DataSave.achievements[4] == false) {
          DataSave.saveAchievements(4, function () {});
        }
      }
    },
    fruitMencelat: function (durDelay) {
      if (durDelay == null) {
        durDelay = 0.46666666666666667;
      }
      var _gthis = this;
      if (DataGame.adaFruit.indexOf(true) < 0) {
        DataGame.adaFruit[1] = true;
        DataGame.adaFruit[2] = true;
        DataGame.adaFruit[3] = true;
        motion_Actuate
          .tween(this.groupChar, 0.001, { alpha: 1 })
          .ease(motion_easing_Linear.get_easeNone())
          .delay(durDelay)
          .onComplete(function () {
            var fruit1 = new Fruit("1", 177, 311);
            _gthis.sptGroup.addChildAt(
              fruit1,
              _gthis.sptGroup.getChildIndex(_gthis.bgDepan) - 1
            );
            var fruit2 = new Fruit("2", 177, 311);
            _gthis.sptGroup.addChildAt(
              fruit2,
              _gthis.sptGroup.getChildIndex(_gthis.bgDepan) - 1
            );
            var fruit3 = new Fruit("3", 177, 311);
            _gthis.sptGroup.addChildAt(
              fruit3,
              _gthis.sptGroup.getChildIndex(_gthis.bgDepan) - 1
            );
          });
      }
    },
    garnishMencelat: function () {
      var _gthis = this;
      motion_Actuate
        .tween(this.bgDepan, 0.001, { alpha: 1 })
        .ease(motion_easing_Linear.get_easeNone())
        .delay(1.1333333333333333)
        .onComplete(function () {
          SoundGame.playSFX("sounds", "cut", DataGame.volCut);
          _gthis.cipratan.animated.showBehaviors([
            "anim ciprat",
            "anim ciprat",
            "anim ciprat",
            "idle",
          ]);
          var fruit1 = new Fruit("4", 570, 352);
          _gthis.sptGroup.addChildAt(
            fruit1,
            _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
          );
          var fruit2 = new Fruit("5", 570, 352);
          _gthis.sptGroup.addChildAt(
            fruit2,
            _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
          );
          var fruit3 = new Fruit("4", 570, 352);
          _gthis.sptGroup.addChildAt(
            fruit3,
            _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
          );
          var fruit4 = new Fruit("5", 570, 352);
          _gthis.sptGroup.addChildAt(
            fruit4,
            _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
          );
          motion_Actuate
            .tween(_gthis.bgDepan, 0.001, { alpha: 1 })
            .ease(motion_easing_Linear.get_easeNone())
            .delay(0.53333333333333333)
            .onComplete(function () {
              var fruit5 = new Fruit("4", 570, 352);
              _gthis.sptGroup.addChildAt(
                fruit5,
                _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
              );
              var fruit6 = new Fruit("5", 570, 352);
              _gthis.sptGroup.addChildAt(
                fruit6,
                _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
              );
              var fruit7 = new Fruit("4", 570, 352);
              _gthis.sptGroup.addChildAt(
                fruit7,
                _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
              );
              var fruit8 = new Fruit("5", 570, 352);
              _gthis.sptGroup.addChildAt(
                fruit8,
                _gthis.sptGroup.getChildIndex(_gthis.groupChar) - 1
              );
            });
        });
    },
    selesaiAnimasi: function (e) {
      var _gthis = this;
      js_Boot
        .__cast(e.currentTarget, spritesheet_AnimatedSprite)
        .removeEventListener("complete", $bind(this, this.selesaiAnimasi));
      var _g = js_Boot.__cast(e.currentTarget, spritesheet_AnimatedSprite)
        .currentBehavior.name;
      switch (_g) {
        case "ambil es":
          this.statusBartender = "pegang es";
          break;
        case "ambil fruit":
          this.statusBartender = "pegang fruit";
          break;
        case "balik idle":
          this.playAnimChar("idle");
          this.statusBartender = "idle";
          this.sendokEs.set_visible(true);
          this.sendokEs.set_alpha(1);
          break;
        case "balikin es":
          if (this.jenisAnim == "idle") {
            this.playAnimChar("balik idle");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else if (this.jenisAnim == "ambil fruit") {
            this.fruitMencelat();
            this.playAnimChar("ambil fruit");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else if (this.jenisAnim == "ambil botol") {
            this.playAnimChar("siap ambil botol");
            this.setAmbilBotol();
          } else if (this.jenisAnim == "idle shake") {
            this.playAnimChar("masuk shake");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            this.statusBartender = "masuk shake";
          }
          break;
        case "balikin fruit":
          if (this.jenisAnim == "idle") {
            this.playAnimChar("balik idle");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else if (this.jenisAnim == "ambil es") {
            this.playAnimChar("ambil es");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(this.sendokEs, 0.001, { alpha: 1 })
              .delay(0.6333333333333333)
              .onComplete(function () {
                _gthis.sendokEs.set_alpha(0);
                _gthis.sendokEs.set_visible(false);
              });
          } else if (this.jenisAnim == "ambil botol") {
            this.playAnimChar("siap ambil botol");
            this.setAmbilBotol();
          } else if (this.jenisAnim == "idle shake") {
            this.playAnimChar("masuk shake");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            this.statusBartender = "masuk shake";
          }
          break;
        case "es jatuh":
        case "fruit jatuh":
          this.playAnimChar("balik idle");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "isi bener":
          this.playAnimChar("mau minum");
          this.setAnimGelas(this.gelasBener, "mau minum");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "isi bener acc":
          this.playAnimChar("mau minum");
          this.setAnimGelas(this.gelasBenerAcc, "mau minum");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "isi salah":
          this.playAnimChar("mau minum");
          this.setAnimGelas(this.gelasSalah, "mau minum");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "isi salah acc":
          this.playAnimChar("mau minum");
          this.setAnimGelas(this.gelasSalahAcc, "mau minum");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "loop shake":
          if (this.bolDownShake == true) {
            this.playAnimChar("loop shake");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          }
          break;
        case "masuk shake":
        case "masuk shake idle":
          this.statusBartender = "shake";
          if (this.bolDownShake == true) {
            SoundGame.playLOOP("sounds", "shake", DataGame.volShake);
            this.playAnimChar("loop shake");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          }
          break;
        case "mau minum":
          this.tanganB.animated.showBehavior("stuck minum tangan");
          this.gelasTuang.set_visible(false);
          if (this.totalScore >= 6000) {
            if (this.bolAdaAcc == true) {
              this.setAnimGelas(this.gelasBenerAcc, "stuck minum");
            } else {
              this.setAnimGelas(this.gelasBener, "stuck minum");
            }
          } else if (this.bolAdaAcc == true) {
            this.setAnimGelas(this.gelasSalahAcc, "stuck minum");
          } else {
            this.setAnimGelas(this.gelasSalah, "stuck minum");
          }
          this.bolStuck = true;
          this.counterStuck = 0;
          break;
        case "potong garnish":
          this.statusBartender = "minum";
          this.bolAdaAcc = true;
          this.playAnimChar("taruh gelas");
          this.setAnimGelas(this.gelasKosongAcc, "taruh gelas");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          this.kepala.gotoAndStop(0);
          SoundGame.playSFX("sounds", "glass", DataGame.volGlass, 0.2);
          break;
        case "pour shaker":
          this.cekScoreMinuman();
          SoundGame.playSFX("sounds", "pour", DataGame.volLiquid);
          if (this.totalScore >= 6000) {
            if (this.bolAdaAcc == true) {
              this.gelasTuang.animated.showBehavior("isi bener acc");
            } else {
              this.gelasTuang.animated.showBehavior("isi bener");
            }
          } else if (this.bolAdaAcc == true) {
            this.gelasTuang.animated.showBehavior("isi salah acc");
          } else {
            this.gelasTuang.animated.showBehavior("isi salah");
          }
          this.gelasTuang.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "proses minum":
          this.groupChar.set_visible(false);
          if (this.totalScore < 1000) {
            DataGame.noEnding = 2;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
          } else if (this.totalScore >= 1000 && this.totalScore < 2000) {
            DataGame.noEnding = 3;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
          } else if (this.totalScore >= 2000 && this.totalScore < 3000) {
            DataGame.noEnding = 4;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
          } else if (this.totalScore >= 3000 && this.totalScore < 4000) {
            DataGame.noEnding = 5;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
          } else if (this.totalScore >= 4000 && this.totalScore < 5000) {
            DataGame.noEnding = 6;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
          } else if (this.totalScore >= 5000 && this.totalScore < 6000) {
            DataGame.noEnding = 7;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
          } else if (this.totalScore >= 6000 && this.totalScore < 7000) {
            DataGame.noEnding = 8;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
          } else if (this.totalScore >= 7000 && this.totalScore < 8000) {
            DataGame.noEnding = 9;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
          } else if (this.totalScore >= 8000) {
            DataGame.noEnding = 10;
            this.endingGame10 = new Ending10();
            this.sptGroup.addChildAt(
              this.endingGame10,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
          }
          break;
        case "shake turun":
          this.fruitMencelat(0.56666666666666665);
          this.garnishMencelat();
          this.playAnimChar("potong garnish");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
        case "shake turun tuang":
          this.playAnimChar("taruh gelas");
          this.setAnimGelas(this.gelasKosong, "taruh gelas");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          this.kepala.gotoAndStop(0);
          SoundGame.playSFX("sounds", "glass", DataGame.volGlass, 0.2);
          break;
        case "siap ambil barang":
          if (this.jenisAnim == "ambil fruit") {
            this.fruitMencelat();
            this.playAnimChar("ambil fruit");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else if (this.jenisAnim == "ambil es") {
            this.playAnimChar("ambil es");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(this.sendokEs, 0.001, { alpha: 1 })
              .delay(0.6333333333333333)
              .onComplete(function () {
                _gthis.sendokEs.set_alpha(0);
                _gthis.sendokEs.set_visible(false);
              });
          } else if (this.jenisAnim == "ambil botol") {
            this.playAnimChar("siap ambil botol");
            this.setAmbilBotol();
          }
          break;
        case "taruh gelas":
          this.gelasTuang.set_visible(true);
          this.playAnimChar("pour shaker");
          this.kepala.animated.addEventListener(
            "complete",
            $bind(this, this.selesaiAnimasi),
            false,
            0,
            true
          );
          break;
      }
    },
    setAmbilBotol: function () {
      var _gthis = this;
      this.durasiBotol =
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "scale"
        ) / 10;
      if (this.durasiBotol >= 0.3) {
        this.durasiBotol = 0.3;
      } else if (this.durasiBotol <= 0.15) {
        this.durasiBotol = 0.15;
      }
      if (this.noBotolNow == "19" || this.noBotolNow == "20") {
        this.durasiBotol = 0.07;
      }
      this.lenganG.set_visible(
        this.bajuG.set_visible(
          this.tanganBG.set_visible(this.tanganGG.set_visible(true))
        )
      );
      this.tanganGG.set_visible(false);
      this.bajuG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "xb"
        )
      );
      this.bajuG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "yb"
        )
      );
      this.bajuG.set_rotation(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "angleb"
        )
      );
      this.lenganG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "x"
        )
      );
      this.lenganG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "y"
        )
      );
      this.lenganG.set_scaleX(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "scaledef"
        )
      );
      this.lenganG.set_rotation(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "angle"
        )
      );
      this.tanganBG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "xdef"
        ) - 9
      );
      this.tanganBG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "ydef"
        ) - 11
      );
      motion_Actuate
        .tween(this.lenganG, this.durasiBotol, {
          scaleX: Reflect.field(
            Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
            "scale"
          ),
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onUpdate(function () {
          var tamp = _gthis.lenganGerak.localToGlobal(
            new openfl_geom_Point(
              _gthis.buletKecil.get_x(),
              _gthis.buletKecil.get_y()
            )
          );
          var locala = _gthis.groupChar.globalToLocal(tamp);
          _gthis.tanganBG.set_x(locala.x - 9);
          _gthis.tanganBG.set_y(locala.y + 8 - 11);
        })
        .onComplete($bind(this, this.tweenAmbilBotol));
    },
    setBalikBotol: function (bolLanjut) {
      if (bolLanjut == null) {
        bolLanjut = false;
      }
      var _gthis = this;
      this.durasiBotol =
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "scale"
        ) / 10;
      if (this.durasiBotol >= 0.3) {
        this.durasiBotol = 0.3;
      } else if (this.durasiBotol <= 0.15) {
        this.durasiBotol = 0.15;
      }
      if (this.noBotolBefore == "19" || this.noBotolBefore == "20") {
        this.durasiBotol = 0.07;
      }
      this.bajuG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "xb"
        )
      );
      this.bajuG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "yb"
        )
      );
      this.bajuG.set_rotation(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "angleb"
        )
      );
      motion_Actuate
        .tween(this.lenganG, this.durasiBotol, {
          scaleX: Reflect.field(
            Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
            "scale"
          ),
          rotation: Reflect.field(
            Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
            "angle"
          ),
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onUpdate(function () {
          var tamp = _gthis.lenganGerak.localToGlobal(
            new openfl_geom_Point(
              _gthis.buletKecil.get_x(),
              _gthis.buletKecil.get_y()
            )
          );
          var locala = _gthis.groupChar.globalToLocal(tamp);
          _gthis.tanganGG.set_x(locala.x);
          _gthis.tanganGG.set_y(locala.y + 8);
        })
        .onComplete($bind(this, this.tweenBalikBotol), [bolLanjut]);
    },
    tweenBalikBotol: function (bolLanjut) {
      if (bolLanjut == null) {
        bolLanjut = false;
      }
      var _gthis = this;
      js_Boot
        .__cast(
          Reflect.field(this, "botol" + this.noBotolBefore),
          openfl_display_Sprite
        )
        .set_visible(true);
      this.tanganGG.set_visible(false);
      this.tanganBG.set_visible(true);
      this.tanganBG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "xt"
        ) - 9
      );
      this.tanganBG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "yt"
        ) - 11
      );
      this.durasiBotol =
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
          "scale"
        ) / 10;
      if (this.durasiBotol >= 0.3) {
        this.durasiBotol = 0.3;
      } else if (this.durasiBotol <= 0.15) {
        this.durasiBotol = 0.15;
      }
      if (this.noBotolBefore == "19" || this.noBotolBefore == "20") {
        this.durasiBotol = 0.07;
      }
      motion_Actuate
        .tween(this.lenganG, this.durasiBotol, {
          scaleX: Reflect.field(
            Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolBefore),
            "scaledef"
          ),
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onUpdate(function () {
          var tamp = _gthis.lenganGerak.localToGlobal(
            new openfl_geom_Point(
              _gthis.buletKecil.get_x(),
              _gthis.buletKecil.get_y()
            )
          );
          var locala = _gthis.groupChar.globalToLocal(tamp);
          _gthis.tanganBG.set_x(locala.x - 9);
          _gthis.tanganBG.set_y(locala.y + 8 - 11);
        })
        .onComplete(function () {
          if (bolLanjut == false) {
            if (_gthis.jenisAnim == "balik botol shake") {
              _gthis.playAnimChar("masuk shake");
              _gthis.kepala.animated.addEventListener(
                "complete",
                $bind(_gthis, _gthis.selesaiAnimasi),
                false,
                0,
                true
              );
              _gthis.lenganG.set_visible(
                _gthis.bajuG.set_visible(
                  _gthis.tanganBG.set_visible(
                    _gthis.tanganGG.set_visible(false)
                  )
                )
              );
            } else {
              _gthis.playAnimChar("balik idle");
              _gthis.kepala.animated.addEventListener(
                "complete",
                $bind(_gthis, _gthis.selesaiAnimasi),
                false,
                0,
                true
              );
              _gthis.lenganG.set_visible(
                _gthis.bajuG.set_visible(
                  _gthis.tanganBG.set_visible(
                    _gthis.tanganGG.set_visible(false)
                  )
                )
              );
            }
          } else if (_gthis.jenisAnim == "ambil es") {
            _gthis.playAnimChar("ambil es");
            _gthis.kepala.animated.addEventListener(
              "complete",
              $bind(_gthis, _gthis.selesaiAnimasi),
              false,
              0,
              true
            );
            motion_Actuate
              .tween(_gthis.sendokEs, 0.001, { alpha: 1 })
              .delay(0.6333333333333333)
              .onComplete(function () {
                _gthis.sendokEs.set_alpha(0);
                _gthis.sendokEs.set_visible(false);
              });
            _gthis.lenganG.set_visible(
              _gthis.bajuG.set_visible(
                _gthis.tanganBG.set_visible(_gthis.tanganGG.set_visible(false))
              )
            );
          } else if (_gthis.jenisAnim == "ambil fruit") {
            _gthis.fruitMencelat();
            _gthis.playAnimChar("ambil fruit");
            _gthis.kepala.animated.addEventListener(
              "complete",
              $bind(_gthis, _gthis.selesaiAnimasi),
              false,
              0,
              true
            );
            _gthis.lenganG.set_visible(
              _gthis.bajuG.set_visible(
                _gthis.tanganBG.set_visible(_gthis.tanganGG.set_visible(false))
              )
            );
          } else if (_gthis.jenisAnim == "ambil botol") {
            _gthis.setAmbilBotol();
          }
        });
    },
    tweenAmbilBotol: function () {
      var _gthis = this;
      this.durasiBotol =
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "scale"
        ) / 10;
      if (this.durasiBotol >= 0.3) {
        this.durasiBotol = 0.3;
      } else if (this.durasiBotol <= 0.15) {
        this.durasiBotol = 0.15;
      }
      if (this.noBotolNow == "19" || this.noBotolNow == "20") {
        this.durasiBotol = 0.07;
      }
      js_Boot
        .__cast(
          Reflect.field(this, "botol" + this.noBotolNow),
          openfl_display_Sprite
        )
        .set_visible(false);
      this.tanganGG.set_visible(true);
      this.tanganBG.set_visible(false);
      this.tanganGG.gotoAndStop(Global.stringToInt(this.noBotolNow) - 1);
      this.tanganGG.set_x(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "xt"
        )
      );
      this.tanganGG.set_y(
        Reflect.field(
          Reflect.field(DataPosition, "AMBIL_BOTOL" + this.noBotolNow),
          "yt"
        )
      );
      motion_Actuate
        .tween(this.lenganG, this.durasiBotol, {
          scaleX: 0.7,
          x: 215,
          y: 244,
          rotation: 21.5,
        })
        .ease(motion_easing_Linear.get_easeNone())
        .onUpdate(function () {
          var tamp = _gthis.lenganGerak.localToGlobal(
            new openfl_geom_Point(
              _gthis.buletKecil.get_x(),
              _gthis.buletKecil.get_y()
            )
          );
          var locala = _gthis.groupChar.globalToLocal(tamp);
          _gthis.tanganGG.set_x(locala.x);
          _gthis.tanganGG.set_y(locala.y + 8);
        });
      motion_Actuate
        .tween(this.bajuG, this.durasiBotol, { rotation: 27.9 })
        .ease(motion_easing_Linear.get_easeNone())
        .onComplete(function () {
          _gthis.statusBartender = "pegang botol";
        });
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      var _g = 1;
      while (_g < 21) {
        var btll = _g++;
        js_Boot
          .__cast(Reflect.field(this, "botol" + btll), openfl_display_Sprite)
          .removeEventListener("mouseOver", $bind(this, this.onOverItem));
        js_Boot
          .__cast(Reflect.field(this, "botol" + btll), openfl_display_Sprite)
          .removeEventListener("mouseOut", $bind(this, this.onOutMouse));
        js_Boot
          .__cast(Reflect.field(this, "botol" + btll), openfl_display_Sprite)
          .removeEventListener("mouseDown", $bind(this, this.onDownBotol));
      }
      this.btnPour.removeEventListener(
        "mouseDown",
        $bind(this, this.onDownPour)
      );
      this.btnShake.removeEventListener(
        "mouseDown",
        $bind(this, this.onDownShake)
      );
      this.btnServe.removeEventListener(
        "mouseDown",
        $bind(this, this.onDownServe)
      );
      this.removeEventListener("mouseUp", $bind(this, this.onMouseUp));
      this.tanganGG.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.tanganGG.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.tanganGG.removeEventListener(
        "mouseDown",
        $bind(this, this.onBalikinBotol)
      );
      this.kepala.animated.removeEventListener(
        "complete",
        $bind(this, this.selesaiAnimasi)
      );
      this.btnPour.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.btnShake.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.btnServe.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.bgIce.removeEventListener("mouseOver", $bind(this, this.onOverItem));
      this.bgFruit.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.sendokEs.removeEventListener(
        "mouseOver",
        $bind(this, this.onOverItem)
      );
      this.sendokEs.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.bgFruit.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.bgIce.removeEventListener("mouseOut", $bind(this, this.onOutMouse));
      this.btnPour.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.btnShake.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.btnServe.removeEventListener(
        "mouseOut",
        $bind(this, this.onOutMouse)
      );
      this.bgIce.removeEventListener("mouseDown", $bind(this, this.onDownIce));
      this.sendokEs.removeEventListener(
        "mouseDown",
        $bind(this, this.onDownIce)
      );
      this.bgFruit.removeEventListener(
        "mouseDown",
        $bind(this, this.onDownFruit)
      );
      this.removeEventListener("mouseDown", $bind(this, this.onMouseDown));
      this.removeEventListener("mouseMove", $bind(this, this.onMouseMove));
      if (this.endingGame1 != null) {
        this.endingGame1.destroy();
      }
      if (this.endingGame10 != null) {
        this.endingGame10.destroy();
      }
      if (this.endingGame != null) {
        this.endingGame.destroy();
      }
      Global.killChildren(this, false);
      this.sptGroup = null;
      this.sptBG = null;
      this.rak = null;
      this.bgDepan = null;
      this.sendokEs = null;
      this.btnPour = null;
      this.btnShake = null;
      this.btnServe = null;
      this.btnSound = null;
      this.bgText = null;
      this.txtInfo1 = null;
      this.txtInfo2 = null;
      this.groupChar = null;
      this.tanganB = null;
      this.body = null;
      this.kepala = null;
      this.cikrak = null;
      this.tanganAKanan = null;
      this.tanganAKiri = null;
      this.gelasKosong = null;
      this.gelasBener = null;
      this.gelasSalah = null;
      this.gelasKosongAcc = null;
      this.gelasSalahAcc = null;
      this.gelasBenerAcc = null;
      this.mejaChar = null;
      this.gelasTuang = null;
      this.bgIce = null;
      this.bgFruit = null;
      this.olGelas = null;
      this.isiGelas = null;
      this.maskGelas = null;
      this.bajuG = null;
      this.tanganBG = null;
      this.tanganGG = null;
      this.lenganG = null;
      this.partikelAir = null;
      this.lenganGerak = null;
      this.buletKecil = null;
      this.endingGame1 = null;
      this.percik = null;
      this.endingGame10 = null;
      this.endingGame = null;
      this.cipratan = null;
      var _g1 = 1;
      while (_g1 < 21) {
        var btl = _g1++;
        Reflect.setProperty(this, "botol" + btl, null);
      }
    },
    cekIsiGelas: function (jenis) {
      if (jenis == null) {
        jenis = "";
      }
      var _gthis = this;
      if (this.isiGelas.get_y() <= this.bgText.get_y() + 25) {
        this.isiGelas.set_y(this.bgText.get_y() + 25);
        this.counterGelas = this.batasGelas;
        this.showGelas(true);
        this.tataTextInfo("Time to shake");
        if (jenis == "botol") {
          if (this.counterUkur != 0) {
            if (
              this.arrIsiGelas
                .map(function (e) {
                  return e.noBotol;
                })
                .indexOf(this.tanganGG.currentFrame() + 1) < 0
            ) {
              this.arrIsiGelas.push({
                noBotol: this.tanganGG.currentFrame() + 1,
                jumlah: this.counterUkur,
              });
            } else {
              this.arrIsiGelas[
                this.arrIsiGelas
                  .map(function (e1) {
                    return e1.noBotol;
                  })
                  .indexOf(this.tanganGG.currentFrame() + 1)
              ].jumlah += this.counterUkur;
            }
          }
          this.bolPour = false;
          this.bolPartikel = false;
          motion_Actuate.stop(this.tanganGG);
          motion_Actuate.stop(this.lenganG);
          motion_Actuate
            .tween(
              this.lenganG,
              (this.tanganGG.get_rotation() / this.totalRotasi) * 0.7,
              { scaleX: 0.7, rotation: 21.5 }
            )
            .ease(motion_easing_Linear.get_easeNone())
            .onUpdate(function () {
              var tamp = _gthis.lenganGerak.localToGlobal(
                new openfl_geom_Point(
                  _gthis.buletKecil.get_x(),
                  _gthis.buletKecil.get_y()
                )
              );
              var locala = _gthis.groupChar.globalToLocal(tamp);
              _gthis.tanganGG.set_x(locala.x);
              _gthis.tanganGG.set_y(locala.y + 8);
            });
          motion_Actuate
            .tween(
              this.tanganGG,
              (this.tanganGG.get_rotation() / this.totalRotasi) * 0.7,
              { rotation: 0 }
            )
            .ease(motion_easing_Linear.get_easeNone())
            .onComplete(function () {
              _gthis.statusBartender = "pegang botol";
            });
        }
      }
    },
    onMouseDown: function (e) {
      this.counterNothing = 0;
    },
    onMouseMove: function (e) {
      this.counterNothing = 0;
    },
    Update: function (e) {
      var _gthis = this;
      if (DataSave.achievements[8] == false && this.bolNothing == true) {
        this.counterNothing++;
        if (this.counterNothing >= 1500) {
          DataSave.saveAchievements(8, function () {});
        }
      }
      if (DataGame.selesaiTransisi == true && this.bolMulaiGame == false) {
        this.addEventListener(
          "mouseDown",
          $bind(this, this.onMouseDown),
          false,
          0,
          true
        );
        this.addEventListener(
          "mouseMove",
          $bind(this, this.onMouseMove),
          false,
          0,
          true
        );
        this.bolMulaiGame = true;
        this.bolNothing = true;
        this.counterNothing = 0;
        if (DataGame.activeCheat == true) {
          this.stage.set_focus(this);
          this.addEventListener(
            "keyDown",
            $bind(this, this.onDownKeyboard),
            false,
            0,
            true
          );
        }
      }
      if (this.bolStuck == true) {
        this.counterStuck++;
        if (this.counterStuck == 30) {
          SoundGame.playSFX("sounds", "gulp", DataGame.volGulp, 0.3);
          if (this.totalScore >= 6000) {
            if (this.bolAdaAcc == true) {
              this.playAnimChar("proses minum");
              this.setAnimGelas(this.gelasBenerAcc, "proses minum");
              this.kepala.animated.addEventListener(
                "complete",
                $bind(this, this.selesaiAnimasi),
                false,
                0,
                true
              );
            } else {
              this.playAnimChar("proses minum");
              this.setAnimGelas(this.gelasBener, "proses minum");
              this.kepala.animated.addEventListener(
                "complete",
                $bind(this, this.selesaiAnimasi),
                false,
                0,
                true
              );
            }
          } else if (this.bolAdaAcc == true) {
            this.playAnimChar("proses minum");
            this.setAnimGelas(this.gelasSalahAcc, "proses minum");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          } else {
            this.playAnimChar("proses minum");
            this.setAnimGelas(this.gelasSalah, "proses minum");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
          }
          this.bolStuck = false;
        }
      }
      if (this.kepala.currentLabel() == "taruh gelas") {
        if (this.kepala.currentFrame() >= 6) {
          this.gelasTuang.set_visible(true);
          if (this.bolAdaAcc == true) {
            this.gelasTuang.animated.showBehavior("idle acc");
          } else {
            this.gelasTuang.animated.showBehavior("idle");
          }
        }
      }
      if (this.kepala.currentLabel() == "proses minum") {
        if (this.kepala.currentFrame() >= 137) {
          this.gelasTuang.set_visible(false);
        }
      }
      if (this.bolPartikel == true) {
        if (
          Math.round((this.counterGelas + 0.2) * 10) / 10 <=
          this.batasGelas
        ) {
          this.counterUkur += 0.2;
          this.counterUkur = Math.round(this.counterUkur * 10) / 10;
        } else if (this.counterGelas <= this.batasGelas) {
          this.counterUkur += this.batasGelas - this.counterGelas;
          this.counterUkur = Math.round(this.counterUkur * 10) / 10;
        }
        var _g = this.isiGelas;
        _g.set_y(_g.get_y() - 0.2);
        this.counterGelas += 0.2;
        this.counterGelas = Math.round(this.counterGelas * 10) / 10;
        this.cekIsiGelas("botol");
        var par = new Particle(
          this.tanganGG.get_x() + 55,
          this.tanganGG.get_y() + 52
        );
        this.partikelAir.addChildAt(par, 0);
      }
      if (this.bolTuangFruit == true) {
        if (
          this.tanganAKanan.currentFrame() < 3 &&
          this.statusBartender == "tuang fruit"
        ) {
          this.tanganAKanan.nextFrame();
          this.tanganAKiri.nextFrame();
          this.tanganB.nextFrame();
          if (this.tanganAKanan.currentFrame() == 3) {
            motion_Actuate
              .tween(this.groupChar, 0.001, { alpha: 1 })
              .delay(0.23333333333333334)
              .ease(motion_easing_Linear.get_easeNone())
              .onComplete(function () {
                _gthis.percik.animated.showBehaviors(["anim percik", "idle"]);
              });
            this.statusBartender = "anim tuang fruit";
            SoundGame.playSFX("sounds", "bubble", DataGame.volBubble);
            this.playAnimChar("fruit jatuh");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            this.counterGelas += 9;
            var _g1 = this.isiGelas;
            _g1.set_y(_g1.get_y() - 9);
            this.cekIsiGelas();
            if (
              this.arrIsiGelas
                .map(function (e1) {
                  return e1.noBotol;
                })
                .indexOf(22) < 0
            ) {
              this.arrIsiGelas.push({ noBotol: 22, jumlah: 1 });
            } else {
              var tmp = this.arrIsiGelas;
              var tmp1 = this.arrIsiGelas
                .map(function (e2) {
                  return e2.noBotol;
                })
                .indexOf(22);
              tmp[tmp1].jumlah++;
            }
          }
        } else if (
          this.tanganAKanan.currentFrame() >= 0 &&
          this.statusBartender == "anim pegang fruit"
        ) {
          if (this.tanganAKanan.currentFrame() > 0) {
            this.tanganAKanan.prevFrame();
            this.tanganAKiri.prevFrame();
            this.tanganB.prevFrame();
          }
          if (this.tanganAKanan.currentFrame() == 0) {
            this.statusBartender = "pegang fruit";
            this.bolTuangFruit = false;
            this.tanganAKanan.animated.showBehavior("ambil fruit");
            this.tanganAKiri.animated.showBehavior("ambil fruit");
            this.tanganB.animated.showBehavior("ambil fruit");
            this.tanganAKanan.gotoAndStop(26);
            this.tanganAKiri.gotoAndStop(26);
            this.tanganB.gotoAndStop(26);
          }
        }
      }
      if (this.bolTuangEs == true) {
        if (
          this.tanganAKanan.currentFrame() < 10 &&
          this.statusBartender == "tuang es"
        ) {
          this.tanganAKanan.nextFrame();
          this.tanganAKiri.nextFrame();
          this.tanganB.nextFrame();
          this.cikrak.nextFrame();
          if (this.tanganAKanan.currentFrame() == 10) {
            this.statusBartender = "anim tuang es";
            this.percik.animated.showBehaviors(["anim percik", "idle"]);
            SoundGame.playSFX("sounds", "ice", DataGame.volIce);
            this.playAnimChar("es jatuh");
            this.kepala.animated.addEventListener(
              "complete",
              $bind(this, this.selesaiAnimasi),
              false,
              0,
              true
            );
            this.counterGelas += 9;
            var _g2 = this.isiGelas;
            _g2.set_y(_g2.get_y() - 9);
            this.cekIsiGelas();
            if (
              this.arrIsiGelas
                .map(function (e3) {
                  return e3.noBotol;
                })
                .indexOf(21) < 0
            ) {
              this.arrIsiGelas.push({ noBotol: 21, jumlah: 1 });
            } else {
              var tmp2 = this.arrIsiGelas;
              var tmp3 = this.arrIsiGelas
                .map(function (e4) {
                  return e4.noBotol;
                })
                .indexOf(21);
              tmp2[tmp3].jumlah++;
            }
          }
        } else if (
          this.tanganAKanan.currentFrame() >= 0 &&
          this.statusBartender == "anim pegang es"
        ) {
          if (this.tanganAKanan.currentFrame() > 0) {
            this.tanganAKanan.prevFrame();
            this.tanganAKiri.prevFrame();
            this.tanganB.prevFrame();
            this.cikrak.prevFrame();
          }
          if (this.tanganAKanan.currentFrame() == 0) {
            this.statusBartender = "pegang es";
            this.bolTuangEs = false;
            this.tanganAKanan.animated.showBehavior("ambil es");
            this.tanganAKiri.animated.showBehavior("ambil es");
            this.tanganB.animated.showBehavior("ambil es");
            this.cikrak.animated.showBehavior("ambil es");
            this.tanganAKanan.gotoAndStop(25);
            this.tanganAKiri.gotoAndStop(25);
            this.tanganB.gotoAndStop(25);
            this.cikrak.gotoAndStop(25);
          }
        }
      }
    },
    onDownKeyboard: function (e) {
      if (DataGame.activeCheat == true) {
        this.removeEventListener("keyDown", $bind(this, this.onDownKeyboard));
        this.groupChar.set_visible(false);
        var _g = e.keyCode;
        switch (_g) {
          case 48:
            DataGame.noEnding = 10;
            this.endingGame10 = new Ending10();
            this.sptGroup.addChildAt(
              this.endingGame10,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
            break;
          case 49:
            Main.GetInstance().showSound(false);
            DataGame.noEnding = 1;
            this.endingGame1 = new Ending1();
            this.sptGroup.addChild(this.endingGame1);
            break;
          case 50:
            DataGame.noEnding = 2;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
            break;
          case 51:
            DataGame.noEnding = 3;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
            break;
          case 52:
            DataGame.noEnding = 4;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
            break;
          case 53:
            DataGame.noEnding = 5;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
            break;
          case 54:
            DataGame.noEnding = 6;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
            break;
          case 55:
            DataGame.noEnding = 7;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
            break;
          case 56:
            DataGame.noEnding = 8;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgIce) - 1
            );
            break;
          case 57:
            DataGame.noEnding = 9;
            this.endingGame = new Ending();
            this.sptGroup.addChildAt(
              this.endingGame,
              this.sptGroup.getChildIndex(this.bgFruit) + 1
            );
            break;
        }
      }
    },
    __class__: Game1,
  });
  var Global = function () {};
  $hxClasses["Global"] = Global;
  Global.__name__ = ["Global"];
  Global.getBrowserName = function () {
    var browser = "unknown";
    Global.userAgent = openfl_external_ExternalInterface.call(
      "window.navigator.userAgent.toString"
    );
    if (Global.userAgent.indexOf("Safari") != -1) {
      browser = "Safari";
    }
    if (Global.userAgent.indexOf("Firefox") != -1) {
      browser = "Firefox";
    }
    if (Global.userAgent.indexOf("Chrome") != -1) {
      browser = "Chrome";
    }
    if (Global.userAgent.indexOf("MSIE") != -1) {
      browser = "Internet Explorer";
    }
    if (Global.userAgent.indexOf("Opera") != -1) {
      browser = "Opera";
    }
    DataGame.namaBrowser = browser;
  };
  Global.moreSplash = function (e) {
    openfl_Lib.getURL(
      new openfl_net_URLRequest(
        Global.linkWebsite +
          Global.DOMAIN +
          Global.linkSplash +
          Setting.gameName
      )
    );
  };
  Global.moreLogo = function (e) {
    openfl_Lib.getURL(
      new openfl_net_URLRequest(
        Global.linkWebsite + Global.DOMAIN + Global.linkLogo + Setting.gameName
      )
    );
    SoundGame.playSFX("sounds", "click", DataGame.volClick);
  };
  Global.moreGames = function (e) {
    openfl_Lib.getURL(
      new openfl_net_URLRequest(
        Global.linkWebsite + Global.DOMAIN + Global.linkMore + Setting.gameName
      )
    );
    SoundGame.playSFX("sounds", "click", DataGame.volClick);
  };
  Global.moreIDNET = function (e) {
    openfl_Lib.getURL(new openfl_net_URLRequest("https://www.id.net/"));
    SoundGame.playSFX("sounds", "click", DataGame.volClick);
  };
  Global.log = function (value) {};
  Global.align = function (
    obj,
    alignX,
    alignY,
    rangeX,
    rangeY,
    pivotX,
    pivotY,
    isFix,
    isPush
  ) {
    if (isPush == null) {
      isPush = true;
    }
    if (isFix == null) {
      isFix = false;
    }
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    if (rangeY == null) {
      rangeY = 0;
    }
    if (rangeX == null) {
      rangeX = 0;
    }
    if (isPush == true) {
      var alignData = {
        _obj: obj,
        _alignX: alignX,
        _alignY: alignY,
        _rangeX: rangeX,
        _rangeY: rangeY,
        _pivotX: pivotX,
        _pivotY: pivotY,
        _isFix: isFix,
      };
      Global.alignList.push(alignData);
    }
    switch (alignX) {
      case 0:
        if (pivotX == 0) {
          obj.set_x(rangeX);
        } else if (pivotX == 0.5) {
          if (isFix == false) {
            obj.set_x(obj.get_width() / 2 + rangeX);
          } else if (isFix == true) {
            obj.set_x(400 + rangeX);
          }
        } else if (pivotX == 1) {
          if (isFix == false) {
            obj.set_x(obj.get_width() + rangeX);
          } else if (isFix == true) {
            obj.set_x(800 + rangeX);
          }
        }
        break;
      case 1:
        if (pivotX == 0) {
          if (isFix == false) {
            obj.set_x(Main.SCREEN_WIDTH - obj.get_width() + rangeX);
          } else if (isFix == true) {
            obj.set_x(Main.SCREEN_WIDTH - 800 + rangeX);
          }
        } else if (pivotX == 0.5) {
          if (isFix == false) {
            obj.set_x(Main.SCREEN_WIDTH - obj.get_width() / 2 + rangeX);
          } else if (isFix == true) {
            obj.set_x(Main.SCREEN_WIDTH - 400 + rangeX);
          }
        } else if (pivotX == 1) {
          obj.set_x(Main.SCREEN_WIDTH + rangeX);
        }
        break;
      case 0.5:
        if (pivotX == 0) {
          if (isFix == false) {
            obj.set_x((Main.SCREEN_WIDTH - obj.get_width()) / 2 + rangeX);
          } else if (isFix == true) {
            obj.set_x((Main.SCREEN_WIDTH - 800) / 2 + rangeX);
          }
        } else if (pivotX == 0.5) {
          obj.set_x(Main.SCREEN_WIDTH / 2 + rangeX);
        } else if (pivotX == 1) {
          if (isFix == false) {
            obj.set_x((Main.SCREEN_WIDTH + obj.get_width()) / 2 + rangeX);
          } else if (isFix == true) {
            obj.set_x((Main.SCREEN_WIDTH + 800) / 2 + rangeX);
          }
        }
        break;
    }
    switch (alignY) {
      case 0:
        if (pivotY == 0) {
          obj.set_y(rangeY);
        } else if (pivotY == 0.5) {
          if (isFix == false) {
            obj.set_y(obj.get_height() / 2 + rangeY);
          } else if (isFix == true) {
            obj.set_y(240 + rangeY);
          }
        } else if (pivotY == 1) {
          if (isFix == false) {
            obj.set_y(obj.get_height() + rangeY);
          } else if (isFix == true) {
            obj.set_y(480 + rangeY);
          }
        }
        break;
      case 1:
        if (pivotY == 0) {
          if (isFix == false) {
            obj.set_y(Main.SCREEN_HEIGHT - obj.get_height() + rangeY);
          } else if (isFix == true) {
            obj.set_y(Main.SCREEN_HEIGHT - 480 + rangeY);
          }
        } else if (pivotY == 0.5) {
          if (isFix == false) {
            obj.set_y(Main.SCREEN_HEIGHT - obj.get_height() / 2 + rangeY);
          } else if (isFix == true) {
            obj.set_y(Main.SCREEN_HEIGHT - 240 + rangeY);
          }
        } else if (pivotY == 1) {
          obj.set_y(Main.SCREEN_HEIGHT + rangeY);
        }
        break;
      case 0.5:
        if (pivotY == 0) {
          if (isFix == false) {
            obj.set_y((Main.SCREEN_HEIGHT - obj.get_height()) / 2 + rangeY);
          } else if (isFix == true) {
            obj.set_y((Main.SCREEN_HEIGHT - 480) / 2 + rangeY);
          }
        } else if (pivotY == 0.5) {
          obj.set_y(Main.SCREEN_HEIGHT / 2 + rangeY);
        } else if (pivotY == 1) {
          if (isFix == false) {
            obj.set_y((Main.SCREEN_HEIGHT + obj.get_height()) / 2 + rangeY);
          } else if (isFix == true) {
            obj.set_y((Main.SCREEN_HEIGHT + 480) / 2 + rangeY);
          }
        }
        break;
    }
  };
  Global.loadImage = function (imgFolder, imgName, pivotX, pivotY) {
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    var newBitmap = new openfl_display_Bitmap(
      openfl_utils_Assets.getBitmapData(imgFolder + "/" + imgName)
    );
    newBitmap.smoothing = true;
    switch (pivotX) {
      case 0:
        newBitmap.set_x(0);
        break;
      case 1:
        newBitmap.set_x(-newBitmap.get_width());
        break;
      case 0.5:
        newBitmap.set_x(-newBitmap.get_width() / 2);
        break;
    }
    switch (pivotY) {
      case 0:
        newBitmap.set_y(0);
        break;
      case 1:
        newBitmap.set_y(-newBitmap.get_height());
        break;
      case 0.5:
        newBitmap.set_y(-newBitmap.get_height() / 2);
        break;
    }
    var newSprite = new openfl_display_Sprite();
    newSprite.get_graphics().beginFill(16711680, 0);
    newSprite
      .get_graphics()
      .drawRect(
        newBitmap.get_x(),
        newBitmap.get_y(),
        newBitmap.get_width(),
        newBitmap.get_height()
      );
    newSprite.addChild(newBitmap);
    return newSprite;
  };
  Global.reloadImage = function (
    imgFolder,
    imgName,
    oldSprite,
    pivotX,
    pivotY
  ) {
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    var _g1 = 0;
    var _g = oldSprite.get_numChildren();
    while (_g1 < _g) {
      var i = _g1++;
      oldSprite.removeChild(oldSprite.getChildAt(i));
    }
    var newBitmap = new openfl_display_Bitmap(
      openfl_utils_Assets.getBitmapData(imgFolder + "/" + imgName)
    );
    newBitmap.smoothing = true;
    switch (pivotX) {
      case 0:
        newBitmap.set_x(0);
        break;
      case 1:
        newBitmap.set_x(-newBitmap.get_width());
        break;
      case 0.5:
        newBitmap.set_x(-newBitmap.get_width() / 2);
        break;
    }
    switch (pivotY) {
      case 0:
        newBitmap.set_y(0);
        break;
      case 1:
        newBitmap.set_y(-newBitmap.get_height());
        break;
      case 0.5:
        newBitmap.set_y(-newBitmap.get_height() / 2);
        break;
    }
    oldSprite
      .get_graphics()
      .drawRect(
        newBitmap.get_x(),
        newBitmap.get_y(),
        newBitmap.get_width(),
        newBitmap.get_height()
      );
    oldSprite.addChild(newBitmap);
  };
  Global.createButtonImage = function (
    imgFolder,
    imgUpName,
    imgOverName,
    imgDownName,
    pivotX,
    pivotY
  ) {
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    if (imgDownName == null) {
      imgDownName = "";
    }
    var newButton = new openfl_display_SimpleButton();
    newButton.set_upState(
      Global.loadImage(imgFolder, imgUpName, pivotX, pivotY)
    );
    newButton.set_overState(
      Global.loadImage(imgFolder, imgOverName, pivotX, pivotY)
    );
    newButton.set_downState(
      imgDownName == ""
        ? newButton.overState
        : Global.loadImage(imgFolder, imgDownName, pivotX, pivotY)
    );
    newButton.set_hitTestState(newButton.upState);
    return newButton;
  };
  Global.createButtonSheet = function (
    sheetVariable,
    imgUpName,
    imgOverName,
    imgDownName,
    pivotX,
    pivotY
  ) {
    if (pivotY == null) {
      pivotY = 0;
    }
    if (pivotX == null) {
      pivotX = 0;
    }
    if (imgDownName == null) {
      imgDownName = "";
    }
    var newButton = new openfl_display_SimpleButton();
    newButton.set_upState(sheetVariable.loadImage(imgUpName, pivotX, pivotY));
    newButton.set_overState(
      sheetVariable.loadImage(imgOverName, pivotX, pivotY)
    );
    newButton.set_downState(
      imgDownName == ""
        ? newButton.overState
        : sheetVariable.loadImage(imgDownName, pivotX, pivotY)
    );
    newButton.set_hitTestState(newButton.upState);
    return newButton;
  };
  Global.setMouseEnabled = function (obj, enabled) {
    obj.mouseEnabled = enabled;
    obj.mouseChildren = enabled;
  };
  Global.calculateDistance = function (x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  };
  Global.calculateRandom = function (minValue, maxValue) {
    return Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;
  };
  Global.hitBox = function (object1, object2) {
    return object1.hitTestObject(object2);
  };
  Global.getNumber = function (word) {
    var temp = "";
    var a;
    var _g1 = 0;
    var _g = word.length;
    while (_g1 < _g) {
      var i = _g1++;
      a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
      if (a.indexOf(HxOverrides.substr(word, i, 1)) > -1) {
        temp += HxOverrides.substr(word, i, 1);
      }
    }
    return Std.parseInt(temp);
  };
  Global.convertToMinuteSeconds = function (time) {
    var result;
    var minutes = 100;
    var seconds = 100;
    minutes += Math.floor(time / 60);
    seconds += time % 60;
    result =
      HxOverrides.substr(minutes == null ? "null" : "" + minutes, 1, 2) +
      ":" +
      HxOverrides.substr(seconds == null ? "null" : "" + seconds, 1, 2);
    return result;
  };
  Global.killAnimationList = function () {
    while (Global.animationList.length > 0) {
      if (Global.animationList[0] != null) {
        Global.animationList[0].destroy(false);
      }
      Global.animationList.splice(0, 1);
    }
  };
  Global.stringToInt = function (word) {
    return parseFloat(word) | 0;
  };
  Global.DegToRad = function (deg) {
    return (deg / 180) * Math.PI;
  };
  Global.RadToDeg = function (rad) {
    return (rad * 180) / Math.PI;
  };
  Global.sortByProp = function (arr, prop) {
    arr.sort(function (a, b) {
      var propa = Reflect.field(a, prop);
      var propb = Reflect.field(b, prop);
      if (propa == propb) {
        return 0;
      }
      if (propa > propb) {
        return 1;
      } else {
        return -1;
      }
    });
    return arr;
  };
  Global.killChildren = function (target, bol) {
    if (bol == null) {
      bol = false;
    }
    if (target != null) {
      while (target.get_numChildren() > 0)
        if (js_Boot.__instanceof(target.getChildAt(0), BaseAnimation)) {
          js_Boot.__cast(target.getChildAt(0), BaseAnimation).destroy();
        } else if (
          js_Boot.__instanceof(target.getChildAt(0), openfl_display_Sprite)
        ) {
          Global.killChildren(
            js_Boot.__cast(target.getChildAt(0), openfl_display_Sprite),
            true
          );
        } else {
          target.removeChild(target.getChildAt(0));
        }
      if (bol == true && target.parent != null) {
        target.parent.removeChild(target);
        target = null;
      }
    }
  };
  Global.reAlignList = function () {
    var alignData;
    var _g1 = 0;
    var _g = Global.alignList.length;
    while (_g1 < _g) {
      var i = _g1++;
      alignData = Global.alignList[i];
      Global.align(
        alignData._obj,
        alignData._alignX,
        alignData._alignY,
        alignData._rangeX,
        alignData._rangeY,
        alignData._pivotX,
        alignData._pivotY,
        alignData._isFix,
        false
      );
    }
  };
  Global.resetAlignList = function () {
    Global.alignList.splice(0, Global.alignList.length);
  };
  Global.reDrawFullScreenList = function () {
    var spt;
    var _g1 = 0;
    var _g = Global.sptFullScreenList.length;
    while (_g1 < _g) {
      var i = _g1++;
      spt = Global.sptFullScreenList[i];
      spt.set_width(Main.SCREEN_WIDTH);
      spt.set_height(Main.SCREEN_HEIGHT);
      Global.align(spt, 0.5, 0.5, 0, 0, 0, 0, false, false);
    }
  };
  var HxOverrides = function () {};
  $hxClasses["HxOverrides"] = HxOverrides;
  HxOverrides.__name__ = ["HxOverrides"];
  HxOverrides.strDate = function (s) {
    var _g = s.length;
    switch (_g) {
      case 8:
        var k = s.split(":");
        var d = new Date();
        d["setTime"](0);
        d["setUTCHours"](k[0]);
        d["setUTCMinutes"](k[1]);
        d["setUTCSeconds"](k[2]);
        return d;
      case 10:
        var k1 = s.split("-");
        return new Date(k1[0], k1[1] - 1, k1[2], 0, 0, 0);
      case 19:
        var k2 = s.split(" ");
        var y = k2[0].split("-");
        var t = k2[1].split(":");
        return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);
      default:
        throw new js__$Boot_HaxeError("Invalid date format : " + s);
    }
  };
  HxOverrides.cca = function (s, index) {
    var x = s.charCodeAt(index);
    if (x != x) {
      return undefined;
    }
    return x;
  };
  HxOverrides.substr = function (s, pos, len) {
    if (len == null) {
      len = s.length;
    } else if (len < 0) {
      if (pos == 0) {
        len = s.length + len;
      } else {
        return "";
      }
    }
    return s.substr(pos, len);
  };
  HxOverrides.remove = function (a, obj) {
    var i = a.indexOf(obj);
    if (i == -1) {
      return false;
    }
    a.splice(i, 1);
    return true;
  };
  HxOverrides.iter = function (a) {
    return {
      cur: 0,
      arr: a,
      hasNext: function () {
        return this.cur < this.arr.length;
      },
      next: function () {
        return this.arr[this.cur++];
      },
    };
  };
  var Intro = function () {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Intro.IntroGlobal = this;
    haxe_Log.trace("Intro", {
      fileName: "Intro.hx",
      lineNumber: 27,
      className: "Intro",
      methodName: "new",
    });
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Intro"] = Intro;
  Intro.__name__ = ["Intro"];
  Intro.GetInstance = function () {
    return Intro.IntroGlobal;
  };
  Intro.__super__ = BaseSprite;
  Intro.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sptBG: null,
    btnStart: null,
    sptGroup: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sptBG = Global.loadImage("images", "bg_intro.png");
      this.btnStart = Global.createButtonSheet(
        this.sheetButton,
        "btn_start1.png",
        "btn_start2.png",
        "btn_start2.png"
      );
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      var papan = Global.loadImage("images", "papan.png");
      papan.set_x(26);
      papan.set_y(13);
      this.sptGroup.addChild(papan);
      var infoIntro = Global.loadImage("images", "info_intro.png");
      infoIntro.set_x(186);
      infoIntro.set_y(110);
      this.sptGroup.addChild(infoIntro);
      var shine = Global.loadImage("images", "bg_cahaya.png");
      shine.set_x(-204);
      shine.set_y(-180);
      this.sptGroup.addChild(shine);
      var judul = Global.loadImage("images", "ket_intro.png");
      judul.set_x(168);
      judul.set_y(8);
      this.sptGroup.addChild(judul);
      this.btnStart.set_x(300);
      this.btnStart.set_y(413);
      this.sptGroup.addChild(this.btnStart);
      this.addChild(new Y8Achievements(1, 0, -85, 15));
    },
    assetsAddEventListener: function () {
      this.btnStart.addEventListener(
        "click",
        $bind(this, this.onStartGame),
        false,
        0,
        true
      );
    },
    onStartGame: function (e) {
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
      Main.GetInstance().changeWindow("Intro", "Game1");
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      this.btnStart.removeEventListener("click", $bind(this, this.onStartGame));
      Global.killChildren(this, false);
      this.sptBG = null;
      this.btnStart = null;
      this.sptGroup = null;
    },
    Update: function (e) {},
    __class__: Intro,
  });
  var Lambda = function () {};
  $hxClasses["Lambda"] = Lambda;
  Lambda.__name__ = ["Lambda"];
  Lambda.array = function (it) {
    var a = [];
    var i = $iterator(it)();
    while (i.hasNext()) {
      var i1 = i.next();
      a.push(i1);
    }
    return a;
  };
  var List = function () {
    this.length = 0;
  };
  $hxClasses["List"] = List;
  List.__name__ = ["List"];
  List.prototype = {
    h: null,
    q: null,
    length: null,
    add: function (item) {
      var x = new _$List_ListNode(item, null);
      if (this.h == null) {
        this.h = x;
      } else {
        this.q.next = x;
      }
      this.q = x;
      this.length++;
    },
    pop: function () {
      if (this.h == null) {
        return null;
      }
      var x = this.h.item;
      this.h = this.h.next;
      if (this.h == null) {
        this.q = null;
      }
      this.length--;
      return x;
    },
    clear: function () {
      this.h = null;
      this.q = null;
      this.length = 0;
    },
    iterator: function () {
      return new _$List_ListIterator(this.h);
    },
    __class__: List,
  };
  var _$List_ListNode = function (item, next) {
    this.item = item;
    this.next = next;
  };
  $hxClasses["_List.ListNode"] = _$List_ListNode;
  _$List_ListNode.__name__ = ["_List", "ListNode"];
  _$List_ListNode.prototype = {
    item: null,
    next: null,
    __class__: _$List_ListNode,
  };
  var _$List_ListIterator = function (head) {
    this.head = head;
  };
  $hxClasses["_List.ListIterator"] = _$List_ListIterator;
  _$List_ListIterator.__name__ = ["_List", "ListIterator"];
  _$List_ListIterator.prototype = {
    head: null,
    hasNext: function () {
      return this.head != null;
    },
    next: function () {
      var val = this.head.item;
      this.head = this.head.next;
      return val;
    },
    __class__: _$List_ListIterator,
  };
  var MainMenu = function () {
    this.counterTimer = 0;
    openfl_display_Sprite.call(this);
    MainMenu.MainMenuGlobal = this;
    Global.getBrowserName();
    this.assetsLoad();
    this.assetsAddChild();
    this.initVersion();
    if (
      Main.GetInstance().userAgent.indexOf("iPhone") > -1 ||
      Main.GetInstance().userAgent.indexOf("iPad") > -1 ||
      Main.GetInstance().userAgent.indexOf("iPod") > -1 ||
      Main.GetInstance().userAgent.indexOf("Android") > -1
    ) {
      this.addEventListener(
        "mouseDown",
        $bind(this, this.onDown),
        false,
        0,
        true
      );
    } else if (DataGame.sudahPlayBGM == false) {
      SoundGame.playBGM("sounds", "bgm", DataGame.volBgm);
      DataGame.sudahPlayBGM = true;
    }
    SoundGame.playSFX("sounds", "vc_play", DataGame.volVc, 0.5);
  };
  $hxClasses["MainMenu"] = MainMenu;
  MainMenu.__name__ = ["MainMenu"];
  MainMenu.GetInstance = function () {
    return MainMenu.MainMenuGlobal;
  };
  MainMenu.__super__ = openfl_display_Sprite;
  MainMenu.prototype = $extend(openfl_display_Sprite.prototype, {
    sheetButton: null,
    sptBG: null,
    sptTitle: null,
    sptGroup: null,
    btnStart: null,
    btnMoreGames: null,
    counterTimer: null,
    txtVersion: null,
    onDown: function (e) {
      this.removeEventListener("mouseDown", $bind(this, this.onDown));
      if (DataGame.sudahPlayBGM == false) {
        SoundGame.playBGM("sounds", "bgm", DataGame.volBgm);
        DataGame.sudahPlayBGM = true;
      }
    },
    initVersion: function () {
      this.txtVersion = new BaseText(
        "FredokaOne-Regular.ttf",
        12,
        0,
        false,
        1,
        3
      );
      this.txtVersion.set_text("Version 2.0.3");
      this.addChild(this.txtVersion);
      Global.align(this.txtVersion, 0, 0, 5, 5, 0, 0);
    },
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.sptBG = Global.loadImage("images", "bg1.png");
      this.sptTitle = Global.loadImage("images", "title.png");
      this.btnStart = Global.createButtonSheet(
        this.sheetButton,
        "btn_start1.png",
        "btn_start2.png",
        "btn_start2.png"
      );
      this.btnMoreGames = Global.createButtonSheet(
        this.sheetButton,
        "btn_moregames1.png",
        "btn_moregames2.png",
        "btn_moregames2.png"
      );
    },
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5, 0, 0);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      this.sptTitle.set_x(
        Y8Api.isSponsor == false
          ? DataPosition.mainmenu_title.x
          : DataPosition.mainmenuY8_title.x
      );
      this.sptTitle.set_y(
        Y8Api.isSponsor == false
          ? DataPosition.mainmenu_title.y
          : DataPosition.mainmenuY8_title.y
      );
      this.sptGroup.addChild(this.sptTitle);
      this.btnStart.set_x(
        Y8Api.isSponsor == false
          ? DataPosition.mainmenu_playGame.x
          : DataPosition.mainmenuY8_playGame.x
      );
      this.btnStart.set_y(
        Y8Api.isSponsor == false
          ? DataPosition.mainmenu_playGame.y
          : DataPosition.mainmenuY8_playGame.y
      );
      this.btnMoreGames.set_x(DataPosition.mainmenu_moreGames.x);
      this.btnMoreGames.set_y(DataPosition.mainmenu_moreGames.y);
      this.btnMoreGames.set_visible(Y8Api.isSponsor == false);
      this.sptGroup.addChild(this.btnStart);
      this.sptGroup.addChild(this.btnMoreGames);
      this.btnStart.addEventListener(
        "click",
        $bind(this, this.clickPlayGame),
        false,
        0,
        true
      );
      this.btnMoreGames.addEventListener(
        "click",
        Global.moreGames,
        false,
        0,
        true
      );
      // this.addChild(new Y8Achievements(1,0,-85,15));
      // this.addChild(new Y8Logo(1,1,-10,-10));
    },
    destroy: function () {
      Global.killAnimationList();
      this.btnStart.removeEventListener(
        "click",
        $bind(this, this.clickPlayGame)
      );
      this.btnMoreGames.removeEventListener("click", Global.moreGames);
      Global.killChildren(this, false);
      this.sptGroup = null;
      this.sptBG = null;
      this.sptTitle = null;
      this.btnStart = null;
      this.btnMoreGames = null;
    },
    clickPlayGame: function (event) {
      Y8Api.showAds();
      if (Setting.isIDNET == true) {
        this.addChild(new Y8SaveOption());
      } else {
        Main.GetInstance().changeWindow("MainMenu", "Intro");
      }
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    __class__: MainMenu,
  });
  var ManifestResources = function () {};
  $hxClasses["ManifestResources"] = ManifestResources;
  ManifestResources.__name__ = ["ManifestResources"];
  ManifestResources.init = function (config) {
    ManifestResources.preloadLibraries = [];
    ManifestResources.preloadLibraryNames = [];
    var rootPath = null;
    if (
      config != null &&
      Object.prototype.hasOwnProperty.call(config, "assetsPrefix")
    ) {
      rootPath = Reflect.field(config, "assetsPrefix");
    }
    if (rootPath == null) {
      rootPath = "";
    }
    lime_utils_Assets.defaultRootPath = rootPath;
    openfl_text_Font.registerFont(
      _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf
    );
    openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf);
    openfl_text_Font.registerFont(
      _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf
    );
    var data;
    var manifest;
    var library;
    data =
      '{"name":null,"assets":"aoy4:pathy28:preloader%2Fbar_loading1.pngy4:sizei2672y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y28:preloader%2Fbar_loading2.pngR2i1966R3R4R5R7R6tgoR0y27:preloader%2Forientation.pngR2i6563R3R4R5R8R6tgoR0y28:preloader%2Ftext_loading.pngR2i2079R3R4R5R9R6tgoR0y30:fonts%2FFredokaOne-Regular.eotR2i43684R3y6:BINARYR5R10R6tgoR0y30:fonts%2FFredokaOne-Regular.svgR2i167875R3y4:TEXTR5R12R6tgoR2i43500R3y4:FONTy9:classNamey37:__ASSET__fonts_fredokaone_regular_ttfR5y30:fonts%2FFredokaOne-Regular.ttfR6tgoR0y31:fonts%2FFredokaOne-Regular.woffR2i22036R3R11R5R18R6tgoR0y20:fonts%2FKoolBean.eotR2i29512R3R11R5R19R6tgoR0y20:fonts%2FKoolBean.svgR2i50697R3R13R5R20R6tgoR2i29252R3R14R15y27:__ASSET__fonts_koolbean_ttfR5y20:fonts%2FKoolBean.ttfR6tgoR0y21:fonts%2FKoolBean.woffR2i15844R3R11R5R23R6tgoR0y27:fonts%2FRifficFree-Bold.eotR2i98378R3R11R5R24R6tgoR0y27:fonts%2FRifficFree-Bold.svgR2i402588R3R13R5R25R6tgoR2i98192R3R14R15y34:__ASSET__fonts_rifficfree_bold_ttfR5y27:fonts%2FRifficFree-Bold.ttfR6tgoR0y28:fonts%2FRifficFree-Bold.woffR2i32580R3R11R5R28R6tgoR0y25:images%2Fachievement.jsonR2i8771R3R13R5R29R6tgoR0y24:images%2Fachievement.pngR2i68422R3R4R5R30R6tgoR0y16:images%2Fbg1.pngR2i543918R3R4R5R31R6tgoR0y22:images%2Fbg_cahaya.pngR2i46525R3R4R5R32R6tgoR0y21:images%2Fbg_depan.pngR2i528669R3R4R5R33R6tgoR0y21:images%2Fbg_fruit.pngR2i6391R3R4R5R34R6tgoR0y19:images%2Fbg_ice.pngR2i3787R3R4R5R35R6tgoR0y21:images%2Fbg_intro.pngR2i143018R3R4R5R36R6tgoR0y24:images%2Fbg_polaroid.pngR2i497R3R4R5R37R6tgoR0y20:images%2Fbg_text.pngR2i2821R3R4R5R38R6tgoR0y24:images%2Fbg_transisi.pngR2i60307R3R4R5R39R6tgoR0y19:images%2Fbotol.jsonR2i3172R3R13R5R40R6tgoR0y18:images%2Fbotol.pngR2i37326R3R4R5R41R6tgoR0y24:images%2Fbtn_ingame.jsonR2i1814R3R13R5R42R6tgoR0y23:images%2Fbtn_ingame.pngR2i16494R3R4R5R43R6tgoR0y20:images%2Fbutton.jsonR2i1985R3R13R5R44R6tgoR0y19:images%2Fbutton.pngR2i22605R3R4R5R45R6tgoR0y30:images%2Fchar%2Fbaju_gerak.pngR2i1312R3R4R5R46R6tgoR0y24:images%2Fchar%2Fbody.pngR2i5140R3R4R5R47R6tgoR0y27:images%2Fchar%2Fcikrak.jsonR2i79008R3R13R5R48R6tgoR0y26:images%2Fchar%2Fcikrak.pngR2i59208R3R4R5R49R6tgoR0y32:images%2Fchar%2Fgelas_bener.jsonR2i80205R3R13R5R50R6tgoR0y31:images%2Fchar%2Fgelas_bener.pngR2i17558R3R4R5R51R6tgoR0y35:images%2Fchar%2Fgelas_beneracc.jsonR2i81228R3R13R5R52R6tgoR0y34:images%2Fchar%2Fgelas_beneracc.pngR2i21358R3R4R5R53R6tgoR0y33:images%2Fchar%2Fgelas_kosong.jsonR2i80697R3R13R5R54R6tgoR0y32:images%2Fchar%2Fgelas_kosong.pngR2i17406R3R4R5R55R6tgoR0y36:images%2Fchar%2Fgelas_kosongacc.jsonR2i81720R3R13R5R56R6tgoR0y35:images%2Fchar%2Fgelas_kosongacc.pngR2i21544R3R4R5R57R6tgoR0y32:images%2Fchar%2Fgelas_salah.jsonR2i80205R3R13R5R58R6tgoR0y31:images%2Fchar%2Fgelas_salah.pngR2i17551R3R4R5R59R6tgoR0y35:images%2Fchar%2Fgelas_salahacc.jsonR2i81228R3R13R5R60R6tgoR0y34:images%2Fchar%2Fgelas_salahacc.pngR2i21803R3R4R5R61R6tgoR0y32:images%2Fchar%2Fgelas_tuang.jsonR2i27867R3R13R5R62R6tgoR0y31:images%2Fchar%2Fgelas_tuang.pngR2i56551R3R4R5R63R6tgoR0y27:images%2Fchar%2Fkepala.jsonR2i79302R3R13R5R64R6tgoR0y26:images%2Fchar%2Fkepala.pngR2i36962R3R4R5R65R6tgoR0y32:images%2Fchar%2Flengan_gerak.pngR2i603R3R4R5R66R6tgoR0y24:images%2Fchar%2Fmeja.pngR2i17291R3R4R5R67R6tgoR0y34:images%2Fchar%2Ftangana_kanan.jsonR2i83499R3R13R5R68R6tgoR0y33:images%2Fchar%2Ftangana_kanan.pngR2i221808R3R4R5R69R6tgoR0y33:images%2Fchar%2Ftangana_kiri.jsonR2i82020R3R13R5R70R6tgoR0y32:images%2Fchar%2Ftangana_kiri.pngR2i124207R3R4R5R71R6tgoR0y33:images%2Fchar%2Ftanganb_gerak.pngR2i1768R3R4R5R72R6tgoR0y34:images%2Fchar%2Ftangang_gerak.jsonR2i3386R3R13R5R73R6tgoR0y33:images%2Fchar%2Ftangang_gerak.pngR2i27389R3R4R5R74R6tgoR0y33:images%2Fchar%2Ftangan_bawah.jsonR2i83912R3R13R5R75R6tgoR0y32:images%2Fchar%2Ftangan_bawah.pngR2i181800R3R4R5R76R6tgoR0y22:images%2Fcipratan.jsonR2i2507R3R13R5R77R6tgoR0y21:images%2Fcipratan.pngR2i1032R3R4R5R78R6tgoR0y28:images%2Fending%2Fbadan5.pngR2i6320R3R4R5R79R6tgoR0y32:images%2Fending%2Fbg_ending4.pngR2i9343R3R4R5R80R6tgoR0y33:images%2Fending%2Fbg_itemfire.pngR2i23113R3R4R5R81R6tgoR0y31:images%2Fending%2Fending61.jsonR2i22687R3R13R5R82R6tgoR0y30:images%2Fending%2Fending61.pngR2i202971R3R4R5R83R6tgoR0y31:images%2Fending%2Fending62.jsonR2i15539R3R13R5R84R6tgoR0y30:images%2Fending%2Fending62.pngR2i152946R3R4R5R85R6tgoR0y31:images%2Fending%2Fending71.jsonR2i27662R3R13R5R86R6tgoR0y30:images%2Fending%2Fending71.pngR2i105860R3R4R5R87R6tgoR0y31:images%2Fending%2Fending72.jsonR2i28093R3R13R5R88R6tgoR0y30:images%2Fending%2Fending72.pngR2i294909R3R4R5R89R6tgoR0y31:images%2Fending%2Fending73.jsonR2i28053R3R13R5R90R6tgoR0y30:images%2Fending%2Fending73.pngR2i378371R3R4R5R91R6tgoR0y31:images%2Fending%2Fending74.jsonR2i28012R3R13R5R92R6tgoR0y30:images%2Fending%2Fending74.pngR2i295339R3R4R5R93R6tgoR0y30:images%2Fending%2Fending8.jsonR2i31396R3R13R5R94R6tgoR0y29:images%2Fending%2Fending8.pngR2i177574R3R4R5R95R6tgoR0y31:images%2Fending%2Fending91.jsonR2i24577R3R13R5R96R6tgoR0y30:images%2Fending%2Fending91.pngR2i164794R3R4R5R97R6tgoR0y31:images%2Fending%2Fending92.jsonR2i24681R3R13R5R98R6tgoR0y30:images%2Fending%2Fending92.pngR2i86747R3R4R5R99R6tgoR0y31:images%2Fending%2Fending93.jsonR2i24375R3R13R5R100R6tgoR0y30:images%2Fending%2Fending93.pngR2i87135R3R4R5R101R6tgoR0y32:images%2Fending%2Fending931.jsonR2i25256R3R13R5R102R6tgoR0y31:images%2Fending%2Fending931.pngR2i187507R3R4R5R103R6tgoR0y31:images%2Fending%2Fending94.jsonR2i24671R3R13R5R104R6tgoR0y30:images%2Fending%2Fending94.pngR2i97339R3R4R5R105R6tgoR0y31:images%2Fending%2Fending95.jsonR2i24391R3R13R5R106R6tgoR0y30:images%2Fending%2Fending95.pngR2i4129R3R4R5R107R6tgoR0y31:images%2Fending%2Fendinga2.jsonR2i29206R3R13R5R108R6tgoR0y30:images%2Fending%2Fendinga2.pngR2i19166R3R4R5R109R6tgoR0y31:images%2Fending%2Fendinga3.jsonR2i31793R3R13R5R110R6tgoR0y30:images%2Fending%2Fendinga3.pngR2i200327R3R4R5R111R6tgoR0y31:images%2Fending%2Fendinga4.jsonR2i22867R3R13R5R112R6tgoR0y30:images%2Fending%2Fendinga4.pngR2i231375R3R4R5R113R6tgoR0y31:images%2Fending%2Fendingb2.jsonR2i29691R3R13R5R114R6tgoR0y30:images%2Fending%2Fendingb2.pngR2i327861R3R4R5R115R6tgoR0y31:images%2Fending%2Fendingb3.jsonR2i32018R3R13R5R116R6tgoR0y30:images%2Fending%2Fendingb3.pngR2i188128R3R4R5R117R6tgoR0y32:images%2Fending%2Fendingb41.jsonR2i22954R3R13R5R118R6tgoR0y31:images%2Fending%2Fendingb41.pngR2i64377R3R4R5R119R6tgoR0y32:images%2Fending%2Fendingb42.jsonR2i23437R3R13R5R120R6tgoR0y31:images%2Fending%2Fendingb42.pngR2i350131R3R4R5R121R6tgoR0y31:images%2Fending%2Fendingb5.jsonR2i8278R3R13R5R122R6tgoR0y30:images%2Fending%2Fendingb5.pngR2i218672R3R4R5R123R6tgoR0y30:images%2Fending%2Fkepala5.jsonR2i1386R3R13R5R124R6tgoR0y29:images%2Fending%2Fkepala5.pngR2i46863R3R4R5R125R6tgoR0y33:images%2Fending%2Fmeja_kecil5.pngR2i7111R3R4R5R126R6tgoR0y31:images%2Fending1%2Fbg_pecah.pngR2i7487R3R4R5R127R6tgoR0y28:images%2Fending1%2Fmejap.pngR2i27400R3R4R5R128R6tgoR0y30:images%2Fending1%2Fpecaha.jsonR2i4213R3R13R5R129R6tgoR0y29:images%2Fending1%2Fpecaha.pngR2i205148R3R4R5R130R6tgoR0y31:images%2Fending1%2Fpecahat.jsonR2i4173R3R13R5R131R6tgoR0y30:images%2Fending1%2Fpecahat.pngR2i1172R3R4R5R132R6tgoR0y30:images%2Fending1%2Fpecahb.jsonR2i4115R3R13R5R133R6tgoR0y29:images%2Fending1%2Fpecahb.pngR2i27960R3R4R5R134R6tgoR0y29:images%2Fending1%2Fpiece.jsonR2i4544R3R13R5R135R6tgoR0y28:images%2Fending1%2Fpiece.pngR2i222866R3R4R5R136R6tgoR0y31:images%2Fending10%2Fanimal1.pngR2i28090R3R4R5R137R6tgoR0y31:images%2Fending10%2Fanimal2.pngR2i27910R3R4R5R138R6tgoR0y28:images%2Fending10%2Fawan.pngR2i45764R3R4R5R139R6tgoR0y34:images%2Fending10%2Fbartender.jsonR2i45473R3R13R5R140R6tgoR0y33:images%2Fending10%2Fbartender.pngR2i207877R3R4R5R141R6tgoR0y31:images%2Fending10%2Fbg_biru.pngR2i4429R3R4R5R142R6tgoR0y33:images%2Fending10%2Fbg_jingga.pngR2i4681R3R4R5R143R6tgoR0y37:images%2Fending10%2Fbg_tengahbiru.pngR2i102342R3R4R5R144R6tgoR0y39:images%2Fending10%2Fbg_tengahjingga.pngR2i105002R3R4R5R145R6tgoR0y32:images%2Fending10%2Fmatahari.pngR2i3104R3R4R5R146R6tgoR0y29:images%2Fending10%2Fsilau.pngR2i91975R3R4R5R147R6tgoR0y23:images%2Finfo_intro.pngR2i10602R3R4R5R148R6tgoR0y25:images%2Finfo_result.jsonR2i1734R3R13R5R149R6tgoR0y24:images%2Finfo_result.pngR2i39450R3R4R5R150R6tgoR0y24:images%2Fket_achieve.pngR2i7649R3R4R5R151R6tgoR0y24:images%2Fket_collect.pngR2i7137R3R4R5R152R6tgoR0y22:images%2Fket_intro.pngR2i7304R3R4R5R153R6tgoR0y25:images%2Fket_papanres.pngR2i1060R3R4R5R154R6tgoR0y23:images%2Fket_result.pngR2i3777R3R4R5R155R6tgoR0y18:images%2Fnada.jsonR2i3118R3R13R5R156R6tgoR0y17:images%2Fnada.pngR2i6972R3R4R5R157R6tgoR0y21:images%2Fol_gelas.pngR2i371R3R4R5R158R6tgoR0y18:images%2Fpapan.pngR2i22074R3R4R5R159R6tgoR0y20:images%2Fpercik.jsonR2i1626R3R13R5R160R6tgoR0y19:images%2Fpercik.pngR2i401R3R4R5R161R6tgoR0y19:images%2Fphoto0.pngR2i611R3R4R5R162R6tgoR0y19:images%2Fphoto1.pngR2i5564R3R4R5R163R6tgoR0y20:images%2Fphoto10.pngR2i5501R3R4R5R164R6tgoR0y19:images%2Fphoto2.pngR2i4673R3R4R5R165R6tgoR0y19:images%2Fphoto3.pngR2i5407R3R4R5R166R6tgoR0y19:images%2Fphoto4.pngR2i5137R3R4R5R167R6tgoR0y19:images%2Fphoto5.pngR2i5056R3R4R5R168R6tgoR0y19:images%2Fphoto6.pngR2i5198R3R4R5R169R6tgoR0y19:images%2Fphoto7.pngR2i4226R3R4R5R170R6tgoR0y19:images%2Fphoto8.pngR2i3945R3R4R5R171R6tgoR0y19:images%2Fphoto9.pngR2i6175R3R4R5R172R6tgoR0y16:images%2Frak.pngR2i11893R3R4R5R173R6tgoR0y22:images%2Fsendok_es.pngR2i2063R3R4R5R174R6tgoR0y25:images%2Fsheet_fruit.jsonR2i843R3R13R5R175R6tgoR0y24:images%2Fsheet_fruit.pngR2i3303R3R4R5R176R6tgoR0y19:images%2Fsound.jsonR2i403R3R13R5R177R6tgoR0y18:images%2Fsound.pngR2i2455R3R4R5R178R6tgoR0y18:images%2Ftitle.pngR2i49737R3R4R5R179R6tgoR0y18:images%2Fwater.pngR2i129R3R4R5R180R6tgoR0y29:images%2FY8%2Fblacklisted.pngR2i10760R3R4R5R181R6tgoR0y25:images%2FY8%2Fbutton.jsonR2i1820R3R13R5R182R6tgoR0y24:images%2FY8%2Fbutton.pngR2i11850R3R4R5R183R6tgoR0y26:images%2FY8%2Floading.jsonR2i2623R3R13R5R184R6tgoR0y25:images%2FY8%2Floading.pngR2i32886R3R4R5R185R6tgoR0y23:images%2FY8%2Flocal.pngR2i13512R3R4R5R186R6tgoR0y27:images%2FY8%2FlogoIDNET.pngR2i1514R3R4R5R187R6tgoR0y32:images%2FY8%2FlogoIDNET_over.pngR2i3591R3R4R5R188R6tgoR0y24:images%2FY8%2FlogoY8.pngR2i765R3R4R5R189R6tgoR0y31:images%2FY8%2Fmessage_login.pngR2i3353R3R4R5R190R6tgoR0y30:images%2FY8%2Fmessage_post.pngR2i2954R3R4R5R191R6tgoR0y25:images%2FY8%2Fonline1.pngR2i10972R3R4R5R192R6tgoR0y25:images%2FY8%2Fonline2.pngR2i9727R3R4R5R193R6tgoR0y26:images%2FY8%2Fposting.jsonR2i2658R3R13R5R194R6tgoR0y25:images%2FY8%2Fposting.pngR2i20675R3R4R5R195R6tgoR0y29:images%2FY8%2Fpost_failed.pngR2i3545R3R4R5R196R6tgoR0y30:images%2FY8%2Fpost_success.pngR2i3178R3R4R5R197R6tgoR2i34689R3y5:MUSICR5y25:sounds%2Fachievements.mp3y9:pathGroupaR199y25:sounds%2Fachievements.ogghR6tgoR2i15908R3y5:SOUNDR5R201R200aR199R201hgoR2i7940R3R198R5y15:sounds%2Fah.mp3R200aR203y15:sounds%2Fah.ogghR6tgoR2i8527R3R202R5R204R200aR203R204hgoR2i1858663R3R198R5y16:sounds%2Fbgm.mp3R200aR205y16:sounds%2Fbgm.ogghR6tgoR2i1349087R3R198R5R206R200aR205R206hgoR2i4178R3R198R5y18:sounds%2Fbloop.mp3R200aR207y18:sounds%2Fbloop.ogghR6tgoR2i5122R3R202R5R208R200aR207R208hgoR2i7104R3R198R5y19:sounds%2Fbubble.mp3R200aR209y19:sounds%2Fbubble.ogghR6tgoR2i8049R3R202R5R210R200aR209R210hgoR2i7593R3R198R5y18:sounds%2Fclick.mp3R200aR211y18:sounds%2Fclick.ogghR6tgoR2i11685R3R202R5R212R200aR211R212hgoR2i53497R3R198R5y18:sounds%2Fcrack.mp3R200aR213y18:sounds%2Fcrack.ogghR6tgoR2i45553R3R202R5R214R200aR213R214hgoR2i19225R3R198R5y16:sounds%2Fcut.mp3R200aR215y16:sounds%2Fcut.ogghR6tgoR2i14973R3R202R5R216R200aR215R216hgoR2i33853R3R198R5y20:sounds%2Fending2.mp3R200aR217y20:sounds%2Fending2.ogghR6tgoR2i22314R3R202R5R218R200aR217R218hgoR2i20479R3R198R5y21:sounds%2Fending21.mp3R200aR219y21:sounds%2Fending21.ogghR6tgoR2i15900R3R202R5R220R200aR219R220hgoR2i91532R3R198R5y20:sounds%2Fending3.mp3R200aR221y20:sounds%2Fending3.ogghR6tgoR2i56985R3R202R5R222R200aR221R222hgoR2i102399R3R198R5y20:sounds%2Fending6.mp3R200aR223y20:sounds%2Fending6.ogghR6tgoR2i37662R3R202R5R224R200aR223R224hgoR2i74813R3R198R5y20:sounds%2Fending7.mp3R200aR225y20:sounds%2Fending7.ogghR6tgoR2i48719R3R202R5R226R200aR225R226hgoR2i33435R3R198R5y20:sounds%2Fending8.mp3R200aR227y20:sounds%2Fending8.ogghR6tgoR2i21625R3R202R5R228R200aR227R228hgoR2i43884R3R198R5y20:sounds%2Fending9.mp3R200aR229y20:sounds%2Fending9.ogghR6tgoR2i43924R3R202R5R230R200aR229R230hgoR2i2506R3R198R5y18:sounds%2Fglass.mp3R200aR231y18:sounds%2Fglass.ogghR6tgoR2i5147R3R202R5R232R200aR231R232hgoR2i6268R3R198R5y17:sounds%2Fgulp.mp3R200aR233y17:sounds%2Fgulp.ogghR6tgoR2i7453R3R202R5R234R200aR233R234hgoR2i49318R3R198R5y19:sounds%2Fhorror.mp3R200aR235y19:sounds%2Fhorror.ogghR6tgoR2i29613R3R202R5R236R200aR235R236hgoR2i7104R3R198R5y16:sounds%2Fice.mp3R200aR237y16:sounds%2Fice.ogghR6tgoR2i8340R3R202R5R238R200aR237R238hgoR2i5532R3R198R5y19:sounds%2Fliquid.mp3R200aR239y19:sounds%2Fliquid.ogghR6tgoR2i9834R3R202R5R240R200aR239R240hgoR2i7940R3R198R5y15:sounds%2Foh.mp3R200aR241y15:sounds%2Foh.ogghR6tgoR2i8622R3R202R5R242R200aR241R242hgoR2i13467R3R198R5y17:sounds%2Fpour.mp3R200aR243y17:sounds%2Fpour.ogghR6tgoR2i21666R3R202R5R244R200aR243R244hgoR2i19225R3R198R5y17:sounds%2Fpuke.mp3R200aR245y17:sounds%2Fpuke.ogghR6tgoR2i10771R3R202R5R246R200aR245R246hgoR2i29674R3R198R5y20:sounds%2Frainbow.mp3R200aR247y20:sounds%2Frainbow.ogghR6tgoR2i20927R3R202R5R248R200aR247R248hgoR2i16299R3R198R5y19:sounds%2Fscream.mp3R200aR249y19:sounds%2Fscream.ogghR6tgoR2i14486R3R202R5R250R200aR249R250hgoR2i13791R3R198R5y20:sounds%2Fseagull.mp3R200aR251y20:sounds%2Fseagull.ogghR6tgoR2i10995R3R202R5R252R200aR251R252hgoR2i17971R3R198R5y18:sounds%2Fshake.mp3R200aR253y18:sounds%2Fshake.ogghR6tgoR2i22809R3R202R5R254R200aR253R254hgoR2i92786R3R198R5y18:sounds%2Fshine.mp3R200aR255y18:sounds%2Fshine.ogghR6tgoR2i120406R3R202R5R256R200aR255R256hgoR2i7522R3R198R5y19:sounds%2Fshine1.mp3R200aR257y19:sounds%2Fshine1.ogghR6tgoR2i9776R3R202R5R258R200aR257R258hgoR2i64782R3R198R5y17:sounds%2Fsing.mp3R200aR259y17:sounds%2Fsing.ogghR6tgoR2i40223R3R202R5R260R200aR259R260hgoR2i17135R3R198R5y18:sounds%2Fslide.mp3R200aR261y18:sounds%2Fslide.ogghR6tgoR2i13042R3R202R5R262R200aR261R262hgoR2i5014R3R198R5y18:sounds%2Ftorch.mp3R200aR263y18:sounds%2Ftorch.ogghR6tgoR2i6677R3R202R5R264R200aR263R264hgoR2i14417R3R198R5y20:sounds%2Fvc_play.mp3R200aR265y20:sounds%2Fvc_play.ogghR6tgoR2i13431R3R202R5R266R200aR265R266hgh","version":2,"libraryArgs":[],"libraryType":null}';
    manifest = lime_utils_AssetManifest.parse(data, rootPath);
    library = lime_utils_AssetLibrary.fromManifest(manifest);
    lime_utils_Assets.registerLibrary("default", library);
    library = lime_utils_Assets.getLibrary("default");
    if (library != null) {
      ManifestResources.preloadLibraries.push(library);
    } else {
      ManifestResources.preloadLibraryNames.push("default");
    }
  };
  var lime_text_Font = function (name) {
    if (name != null) {
      this.name = name;
    }
    if (this.__fontPath != null) {
      this.__fromFile(this.__fontPath);
    }
  };
  $hxClasses["lime.text.Font"] = lime_text_Font;
  lime_text_Font.__name__ = ["lime", "text", "Font"];
  lime_text_Font.fromBytes = function (bytes) {
    if (bytes == null) {
      return null;
    }
    var font = new lime_text_Font();
    font.__fromBytes(bytes);
    return font;
  };
  lime_text_Font.fromFile = function (path) {
    if (path == null) {
      return null;
    }
    var font = new lime_text_Font();
    font.__fromFile(path);
    return font;
  };
  lime_text_Font.loadFromBytes = function (bytes) {
    return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
  };
  lime_text_Font.loadFromFile = function (path) {
    var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
    return request.load(path).then(function (font) {
      if (font != null) {
        return lime_app_Future.withValue(font);
      } else {
        return lime_app_Future.withError("");
      }
    });
  };
  lime_text_Font.loadFromName = function (path) {
    var font = new lime_text_Font();
    return font.__loadFromName(path);
  };
  lime_text_Font.__makeLoaderNode = function (fontFamily) {
    var node = window.document.createElement("span");
    node.innerHTML = "giItT1WQy@!-/#";
    var style = node.style;
    style.position = "absolute";
    style.left = "-10000px";
    style.top = "-10000px";
    style.fontSize = "300px";
    style.fontFamily = fontFamily;
    style.fontVariant = "normal";
    style.fontStyle = "normal";
    style.fontWeight = "normal";
    style.letterSpacing = "0";
    window.document.body.appendChild(node);
    return node;
  };
  lime_text_Font.prototype = {
    ascender: null,
    descender: null,
    height: null,
    name: null,
    numGlyphs: null,
    src: null,
    underlinePosition: null,
    underlineThickness: null,
    unitsPerEM: null,
    __fontPath: null,
    decompose: function () {
      return null;
    },
    getGlyph: function (character) {
      return -1;
    },
    getGlyphs: function (characters) {
      if (characters == null) {
        characters =
          "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
      }
      return null;
    },
    getGlyphMetrics: function (glyph) {
      return null;
    },
    renderGlyph: function (glyph, fontSize) {
      return null;
    },
    renderGlyphs: function (glyphs, fontSize) {
      return null;
    },
    __fromBytes: function (bytes) {
      this.__fontPath = null;
    },
    __fromFile: function (path) {
      this.__fontPath = path;
    },
    __loadFromName: function (name) {
      var _gthis = this;
      var promise = new lime_app_Promise();
      this.name = name;
      var font = name;
      var ua = window.navigator.userAgent.toLowerCase();
      if (
        !(ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0) &&
        window.document.fonts &&
        (($_ = window.document.fonts), $bind($_, $_.load))
      ) {
        window.document.fonts.load("1em '" + font + "'").then(function (_) {
          promise.complete(_gthis);
        });
      } else {
        var node1 = lime_text_Font.__makeLoaderNode("sans-serif");
        var node2 = lime_text_Font.__makeLoaderNode("serif");
        var width1 = node1.offsetWidth;
        var width2 = node2.offsetWidth;
        node1.style.fontFamily = "'" + name + "', sans-serif";
        node2.style.fontFamily = "'" + name + "', serif";
        var interval = null;
        var found = false;
        var checkFont = function () {
          if (node1.offsetWidth != width1 || node2.offsetWidth != width2) {
            if (!found) {
              found = true;
              return false;
            }
            if (interval != null) {
              window.clearInterval(interval);
            }
            node1.parentNode.removeChild(node1);
            node2.parentNode.removeChild(node2);
            node1 = null;
            node2 = null;
            promise.complete(_gthis);
            return true;
          }
          return false;
        };
        if (!checkFont()) {
          interval = window.setInterval(checkFont, 50);
        }
      }
      return promise.future;
    },
    __setSize: function (size) {},
    get_ascender: function () {
      return 0;
    },
    get_descender: function () {
      return 0;
    },
    get_height: function () {
      return 0;
    },
    get_numGlyphs: function () {
      return 0;
    },
    get_underlinePosition: function () {
      return 0;
    },
    get_underlineThickness: function () {
      return 0;
    },
    get_unitsPerEM: function () {
      return 0;
    },
    __class__: lime_text_Font,
    __properties__: {
      get_unitsPerEM: "get_unitsPerEM",
      get_underlineThickness: "get_underlineThickness",
      get_underlinePosition: "get_underlinePosition",
      get_numGlyphs: "get_numGlyphs",
      get_height: "get_height",
      get_descender: "get_descender",
      get_ascender: "get_ascender",
    },
  };
  var _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf = function () {
    this.name = "Fredoka One";
    lime_text_Font.call(this);
  };
  $hxClasses["__ASSET__fonts_fredokaone_regular_ttf"] =
    _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf;
  _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf.__name__ = [
    "__ASSET__fonts_fredokaone_regular_ttf",
  ];
  _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf.__super__ = lime_text_Font;
  _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf.prototype = $extend(
    lime_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf,
    }
  );
  var _$_$ASSET_$_$fonts_$koolbean_$ttf = function () {
    this.name = "Kool Beans";
    lime_text_Font.call(this);
  };
  $hxClasses["__ASSET__fonts_koolbean_ttf"] = _$_$ASSET_$_$fonts_$koolbean_$ttf;
  _$_$ASSET_$_$fonts_$koolbean_$ttf.__name__ = ["__ASSET__fonts_koolbean_ttf"];
  _$_$ASSET_$_$fonts_$koolbean_$ttf.__super__ = lime_text_Font;
  _$_$ASSET_$_$fonts_$koolbean_$ttf.prototype = $extend(
    lime_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$fonts_$koolbean_$ttf,
    }
  );
  var _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf = function () {
    this.name = "Riffic Free Bold";
    lime_text_Font.call(this);
  };
  $hxClasses["__ASSET__fonts_rifficfree_bold_ttf"] =
    _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf;
  _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf.__name__ = [
    "__ASSET__fonts_rifficfree_bold_ttf",
  ];
  _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf.__super__ = lime_text_Font;
  _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf.prototype = $extend(
    lime_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf,
    }
  );
  var openfl_text_Font = function (name) {
    lime_text_Font.call(this, name);
  };
  $hxClasses["openfl.text.Font"] = openfl_text_Font;
  openfl_text_Font.__name__ = ["openfl", "text", "Font"];
  openfl_text_Font.enumerateFonts = function (enumerateDeviceFonts) {
    if (enumerateDeviceFonts == null) {
      enumerateDeviceFonts = false;
    }
    return openfl_text_Font.__registeredFonts;
  };
  openfl_text_Font.fromBytes = function (bytes) {
    var font = new openfl_text_Font();
    font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
    return font;
  };
  openfl_text_Font.fromFile = function (path) {
    var font = new openfl_text_Font();
    font.__fromFile(path);
    return font;
  };
  openfl_text_Font.registerFont = function (font) {
    var instance = js_Boot.__cast(
      Type.createInstance(font, []),
      openfl_text_Font
    );
    if (instance != null) {
      openfl_text_Font.__registeredFonts.push(instance);
    }
  };
  openfl_text_Font.__fromLimeFont = function (value) {
    var font = new openfl_text_Font();
    font.name = value.name;
    font.src = value.src;
    return font;
  };
  openfl_text_Font.__super__ = lime_text_Font;
  openfl_text_Font.prototype = $extend(lime_text_Font.prototype, {
    fontStyle: null,
    fontType: null,
    get_fontName: function () {
      return this.name;
    },
    set_fontName: function (value) {
      return (this.name = value);
    },
    __class__: openfl_text_Font,
    __properties__: $extend(lime_text_Font.prototype.__properties__, {
      set_fontName: "set_fontName",
      get_fontName: "get_fontName",
    }),
  });
  var _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf = function () {
    var font = new _$_$ASSET_$_$fonts_$fredokaone_$regular_$ttf();
    this.src = font.src;
    this.name = font.name;
    openfl_text_Font.call(this);
  };
  $hxClasses["__ASSET__OPENFL__fonts_fredokaone_regular_ttf"] =
    _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf;
  _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf.__name__ = [
    "__ASSET__OPENFL__fonts_fredokaone_regular_ttf",
  ];
  _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf.__super__ =
    openfl_text_Font;
  _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf.prototype = $extend(
    openfl_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$OPENFL_$_$fonts_$fredokaone_$regular_$ttf,
    }
  );
  var _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf = function () {
    var font = new _$_$ASSET_$_$fonts_$koolbean_$ttf();
    this.src = font.src;
    this.name = font.name;
    openfl_text_Font.call(this);
  };
  $hxClasses["__ASSET__OPENFL__fonts_koolbean_ttf"] =
    _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf;
  _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf.__name__ = [
    "__ASSET__OPENFL__fonts_koolbean_ttf",
  ];
  _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf.__super__ = openfl_text_Font;
  _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf.prototype = $extend(
    openfl_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$OPENFL_$_$fonts_$koolbean_$ttf,
    }
  );
  var _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf = function () {
    var font = new _$_$ASSET_$_$fonts_$rifficfree_$bold_$ttf();
    this.src = font.src;
    this.name = font.name;
    openfl_text_Font.call(this);
  };
  $hxClasses["__ASSET__OPENFL__fonts_rifficfree_bold_ttf"] =
    _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf;
  _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf.__name__ = [
    "__ASSET__OPENFL__fonts_rifficfree_bold_ttf",
  ];
  _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf.__super__ =
    openfl_text_Font;
  _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf.prototype = $extend(
    openfl_text_Font.prototype,
    {
      __class__: _$_$ASSET_$_$OPENFL_$_$fonts_$rifficfree_$bold_$ttf,
    }
  );
  Math.__name__ = ["Math"];
  var MiniMenu = function () {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    MiniMenu.MiniMenuGlobal = this;
    haxe_Log.trace("MiniMenu", {
      fileName: "MiniMenu.hx",
      lineNumber: 25,
      className: "MiniMenu",
      methodName: "new",
    });
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["MiniMenu"] = MiniMenu;
  MiniMenu.__name__ = ["MiniMenu"];
  MiniMenu.GetInstance = function () {
    return MiniMenu.MiniMenuGlobal;
  };
  MiniMenu.__super__ = BaseSprite;
  MiniMenu.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sptBG: null,
    sptGroup: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.sptBG = Global.loadImage("images", "bg_minimenu.png");
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {},
    assetsAddEventListener: function () {},
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      Global.killChildren(this, false);
      this.sptBG = null;
      this.sptGroup = null;
    },
    Update: function (e) {},
    __class__: MiniMenu,
  });
  var openfl_display_DefaultPreloader = function () {
    openfl_display_Sprite.call(this);
    var backgroundColor = this.getBackgroundColor();
    var r = (backgroundColor >> 16) & 255;
    var g = (backgroundColor >> 8) & 255;
    var b = backgroundColor & 255;
    var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
    var color = 0;
    if (perceivedLuminosity < 70) {
      color = 16777215;
    }
    var x = 30;
    var height = 7;
    var y = this.getHeight() / 2 - height / 2;
    var width = this.getWidth() - x * 2;
    var padding = 2;
    this.outline = new openfl_display_Sprite();
    this.outline.get_graphics().beginFill(color, 0.07);
    this.outline.get_graphics().drawRect(0, 0, width, height);
    this.outline.set_x(x);
    this.outline.set_y(y);
    this.outline.set_alpha(0);
    this.addChild(this.outline);
    this.progress = new openfl_display_Sprite();
    this.progress.get_graphics().beginFill(color, 0.35);
    this.progress
      .get_graphics()
      .drawRect(0, 0, width - padding * 2, height - padding * 2);
    this.progress.set_x(x + padding);
    this.progress.set_y(y + padding);
    this.progress.set_scaleX(0);
    this.progress.set_alpha(0);
    this.addChild(this.progress);
    this.startAnimation = openfl_Lib.getTimer() + 100;
    this.endAnimation = this.startAnimation + 1000;
    this.addEventListener(
      "addedToStage",
      $bind(this, this.this_onAddedToStage)
    );
  };
  $hxClasses["openfl.display.DefaultPreloader"] =
    openfl_display_DefaultPreloader;
  openfl_display_DefaultPreloader.__name__ = [
    "openfl",
    "display",
    "DefaultPreloader",
  ];
  openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
  openfl_display_DefaultPreloader.prototype = $extend(
    openfl_display_Sprite.prototype,
    {
      endAnimation: null,
      outline: null,
      progress: null,
      startAnimation: null,
      getBackgroundColor: function () {
        return openfl_Lib.current.stage.window.config.background;
      },
      getHeight: function () {
        var height = openfl_Lib.current.stage.window.config.height;
        if (height > 0) {
          return height;
        } else {
          return openfl_Lib.current.stage.stageHeight;
        }
      },
      getWidth: function () {
        var width = openfl_Lib.current.stage.window.config.width;
        if (width > 0) {
          return width;
        } else {
          return openfl_Lib.current.stage.stageWidth;
        }
      },
      onInit: function () {
        this.addEventListener(
          "enterFrame",
          $bind(this, this.this_onEnterFrame)
        );
      },
      onLoaded: function () {
        this.removeEventListener(
          "enterFrame",
          $bind(this, this.this_onEnterFrame)
        );
        this.dispatchEvent(new openfl_events_Event("unload"));
      },
      onUpdate: function (bytesLoaded, bytesTotal) {
        var percentLoaded = 0.0;
        if (bytesTotal > 0) {
          percentLoaded = bytesLoaded / bytesTotal;
          if (percentLoaded > 1) {
            percentLoaded = 1;
          }
        }
        this.progress.set_scaleX(percentLoaded);
      },
      this_onAddedToStage: function (event) {
        this.removeEventListener(
          "addedToStage",
          $bind(this, this.this_onAddedToStage)
        );
        this.onInit();
        this.onUpdate(
          this.get_loaderInfo().bytesLoaded,
          this.get_loaderInfo().bytesTotal
        );
        this.addEventListener("progress", $bind(this, this.this_onProgress));
        this.addEventListener("complete", $bind(this, this.this_onComplete));
      },
      this_onComplete: function (event) {
        var _gthis = this;
        event.preventDefault();
        this.removeEventListener("progress", $bind(this, this.this_onProgress));
        this.removeEventListener("complete", $bind(this, this.this_onComplete));
        this.addEventListener("complete", function (event1) {
          _gthis.dispatchEvent(new openfl_events_Event("unload"));
        });
        this.onLoaded();
      },
      this_onEnterFrame: function (event) {
        var elapsed = openfl_Lib.getTimer() - this.startAnimation;
        var total = this.endAnimation - this.startAnimation;
        var percent = elapsed / total;
        if (percent < 0) {
          percent = 0;
        }
        if (percent > 1) {
          percent = 1;
        }
        this.outline.set_alpha(percent);
        this.progress.set_alpha(percent);
      },
      this_onProgress: function (event) {
        this.onUpdate(event.bytesLoaded | 0, event.bytesTotal | 0);
      },
      __class__: openfl_display_DefaultPreloader,
    }
  );
  var NMEPreloader = function () {
    openfl_display_DefaultPreloader.call(this);
  };
  $hxClasses["NMEPreloader"] = NMEPreloader;
  NMEPreloader.__name__ = ["NMEPreloader"];
  NMEPreloader.__super__ = openfl_display_DefaultPreloader;
  NMEPreloader.prototype = $extend(openfl_display_DefaultPreloader.prototype, {
    __class__: NMEPreloader,
  });
  var Particle = function (px, py) {
    this.isRotate = false;
    this.dy = 8;
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Particle.ParticleGlobal = this;
    this.posX = px;
    this.posY = py;
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Particle"] = Particle;
  Particle.__name__ = ["Particle"];
  Particle.GetInstance = function () {
    return Particle.ParticleGlobal;
  };
  Particle.__super__ = BaseSprite;
  Particle.prototype = $extend(BaseSprite.prototype, {
    dy: null,
    sptWater: null,
    isRotate: null,
    posX: null,
    posY: null,
    isMinus: null,
    bubble: null,
    assetsLoad: function () {
      var warna =
        DataGame.dataBotol[Global.stringToInt(Game1.GetInstance().noBotolNow)]
          .warna;
      this.sptWater = new openfl_display_Sprite();
      this.sptWater.get_graphics().beginFill(warna, 1);
      this.sptWater.get_graphics().moveTo(0, 5);
      this.sptWater.get_graphics().curveTo(0, 0, 5, 0);
      this.sptWater.get_graphics().curveTo(10, 0, 10, 5);
      this.sptWater.get_graphics().lineTo(10, 10);
      this.sptWater.get_graphics().curveTo(10, 15, 5, 15);
      this.sptWater.get_graphics().curveTo(0, 15, 0, 10);
      this.sptWater.get_graphics().endFill();
      this.sptWater.get_graphics().drawCircle(0, 0, 5);
      this.set_scaleX(Global.calculateRandom(60, 100) / 100);
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.sptWater.set_x(-5);
      this.addChild(this.sptWater);
      if (DataGame.jumlahPartikel == 0 || DataGame.jumlahPartikel % 5 == 0) {
        this.bubble = new openfl_display_Sprite();
        this.bubble.get_graphics().beginFill(16777215, 0.7);
        this.bubble
          .get_graphics()
          .drawCircle(0, 0, Global.calculateRandom(2, 4));
        this.addChild(this.bubble);
        this.bubble.set_x(Global.calculateRandom(0, 8) - 4);
      }
      this.set_y(this.posY - 2);
      this.set_x(this.posX - 1);
      DataGame.jumlahPartikel++;
    },
    assetsAddEventListener: function () {},
    destroy: function () {
      this.RemoveDispatcher();
      Global.killChildren(this, false);
      this.sptWater = null;
      this.bubble = null;
    },
    Update: function (e) {
      var _g = this;
      _g.set_y(_g.get_y() + this.dy);
      if (this.isRotate == false && this.get_y() >= 220) {
        this.isRotate = true;
        this.isMinus = Global.calculateRandom(0, 1) == 0;
        this.set_rotation(
          Global.calculateRandom(0, 5) * (this.isMinus == true ? -1 : 1)
        );
      }
      if (this.get_y() >= 262) {
        if (Game1.GetInstance().percik.currentLabel() == "idle") {
          Game1.GetInstance().percik.animated.showBehaviors([
            "anim percik",
            "idle",
          ]);
        }
        Game1.GetInstance().destroyPartikel(this);
      }
    },
    __class__: Particle,
  });
  var openfl_display_BitmapData = function (
    width,
    height,
    transparent,
    fillColor
  ) {
    if (fillColor == null) {
      fillColor = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    this.transparent = transparent;
    if (width == null) {
      width = 0;
    } else {
      width = width;
    }
    if (height == null) {
      height = 0;
    } else {
      height = height;
    }
    if (width < 0) {
      width = 0;
    } else {
      width = width;
    }
    if (height < 0) {
      height = 0;
    } else {
      height = height;
    }
    this.width = width;
    this.height = height;
    this.rect = new openfl_geom_Rectangle(0, 0, width, height);
    if (width > 0 && height > 0) {
      if (transparent) {
        if ((fillColor & -16777216) == 0) {
          fillColor = 0;
        }
      } else {
        fillColor = -16777216 | (fillColor & 16777215);
      }
      fillColor = (fillColor << 8) | ((fillColor >>> 24) & 255);
      this.image = new lime_graphics_Image(
        null,
        0,
        0,
        width,
        height,
        fillColor
      );
      this.image.set_transparent(transparent);
      this.__isValid = true;
      this.readable = true;
    }
    this.__worldTransform = new openfl_geom_Matrix();
    this.__worldColorTransform = new openfl_geom_ColorTransform();
  };
  $hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
  openfl_display_BitmapData.__name__ = ["openfl", "display", "BitmapData"];
  openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
  openfl_display_BitmapData.fromBase64 = function (base64, type, onload) {
    var bitmapData = new openfl_display_BitmapData(0, 0, true, 0);
    var onload1 = onload;
    var _gthis = bitmapData;
    lime_graphics_Image
      .loadFromBase64(base64, type)
      .onComplete(function (image) {
        _gthis.__fromImage(image);
        if (onload1 != null) {
          onload1(_gthis);
        }
      });
    return bitmapData;
  };
  openfl_display_BitmapData.fromBytes = function (bytes, rawAlpha, onload) {
    var bitmapData = new openfl_display_BitmapData(0, 0, true, 0);
    var rawAlpha1 = rawAlpha;
    var onload1 = onload;
    var _gthis = bitmapData;
    lime_graphics_Image
      .loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes))
      .onComplete(function (image) {
        _gthis.__fromImage(image);
        if (rawAlpha1 != null) {
          _gthis.__applyAlpha(rawAlpha1);
        }
        if (onload1 != null) {
          onload1(_gthis);
        }
      });
    return bitmapData;
  };
  openfl_display_BitmapData.fromCanvas = function (canvas, transparent) {
    if (transparent == null) {
      transparent = true;
    }
    if (canvas == null) {
      return null;
    }
    var bitmapData = new openfl_display_BitmapData(0, 0, transparent, 0);
    bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
    bitmapData.image.set_transparent(transparent);
    return bitmapData;
  };
  openfl_display_BitmapData.fromFile = function (path, onload, onerror) {
    var bitmapData = new openfl_display_BitmapData(0, 0, true, 0);
    bitmapData.__fromFile(path, onload, onerror);
    return bitmapData;
  };
  openfl_display_BitmapData.fromImage = function (image, transparent) {
    if (transparent == null) {
      transparent = true;
    }
    if (image == null || image.buffer == null) {
      return null;
    }
    var bitmapData = new openfl_display_BitmapData(0, 0, transparent, 0);
    bitmapData.__fromImage(image);
    bitmapData.image.set_transparent(transparent);
    return bitmapData;
  };
  openfl_display_BitmapData.fromTexture = function (texture) {
    if (texture == null) {
      return null;
    }
    var bitmapData = new openfl_display_BitmapData(
      texture.__width,
      texture.__height,
      true,
      0
    );
    bitmapData.readable = false;
    bitmapData.__texture = texture.__textureID;
    bitmapData.__textureContext = texture.__textureContext;
    bitmapData.image = null;
    return bitmapData;
  };
  openfl_display_BitmapData.loadFromBase64 = function (base64, type) {
    return lime_graphics_Image
      .loadFromBase64(base64, type)
      .then(function (image) {
        return lime_app_Future.withValue(
          openfl_display_BitmapData.fromImage(image)
        );
      });
  };
  openfl_display_BitmapData.loadFromBytes = function (bytes, rawAlpha) {
    return lime_graphics_Image
      .loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes))
      .then(function (image) {
        var bitmapData = openfl_display_BitmapData.fromImage(image);
        if (rawAlpha != null) {
          bitmapData.__applyAlpha(rawAlpha);
        }
        return lime_app_Future.withValue(bitmapData);
      });
  };
  openfl_display_BitmapData.loadFromFile = function (path) {
    return lime_graphics_Image.loadFromFile(path).then(function (image) {
      return lime_app_Future.withValue(
        openfl_display_BitmapData.fromImage(image)
      );
    });
  };
  openfl_display_BitmapData.prototype = {
    height: null,
    image: null,
    readable: null,
    rect: null,
    transparent: null,
    width: null,
    __blendMode: null,
    __buffer: null,
    __bufferContext: null,
    __bufferAlpha: null,
    __bufferData: null,
    __framebuffer: null,
    __framebufferContext: null,
    __isValid: null,
    __surface: null,
    __texture: null,
    __textureContext: null,
    __textureVersion: null,
    __transform: null,
    __worldColorTransform: null,
    __worldTransform: null,
    applyFilter: function (sourceBitmapData, sourceRect, destPoint, filter) {
      if (
        !this.readable ||
        sourceBitmapData == null ||
        !sourceBitmapData.readable
      ) {
        return;
      }
      filter.__applyFilter(sourceBitmapData, this, sourceRect, destPoint);
    },
    clone: function () {
      if (!this.__isValid) {
        return new openfl_display_BitmapData(
          this.width,
          this.height,
          this.transparent,
          0
        );
      } else if (!this.readable && this.image == null) {
        var bitmapData = new openfl_display_BitmapData(
          0,
          0,
          this.transparent,
          0
        );
        bitmapData.width = this.width;
        bitmapData.height = this.height;
        bitmapData.rect.copyFrom(this.rect);
        bitmapData.__framebuffer = this.__framebuffer;
        bitmapData.__framebufferContext = this.__framebufferContext;
        bitmapData.__texture = this.__texture;
        bitmapData.__textureContext = this.__textureContext;
        bitmapData.__isValid = true;
        return bitmapData;
      } else {
        return openfl_display_BitmapData.fromImage(
          this.image.clone(),
          this.transparent
        );
      }
    },
    colorTransform: function (rect, colorTransform) {
      if (!this.readable) {
        return;
      }
      this.image.colorTransform(
        rect.__toLimeRectangle(),
        colorTransform.__toLimeColorMatrix()
      );
    },
    compare: function (otherBitmapData) {
      if (otherBitmapData == this) {
        return 0;
      } else if (otherBitmapData == null) {
        return -1;
      } else if (this.readable == false || otherBitmapData.readable == false) {
        return -2;
      } else if (this.width != otherBitmapData.width) {
        return -3;
      } else if (this.height != otherBitmapData.height) {
        return -4;
      }
      if (
        this.image != null &&
        otherBitmapData.image != null &&
        this.image.get_format() == otherBitmapData.image.get_format()
      ) {
        var bytes = this.image.get_data();
        var otherBytes = otherBitmapData.image.get_data();
        var equal = true;
        var _g1 = 0;
        var _g = bytes.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (bytes[i] != otherBytes[i]) {
            equal = false;
            break;
          }
        }
        if (equal) {
          return 0;
        }
      }
      var bitmapData = null;
      var foundDifference;
      var pixel;
      var otherPixel;
      var comparePixel;
      var r;
      var g;
      var b;
      var a;
      var _g11 = 0;
      var _g2 = this.height;
      while (_g11 < _g2) {
        var y = _g11++;
        var _g3 = 0;
        var _g21 = this.width;
        while (_g3 < _g21) {
          var x = _g3++;
          foundDifference = false;
          pixel = this.getPixel32(x, y);
          otherPixel = otherBitmapData.getPixel32(x, y);
          comparePixel = 0;
          if (pixel != otherPixel) {
            r = ((pixel >>> 16) & 255) - ((otherPixel >>> 16) & 255);
            g = ((pixel >>> 8) & 255) - ((otherPixel >>> 8) & 255);
            b = (pixel & 255) - (otherPixel & 255);
            if (r < 0) {
              r *= -1;
            }
            if (g < 0) {
              g *= -1;
            }
            if (b < 0) {
              b *= -1;
            }
            if (r == 0 && g == 0 && b == 0) {
              a = ((pixel >>> 24) & 255) - ((otherPixel >>> 24) & 255);
              if (a != 0) {
                comparePixel =
                  (((comparePixel >>> 24) & 255 & 255) << 24) |
                  16711680 |
                  (((comparePixel >>> 8) & 255 & 255) << 8) |
                  (comparePixel & 255 & 255);
                comparePixel =
                  (((comparePixel >>> 24) & 255 & 255) << 24) |
                  (((comparePixel >>> 16) & 255 & 255) << 16) |
                  65280 |
                  (comparePixel & 255 & 255);
                comparePixel =
                  (((comparePixel >>> 24) & 255 & 255) << 24) |
                  (((comparePixel >>> 16) & 255 & 255) << 16) |
                  (((comparePixel >>> 8) & 255 & 255) << 8) |
                  255;
                comparePixel =
                  ((a & 255) << 24) |
                  (((comparePixel >>> 16) & 255 & 255) << 16) |
                  (((comparePixel >>> 8) & 255 & 255) << 8) |
                  (comparePixel & 255 & 255);
                foundDifference = true;
              }
            } else {
              comparePixel =
                (((comparePixel >>> 24) & 255 & 255) << 24) |
                ((r & 255) << 16) |
                (((comparePixel >>> 8) & 255 & 255) << 8) |
                (comparePixel & 255 & 255);
              comparePixel =
                (((comparePixel >>> 24) & 255 & 255) << 24) |
                (((comparePixel >>> 16) & 255 & 255) << 16) |
                ((g & 255) << 8) |
                (comparePixel & 255 & 255);
              comparePixel =
                (((comparePixel >>> 24) & 255 & 255) << 24) |
                (((comparePixel >>> 16) & 255 & 255) << 16) |
                (((comparePixel >>> 8) & 255 & 255) << 8) |
                (b & 255);
              comparePixel =
                -16777216 |
                (((comparePixel >>> 16) & 255 & 255) << 16) |
                (((comparePixel >>> 8) & 255 & 255) << 8) |
                (comparePixel & 255 & 255);
              foundDifference = true;
            }
          }
          if (foundDifference) {
            if (bitmapData == null) {
              bitmapData = new openfl_display_BitmapData(
                this.width,
                this.height,
                this.transparent || otherBitmapData.transparent,
                0
              );
            }
            bitmapData.setPixel32(x, y, comparePixel);
          }
        }
      }
      if (bitmapData == null) {
        return 0;
      }
      return bitmapData;
    },
    copyChannel: function (
      sourceBitmapData,
      sourceRect,
      destPoint,
      sourceChannel,
      destChannel
    ) {
      if (!this.readable) {
        return;
      }
      var sourceChannel1;
      switch (sourceChannel) {
        case 1:
          sourceChannel1 = lime_graphics_ImageChannel.RED;
          break;
        case 2:
          sourceChannel1 = lime_graphics_ImageChannel.GREEN;
          break;
        case 4:
          sourceChannel1 = lime_graphics_ImageChannel.BLUE;
          break;
        case 8:
          sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
          break;
        default:
          return;
      }
      var destChannel1;
      switch (destChannel) {
        case 1:
          destChannel1 = lime_graphics_ImageChannel.RED;
          break;
        case 2:
          destChannel1 = lime_graphics_ImageChannel.GREEN;
          break;
        case 4:
          destChannel1 = lime_graphics_ImageChannel.BLUE;
          break;
        case 8:
          destChannel1 = lime_graphics_ImageChannel.ALPHA;
          break;
        default:
          return;
      }
      this.image.copyChannel(
        sourceBitmapData.image,
        sourceRect.__toLimeRectangle(),
        destPoint.__toLimeVector2(),
        sourceChannel1,
        destChannel1
      );
    },
    copyPixels: function (
      sourceBitmapData,
      sourceRect,
      destPoint,
      alphaBitmapData,
      alphaPoint,
      mergeAlpha
    ) {
      if (mergeAlpha == null) {
        mergeAlpha = false;
      }
      if (!this.readable || sourceBitmapData == null) {
        return;
      }
      this.image.copyPixels(
        sourceBitmapData.image,
        sourceRect.__toLimeRectangle(),
        destPoint.__toLimeVector2(),
        alphaBitmapData != null ? alphaBitmapData.image : null,
        alphaPoint != null ? alphaPoint.__toLimeVector2() : null,
        mergeAlpha
      );
    },
    dispose: function () {
      this.image = null;
      this.width = 0;
      this.height = 0;
      this.rect = null;
      this.__isValid = false;
      this.readable = false;
      this.__surface = null;
      this.__buffer = null;
      this.__framebuffer = null;
      this.__framebufferContext = null;
      this.__texture = null;
      this.__textureContext = null;
    },
    disposeImage: function () {
      this.readable = false;
    },
    draw: function (
      source,
      matrix,
      colorTransform,
      blendMode,
      clipRect,
      smoothing
    ) {
      if (smoothing == null) {
        smoothing = false;
      }
      if (matrix == null) {
        matrix = new openfl_geom_Matrix();
        if (source.__transform != null) {
          matrix.copyFrom(source.__transform);
          matrix.tx = 0;
          matrix.ty = 0;
        }
      }
      if (!this.readable) {
        if (lime_graphics_opengl_GL.context != null) {
          var gl = lime_graphics_opengl_GL.context;
          var target = gl.FRAMEBUFFER;
          var framebuffer = this.__getFramebuffer(gl);
          gl.__context.bindFramebuffer(target, framebuffer);
          gl.__context.viewport(0, 0, this.width, this.height);
          var renderer = new openfl__$internal_renderer_opengl_GLRenderer(
            openfl_Lib.current.stage,
            gl,
            false
          );
          renderer.resize(this.width, this.height);
          var renderSession = renderer.renderSession;
          renderSession.shaderManager = js_Boot.__cast(
            openfl_Lib.current.stage.__renderer,
            openfl__$internal_renderer_opengl_GLRenderer
          ).renderSession.shaderManager;
          var matrixCache = source.__worldTransform;
          source.__updateTransforms(matrix);
          source.__updateChildren(false);
          source.__renderGL(renderer.renderSession);
          source.__updateTransforms(matrixCache);
          source.__updateChildren(true);
          gl.__context.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
      } else {
        if (colorTransform != null) {
          var width = Math.ceil(Reflect.getProperty(source, "width"));
          var height = Math.ceil(Reflect.getProperty(source, "height"));
          var copy = new openfl_display_BitmapData(width, height, true, 0);
          copy.draw(source);
          copy.colorTransform(copy.rect, colorTransform);
          source = copy;
        }
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
        var buffer = this.image.buffer;
        var renderSession1 = new openfl__$internal_renderer_RenderSession();
        renderSession1.context = buffer.__srcContext;
        renderSession1.allowSmoothing = smoothing;
        renderSession1.maskManager =
          new openfl__$internal_renderer_canvas_CanvasMaskManager(
            renderSession1
          );
        if (!smoothing) {
          buffer.__srcContext.mozImageSmoothingEnabled = false;
          buffer.__srcContext.msImageSmoothingEnabled = false;
          buffer.__srcContext.imageSmoothingEnabled = false;
        }
        if (clipRect != null) {
          renderSession1.maskManager.pushRect(
            clipRect,
            new openfl_geom_Matrix()
          );
        }
        var matrixCache1 = source.__worldTransform;
        source.__updateTransforms(matrix);
        source.__updateChildren(false);
        source.__renderCanvas(renderSession1);
        source.__updateTransforms(matrixCache1);
        source.__updateChildren(true);
        if (!smoothing) {
          buffer.__srcContext.mozImageSmoothingEnabled = true;
          buffer.__srcContext.msImageSmoothingEnabled = true;
          buffer.__srcContext.imageSmoothingEnabled = true;
        }
        if (clipRect != null) {
          renderSession1.maskManager.popRect();
        }
        buffer.__srcContext.setTransform(1, 0, 0, 1, 0, 0);
        buffer.__srcImageData = null;
        buffer.data = null;
        this.image.dirty = true;
        this.image.version++;
      }
    },
    drawWithQuality: function (
      source,
      matrix,
      colorTransform,
      blendMode,
      clipRect,
      smoothing,
      quality
    ) {
      if (smoothing == null) {
        smoothing = false;
      }
      this.draw(source, matrix, colorTransform, blendMode, clipRect, smoothing);
    },
    encode: function (rect, compressor, byteArray) {
      if (!this.readable || rect == null) {
        byteArray = null;
        return byteArray;
      }
      if (byteArray == null) {
        var this1 = new openfl_utils_ByteArrayData(0);
        byteArray = this1;
      }
      var image = this.image;
      if (!rect.equals(this.rect)) {
        var matrix = openfl_geom_Matrix.__temp;
        matrix.setTo(1, 0, 0, 1, Math.round(-rect.x), Math.round(-rect.y));
        var bitmapData = new openfl_display_BitmapData(
          Math.ceil(rect.width),
          Math.ceil(rect.height),
          true,
          0
        );
        bitmapData.draw(this, matrix);
        image = bitmapData.image;
      }
      if (js_Boot.__instanceof(compressor, openfl_display_PNGEncoderOptions)) {
        byteArray.writeBytes(
          openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
            image.encode("png")
          )
        );
        return byteArray;
      } else if (
        js_Boot.__instanceof(compressor, openfl_display_JPEGEncoderOptions)
      ) {
        byteArray.writeBytes(
          openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
            image.encode(
              "jpg",
              js_Boot.__cast(compressor, openfl_display_JPEGEncoderOptions)
                .quality
            )
          )
        );
        return byteArray;
      }
      byteArray = null;
      return byteArray;
    },
    fillRect: function (rect, color) {
      if (rect == null) {
        return;
      }
      if (this.transparent && (color & -16777216) == 0) {
        color = 0;
      }
      if (this.readable) {
        this.image.fillRect(rect.__toLimeRectangle(), color, 1);
      } else if (this.__framebuffer != null) {
        var gl = lime_graphics_opengl_GL.context;
        var color1 = color;
        var useScissor = !this.rect.equals(rect);
        gl.__context.bindFramebuffer(gl.FRAMEBUFFER, this.__framebuffer);
        if (useScissor) {
          gl.__context.enable(gl.SCISSOR_TEST);
          gl.__context.scissor(
            Math.round(rect.x),
            Math.round(rect.y),
            Math.round(rect.width),
            Math.round(rect.height)
          );
        }
        gl.__context.clearColor(
          ((color1 >>> 16) & 255) / 255,
          ((color1 >>> 8) & 255) / 255,
          (color1 & 255) / 255,
          ((color1 >>> 24) & 255) / 255
        );
        gl.__context.clear(gl.COLOR_BUFFER_BIT);
        if (useScissor) {
          gl.__context.disable(gl.SCISSOR_TEST);
        }
        gl.__context.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
    },
    floodFill: function (x, y, color) {
      if (!this.readable) {
        return;
      }
      this.image.floodFill(x, y, color, 1);
    },
    generateFilterRect: function (sourceRect, filter) {
      return sourceRect.clone();
    },
    getBuffer: function (gl, alpha) {
      if (this.__buffer == null || this.__bufferContext != gl) {
        var uvWidth = 1;
        var uvHeight = 1;
        var array = [
          this.width,
          this.height,
          0,
          uvWidth,
          uvHeight,
          alpha,
          0,
          this.height,
          0,
          0,
          uvHeight,
          alpha,
          this.width,
          0,
          0,
          uvWidth,
          0,
          alpha,
          0,
          0,
          0,
          0,
          0,
          alpha,
        ];
        var this1;
        if (array != null) {
          this1 = new Float32Array(array);
        } else {
          this1 = null;
        }
        this.__bufferData = this1;
        this.__bufferAlpha = alpha;
        this.__bufferContext = gl;
        this.__buffer = gl.__context.createBuffer();
        gl.__context.bindBuffer(gl.ARRAY_BUFFER, this.__buffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          this.__bufferData.byteLength,
          this.__bufferData,
          gl.STATIC_DRAW
        );
      } else if (this.__bufferAlpha != alpha) {
        this.__bufferData[5] = alpha;
        this.__bufferData[11] = alpha;
        this.__bufferData[17] = alpha;
        this.__bufferData[23] = alpha;
        this.__bufferAlpha = alpha;
        gl.__context.bindBuffer(gl.ARRAY_BUFFER, this.__buffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          this.__bufferData.byteLength,
          this.__bufferData,
          gl.STATIC_DRAW
        );
      }
      return this.__buffer;
    },
    getColorBoundsRect: function (mask, color, findColor) {
      if (findColor == null) {
        findColor = true;
      }
      if (!this.readable) {
        return new openfl_geom_Rectangle(0, 0, this.width, this.height);
      }
      if (!this.transparent || ((mask >> 24) & 255) > 0) {
        var color1 = color;
        if (((color1 >>> 24) & 255) == 0) {
          color1 = 0;
        }
      }
      var rect = this.image.getColorBoundsRect(mask, color, findColor, 1);
      return new openfl_geom_Rectangle(rect.x, rect.y, rect.width, rect.height);
    },
    getPixel: function (x, y) {
      if (!this.readable) {
        return 0;
      }
      return this.image.getPixel(x, y, 1);
    },
    getPixel32: function (x, y) {
      if (!this.readable) {
        return 0;
      }
      return this.image.getPixel32(x, y, 1);
    },
    getPixels: function (rect) {
      if (!this.readable) {
        return null;
      }
      if (rect == null) {
        rect = this.rect;
      }
      return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
        this.image.getPixels(rect.__toLimeRectangle(), 1)
      );
    },
    getSurface: function () {
      if (!this.readable) {
        return null;
      }
      if (this.__surface == null) {
        this.__surface =
          lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(
            this.image
          );
      }
      return this.__surface;
    },
    getTexture: function (gl) {
      if (!this.__isValid) {
        return null;
      }
      if (this.__texture == null || this.__textureContext != gl) {
        this.__textureContext = gl;
        this.__texture = gl.__context.createTexture();
        gl.__context.bindTexture(gl.TEXTURE_2D, this.__texture);
        gl.__context.texParameteri(
          gl.TEXTURE_2D,
          gl.TEXTURE_WRAP_S,
          gl.CLAMP_TO_EDGE
        );
        gl.__context.texParameteri(
          gl.TEXTURE_2D,
          gl.TEXTURE_WRAP_T,
          gl.CLAMP_TO_EDGE
        );
        gl.__context.texParameteri(
          gl.TEXTURE_2D,
          gl.TEXTURE_MAG_FILTER,
          gl.NEAREST
        );
        gl.__context.texParameteri(
          gl.TEXTURE_2D,
          gl.TEXTURE_MIN_FILTER,
          gl.NEAREST
        );
        this.__textureVersion = -1;
      }
      lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
      if (this.image != null && this.image.version != this.__textureVersion) {
        var internalFormat;
        var format;
        if (this.__surface != null) {
          lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(
            this.__surface
          );
        }
        if (this.image.buffer.bitsPerPixel == 1) {
          internalFormat = gl.ALPHA;
          format = gl.ALPHA;
        } else {
          if (openfl_display_BitmapData.__supportsBGRA == null) {
            openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
            var bgraExtension = null;
            if (bgraExtension != null) {
              openfl_display_BitmapData.__supportsBGRA = true;
              openfl_display_BitmapData.__textureFormat =
                bgraExtension.BGRA_EXT;
              if (gl.type == lime_graphics_opengl_GLContextType.GLES) {
                openfl_display_BitmapData.__textureInternalFormat =
                  bgraExtension.BGRA_EXT;
              }
            } else {
              openfl_display_BitmapData.__supportsBGRA = false;
              openfl_display_BitmapData.__textureFormat = gl.RGBA;
            }
          }
          internalFormat = openfl_display_BitmapData.__textureInternalFormat;
          format = openfl_display_BitmapData.__textureFormat;
        }
        gl.__context.bindTexture(gl.TEXTURE_2D, this.__texture);
        var textureImage = this.image;
        if (
          textureImage.type != lime_graphics_ImageType.DATA &&
          !textureImage.get_premultiplied()
        ) {
          gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
        } else if (
          !textureImage.get_premultiplied() &&
          textureImage.get_transparent()
        ) {
          gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
        }
        if (
          !openfl_display_BitmapData.__supportsBGRA &&
          textureImage.get_format() != 0
        ) {
          textureImage = textureImage.clone();
          textureImage.set_format(0);
        }
        if (textureImage.type == lime_graphics_ImageType.DATA) {
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            internalFormat,
            textureImage.buffer.width,
            textureImage.buffer.height,
            0,
            format,
            gl.UNSIGNED_BYTE,
            textureImage.get_data()
          );
        } else {
          gl.texImage2D(
            gl.TEXTURE_2D,
            0,
            internalFormat,
            format,
            gl.UNSIGNED_BYTE,
            textureImage.get_src()
          );
        }
        gl.__context.bindTexture(gl.TEXTURE_2D, null);
        this.__textureVersion = this.image.version;
      }
      if (!this.readable && this.image != null) {
        this.__surface = null;
        this.image = null;
      }
      return this.__texture;
    },
    getVector: function (rect) {
      var pixels = this.getPixels(rect);
      var length =
        (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4) | 0;
      var result = openfl__$Vector_Vector_$Impl_$.toIntVector(
        null,
        length,
        true
      );
      var _g1 = 0;
      var _g = length;
      while (_g1 < _g) {
        var i = _g1++;
        result.set(i, pixels.readUnsignedInt());
      }
      return result;
    },
    histogram: function (hRect) {
      var rect =
        hRect != null
          ? hRect
          : new openfl_geom_Rectangle(0, 0, this.width, this.height);
      var pixels = this.getPixels(rect);
      var _g = [];
      var _g1 = 0;
      while (_g1 < 4) {
        var i = _g1++;
        var _g2 = [];
        var _g3 = 0;
        while (_g3 < 256) {
          var j = _g3++;
          _g2.push(0);
        }
        _g.push(_g2);
      }
      var result = _g;
      var _g21 = 0;
      var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
      while (_g21 < _g11) {
        var i1 = _g21++;
        ++result[i1 % 4][pixels.readUnsignedByte()];
      }
      return result;
    },
    hitTest: function (
      firstPoint,
      firstAlphaThreshold,
      secondObject,
      secondBitmapDataPoint,
      secondAlphaThreshold
    ) {
      if (secondAlphaThreshold == null) {
        secondAlphaThreshold = 1;
      }
      if (!this.readable) {
        return false;
      }
      if (js_Boot.__instanceof(secondObject, openfl_display_Bitmap)) {
        secondObject = js_Boot.__cast(
          secondObject,
          openfl_display_Bitmap
        ).bitmapData;
      }
      if (js_Boot.__instanceof(secondObject, openfl_geom_Point)) {
        var secondPoint = secondObject;
        var x = (secondPoint.x - firstPoint.x) | 0;
        var y = (secondPoint.y - firstPoint.y) | 0;
        if (this.rect.contains(x, y)) {
          var pixel = this.getPixel32(x, y);
          if (((pixel >> 24) & 255) > firstAlphaThreshold) {
            return true;
          }
        }
      } else if (
        js_Boot.__instanceof(secondObject, openfl_display_BitmapData)
      ) {
        var secondBitmapData = secondObject;
        var x1;
        var y1;
        if (secondBitmapDataPoint == null) {
          x1 = 0;
          y1 = 0;
        } else {
          x1 = (secondBitmapDataPoint.x - firstPoint.x) | 0;
          y1 = (secondBitmapDataPoint.y - firstPoint.y) | 0;
        }
        if (this.rect.contains(x1, y1)) {
          var hitRect = openfl_geom_Rectangle.__temp;
          hitRect.setTo(
            x1,
            y1,
            Math.min(secondBitmapData.width, this.width - x1),
            Math.min(secondBitmapData.height, this.height - y1)
          );
          var pixels = this.getPixels(hitRect);
          hitRect.offset(-x1, -y1);
          var testPixels = secondBitmapData.getPixels(hitRect);
          var length = (hitRect.width * hitRect.height) | 0;
          var pixel1;
          var testPixel;
          var _g1 = 0;
          var _g = length;
          while (_g1 < _g) {
            var i = _g1++;
            pixel1 = pixels.readUnsignedInt();
            testPixel = testPixels.readUnsignedInt();
            if (
              ((pixel1 >> 24) & 255) > firstAlphaThreshold &&
              ((testPixel >> 24) & 255) > secondAlphaThreshold
            ) {
              return true;
            }
          }
          return false;
        }
      } else if (js_Boot.__instanceof(secondObject, openfl_geom_Rectangle)) {
        var secondRectangle = openfl_geom_Rectangle.__temp;
        secondRectangle.copyFrom(secondObject);
        secondRectangle.offset(-firstPoint.x, -firstPoint.y);
        secondRectangle.__contract(0, 0, this.width, this.height);
        if (secondRectangle.width > 0 && secondRectangle.height > 0) {
          var pixels1 = this.getPixels(secondRectangle);
          var length1 =
            (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) /
              4) |
            0;
          var pixel2;
          var _g11 = 0;
          var _g2 = length1;
          while (_g11 < _g2) {
            var i1 = _g11++;
            pixel2 = pixels1.readUnsignedInt();
            if (((pixel2 >> 24) & 255) > firstAlphaThreshold) {
              return true;
            }
          }
        }
      }
      return false;
    },
    lock: function () {},
    merge: function (
      sourceBitmapData,
      sourceRect,
      destPoint,
      redMultiplier,
      greenMultiplier,
      blueMultiplier,
      alphaMultiplier
    ) {
      if (
        !this.readable ||
        sourceBitmapData == null ||
        !sourceBitmapData.readable ||
        sourceRect == null ||
        destPoint == null
      ) {
        return;
      }
      this.image.merge(
        sourceBitmapData.image,
        sourceRect.__toLimeRectangle(),
        destPoint.__toLimeVector2(),
        redMultiplier,
        greenMultiplier,
        blueMultiplier,
        alphaMultiplier
      );
    },
    noise: function (randomSeed, low, high, channelOptions, grayScale) {
      if (grayScale == null) {
        grayScale = false;
      }
      if (channelOptions == null) {
        channelOptions = 7;
      }
      if (high == null) {
        high = 255;
      }
      if (low == null) {
        low = 0;
      }
      if (!this.readable) {
        return;
      }
      var func = function () {
        randomSeed = randomSeed * 1103515245 + 12345;
        return (Math.abs(randomSeed / 65536) | 0) % 32768;
      };
      var rand = func;
      rand();
      var range = high - low;
      var this1 = new openfl_utils_ByteArrayData(0);
      var data = this1;
      var redChannel = (channelOptions & 1) == 1;
      var greenChannel = (channelOptions & 2) >> 1 == 1;
      var blueChannel = (channelOptions & 4) >> 2 == 1;
      var alphaChannel = (channelOptions & 8) >> 3 == 1;
      var _g1 = 0;
      var _g = this.height;
      while (_g1 < _g) {
        var y = _g1++;
        var _g3 = 0;
        var _g2 = this.width;
        while (_g3 < _g2) {
          var x = _g3++;
          var red = 0;
          var blue = 0;
          var green = 0;
          var alpha = 255;
          if (grayScale) {
            blue = low + (rand() % range);
            green = blue;
            red = green;
            alpha = 255;
          } else {
            if (redChannel) {
              red = low + (rand() % range);
            }
            if (greenChannel) {
              green = low + (rand() % range);
            }
            if (blueChannel) {
              blue = low + (rand() % range);
            }
            if (alphaChannel) {
              alpha = low + (rand() % range);
            }
          }
          var rgb = alpha;
          rgb = (rgb << 8) + red;
          rgb = (rgb << 8) + green;
          rgb = (rgb << 8) + blue;
          this.setPixel32(x, y, rgb);
        }
      }
    },
    paletteMap: function (
      sourceBitmapData,
      sourceRect,
      destPoint,
      redArray,
      greenArray,
      blueArray,
      alphaArray
    ) {
      var sw = sourceRect.width | 0;
      var sh = sourceRect.height | 0;
      var pixels = sourceBitmapData.getPixels(sourceRect);
      var pixelValue;
      var r;
      var g;
      var b;
      var a;
      var color;
      var _g1 = 0;
      var _g = sh * sw;
      while (_g1 < _g) {
        var i = _g1++;
        pixelValue = pixels.readUnsignedInt();
        if (alphaArray == null) {
          a = pixelValue & -16777216;
        } else {
          a = alphaArray[(pixelValue >> 24) & 255];
        }
        if (redArray == null) {
          r = pixelValue & 16711680;
        } else {
          r = redArray[(pixelValue >> 16) & 255];
        }
        if (greenArray == null) {
          g = pixelValue & 65280;
        } else {
          g = greenArray[(pixelValue >> 8) & 255];
        }
        if (blueArray == null) {
          b = pixelValue & 255;
        } else {
          b = blueArray[pixelValue & 255];
        }
        color = a + r + g + b;
        pixels.position = i * 4;
        pixels.writeUnsignedInt(color);
      }
      pixels.position = 0;
      var destRect = new openfl_geom_Rectangle(
        destPoint.x,
        destPoint.y,
        sw,
        sh
      );
      this.setPixels(destRect, pixels);
    },
    perlinNoise: function (
      baseX,
      baseY,
      numOctaves,
      randomSeed,
      stitch,
      fractalNoise,
      channelOptions,
      grayScale,
      offsets
    ) {
      if (grayScale == null) {
        grayScale = false;
      }
      if (channelOptions == null) {
        channelOptions = 7;
      }
      if (!this.readable) {
        return;
      }
      var noise = new openfl__$internal_utils_PerlinNoise(
        randomSeed,
        numOctaves,
        0.01
      );
      noise.fill(this, baseX, baseY, 0);
    },
    scroll: function (x, y) {
      if (!this.readable) {
        return;
      }
      this.image.scroll(x, y);
    },
    setPixel: function (x, y, color) {
      if (!this.readable) {
        return;
      }
      this.image.setPixel(x, y, color, 1);
    },
    setPixel32: function (x, y, color) {
      if (!this.readable) {
        return;
      }
      this.image.setPixel32(x, y, color, 1);
    },
    setPixels: function (rect, byteArray) {
      if (!this.readable || rect == null) {
        return;
      }
      this.image.setPixels(
        rect.__toLimeRectangle(),
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),
        1
      );
    },
    setVector: function (rect, inputVector) {
      var this1 = new openfl_utils_ByteArrayData(0);
      var byteArray = this1;
      openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(
        byteArray,
        inputVector.get_length() * 4
      );
      var _g = 0;
      while (_g < inputVector.get_length()) {
        var color = inputVector.get(_g);
        ++_g;
        byteArray.writeUnsignedInt(color);
      }
      byteArray.position = 0;
      this.setPixels(rect, byteArray);
    },
    threshold: function (
      sourceBitmapData,
      sourceRect,
      destPoint,
      operation,
      threshold,
      color,
      mask,
      copySource
    ) {
      if (copySource == null) {
        copySource = false;
      }
      if (mask == null) {
        mask = -1;
      }
      if (color == null) {
        color = 0;
      }
      if (
        sourceBitmapData == null ||
        sourceRect == null ||
        destPoint == null ||
        sourceRect.x > sourceBitmapData.width ||
        sourceRect.y > sourceBitmapData.height ||
        destPoint.x > this.width ||
        destPoint.y > this.height
      ) {
        return 0;
      }
      return this.image.threshold(
        sourceBitmapData.image,
        sourceRect.__toLimeRectangle(),
        destPoint.__toLimeVector2(),
        operation,
        threshold,
        color,
        mask,
        copySource,
        1
      );
    },
    unlock: function (changeRect) {},
    __applyAlpha: function (alpha) {
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
      lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
      var data = this.image.buffer.data;
      var _g1 = 0;
      var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
      while (_g1 < _g) {
        var i = _g1++;
        data[i * 4 + 3] = alpha.readUnsignedByte();
      }
      this.image.version++;
    },
    __fromBase64: function (base64, type, onload) {
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(base64, type)
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload != null) {
            onload(_gthis);
          }
        });
    },
    __fromBytes: function (bytes, rawAlpha, onload) {
      var _gthis = this;
      lime_graphics_Image
        .loadFromBytes(
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (rawAlpha != null) {
            _gthis.__applyAlpha(rawAlpha);
          }
          if (onload != null) {
            onload(_gthis);
          }
        });
    },
    __fromFile: function (path, onload, onerror) {
      var _gthis = this;
      lime_graphics_Image
        .loadFromFile(path)
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload != null) {
            onload(_gthis);
          }
        })
        .onError(function (_) {
          onerror();
        });
    },
    __fromImage: function (image) {
      if (image != null && image.buffer != null) {
        this.image = image;
        this.width = image.width;
        this.height = image.height;
        this.rect = new openfl_geom_Rectangle(0, 0, image.width, image.height);
        this.readable = true;
        this.__isValid = true;
      }
    },
    __getFramebuffer: function (gl) {
      if (this.__framebuffer == null || this.__framebufferContext != gl) {
        this.getTexture(gl);
        this.__framebufferContext = gl;
        this.__framebuffer = gl.__context.createFramebuffer();
        gl.__context.bindFramebuffer(gl.FRAMEBUFFER, this.__framebuffer);
        gl.__context.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          this.__texture,
          0
        );
      }
      return this.__framebuffer;
    },
    __renderCairo: function (renderSession) {},
    __renderCairoMask: function (renderSession) {},
    __renderCanvas: function (renderSession) {
      if (!this.readable) {
        return;
      }
      if (this.image.type == lime_graphics_ImageType.DATA) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
      }
      var context = renderSession.context;
      if (this.__worldTransform == null) {
        this.__worldTransform = new openfl_geom_Matrix();
      }
      context.globalAlpha = 1;
      var transform = this.__worldTransform;
      if (renderSession.roundPixels) {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx | 0,
          transform.ty | 0
        );
      } else {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
      }
      context.drawImage(this.image.get_src(), 0, 0);
    },
    __renderCanvasMask: function (renderSession) {},
    __renderGL: function (renderSession) {
      var renderer = renderSession.renderer;
      var gl = renderSession.gl;
      renderSession.blendModeManager.setBlendMode(10);
      var shader = renderSession.shaderManager.defaultShader;
      shader.get_data().uImage0.input = this;
      var tmp = renderSession.allowSmoothing && renderSession.upscaled;
      shader.get_data().uImage0.smoothing = tmp;
      shader.get_data().uMatrix.value = renderer.getMatrix(
        this.__worldTransform
      );
      renderSession.shaderManager.setShader(shader);
      var target = gl.ARRAY_BUFFER;
      var buffer = this.getBuffer(gl, 1);
      gl.__context.bindBuffer(target, buffer);
      var index = shader.get_data().aPosition.index;
      var type = gl.FLOAT;
      var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
      gl.__context.vertexAttribPointer(index, 3, type, false, 24, offset);
      var index1 = shader.get_data().aTexCoord.index;
      var type1 = gl.FLOAT;
      var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
      gl.__context.vertexAttribPointer(index1, 2, type1, false, 24, offset1);
      var index2 = shader.get_data().aAlpha.index;
      var type2 = gl.FLOAT;
      var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
      gl.__context.vertexAttribPointer(index2, 1, type2, false, 24, offset2);
      gl.__context.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    },
    __resize: function (width, height) {
      this.width = width;
      this.height = height;
      this.rect.width = width;
      this.rect.height = height;
    },
    __sync: function () {
      lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
    },
    __updateChildren: function (transformOnly) {},
    __updateMask: function (maskGraphics) {},
    __updateTransforms: function (overrideTransform) {
      if (overrideTransform == null) {
        this.__worldTransform.identity();
      } else {
        this.__worldTransform = overrideTransform;
      }
    },
    __class__: openfl_display_BitmapData,
  };
  var CBGPreloader = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CBGPreloader.preload != null) {
      this.__fromImage(CBGPreloader.preload);
    } else {
      var onload1 = function (b) {
        if (CBGPreloader.preload == null) {
          CBGPreloader.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CBGPreloader.resourceName),
          CBGPreloader.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CBGPreloader"] = CBGPreloader;
  CBGPreloader.__name__ = ["CBGPreloader"];
  CBGPreloader.__super__ = openfl_display_BitmapData;
  CBGPreloader.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CBGPreloader,
  });
  var CTitlePreloader = function (
    width,
    height,
    transparent,
    fillRGBA,
    onload
  ) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CTitlePreloader.preload != null) {
      this.__fromImage(CTitlePreloader.preload);
    } else {
      var onload1 = function (b) {
        if (CTitlePreloader.preload == null) {
          CTitlePreloader.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CTitlePreloader.resourceName),
          CTitlePreloader.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CTitlePreloader"] = CTitlePreloader;
  CTitlePreloader.__name__ = ["CTitlePreloader"];
  CTitlePreloader.__super__ = openfl_display_BitmapData;
  CTitlePreloader.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CTitlePreloader,
  });
  var CBarLoading1 = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CBarLoading1.preload != null) {
      this.__fromImage(CBarLoading1.preload);
    } else {
      var onload1 = function (b) {
        if (CBarLoading1.preload == null) {
          CBarLoading1.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CBarLoading1.resourceName),
          CBarLoading1.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CBarLoading1"] = CBarLoading1;
  CBarLoading1.__name__ = ["CBarLoading1"];
  CBarLoading1.__super__ = openfl_display_BitmapData;
  CBarLoading1.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CBarLoading1,
  });
  var CBarLoading2 = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CBarLoading2.preload != null) {
      this.__fromImage(CBarLoading2.preload);
    } else {
      var onload1 = function (b) {
        if (CBarLoading2.preload == null) {
          CBarLoading2.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CBarLoading2.resourceName),
          CBarLoading2.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CBarLoading2"] = CBarLoading2;
  CBarLoading2.__name__ = ["CBarLoading2"];
  CBarLoading2.__super__ = openfl_display_BitmapData;
  CBarLoading2.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CBarLoading2,
  });
  var CTextLoading = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CTextLoading.preload != null) {
      this.__fromImage(CTextLoading.preload);
    } else {
      var onload1 = function (b) {
        if (CTextLoading.preload == null) {
          CTextLoading.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CTextLoading.resourceName),
          CTextLoading.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CTextLoading"] = CTextLoading;
  CTextLoading.__name__ = ["CTextLoading"];
  CTextLoading.__super__ = openfl_display_BitmapData;
  CTextLoading.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CTextLoading,
  });
  var COrientation = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (COrientation.preload != null) {
      this.__fromImage(COrientation.preload);
    } else {
      var onload1 = function (b) {
        if (COrientation.preload == null) {
          COrientation.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(COrientation.resourceName),
          COrientation.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["COrientation"] = COrientation;
  COrientation.__name__ = ["COrientation"];
  COrientation.__super__ = openfl_display_BitmapData;
  COrientation.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: COrientation,
  });
  var CLogoY8 = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CLogoY8.preload != null) {
      this.__fromImage(CLogoY8.preload);
    } else {
      var onload1 = function (b) {
        if (CLogoY8.preload == null) {
          CLogoY8.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CLogoY8.resourceName),
          CLogoY8.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CLogoY8"] = CLogoY8;
  CLogoY8.__name__ = ["CLogoY8"];
  CLogoY8.__super__ = openfl_display_BitmapData;
  CLogoY8.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CLogoY8,
  });
  var CLogoIDNET = function (width, height, transparent, fillRGBA, onload) {
    if (fillRGBA == null) {
      fillRGBA = -1;
    }
    if (transparent == null) {
      transparent = true;
    }
    openfl_display_BitmapData.call(this, 0, 0, transparent, fillRGBA);
    if (CLogoIDNET.preload != null) {
      this.__fromImage(CLogoIDNET.preload);
    } else {
      var onload1 = function (b) {
        if (CLogoIDNET.preload == null) {
          CLogoIDNET.preload = b.image;
        }
        if (onload != null) {
          onload(b);
        }
      };
      var _gthis = this;
      lime_graphics_Image
        .loadFromBase64(
          haxe_Resource.getString(CLogoIDNET.resourceName),
          CLogoIDNET.resourceType
        )
        .onComplete(function (image) {
          _gthis.__fromImage(image);
          if (onload1 != null) {
            onload1(_gthis);
          }
        });
    }
  };
  $hxClasses["CLogoIDNET"] = CLogoIDNET;
  CLogoIDNET.__name__ = ["CLogoIDNET"];
  CLogoIDNET.__super__ = openfl_display_BitmapData;
  CLogoIDNET.prototype = $extend(openfl_display_BitmapData.prototype, {
    __class__: CLogoIDNET,
  });
  var Preloader = function () {
    this.progressBar = new openfl_display_Sprite();
    this.isAlignOrientation = false;
    this.isAlignLogoIDNET = false;
    this.isAlignLogoY8 = false;
    this.isAlignTextLoading = false;
    this.isAlignBarLoading2 = false;
    this.isAlignBarLoading1 = false;
    this.isAlignTitlePreloader = false;
    this.isAlignBGPreloader = false;
    this.isInit = true;
    this.alignList = [];
    this.isBlockOrientation = false;
    this.isLandscape = true;
    openfl_display_Sprite.call(this);
    Preloader.PreloaderGlobal = this;
    this.checkDomain();
    openfl_Lib.current.stage.set_color(0);
    openfl_Lib.current.stage.align = 5;
    openfl_Lib.current.stage.quality = 0;
    openfl_Lib.current.stage.scaleMode = 3;
    this.setupAspectRatio();
    this.bmpOrientation = new openfl_display_Bitmap(new COrientation(0, 0));
    this.bmpOrientation.smoothing = true;
    this.preloaderTimer = new openfl_utils_Timer(1000, 0);
    this.preloaderTimer.addEventListener(
      "timer",
      $bind(this, this.checkResolution)
    );
    this.preloaderTimer.start();
    this.onEnterFrame();
    this.addEventListener("complete", $bind(this, this.onComplete));
    this.addEventListener("enterFrame", $bind(this, this.onEnterFrame));
    this.addEventListener("progress", $bind(this, this.onProgress));
  };
  $hxClasses["Preloader"] = Preloader;
  Preloader.__name__ = ["Preloader"];
  Preloader.GetInstance = function () {
    return Preloader.PreloaderGlobal;
  };
  Preloader.__super__ = openfl_display_Sprite;
  Preloader.prototype = $extend(openfl_display_Sprite.prototype, {
    isLandscape: null,
    isBlockOrientation: null,
    bmpOrientation: null,
    oldStageWidth: null,
    oldStageHeight: null,
    alignList: null,
    isInit: null,
    aspectRatio: null,
    bmpBGPreloader: null,
    bmpTitlePreloader: null,
    bmpBarLoading1: null,
    bmpBarLoading2: null,
    bmpTextLoading: null,
    bmpLogoY8: null,
    bmpLogoIDNET: null,
    isAlignBGPreloader: null,
    isAlignTitlePreloader: null,
    isAlignBarLoading1: null,
    isAlignBarLoading2: null,
    isAlignTextLoading: null,
    isAlignLogoY8: null,
    isAlignLogoIDNET: null,
    isAlignOrientation: null,
    progressBar: null,
    btnLogoY8: null,
    btnLogoIDNET: null,
    preloaderTimer: null,
    init: function () {
      if (this.isLandscape && this.isBlockOrientation == false) {
        this.isInit = false;
        this.setupAspectRatio();
        this.assetsAddChild();
      }
    },
    onEnterFrame: function (e) {
      this.checkAlign();
      this.checkOrientation();
      this.checkInit();
    },
    checkInit: function () {
      if (this.isInit) {
        if (Setting.isIDNET == false) {
          this.init();
        } else if (Setting.isIDNET) {
          if (Y8Api.isCheckLogin && Y8Api.isCheckProtection) {
            this.init();
          }
        }
      }
    },
    checkDomain: function () {
      var urlDomain = "";
      var urlStart = 0;
      var urlEnd = 0;
      urlDomain = openfl_Lib.current.get_loaderInfo().url;
      if (urlDomain.indexOf("www.") > -1) {
        urlStart = urlDomain.indexOf("www.") + 4;
      } else if (urlDomain.indexOf("://") > -1) {
        urlStart = urlDomain.indexOf("://") + 3;
      }
      urlEnd = urlDomain.indexOf("/", urlStart);
      Global.DOMAIN = urlDomain.substring(urlStart, urlEnd);
    },
    setupAspectRatio: function () {
      this.oldStageWidth = openfl_Lib.current.stage.stageWidth;
      this.oldStageHeight = openfl_Lib.current.stage.stageHeight;
      this.aspectRatio = Math.min(
        openfl_Lib.current.stage.stageWidth / 800,
        openfl_Lib.current.stage.stageHeight / 480
      );
      if (this.aspectRatio != 1) {
        this.set_scaleX(this.aspectRatio);
        this.set_scaleY(this.aspectRatio);
      }
    },
    checkAlign: function () {
      if (this.bmpBGPreloader != null && !this.isAlignBGPreloader) {
        if (this.bmpBGPreloader.get_width() > 0) {
          this.isAlignBGPreloader = true;
          this.align(this.bmpBGPreloader, 0.5, 0.5, 0, 0);
        }
      }
      if (this.bmpTitlePreloader != null && !this.isAlignTitlePreloader) {
        if (this.bmpTitlePreloader.get_width() > 0) {
          this.isAlignTitlePreloader = true;
          this.align(this.bmpTitlePreloader, 0.5, 0.5, 0, -30);
        }
      }
      if (this.bmpBarLoading1 != null && !this.isAlignBarLoading1) {
        if (this.bmpBarLoading1.get_width() > 0) {
          this.isAlignBarLoading1 = true;
          this.align(this.bmpBarLoading1, 0.5, 0.5, 0, 175);
        }
      }
      if (this.bmpBarLoading2 != null && !this.isAlignBarLoading2) {
        if (this.bmpBarLoading2.get_width() > 0) {
          this.isAlignBarLoading2 = true;
          this.align(this.bmpBarLoading2, 0.5, 0.5, 0, 174);
          this.progressBar = new openfl_display_Sprite();
          this.progressBar.get_graphics().beginFill(16750080, 0.5);
          this.progressBar
            .get_graphics()
            .drawRoundRect(
              0,
              0,
              this.bmpBarLoading2.get_width(),
              this.bmpBarLoading2.get_height() - 3,
              1,
              1
            );
          this.progressBar.get_graphics().endFill();
          this.progressBar.set_x(this.bmpBarLoading2.get_x());
          this.progressBar.set_y(this.bmpBarLoading2.get_y());
          this.addChild(this.progressBar);
          this.progressBar.set_scaleX(0);
          this.bmpBarLoading2.set_mask(this.progressBar);
        }
      }
      if (this.bmpTextLoading != null && !this.isAlignTextLoading) {
        if (this.bmpTextLoading.get_width() > 0) {
          this.isAlignTextLoading = true;
          this.align(this.bmpTextLoading, 0.5, 0.5, 0, 130);
        }
      }
      if (this.bmpLogoY8 != null && !this.isAlignLogoY8) {
        if (this.bmpLogoY8.get_width() > 0) {
          this.isAlignLogoY8 = true;
          this.align(this.btnLogoY8, 1, 0, -10, 10);
        }
      }
      if (this.bmpLogoIDNET != null && !this.isAlignLogoIDNET) {
        if (this.bmpLogoIDNET.get_width() > 0) {
          this.isAlignLogoIDNET = true;
          this.align(this.btnLogoIDNET, 1, 0, -10, 10);
        }
      }
      if (this.bmpOrientation != null && !this.isAlignOrientation) {
        if (this.bmpOrientation.get_width() > 0) {
          this.isAlignOrientation = true;
          this.align(this.bmpOrientation, 0.5, 0.5, 0, 0);
        }
      }
    },
    onComplete: function (event) {
      this.preloaderTimer.stop();
      this.preloaderTimer.removeEventListener(
        "timer",
        $bind(this, this.checkResolution)
      );
      this.removeEventListener("enterFrame", $bind(this, this.onEnterFrame));
      Global.log("preloader complete");
    },
    assetsAddChild: function () {
      this.bmpBGPreloader = new openfl_display_Bitmap(new CBGPreloader(0, 0));
      this.bmpBGPreloader.smoothing = true;
      this.addChild(this.bmpBGPreloader);
      this.bmpTitlePreloader = new openfl_display_Bitmap(
        new CTitlePreloader(0, 0)
      );
      this.bmpTitlePreloader.smoothing = true;
      this.addChild(this.bmpTitlePreloader);
      this.bmpBarLoading1 = new openfl_display_Bitmap(new CBarLoading1(0, 0));
      this.bmpBarLoading1.smoothing = true;
      this.addChild(this.bmpBarLoading1);
      this.bmpBarLoading2 = new openfl_display_Bitmap(new CBarLoading2(0, 0));
      this.bmpBarLoading2.smoothing = true;
      this.addChild(this.bmpBarLoading2);
      this.bmpTextLoading = new openfl_display_Bitmap(new CTextLoading(0, 0));
      this.bmpTextLoading.smoothing = true;
      this.addChild(this.bmpTextLoading);
      this.bmpLogoY8 = new openfl_display_Bitmap(new CLogoY8(0, 0));
      this.bmpLogoY8.smoothing = true;
      this.createBtnLogoY8();
      this.addChild(this.btnLogoY8);
      this.bmpLogoIDNET = new openfl_display_Bitmap(new CLogoIDNET(0, 0));
      this.bmpLogoIDNET.smoothing = true;
      this.createBtnLogoIDNET();
      this.addChild(this.btnLogoIDNET);
      this.btnLogoIDNET.set_visible(false);
    },
    createBtnLogoY8: function () {
      var newSprite = new openfl_display_Sprite();
      newSprite.get_graphics().beginFill(16711680, 0);
      newSprite.get_graphics().drawRect(0, 0, 128, 81);
      newSprite.addChild(this.bmpLogoY8);
      this.btnLogoY8 = new openfl_display_SimpleButton();
      this.btnLogoY8.set_scaleX(0.98);
      this.btnLogoY8.set_scaleY(0.98);
      this.btnLogoY8.set_upState(newSprite);
      this.btnLogoY8.set_overState(newSprite);
      this.btnLogoY8.set_downState(newSprite);
      this.btnLogoY8.set_hitTestState(newSprite);
      this.btnLogoY8.addEventListener(
        "mouseOut",
        $bind(this, this.outLogo),
        false,
        0,
        true
      );
      this.btnLogoY8.addEventListener(
        "mouseOver",
        $bind(this, this.overLogo),
        false,
        0,
        true
      );
      this.btnLogoY8.addEventListener(
        "click",
        Global.moreSplash,
        false,
        0,
        true
      );
      if (Y8Api.isSponsor == true) {
        this.btnLogoY8.set_hitTestState(new openfl_display_Sprite());
      }
    },
    createBtnLogoIDNET: function () {
      var newSprite = new openfl_display_Sprite();
      newSprite.get_graphics().beginFill(16711680, 0);
      newSprite.get_graphics().drawRect(0, 0, 143, 65);
      newSprite.addChild(this.bmpLogoIDNET);
      this.btnLogoIDNET = new openfl_display_SimpleButton();
      this.btnLogoIDNET.set_scaleX(0.98);
      this.btnLogoIDNET.set_scaleY(0.98);
      this.btnLogoIDNET.set_upState(newSprite);
      this.btnLogoIDNET.set_overState(newSprite);
      this.btnLogoIDNET.set_downState(newSprite);
      this.btnLogoIDNET.set_hitTestState(newSprite);
      this.btnLogoIDNET.addEventListener(
        "mouseOut",
        $bind(this, this.outLogo),
        false,
        0,
        true
      );
      this.btnLogoIDNET.addEventListener(
        "mouseOver",
        $bind(this, this.overLogo),
        false,
        0,
        true
      );
      this.btnLogoIDNET.addEventListener(
        "click",
        Global.moreIDNET,
        false,
        0,
        true
      );
    },
    outLogo: function (e) {
      var oldWidth = js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .get_width();
      var oldHeight = js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .get_height();
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_scaleX(0.98);
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_scaleY(0.98);
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_x(
          js_Boot.__cast(e.currentTarget, openfl_display_SimpleButton).get_x() +
            (oldWidth -
              js_Boot
                .__cast(e.currentTarget, openfl_display_SimpleButton)
                .get_width()) /
              2
        );
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_y(
          js_Boot.__cast(e.currentTarget, openfl_display_SimpleButton).get_y() +
            (oldHeight -
              js_Boot
                .__cast(e.currentTarget, openfl_display_SimpleButton)
                .get_height()) /
              2
        );
    },
    overLogo: function (e) {
      var oldWidth = js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .get_width();
      var oldHeight = js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .get_height();
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_scaleX(1);
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_scaleY(1);
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_x(
          js_Boot.__cast(e.currentTarget, openfl_display_SimpleButton).get_x() +
            (oldWidth -
              js_Boot
                .__cast(e.currentTarget, openfl_display_SimpleButton)
                .get_width()) /
              2
        );
      js_Boot
        .__cast(e.currentTarget, openfl_display_SimpleButton)
        .set_y(
          js_Boot.__cast(e.currentTarget, openfl_display_SimpleButton).get_y() +
            (oldHeight -
              js_Boot
                .__cast(e.currentTarget, openfl_display_SimpleButton)
                .get_height()) /
              2
        );
    },
    onProgress: function (e) {
      var percentLoaded = e.bytesLoaded / e.bytesTotal;
      if (percentLoaded > 1) {
        percentLoaded = 1;
      }
      if (this.isAlignBarLoading2) {
        this.progressBar.set_scaleX(percentLoaded);
      }
    },
    align: function (obj, alignX, alignY, rangeX, rangeY, isPush) {
      if (isPush == null) {
        isPush = true;
      }
      if (isPush == true) {
        var alignData = {
          _obj: obj,
          _alignX: alignX,
          _alignY: alignY,
          _rangeX: rangeX,
          _rangeY: rangeY,
        };
        this.alignList.push(alignData);
      }
      switch (alignX) {
        case 0:
          obj.set_x(rangeX);
          break;
        case 1:
          obj.set_x(
            openfl_Lib.current.stage.stageWidth / this.aspectRatio -
              obj.get_width() +
              rangeX
          );
          break;
        case 0.5:
          obj.set_x(
            (openfl_Lib.current.stage.stageWidth / this.aspectRatio -
              obj.get_width()) /
              2 +
              rangeX
          );
          break;
      }
      switch (alignY) {
        case 0:
          obj.set_y(rangeY);
          break;
        case 1:
          obj.set_y(
            openfl_Lib.current.stage.stageHeight / this.aspectRatio -
              obj.get_height() +
              rangeY
          );
          break;
        case 0.5:
          obj.set_y(
            (openfl_Lib.current.stage.stageHeight / this.aspectRatio -
              obj.get_height()) /
              2 +
              rangeY
          );
          break;
      }
    },
    checkOrientation: function (e) {
      if (
        openfl_Lib.current.stage.stageWidth <
        openfl_Lib.current.stage.stageHeight
      ) {
        this.isLandscape = false;
      } else if (
        openfl_Lib.current.stage.stageWidth >
        openfl_Lib.current.stage.stageHeight
      ) {
        this.isLandscape = true;
      }
      if (!this.isLandscape && !this.isBlockOrientation) {
        this.setupAspectRatio();
        this.isBlockOrientation = true;
        this.addChild(this.bmpOrientation);
        this.align(this.bmpOrientation, 0.5, 0.5, 0, 0);
      } else if (this.isLandscape && this.isBlockOrientation) {
        this.setupAspectRatio();
        this.reAlignList();
        if (this.bmpBarLoading2 != null) {
          this.progressBar.set_x(this.bmpBarLoading2.get_x());
          this.progressBar.set_y(this.bmpBarLoading2.get_y());
        }
        this.isBlockOrientation = false;
        if (this.bmpOrientation.parent != null) {
          this.removeChild(this.bmpOrientation);
        }
      }
    },
    checkResolution: function (e) {
      if (
        this.oldStageWidth != openfl_Lib.current.stage.stageWidth ||
        this.oldStageHeight != openfl_Lib.current.stage.stageHeight
      ) {
        this.setupAspectRatio();
        this.reAlignList();
        if (this.bmpBarLoading2 != null) {
          this.progressBar.set_x(this.bmpBarLoading2.get_x());
          this.progressBar.set_y(this.bmpBarLoading2.get_y());
        }
        Global.log("change resolution");
      }
    },
    reAlignList: function () {
      var alignData;
      var _g1 = 0;
      var _g = this.alignList.length;
      while (_g1 < _g) {
        var i = _g1++;
        alignData = this.alignList[i];
        this.align(
          alignData._obj,
          alignData._alignX,
          alignData._alignY,
          alignData._rangeX,
          alignData._rangeY,
          false
        );
      }
    },
    __class__: Preloader,
  });
  var Reflect = function () {};
  $hxClasses["Reflect"] = Reflect;
  Reflect.__name__ = ["Reflect"];
  Reflect.field = function (o, field) {
    try {
      return o[field];
    } catch (e) {
      haxe_CallStack.lastException = e;
      return null;
    }
  };
  Reflect.getProperty = function (o, field) {
    var tmp;
    if (o == null) {
      return null;
    } else {
      var tmp1;
      if (o.__properties__) {
        tmp = o.__properties__["get_" + field];
        tmp1 = tmp;
      } else {
        tmp1 = false;
      }
      if (tmp1) {
        return o[tmp]();
      } else {
        return o[field];
      }
    }
  };
  Reflect.setProperty = function (o, field, value) {
    var tmp;
    var tmp1;
    if (o.__properties__) {
      tmp = o.__properties__["set_" + field];
      tmp1 = tmp;
    } else {
      tmp1 = false;
    }
    if (tmp1) {
      o[tmp](value);
    } else {
      o[field] = value;
    }
  };
  Reflect.fields = function (o) {
    var a = [];
    if (o != null) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var f in o) {
        if (
          f != "__id__" &&
          f != "hx__closures__" &&
          hasOwnProperty.call(o, f)
        ) {
          a.push(f);
        }
      }
    }
    return a;
  };
  Reflect.isFunction = function (f) {
    if (typeof f == "function") {
      return !(f.__name__ || f.__ename__);
    } else {
      return false;
    }
  };
  Reflect.compare = function (a, b) {
    if (a == b) {
      return 0;
    } else if (a > b) {
      return 1;
    } else {
      return -1;
    }
  };
  Reflect.compareMethods = function (f1, f2) {
    if (f1 == f2) {
      return true;
    }
    if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
      return false;
    }
    if (f1.scope == f2.scope && f1.method == f2.method) {
      return f1.method != null;
    } else {
      return false;
    }
  };
  Reflect.isEnumValue = function (v) {
    if (v != null) {
      return v.__enum__ != null;
    } else {
      return false;
    }
  };
  Reflect.deleteField = function (o, field) {
    if (!Object.prototype.hasOwnProperty.call(o, field)) {
      return false;
    }
    delete o[field];
    return true;
  };
  Reflect.makeVarArgs = function (f) {
    return function () {
      var a = Array.prototype.slice.call(arguments);
      return f(a);
    };
  };
  var Result = function () {
    BaseSprite.call(this, "update");
    this.AddDispatcher();
    Result.ResultGlobal = this;
    Y8Api.submitScore(DataGame.totalScore);
    var arrTampung = [];
    if (DataGame.totalPlayGame >= 25 && DataSave.achievements[9] == false) {
      DataSave.saveAchievements(9, function () {
        var _g1 = 0;
        var _g = DataSave.achievements.length - 1;
        while (_g1 < _g) {
          var i = _g1++;
          arrTampung.push(DataSave.achievements[i]);
        }
        if (
          arrTampung.indexOf(false) < 0 &&
          DataSave.achievements[11] == false
        ) {
          DataSave.saveAchievements(11, function () {});
        }
      });
    } else {
      var _g11 = 0;
      var _g2 = DataSave.achievements.length - 1;
      while (_g11 < _g2) {
        var i1 = _g11++;
        arrTampung.push(DataSave.achievements[i1]);
      }
      if (arrTampung.indexOf(false) < 0 && DataSave.achievements[11] == false) {
        DataSave.saveAchievements(11, function () {});
      }
    }
    this.assetsLoad();
    this.assetsInitAnimation();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Result"] = Result;
  Result.__name__ = ["Result"];
  Result.GetInstance = function () {
    return Result.ResultGlobal;
  };
  Result.__super__ = BaseSprite;
  Result.prototype = $extend(BaseSprite.prototype, {
    sheetButton: null,
    sptBG: null,
    sptGroup: null,
    btnCollect: null,
    btnPost: null,
    btnPlayAg: null,
    btnMoreGames: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/button.png",
        "images/button.json"
      );
      this.sptBG = Global.loadImage("images", "bg_intro.png");
      this.btnCollect = Global.createButtonSheet(
        this.sheetButton,
        "btn_collect1.png",
        "btn_collect2.png",
        "btn_collect2.png"
      );
      this.btnMoreGames = Global.createButtonSheet(
        this.sheetButton,
        "btn_moregames1.png",
        "btn_moregames2.png",
        "btn_moregames2.png"
      );
      this.btnPlayAg = Global.createButtonSheet(
        this.sheetButton,
        "btn_playag1.png",
        "btn_playag2.png",
        "btn_playag2.png"
      );
      this.btnPost = new Y8Score();
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
    },
    assetsInitAnimation: function () {},
    assetsAddChild: function () {
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      var papan = Global.loadImage("images", "papan.png");
      papan.set_x(26);
      papan.set_y(13);
      this.sptGroup.addChild(papan);
      var infoResult = new BaseAnimation(
        "images/info_result.png",
        "images/info_result.json"
      );
      infoResult.addBehavior("idle", 0, 9, false);
      infoResult.animated.showBehavior("idle");
      infoResult.gotoAndStop(DataGame.noEnding - 1);
      infoResult.RemoveDispatcher();
      infoResult.set_x(181);
      infoResult.set_y(201);
      this.sptGroup.addChild(infoResult);
      var txtScore = new BaseText("RifficFree-Bold.ttf", 26, 3547136, false);
      txtScore.set_text("YOUR SCORE : " + Std.string(DataGame.totalScore));
      txtScore.set_x(400 - txtScore.get_width() / 2);
      txtScore.set_y(282 - txtScore.get_height() / 2);
      this.sptGroup.addChild(txtScore);
      var ketPapan = Global.loadImage("images", "ket_papanres.png");
      ketPapan.set_x(287);
      ketPapan.set_y(319);
      this.sptGroup.addChild(ketPapan);
      var shine = Global.loadImage("images", "bg_cahaya.png");
      shine.set_x(-204);
      shine.set_y(-180);
      this.sptGroup.addChild(shine);
      var judul = Global.loadImage("images", "ket_result.png");
      judul.set_x(280);
      judul.set_y(64);
      this.sptGroup.addChild(judul);
      this.btnCollect.set_x(18);
      this.btnCollect.set_y(395);
      this.sptGroup.addChild(this.btnCollect);
      this.btnPost.set_x(137);
      this.btnPost.set_y(395);
      this.sptGroup.addChild(this.btnPost);
      this.btnPlayAg.set_x(355);
      this.btnPlayAg.set_y(395);
      this.sptGroup.addChild(this.btnPlayAg);
      this.btnMoreGames.set_x(574);
      this.btnMoreGames.set_y(395);
      this.sptGroup.addChild(this.btnMoreGames);
      if (Y8Api.isSponsor == true) {
        this.btnMoreGames.set_visible(false);
        var _g = this.btnCollect;
        _g.set_x(_g.get_x() + 110);
        var _g1 = this.btnPost;
        _g1.set_x(_g1.get_x() + 110);
        var _g2 = this.btnPlayAg;
        _g2.set_x(_g2.get_x() + 110);
      }
      this.addChild(new Y8Achievements(1, 0, -85, 15));
    },
    assetsAddEventListener: function () {
      this.btnMoreGames.addEventListener(
        "click",
        Global.moreGames,
        false,
        0,
        true
      );
      this.btnPlayAg.addEventListener(
        "click",
        $bind(this, this.onPlayAgain),
        false,
        0,
        true
      );
      this.btnCollect.addEventListener(
        "click",
        $bind(this, this.onCollection),
        false,
        0,
        true
      );
    },
    onCollection: function (e) {
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    onPlayAgain: function (e) {
      Main.GetInstance().changeWindow("Result", "Game1");
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
      Y8Api.showAds();
    },
    destroy: function () {
      this.RemoveDispatcher();
      Global.killAnimationList();
      this.btnMoreGames.removeEventListener("click", Global.moreGames);
      this.btnPlayAg.removeEventListener(
        "click",
        $bind(this, this.onPlayAgain)
      );
      this.btnCollect.removeEventListener(
        "click",
        $bind(this, this.onCollection)
      );
      Global.killChildren(this, false);
      this.sptBG = null;
      this.sptGroup = null;
      this.btnCollect = null;
      this.btnPlayAg = null;
      this.btnMoreGames = null;
      this.btnPost = null;
    },
    Update: function (e) {},
    __class__: Result,
  });
  var Setting = function () {};
  $hxClasses["Setting"] = Setting;
  Setting.__name__ = ["Setting"];
  var SoundButton = function () {
    openfl_display_Sprite.call(this);
    this.sheetSound = new BaseSheet("images/sound.png", "images/sound.json");
    this.dummy = new openfl_display_Sprite();
    this.dummy.get_graphics().beginFill(16777215, 0);
    this.dummy.get_graphics().drawRect(0, 0, 93, 62);
    this.dummy.set_x(-36);
    this.dummy.set_y(-5);
    this.addChild(this.dummy);
    Global.setMouseEnabled(this.dummy, false);
    this.btnSoundOn = Global.createButtonSheet(
      this.sheetSound,
      "btn_soundon.png",
      "btn_soundon.png",
      "btn_soundon.png"
    );
    this.btnSoundOff = Global.createButtonSheet(
      this.sheetSound,
      "btn_soundoff.png",
      "btn_soundoff.png",
      "btn_soundoff.png"
    );
    this.nada = new BaseAnimation(
      "images/nada.png",
      "images/nada.json",
      true,
      0,
      0,
      true
    );
    this.nada.addBehavior("idle", 0, 19, true);
    this.nada.animated.showBehavior("idle");
    this.addChild(this.nada);
    this.nada.set_x(this.btnSoundOn.get_x() + 8);
    this.nada.set_y(this.btnSoundOn.get_y() + 18);
    Global.setMouseEnabled(this.nada, false);
    if (SoundGame.isMuted == false) {
      this.addChild(this.btnSoundOn);
      this.nada.set_x(this.btnSoundOn.get_x() + 8);
      this.nada.set_y(this.btnSoundOn.get_y() + 18);
      this.nada.set_visible(true);
      this.setChildIndex(this.nada, this.get_numChildren() - 1);
    } else if (SoundGame.isMuted == true) {
      this.addChild(this.btnSoundOff);
      this.nada.set_visible(false);
    }
    this.addEventListener("click", $bind(this, this.toggleSound));
  };
  $hxClasses["SoundButton"] = SoundButton;
  SoundButton.__name__ = ["SoundButton"];
  SoundButton.__super__ = openfl_display_Sprite;
  SoundButton.prototype = $extend(openfl_display_Sprite.prototype, {
    sheetSound: null,
    btnSoundOn: null,
    btnSoundOff: null,
    nada: null,
    dummy: null,
    toggleSound: function (e) {
      var _g = SoundGame.isMuted;
      switch (_g) {
        case false:
          SoundGame.muted();
          SoundGame.isMuted = true;
          this.removeChild(this.btnSoundOn);
          this.addChild(this.btnSoundOff);
          this.nada.set_visible(false);
          if (Main.GetInstance().windowNow == "Game1") {
            Game1.GetInstance().toogleSound(true);
          }
          break;
        case true:
          SoundGame.unmuted();
          SoundGame.isMuted = false;
          this.removeChild(this.btnSoundOff);
          this.addChild(this.btnSoundOn);
          this.nada.set_x(this.btnSoundOn.get_x() + 8);
          this.nada.set_y(this.btnSoundOn.get_y() + 18);
          this.setChildIndex(this.nada, this.get_numChildren() - 1);
          this.nada.set_visible(true);
          if (Main.GetInstance().windowNow == "Game1") {
            Game1.GetInstance().toogleSound(false);
          }
          DataGame.totalOnOffSound++;
          if (
            DataGame.totalOnOffSound >= 10 &&
            DataSave.achievements[2] == false
          ) {
            DataSave.saveAchievements(2, function () {});
          }
          break;
      }
      SoundGame.playSFX("sounds", "click", 0.5);
    },
    __class__: SoundButton,
  });
  var SoundGame = function () {
    this.sfx = [];
  };
  $hxClasses["SoundGame"] = SoundGame;
  SoundGame.__name__ = ["SoundGame"];
  SoundGame.playBGM = function (bgmFolder, bgmName, volume) {
    if (volume == null) {
      volume = 1;
    }
    SoundGame.volumeBGM = volume;
    var fileType = ".ogg";
    SoundGame.soundBGM = openfl_utils_Assets.getSound(
      bgmFolder + "/" + bgmName + fileType
    );
    SoundGame.channelBGM = SoundGame.soundBGM.play(
      0,
      9999,
      new openfl_media_SoundTransform(
        SoundGame.isMuted == true ? 0 : SoundGame.volumeBGM,
        0
      )
    );
  };
  SoundGame.stopBGM = function () {
    SoundGame.channelBGM.stop();
  };
  SoundGame.playLOOP = function (loopFolder, loopName, volume) {
    if (volume == null) {
      volume = 1;
    }
    if (SoundGame.isSFX == true) {
      SoundGame.volumeLOOP = volume;
      if (SoundGame.isMuted == true) {
        volume = 0;
      }
      var fileType = ".ogg";
      SoundGame.soundLOOP = openfl_utils_Assets.getSound(
        loopFolder + "/" + loopName + fileType
      );
      SoundGame.channelLOOP = SoundGame.soundLOOP.play(
        0,
        9999,
        new openfl_media_SoundTransform(volume, 0)
      );
    }
  };
  SoundGame.stopLOOP = function () {
    if (SoundGame.channelLOOP != null) {
      SoundGame.channelLOOP.stop();
    }
  };
  SoundGame.playSFX = function (sfxFolder, sfxName, volume, delay) {
    if (delay == null) {
      delay = 0;
    }
    if (volume == null) {
      volume = 1;
    }
    if (SoundGame.isSFX == true) {
      if (SoundGame.isMuted == true) {
        volume = 0;
      }
      var soundSFX;
      var channelSFX;
      if (delay == 0) {
        var fileType = ".ogg";
        soundSFX = openfl_utils_Assets.getSound(
          sfxFolder + "/" + sfxName + fileType
        );
        channelSFX = soundSFX.play(
          0,
          0,
          new openfl_media_SoundTransform(volume, 0)
        );
      } else {
        var a = new openfl_display_Sprite();
        motion_Actuate
          .tween(a, delay, { x: 0 })
          .onComplete(SoundGame.playSFX, [sfxFolder, sfxName, volume, 0]);
      }
    }
  };
  SoundGame.playSFXReturn = function (
    sfxFolder,
    sfxName,
    volume,
    delay,
    start
  ) {
    if (start == null) {
      start = 0;
    }
    if (delay == null) {
      delay = 0;
    }
    if (volume == null) {
      volume = 1;
    }
    var fileType = ".ogg";
    if (SoundGame.isSFX == true) {
      if (SoundGame.isMuted == true) {
        volume = 0;
      }
      var soundSFX;
      var channelSFX;
      if (delay == 0) {
        soundSFX = openfl_utils_Assets.getSound(
          sfxFolder + "/" + sfxName + fileType
        );
        channelSFX = soundSFX.play(
          start,
          0,
          new openfl_media_SoundTransform(volume, 0)
        );
      } else {
        soundSFX = openfl_utils_Assets.getSound(
          sfxFolder + "/" + sfxName + fileType
        );
        channelSFX = soundSFX.play(0, 0, new openfl_media_SoundTransform(0, 0));
        var a = new openfl_display_Sprite();
        motion_Actuate
          .tween(a, delay, { x: 0 })
          .onComplete(SoundGame.playSFX, [sfxFolder, sfxName, volume, 0]);
      }
      return channelSFX;
    } else {
      var soundSFX1;
      var channelSFX1;
      soundSFX1 = openfl_utils_Assets.getSound(
        sfxFolder + "/" + sfxName + fileType
      );
      channelSFX1 = soundSFX1.play(
        start,
        0,
        new openfl_media_SoundTransform(0, 0)
      );
      return channelSFX1;
    }
  };
  SoundGame.muted = function () {
    if (SoundGame.channelBGM != null) {
      SoundGame.channelBGM.set_soundTransform(
        new openfl_media_SoundTransform(0, 0)
      );
    }
    if (SoundGame.channelLOOP != null) {
      SoundGame.channelLOOP.set_soundTransform(
        new openfl_media_SoundTransform(0, 0)
      );
    }
  };
  SoundGame.unmuted = function () {
    if (SoundGame.channelBGM != null) {
      SoundGame.channelBGM.set_soundTransform(
        new openfl_media_SoundTransform(SoundGame.volumeBGM, 0)
      );
    }
    if (SoundGame.channelLOOP != null) {
      SoundGame.channelLOOP.set_soundTransform(
        new openfl_media_SoundTransform(SoundGame.volumeLOOP, 0)
      );
    }
  };
  SoundGame.prototype = {
    sfx: null,
    __class__: SoundGame,
  };
  var Std = function () {};
  $hxClasses["Std"] = Std;
  Std.__name__ = ["Std"];
  Std.string = function (s) {
    return js_Boot.__string_rec(s, "");
  };
  Std.parseInt = function (x) {
    var v = parseInt(x, 10);
    if (
      v == 0 &&
      (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)
    ) {
      v = parseInt(x);
    }
    if (isNaN(v)) {
      return null;
    }
    return v;
  };
  var StringBuf = function () {
    this.b = "";
  };
  $hxClasses["StringBuf"] = StringBuf;
  StringBuf.__name__ = ["StringBuf"];
  StringBuf.prototype = {
    b: null,
    __class__: StringBuf,
  };
  var StringTools = function () {};
  $hxClasses["StringTools"] = StringTools;
  StringTools.__name__ = ["StringTools"];
  StringTools.htmlEscape = function (s, quotes) {
    s = s
      .split("&")
      .join("&amp;")
      .split("<")
      .join("&lt;")
      .split(">")
      .join("&gt;");
    if (quotes) {
      return s.split('"').join("&quot;").split("'").join("&#039;");
    } else {
      return s;
    }
  };
  StringTools.startsWith = function (s, start) {
    if (s.length >= start.length) {
      return HxOverrides.substr(s, 0, start.length) == start;
    } else {
      return false;
    }
  };
  StringTools.endsWith = function (s, end) {
    var elen = end.length;
    var slen = s.length;
    if (slen >= elen) {
      return HxOverrides.substr(s, slen - elen, elen) == end;
    } else {
      return false;
    }
  };
  StringTools.isSpace = function (s, pos) {
    var c = HxOverrides.cca(s, pos);
    if (!(c > 8 && c < 14)) {
      return c == 32;
    } else {
      return true;
    }
  };
  StringTools.ltrim = function (s) {
    var l = s.length;
    var r = 0;
    while (r < l && StringTools.isSpace(s, r)) ++r;
    if (r > 0) {
      return HxOverrides.substr(s, r, l - r);
    } else {
      return s;
    }
  };
  StringTools.rtrim = function (s) {
    var l = s.length;
    var r = 0;
    while (r < l && StringTools.isSpace(s, l - r - 1)) ++r;
    if (r > 0) {
      return HxOverrides.substr(s, 0, l - r);
    } else {
      return s;
    }
  };
  StringTools.trim = function (s) {
    return StringTools.ltrim(StringTools.rtrim(s));
  };
  StringTools.replace = function (s, sub, by) {
    return s.split(sub).join(by);
  };
  StringTools.hex = function (n, digits) {
    var s = "";
    var hexChars = "0123456789ABCDEF";
    while (true) {
      s = hexChars.charAt(n & 15) + s;
      n >>>= 4;
      if (!(n > 0)) {
        break;
      }
    }
    if (digits != null) {
      while (s.length < digits) s = "0" + s;
    }
    return s;
  };
  var Transisi = function (_fromWindow, _toWindow) {
    openfl_display_Sprite.call(this);
    DataGame.selesaiTransisi = false;
    this.fromWindow = _fromWindow;
    this.toWindow = _toWindow;
    this.sptBlack = new openfl_display_Sprite();
    this.sptBlack.get_graphics().beginFill(0, 0);
    this.sptBlack
      .get_graphics()
      .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
    this.addChild(this.sptBlack);
    Global.sptFullScreenList.push(this.sptBlack);
    this.sptBG = Global.loadImage("images", "bg_transisi.png");
    this.sptTitle = Global.loadImage("images", "title.png", 0.5, 0.5);
    this.addChild(this.sptBG);
    this.addChild(this.sptTitle);
    Global.align(this.sptBG, 0.5, 0.5);
    Global.align(this.sptTitle, 0.5, 0.5, 0, 0, 0.5, 0.5);
    this.posBG = new openfl_geom_Point(this.sptBG.get_x(), this.sptBG.get_y());
    this.sptBG.set_y(-this.sptBG.get_height());
    motion_Actuate
      .tween(this.sptBG, 0.5, { y: this.posBG.y })
      .ease(motion_easing_Linear.get_easeNone())
      .onComplete($bind(this, this.tweenInTitle));
    this.sptTitle.set_scaleX(0);
    this.sptTitle.set_scaleY(0);
  };
  $hxClasses["Transisi"] = Transisi;
  Transisi.__name__ = ["Transisi"];
  Transisi.__super__ = openfl_display_Sprite;
  Transisi.prototype = $extend(openfl_display_Sprite.prototype, {
    fromWindow: null,
    toWindow: null,
    sptBG: null,
    sptTitle: null,
    sptBlack: null,
    posBG: null,
    tweenInTitle: function () {
      if (Main.GetInstance().windowNow == "Game2") {
        if (SoundGame.channelLOOP != null) {
          SoundGame.stopLOOP();
        }
      } else if (Main.GetInstance().windowNow == "Game7") {
        if (SoundGame.channelLOOP != null) {
          SoundGame.stopLOOP();
        }
      }
      motion_Actuate
        .tween(this.sptTitle, 0.5, { scaleX: 1, scaleY: 1 })
        .ease(motion_easing_Bounce.get_easeOut())
        .onComplete($bind(this, this.tweenOutTitle));
    },
    tweenOutTitle: function () {
      motion_Actuate
        .tween(this.sptTitle, 0.5, { scaleX: 0, scaleY: 0 })
        .ease(motion_easing_Bounce.get_easeIn())
        .onComplete($bind(this, this.tweenOutBG))
        .delay(0.5);
    },
    tweenOutBG: function () {
      if (Main.GetInstance().windowNow == "Game2") {
        if (SoundGame.channelLOOP != null) {
          SoundGame.stopLOOP();
        }
      } else if (Main.GetInstance().windowNow == "Game7") {
        if (SoundGame.channelLOOP != null) {
          SoundGame.stopLOOP();
        }
      }
      this.removeChild(this.sptTitle);
      this.sptTitle = null;
      Main.GetInstance().killWindow(this.fromWindow);
      Main.GetInstance().showWindow(this.toWindow);
      this.addChild(this.sptBG);
      Global.align(this.sptBG, 0.5, 0.5);
      motion_Actuate
        .tween(this.sptBG, 0.5, { y: Main.SCREEN_HEIGHT })
        .ease(motion_easing_Linear.get_easeNone())
        .onComplete($bind(this, this.killTransisi));
    },
    killTransisi: function () {
      DataGame.selesaiTransisi = true;
      this.removeChild(this.sptBG);
      this.sptBG = null;
      if (Main.GetInstance().windowNow != "Game1") {
        Main.GetInstance().alignSound();
      } else {
        Main.GetInstance().alignSound("Game1");
      }
      this.parent.removeChild(this);
    },
    __class__: Transisi,
  });
  var ValueType = ($hxClasses["ValueType"] = {
    __ename__: ["ValueType"],
    __constructs__: [
      "TNull",
      "TInt",
      "TFloat",
      "TBool",
      "TObject",
      "TFunction",
      "TClass",
      "TEnum",
      "TUnknown",
    ],
  });
  ValueType.TNull = ["TNull", 0];
  ValueType.TNull.toString = $estr;
  ValueType.TNull.__enum__ = ValueType;
  ValueType.TInt = ["TInt", 1];
  ValueType.TInt.toString = $estr;
  ValueType.TInt.__enum__ = ValueType;
  ValueType.TFloat = ["TFloat", 2];
  ValueType.TFloat.toString = $estr;
  ValueType.TFloat.__enum__ = ValueType;
  ValueType.TBool = ["TBool", 3];
  ValueType.TBool.toString = $estr;
  ValueType.TBool.__enum__ = ValueType;
  ValueType.TObject = ["TObject", 4];
  ValueType.TObject.toString = $estr;
  ValueType.TObject.__enum__ = ValueType;
  ValueType.TFunction = ["TFunction", 5];
  ValueType.TFunction.toString = $estr;
  ValueType.TFunction.__enum__ = ValueType;
  ValueType.TClass = function (c) {
    var $x = ["TClass", 6, c];
    $x.__enum__ = ValueType;
    $x.toString = $estr;
    return $x;
  };
  ValueType.TEnum = function (e) {
    var $x = ["TEnum", 7, e];
    $x.__enum__ = ValueType;
    $x.toString = $estr;
    return $x;
  };
  ValueType.TUnknown = ["TUnknown", 8];
  ValueType.TUnknown.toString = $estr;
  ValueType.TUnknown.__enum__ = ValueType;
  var Type = function () {};
  $hxClasses["Type"] = Type;
  Type.__name__ = ["Type"];
  Type.getSuperClass = function (c) {
    return c.__super__;
  };
  Type.getClassName = function (c) {
    var a = c.__name__;
    if (a == null) {
      return null;
    }
    return a.join(".");
  };
  Type.getEnumName = function (e) {
    var a = e.__ename__;
    return a.join(".");
  };
  Type.resolveClass = function (name) {
    var cl = $hxClasses[name];
    if (cl == null || !cl.__name__) {
      return null;
    }
    return cl;
  };
  Type.resolveEnum = function (name) {
    var e = $hxClasses[name];
    if (e == null || !e.__ename__) {
      return null;
    }
    return e;
  };
  Type.createInstance = function (cl, args) {
    var _g = args.length;
    switch (_g) {
      case 0:
        return new cl();
      case 1:
        return new cl(args[0]);
      case 2:
        return new cl(args[0], args[1]);
      case 3:
        return new cl(args[0], args[1], args[2]);
      case 4:
        return new cl(args[0], args[1], args[2], args[3]);
      case 5:
        return new cl(args[0], args[1], args[2], args[3], args[4]);
      case 6:
        return new cl(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6]
        );
      case 8:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7]
        );
      case 9:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8]
        );
      case 10:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8],
          args[9]
        );
      case 11:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8],
          args[9],
          args[10]
        );
      case 12:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8],
          args[9],
          args[10],
          args[11]
        );
      case 13:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8],
          args[9],
          args[10],
          args[11],
          args[12]
        );
      case 14:
        return new cl(
          args[0],
          args[1],
          args[2],
          args[3],
          args[4],
          args[5],
          args[6],
          args[7],
          args[8],
          args[9],
          args[10],
          args[11],
          args[12],
          args[13]
        );
      default:
        throw new js__$Boot_HaxeError("Too many arguments");
    }
  };
  Type.createEmptyInstance = function (cl) {
    function empty() {}
    empty.prototype = cl.prototype;
    return new empty();
  };
  Type.createEnum = function (e, constr, params) {
    var f = Reflect.field(e, constr);
    if (f == null) {
      throw new js__$Boot_HaxeError("No such constructor " + constr);
    }
    if (Reflect.isFunction(f)) {
      if (params == null) {
        throw new js__$Boot_HaxeError(
          "Constructor " + constr + " need parameters"
        );
      }
      return f.apply(e, params);
    }
    if (params != null && params.length != 0) {
      throw new js__$Boot_HaxeError(
        "Constructor " + constr + " does not need parameters"
      );
    }
    return f;
  };
  Type.getInstanceFields = function (c) {
    var a = [];
    for (var i in c.prototype) a.push(i);
    HxOverrides.remove(a, "__class__");
    HxOverrides.remove(a, "__properties__");
    return a;
  };
  Type["typeof"] = function (v) {
    var _g = typeof v;
    switch (_g) {
      case "boolean":
        return ValueType.TBool;
      case "function":
        if (v.__name__ || v.__ename__) {
          return ValueType.TObject;
        }
        return ValueType.TFunction;
      case "number":
        if (Math.ceil(v) == v % 2147483648.0) {
          return ValueType.TInt;
        }
        return ValueType.TFloat;
      case "object":
        if (v == null) {
          return ValueType.TNull;
        }
        var e = v.__enum__;
        if (e != null) {
          return ValueType.TEnum(e);
        }
        var c = js_Boot.getClass(v);
        if (c != null) {
          return ValueType.TClass(c);
        }
        return ValueType.TObject;
      case "string":
        return ValueType.TClass(String);
      case "undefined":
        return ValueType.TNull;
      default:
        return ValueType.TUnknown;
    }
  };
  var _$UInt_UInt_$Impl_$ = {};
  $hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
  _$UInt_UInt_$Impl_$.__name__ = ["_UInt", "UInt_Impl_"];
  _$UInt_UInt_$Impl_$.gt = function (a, b) {
    var aNeg = a < 0;
    var bNeg = b < 0;
    if (aNeg != bNeg) {
      return aNeg;
    } else {
      return a > b;
    }
  };
  _$UInt_UInt_$Impl_$.gte = function (a, b) {
    var aNeg = a < 0;
    var bNeg = b < 0;
    if (aNeg != bNeg) {
      return aNeg;
    } else {
      return a >= b;
    }
  };
  _$UInt_UInt_$Impl_$.toFloat = function (this1) {
    var $int = this1;
    if ($int < 0) {
      return 4294967296.0 + $int;
    } else {
      return $int + 0.0;
    }
  };
  var openfl_display_SimpleButton = function (
    upState,
    overState,
    downState,
    hitTestState
  ) {
    openfl_display_InteractiveObject.call(this);
    this.enabled = true;
    this.trackAsMenu = false;
    this.useHandCursor = true;
    this.set_upState(
      upState != null ? upState : new openfl_display_DisplayObject()
    );
    this.set_overState(overState);
    this.set_downState(downState);
    this.set_hitTestState(
      hitTestState != null ? hitTestState : new openfl_display_DisplayObject()
    );
    this.addEventListener("mouseDown", $bind(this, this.__this_onMouseDown));
    this.addEventListener("mouseOut", $bind(this, this.__this_onMouseOut));
    this.addEventListener("mouseOver", $bind(this, this.__this_onMouseOver));
    this.addEventListener("mouseUp", $bind(this, this.__this_onMouseUp));
    this.set___currentState(this.upState);
    if (openfl_display_SimpleButton.__initSymbol != null) {
      var swf = openfl_display_SimpleButton.__initSWF;
      this.__symbol = openfl_display_SimpleButton.__initSymbol;
      openfl_display_SimpleButton.__initSWF = null;
      openfl_display_SimpleButton.__initSymbol = null;
      this.__fromSymbol(swf, this.__symbol);
    }
  };
  $hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
  openfl_display_SimpleButton.__name__ = ["openfl", "display", "SimpleButton"];
  openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
  openfl_display_SimpleButton.prototype = $extend(
    openfl_display_InteractiveObject.prototype,
    {
      downState: null,
      enabled: null,
      hitTestState: null,
      overState: null,
      trackAsMenu: null,
      upState: null,
      useHandCursor: null,
      __currentState: null,
      __ignoreEvent: null,
      __previousStates: null,
      __soundTransform: null,
      __symbol: null,
      __fromSymbol: function (swf, symbol) {
        this.__symbol = symbol;
        if (symbol.downState != null) {
          this.set_downState(symbol.downState.__createObject(swf));
        }
        if (symbol.hitState != null) {
          this.set_hitTestState(symbol.hitState.__createObject(swf));
        }
        if (symbol.overState != null) {
          this.set_overState(symbol.overState.__createObject(swf));
        }
        if (symbol.upState != null) {
          this.set_upState(symbol.upState.__createObject(swf));
        }
      },
      __getBounds: function (rect, matrix) {
        openfl_display_InteractiveObject.prototype.__getBounds.call(
          this,
          rect,
          matrix
        );
        if (matrix != null) {
          this.__updateTransforms(matrix);
          this.__updateChildren(true);
        }
        this.__currentState.__getBounds(
          rect,
          this.__currentState.__worldTransform
        );
        if (matrix != null) {
          this.__updateTransforms();
          this.__updateChildren(true);
        }
      },
      __getRenderBounds: function (rect, matrix) {
        if (this.__scrollRect != null) {
          openfl_display_InteractiveObject.prototype.__getRenderBounds.call(
            this,
            rect,
            matrix
          );
          return;
        } else {
          openfl_display_InteractiveObject.prototype.__getBounds.call(
            this,
            rect,
            matrix
          );
        }
        if (matrix != null) {
          this.__updateTransforms(matrix);
          this.__updateChildren(true);
        }
        this.__currentState.__getRenderBounds(
          rect,
          this.__currentState.__worldTransform
        );
        if (matrix != null) {
          this.__updateTransforms();
          this.__updateChildren(true);
        }
      },
      __getCursor: function () {
        if (this.useHandCursor && !this.__ignoreEvent) {
          return lime_ui_MouseCursor.POINTER;
        } else {
          return null;
        }
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        var hitTest = false;
        if (this.hitTestState != null) {
          var cacheTransform = this.__updateTransform(this.hitTestState);
          if (
            this.hitTestState.__hitTest(
              x,
              y,
              shapeFlag,
              stack,
              interactiveOnly,
              hitObject
            )
          ) {
            if (stack != null) {
              stack[stack.length - 1] = hitObject;
            }
            hitTest = true;
          }
          this.__resetTransform(this.hitTestState, cacheTransform);
        } else if (this.__currentState != null) {
          if (
            !hitObject.get_visible() ||
            this.__isMask ||
            (interactiveOnly && !this.mouseEnabled)
          ) {
            return false;
          }
          if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
            return false;
          }
          var cacheTransform1 = this.__updateTransform(this.__currentState);
          if (
            this.__currentState.__hitTest(
              x,
              y,
              shapeFlag,
              stack,
              interactiveOnly,
              hitObject
            )
          ) {
            hitTest = interactiveOnly;
          }
          this.__resetTransform(this.__currentState, cacheTransform1);
        }
        if (stack != null) {
          while (
            stack.length > 1 &&
            stack[stack.length - 1] == stack[stack.length - 2]
          )
            stack.pop();
        }
        return hitTest;
      },
      __hitTestMask: function (x, y) {
        var hitTest = false;
        var cacheTransform = this.__updateTransform(this.__currentState);
        if (this.__currentState.__hitTestMask(x, y)) {
          hitTest = true;
        }
        this.__resetTransform(this.__currentState, cacheTransform);
        return hitTest;
      },
      __renderCairo: function (renderSession) {
        if (!this.__renderable || this.__worldAlpha <= 0) {
          return;
        }
        renderSession.maskManager.pushObject(this);
        this.__currentState.__renderCairo(renderSession);
        renderSession.maskManager.popObject(this);
      },
      __renderCairoMask: function (renderSession) {
        this.__currentState.__renderCairoMask(renderSession);
      },
      __renderCanvas: function (renderSession) {
        if (!this.__renderable || this.__worldAlpha <= 0) {
          return;
        }
        renderSession.maskManager.pushObject(this);
        this.__currentState.__renderCanvas(renderSession);
        renderSession.maskManager.popObject(this);
      },
      __renderCanvasMask: function (renderSession) {
        var bounds = new openfl_geom_Rectangle();
        this.__getBounds(bounds, this.__transform);
        renderSession.context.rect(0, 0, bounds.width, bounds.height);
        this.__currentState.__renderCanvasMask(renderSession);
      },
      __renderDOM: function (renderSession) {
        renderSession.maskManager.pushObject(this);
        var _g = 0;
        var _g1 = this.__previousStates;
        while (_g < _g1.get_length()) {
          var previousState = _g1.get(_g);
          ++_g;
          previousState.__renderDOM(renderSession);
        }
        this.__previousStates.set_length(0);
        this.__currentState.__renderDOM(renderSession);
        renderSession.maskManager.popObject(this);
      },
      __renderGL: function (renderSession) {
        if (!this.__renderable || this.__worldAlpha <= 0) {
          return;
        }
        renderSession.maskManager.pushObject(this);
        this.__currentState.__renderGL(renderSession);
        renderSession.maskManager.popObject(this);
      },
      __resetTransform: function (state, cacheTransform) {
        state.__updateTransforms(cacheTransform);
        state.__updateChildren(false);
      },
      __setStageReference: function (stage) {
        openfl_display_InteractiveObject.prototype.__setStageReference.call(
          this,
          stage
        );
        if (this.__currentState != null) {
          this.__currentState.__setStageReference(stage);
        }
      },
      __updateTransform: function (state) {
        var cacheTransform = state.__worldTransform;
        var local = state.__transform;
        var parentTransform = this.__worldTransform;
        var overrideTransform = openfl_geom_Matrix.__temp;
        overrideTransform.a =
          local.a * parentTransform.a + local.b * parentTransform.c;
        overrideTransform.b =
          local.a * parentTransform.b + local.b * parentTransform.d;
        overrideTransform.c =
          local.c * parentTransform.a + local.d * parentTransform.c;
        overrideTransform.d =
          local.c * parentTransform.b + local.d * parentTransform.d;
        overrideTransform.tx =
          local.tx * parentTransform.a +
          local.ty * parentTransform.c +
          parentTransform.tx;
        overrideTransform.ty =
          local.tx * parentTransform.b +
          local.ty * parentTransform.d +
          parentTransform.ty;
        var cacheTransform1 = state.__transform;
        state.__transform = overrideTransform;
        state.__update(false, true);
        state.__transform = cacheTransform1;
        return cacheTransform1;
      },
      __updateTransforms: function (overrideTransform) {
        openfl_display_InteractiveObject.prototype.__updateTransforms.call(
          this,
          overrideTransform
        );
        this.__updateTransform(this.__currentState);
      },
      set_downState: function (downState) {
        if (this.downState != null && this.__currentState == this.downState) {
          this.set___currentState(downState);
        }
        return (this.downState = downState);
      },
      set_hitTestState: function (hitTestState) {
        return (this.hitTestState = hitTestState);
      },
      set_overState: function (overState) {
        if (this.overState != null && this.__currentState == this.overState) {
          this.set___currentState(overState);
        }
        return (this.overState = overState);
      },
      get_soundTransform: function () {
        if (this.__soundTransform == null) {
          this.__soundTransform = new openfl_media_SoundTransform();
        }
        return new openfl_media_SoundTransform(
          this.__soundTransform.volume,
          this.__soundTransform.pan
        );
      },
      set_soundTransform: function (value) {
        this.__soundTransform = new openfl_media_SoundTransform(
          value.volume,
          value.pan
        );
        return value;
      },
      set_upState: function (upState) {
        if (this.upState != null && this.__currentState == this.upState) {
          this.set___currentState(upState);
        }
        return (this.upState = upState);
      },
      set___currentState: function (value) {
        if (this.__currentState != null) {
          this.__currentState.__renderParent = null;
        }
        if (value.parent != null) {
          value.parent.removeChild(value);
        }
        value.__renderParent = this;
        return (this.__currentState = value);
      },
      __this_onMouseDown: function (event) {
        if (this.downState != null) {
          this.set___currentState(this.downState);
        }
      },
      __this_onMouseOut: function (event) {
        this.__ignoreEvent = false;
        if (this.upState != this.__currentState) {
          this.set___currentState(this.upState);
        }
      },
      __this_onMouseOver: function (event) {
        if (event.buttonDown) {
          this.__ignoreEvent = true;
        }
        if (
          this.overState != this.__currentState &&
          this.overState != null &&
          !this.__ignoreEvent
        ) {
          this.set___currentState(this.overState);
        }
      },
      __this_onMouseUp: function (event) {
        this.__ignoreEvent = false;
        if (this.overState != null) {
          this.set___currentState(this.overState);
        } else {
          this.set___currentState(this.upState);
        }
      },
      __class__: openfl_display_SimpleButton,
      __properties__: $extend(
        openfl_display_InteractiveObject.prototype.__properties__,
        {
          set___currentState: "set___currentState",
          set_upState: "set_upState",
          set_soundTransform: "set_soundTransform",
          get_soundTransform: "get_soundTransform",
          set_overState: "set_overState",
          set_hitTestState: "set_hitTestState",
          set_downState: "set_downState",
        }
      ),
    }
  );
  var Y8Achievements = function (alignX, alignY, rangeX, rangeY) {
    openfl_display_SimpleButton.call(this);
    this.assetsLoad();
    this.set_upState(
      this.sheetAchievements.loadImage("button_achievements1.png")
    );
    this.set_overState(
      this.sheetAchievements.loadImage("button_achievements2.png")
    );
    this.set_downState(
      this.sheetAchievements.loadImage("button_achievements2.png")
    );
    this.set_hitTestState(this.upState);
    Global.align(this, alignX, alignY, rangeX, rangeY);
    this.addEventListener(
      "click",
      $bind(this, this.showAchievements),
      false,
      0,
      true
    );
    this.addEventListener(
      "mouseOut",
      $bind(this, this.hideMessage),
      false,
      0,
      true
    );
    this.addEventListener(
      "mouseOver",
      $bind(this, this.showMessage),
      false,
      0,
      true
    );
    this.sptMessage.set_visible(false);
    Main.GetInstance().addChild(this.sptMessage);
  };
  $hxClasses["Y8Achievements"] = Y8Achievements;
  Y8Achievements.__name__ = ["Y8Achievements"];
  Y8Achievements.__super__ = openfl_display_SimpleButton;
  Y8Achievements.prototype = $extend(openfl_display_SimpleButton.prototype, {
    sheetAchievements: null,
    sptMessage: null,
    posX: null,
    posY: null,
    showMessage: function (e) {
      this.sptMessage.set_x(this.get_x() - this.sptMessage.get_width() - 5);
      this.sptMessage.set_y(this.get_y());
      this.sptMessage.set_visible(true);
    },
    hideMessage: function (e) {
      this.sptMessage.set_visible(false);
    },
    assetsLoad: function () {
      this.sheetAchievements = new BaseSheet(
        "images/achievement.png",
        "images/achievement.json"
      );
      this.sptMessage = this.sheetAchievements.loadImage(
        "message_achievements.png"
      );
    },
    showAchievements: function (e) {
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
      DataGame.windowPrev = Main.GetInstance().windowNow;
      this.sptMessage.set_visible(false);
      Main.GetInstance().changeWindow(DataGame.windowPrev, "Achievements");
    },
    __class__: Y8Achievements,
  });
  var Y8AchievementsNotification = function (_idx, _functionComplete) {
    openfl_display_Sprite.call(this);
    this.idx = _idx;
    this.functionComplete = _functionComplete;
    this.assetsLoad();
    this.assetsAddChild();
    motion_Actuate
      .tween(this.sptNotification, 0.5, {
        y: Main.SCREEN_HEIGHT - this.sptNotification.get_height() / 2,
      })
      .onComplete($bind(this, this.tweenInIcon));
  };
  $hxClasses["Y8AchievementsNotification"] = Y8AchievementsNotification;
  Y8AchievementsNotification.__name__ = ["Y8AchievementsNotification"];
  Y8AchievementsNotification.__super__ = openfl_display_Sprite;
  Y8AchievementsNotification.prototype = $extend(
    openfl_display_Sprite.prototype,
    {
      sheetAchievements: null,
      sptBlack: null,
      sptIcon: null,
      sptText: null,
      sptBoard: null,
      sptNotification: null,
      idx: null,
      functionComplete: null,
      assetsLoad: function () {
        this.sheetAchievements = new BaseSheet(
          "images/achievement.png",
          "images/achievement.json"
        );
        this.sptBlack = new openfl_display_Sprite();
        this.sptBlack.get_graphics().beginFill(0, 0);
        this.sptBlack
          .get_graphics()
          .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
        Global.sptFullScreenList.push(this.sptBlack);
        this.sptNotification = new openfl_display_Sprite();
        this.sptIcon = this.sheetAchievements.loadImage(
          "notification_icon" + this.idx + ".png",
          0.5,
          0.5
        );
        this.sptText = this.sheetAchievements.loadImage(
          "notification_text" + this.idx + ".png"
        );
        this.sptBoard = this.sheetAchievements.loadImage(
          "notification_board.png"
        );
      },
      assetsAddChild: function () {
        this.addChild(this.sptBlack);
        Global.align(this.sptBlack, 0.5, 0.5);
        this.sptBoard.set_x(-264);
        this.sptBoard.set_y(-65);
        this.sptNotification.addChild(this.sptBoard);
        this.sptText.set_x(-61);
        this.sptText.set_y(-4);
        this.sptNotification.addChild(this.sptText);
        this.sptIcon.set_x(-105);
        this.sptIcon.set_y(16);
        this.sptIcon.set_visible(false);
        this.sptNotification.addChild(this.sptIcon);
        this.sptNotification.set_x(Main.SCREEN_WIDTH / 2);
        this.sptNotification.set_y(
          Main.SCREEN_HEIGHT + this.sptNotification.get_height() / 2
        );
        this.addChild(this.sptNotification);
      },
      tweenInIcon: function () {
        this.sptIcon.set_visible(true);
        this.sptIcon.set_scaleX(1.5);
        this.sptIcon.set_scaleY(1.5);
        motion_Actuate
          .tween(this.sptIcon, 0.5, { scaleX: 1, scaleY: 1 })
          .onComplete($bind(this, this.tweenOutNotification));
        SoundGame.playSFX("sounds", "achievements", DataGame.volAchievements);
      },
      tweenOutNotification: function () {
        motion_Actuate
          .tween(this.sptNotification, 0.5, {
            y: Main.SCREEN_HEIGHT + this.sptNotification.get_height() / 2,
          })
          .delay(1)
          .onComplete($bind(this, this.endNotification));
      },
      endNotification: function () {
        this.parent.removeChild(this);
        this.functionComplete();
      },
      __class__: Y8AchievementsNotification,
    }
  );
  var Y8Api = function () {};
  $hxClasses["Y8Api"] = Y8Api;
  Y8Api.__name__ = ["Y8Api"];
  Y8Api.init = function () {
    idnet_Social.get_i().init(Setting.APPID, Setting.APPSECRET);
  };
  Y8Api.checkAutoLogin = function () {
    idnet_js__$Social._ID.getLoginStatus(function (response) {
      if (response.authResponse != null) {
        Y8Api.isLogin = response.status == "ok";
        Y8Api.nickname = response.authResponse.details.nickname;
        Global.log("Login as " + Y8Api.nickname);
        idnet_js__$Social._ID.getAuthResponse(function (res) {
          Y8Api.PID = res.details.pid;
          Global.log("PID = " + Y8Api.PID);
        });
      }
      Y8Api.isCheckLogin = true;
      DataSave.loadAchievements();
    });
  };
  Y8Api.checkProtection = function () {
    idnet_js__$Social._ID.Protection.isBlacklisted(function (response) {
      Y8Api.isResponseBlacklisted = true;
      Y8Api.isBlacklisted = response;
      if (
        Y8Api.isResponseSponsor == true &&
        Y8Api.isResponseBlacklisted == true
      ) {
        Y8Api.isCheckProtection = true;
      }
      Global.log("Blacklisted = " + Std.string(Y8Api.isBlacklisted));
    });
    idnet_js__$Social._ID.Protection.isSponsor(function (response1) {
      Y8Api.isResponseSponsor = true;
      Y8Api.isSponsor = response1;
      if (
        Y8Api.isResponseSponsor == true &&
        Y8Api.isResponseBlacklisted == true
      ) {
        Y8Api.isCheckProtection = true;
      }
      Global.log("Sponsor = " + Std.string(Y8Api.isSponsor));
    });
  };
  Y8Api.showAds = function () {
    Setting.counterAds++;
    if (Setting.counterAds == Setting.maxCounterAds) {
      Setting.counterAds = 0;
      playAds();
    }
  };
  Y8Api.showBlacklisted = function () {
    Main.GetInstance().state = 0;
    Main.GetInstance().addChild(new Y8Blacklisted());
  };
  Y8Api.login = function (listener) {
    if (Setting.isIDNET == false) {
      return;
    }
    idnet_Social.get_i().loginPopup();
    if (!idnet_Social.get_i().hasEventListener("auth.complete")) {
      idnet_Social.get_i().addEventListener("auth.complete", listener);
    }
    Global.log("login pop up");
  };
  Y8Api.removeListenerAuthComplete = function (listener) {
    if (idnet_Social.get_i().hasEventListener("auth.complete")) {
      idnet_Social.get_i().removeEventListener("auth.complete", listener);
    }
    Global.log("remove listener Auth Complete");
  };
  Y8Api.retrieveSave = function (saveName) {
    haxe_Log.trace("savename " + saveName, {
      fileName: "Y8Api.hx",
      lineNumber: 139,
      className: "Y8Api",
      methodName: "retrieveSave",
    });
    idnet_js__$Social._ID.api(
      "user_data/retrieve",
      "POST",
      { key: saveName },
      function (response) {
        if (response.jsondata != null) {
          var decodeData = null;
          decodeData = decodeURIComponent(response.jsondata);
          DataSave.loadOnline(JSON.parse(Std.string(decodeData)));
        } else {
          Global.log("no data online " + Std.string(response));
        }
        Y8SaveOption.GetInstance().loadComplete();
      }
    );
  };
  Y8Api.submitSave = function (saveName, saveData) {
    idnet_js__$Social._ID.api(
      "user_data/submit",
      "POST",
      { key: saveName, value: JSON.stringify(saveData) },
      function (response) {
        Global.log(response);
      }
    );
    Global.log("submit user data");
  };
  Y8Api.retrieveAchievements = function () {
    idnet_js__$Social._ID.GameAPI.Achievements.listCustom(
      {},
      DataSave.loadOnlineAchievements
    );
  };
  Y8Api.submitAchievements = function (
    achievementName,
    achievementKey,
    overwrite,
    allowDuplicates
  ) {
    if (allowDuplicates == null) {
      allowDuplicates = false;
    }
    if (overwrite == null) {
      overwrite = false;
    }
    Global.log(achievementName + ", " + achievementKey);
    var data = {
      achievement: achievementName,
      achievementkey: achievementKey,
      overwrite: overwrite,
      allowduplicates: allowDuplicates,
    };
    idnet_js__$Social._ID.GameAPI.Achievements.save(data, function (response) {
      Global.log(
        "achievements save = " +
          achievementName +
          ", " +
          JSON.stringify(response)
      );
    });
  };
  Y8Api.submitProfile = function (obj, type) {
    if (type == null) {
      type = "jpg";
    }
    var matrix = new openfl_geom_Matrix();
    matrix.scale(1, 1);
    var smallBMD;
    var picture;
    smallBMD = new openfl_display_BitmapData(
      (openfl_Lib.current.stage.stageWidth / Main.GetInstance().aspectRatio) |
        0,
      (openfl_Lib.current.stage.stageHeight / Main.GetInstance().aspectRatio) |
        0,
      true,
      0
    );
    smallBMD.draw(obj, matrix, null, null, null, true);
    picture = new openfl_display_Bitmap(smallBMD, 2, true);
    var dataByte = picture.bitmapData.encode(
      picture.bitmapData.rect,
      new openfl_display_JPEGEncoderOptions()
    );
    idnet_js__$Social._ID.submit_image(
      "data:image/png;base64," +
        haxe_crypto_Base64.encode(
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(dataByte)
        ),
      function (response) {
        if (response.success == true) {
          Y8PostProfile.GetInstance().postSuccess();
        } else if (response.success == false) {
          Y8PostProfile.GetInstance().postFailed();
        }
      }
    );
  };
  Y8Api.submitScore = function (score) {
    if (Setting.isIDNET == true) {
      if (Y8Api.isLogin == true) {
        idnet_js__$Social._ID.GameAPI.Leaderboards.save(
          { table: Setting.highscoresName, points: score },
          function () {}
        );
      }
    }
  };
  var Y8Blacklisted = function () {
    openfl_display_Sprite.call(this);
    this.assetsLoad();
    this.assetsAddChild();
    this.txtLink.addEventListener(
      "mouseDown",
      $bind(this, this.clickLinkText),
      false,
      0,
      true
    );
  };
  $hxClasses["Y8Blacklisted"] = Y8Blacklisted;
  Y8Blacklisted.__name__ = ["Y8Blacklisted"];
  Y8Blacklisted.__super__ = openfl_display_Sprite;
  Y8Blacklisted.prototype = $extend(openfl_display_Sprite.prototype, {
    sptGroup: null,
    sptBlack: null,
    sptBlacklisted: null,
    txtLink: null,
    clickLinkText: function (e) {
      openfl_Lib.getURL(
        new openfl_net_URLRequest(
          "http://www.retrobowl.click/games/" + Setting.gameName
        )
      );
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    assetsLoad: function () {
      this.sptGroup = new openfl_display_Sprite();
      this.sptBlack = new openfl_display_Sprite();
      this.sptBlack.get_graphics().beginFill(0, 1);
      this.sptBlack
        .get_graphics()
        .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
      Global.sptFullScreenList.push(this.sptBlack);
      this.sptBlacklisted = Global.loadImage("images/Y8", "blacklisted.png");
      this.txtLink = new BaseText("FredokaOne-Regular.ttf", 20, 17285, true);
      this.txtLink.set_text(
        "http://www.retrobowl.click/games/" + Setting.gameName
      );
    },
    assetsAddChild: function () {
      Global.align(this.sptBlack, 0.5, 0.5, 0, 0);
      this.addChild(this.sptBlack);
      this.sptBlacklisted.set_x(0);
      this.sptBlacklisted.set_y(0);
      this.sptGroup.addChild(this.sptBlacklisted);
      this.txtLink.set_x(
        this.sptGroup.get_width() / 2 - this.txtLink.get_width() / 2
      );
      this.txtLink.set_y(this.sptGroup.get_height() / 2 + 8);
      this.sptGroup.addChild(this.txtLink);
      Global.align(this.sptGroup, 0.5, 0.5, 0, 0, 0, 0, true);
      this.addChild(this.sptGroup);
    },
    __class__: Y8Blacklisted,
  });
  var Y8Connect = function () {
    openfl_display_Sprite.call(this);
    if (Y8Api.isInit == false) {
      Y8Api.isInit = true;
      Y8Api.isCheckLogin = false;
      Y8Api.isCheckProtection = false;
    }
    Main.GetInstance().btnSound.set_visible(false);
    this.sptBG = Global.loadImage("images", "bg_intro.png");
    this.sptTitle = Global.loadImage("images", "title.png");
    this.addChild(this.sptBG);
    Global.align(this.sptBG, 0.5, 0.5);
    this.addChild(this.sptTitle);
    Global.align(this.sptTitle, 0.5, 0.5);
    this.sptBlack = new openfl_display_Sprite();
    this.sptBlack.get_graphics().beginFill(0, 0.5);
    this.sptBlack
      .get_graphics()
      .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
    Global.sptFullScreenList.push(this.sptBlack);
    this.addChild(this.sptBlack);
    Global.align(this.sptBlack, 0.5, 0.5);
    this.animLoading = new BaseAnimation(
      "images/Y8/loading.png",
      "images/Y8/loading.json"
    );
    this.animLoading.addBehavior("loop", 0, 15, true);
    this.animLoading.animated.showBehavior("loop", true);
    this.addChild(this.animLoading.animated);
    Global.align(this.animLoading.animated, 0.5, 0.5);
    this.addEventListener(
      "enterFrame",
      $bind(this, this.checkConnecting),
      false,
      0,
      true
    );
  };
  $hxClasses["Y8Connect"] = Y8Connect;
  Y8Connect.__name__ = ["Y8Connect"];
  Y8Connect.__super__ = openfl_display_Sprite;
  Y8Connect.prototype = $extend(openfl_display_Sprite.prototype, {
    sptBG: null,
    sptTitle: null,
    sptBlack: null,
    animLoading: null,
    checkConnecting: function (e) {
      if (
        (Y8Api.isCheckLogin && Y8Api.isCheckProtection) ||
        Setting.isIDNET == false
      ) {
        this.removeEventListener(
          "enterFrame",
          $bind(this, this.checkConnecting)
        );
        Main.GetInstance().btnSound.set_visible(true);
        Main.GetInstance().killWindow("Y8Connect");
        if (Y8Api.isBlacklisted) {
          Y8Api.showBlacklisted();
        } else {
          Main.GetInstance().showWindow("MainMenu");
        }
      }
    },
    destroy: function () {
      this.sptBG.parent.removeChild(this.sptBG);
      this.sptBG = null;
      this.sptTitle.parent.removeChild(this.sptTitle);
      this.sptTitle = null;
      this.sptBlack.parent.removeChild(this.sptBlack);
      this.sptBlack = null;
      this.animLoading.destroy();
      this.animLoading = null;
    },
    __class__: Y8Connect,
  });
  var Y8IdnetLogo = function (alignX, alignY, rangeX, rangeY, _scale) {
    if (_scale == null) {
      _scale = 0.98;
    }
    openfl_display_SimpleButton.call(this);
    this.scale = _scale;
    this.set_scaleX(this.scale);
    this.set_scaleY(this.scale);
    this.set_upState(Global.loadImage("images/Y8", "logoIDNET.png", 0.5, 0.5));
    this.set_overState(
      Global.loadImage("images/Y8", "logoIDNET.png", 0.5, 0.5)
    );
    this.set_downState(
      Global.loadImage("images/Y8", "logoIDNET.png", 0.5, 0.5)
    );
    this.set_hitTestState(this.upState);
    Global.align(this, alignX, alignY, rangeX, rangeY, 0.5, 0.5);
    this.addEventListener(
      "mouseOut",
      $bind(this, this.outLogoY8),
      false,
      0,
      true
    );
    this.addEventListener(
      "mouseOver",
      $bind(this, this.overLogoY8),
      false,
      0,
      true
    );
    this.addEventListener("click", Global.moreIDNET, false, 0, true);
    this.set_visible(false);
  };
  $hxClasses["Y8IdnetLogo"] = Y8IdnetLogo;
  Y8IdnetLogo.__name__ = ["Y8IdnetLogo"];
  Y8IdnetLogo.__super__ = openfl_display_SimpleButton;
  Y8IdnetLogo.prototype = $extend(openfl_display_SimpleButton.prototype, {
    scale: null,
    outLogoY8: function (e) {
      this.set_scaleX(this.scale);
      this.set_scaleY(this.scale);
    },
    overLogoY8: function (e) {
      this.set_scaleX(this.scale + 0.02);
      this.set_scaleY(this.scale + 0.02);
    },
    __class__: Y8IdnetLogo,
  });
  var Y8Logo = function (alignX, alignY, rangeX, rangeY, _scale) {
    if (_scale == null) {
      _scale = 0.98;
    }
    openfl_display_SimpleButton.call(this);
    this.scale = _scale;
    this.set_scaleX(this.scale);
    this.set_scaleY(this.scale);
    this.set_upState(Global.loadImage("images/Y8", "logoY8.png", 0.5, 0.5));
    this.set_overState(Global.loadImage("images/Y8", "logoY8.png", 0.5, 0.5));
    this.set_downState(Global.loadImage("images/Y8", "logoY8.png", 0.5, 0.5));
    this.set_hitTestState(this.upState);
    Global.align(this, alignX, alignY, rangeX, rangeY, 0.5, 0.5);
    this.addEventListener(
      "mouseOut",
      $bind(this, this.outLogoY8),
      false,
      0,
      true
    );
    this.addEventListener(
      "mouseOver",
      $bind(this, this.overLogoY8),
      false,
      0,
      true
    );
    this.addEventListener("click", Global.moreLogo, false, 0, true);
    if (Y8Api.isSponsor == true) {
      this.set_hitTestState(new openfl_display_Sprite());
    }
  };
  $hxClasses["Y8Logo"] = Y8Logo;
  Y8Logo.__name__ = ["Y8Logo"];
  Y8Logo.__super__ = openfl_display_SimpleButton;
  Y8Logo.prototype = $extend(openfl_display_SimpleButton.prototype, {
    scale: null,
    outLogoY8: function (e) {
      this.set_scaleX(this.scale);
      this.set_scaleY(this.scale);
    },
    overLogoY8: function (e) {
      if (Y8Api.isSponsor == true) {
        this.set_hitTestState(new openfl_display_Sprite());
      } else {
        this.set_scaleX(this.scale + 0.02);
        this.set_scaleY(this.scale + 0.02);
      }
    },
    __class__: Y8Logo,
  });
  var Y8PostProfile = function () {
    this.delay = 0;
    openfl_display_Sprite.call(this);
    Y8PostProfile.Y8PostProfileGlobal = this;
    this.assetsLoad();
    this.btnPost = new openfl_display_SimpleButton();
    this.btnPost.set_upState(this.sheetButton.loadImage("id_post1.png"));
    this.btnPost.set_overState(this.sheetButton.loadImage("id_post2.png"));
    this.btnPost.set_downState(this.sheetButton.loadImage("id_post2.png"));
    this.btnPost.set_hitTestState(this.btnPost.upState);
    this.addChild(this.btnPost);
    this.btnPost.addEventListener(
      "click",
      $bind(this, this.clickPostProfile),
      false,
      0,
      true
    );
    this.btnPost.addEventListener(
      "mouseOut",
      $bind(this, this.hideMessage),
      false,
      0,
      true
    );
    this.btnPost.addEventListener(
      "mouseOver",
      $bind(this, this.showMessage),
      false,
      0,
      true
    );
    if (Y8Api.isLogin == true) {
      this.initNickName();
    }
    this.initMessage();
    this.initPosition();
  };
  $hxClasses["Y8PostProfile"] = Y8PostProfile;
  Y8PostProfile.__name__ = ["Y8PostProfile"];
  Y8PostProfile.GetInstance = function () {
    return Y8PostProfile.Y8PostProfileGlobal;
  };
  Y8PostProfile.__super__ = openfl_display_Sprite;
  Y8PostProfile.prototype = $extend(openfl_display_Sprite.prototype, {
    sheetButton: null,
    btnPost: null,
    txtWelcome: null,
    txtNickName: null,
    txtGroup: null,
    sptMessage: null,
    sptBlack: null,
    sptPostFailed: null,
    sptPostSuccess: null,
    animPosting: null,
    delay: null,
    initPosition: function () {
      if (Y8Api.isLogin == true) {
        this.txtGroup.set_x(
          this.btnPost.get_x() +
            this.btnPost.get_width() / 2 -
            this.txtGroup.get_width() / 2
        );
        this.txtGroup.set_y(
          this.btnPost.get_y() - this.txtGroup.get_height() - 5
        );
        this.sptMessage.set_x(
          this.btnPost.get_x() - this.sptMessage.get_width() - 10
        );
        this.sptMessage.set_y(
          this.btnPost.get_y() -
            (this.sptMessage.get_height() - this.btnPost.get_height()) / 2
        );
      } else {
        this.sptMessage.set_x(
          this.btnPost.get_x() +
            (this.btnPost.get_width() - this.sptMessage.get_width()) / 2
        );
        this.sptMessage.set_y(
          this.btnPost.get_y() - this.sptMessage.get_height() - 10
        );
      }
    },
    initMessage: function () {
      this.sptMessage =
        Y8Api.isLogin == true
          ? Global.loadImage("images/Y8", "message_post.png")
          : Global.loadImage("images/Y8", "message_login.png");
      this.sptMessage.set_visible(false);
      this.addChild(this.sptMessage);
    },
    initNickName: function () {
      this.txtGroup = new openfl_display_Sprite();
      this.txtWelcome = new BaseText("FredokaOne-Regular.ttf", 20, 16777215);
      this.txtWelcome.set_text("Welcome,");
      this.txtGroup.addChild(this.txtWelcome);
      this.txtNickName = new BaseText("FredokaOne-Regular.ttf", 20, 16777215);
      this.txtNickName.set_text(Y8Api.nickname);
      this.txtGroup.addChild(this.txtNickName);
      var maxWidth = this.txtGroup.get_width();
      this.txtWelcome.set_x(maxWidth / 2 - this.txtWelcome.get_width() / 2);
      this.txtWelcome.set_y(0);
      this.txtNickName.set_x(maxWidth / 2 - this.txtNickName.get_width() / 2);
      this.txtNickName.set_y(this.txtWelcome.get_height() - 2);
      this.addChild(this.txtGroup);
    },
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/Y8/button.png",
        "images/Y8/button.json"
      );
      this.sptBlack = new openfl_display_Sprite();
      this.sptBlack.get_graphics().beginFill(0, 0.5);
      this.sptBlack
        .get_graphics()
        .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
      Global.sptFullScreenList.push(this.sptBlack);
      this.sptPostFailed = Global.loadImage("images/Y8", "post_failed.png");
      this.sptPostSuccess = Global.loadImage("images/Y8", "post_success.png");
    },
    clickPostProfile: function (e) {
      if (Y8Api.isLogin == true) {
        this.postProfile();
      } else {
        Y8Api.login($bind(this, this.loginSuccess));
      }
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    postProfile: function () {
      this.sptMessage.set_visible(false);
      this.animPosting = new BaseAnimation(
        "images/Y8/posting.png",
        "images/Y8/posting.json"
      );
      this.animPosting.addBehavior("loop", 0, 15, true);
      this.animPosting.animated.showBehavior("loop", true);
      Main.GetInstance().addChild(this.sptBlack);
      Global.align(this.sptBlack, 0.5, 0.5, 0, 0);
      Main.GetInstance().addChild(this.animPosting.animated);
      Global.align(this.animPosting.animated, 0.5, 0.5, 0, 0);
      this.addEventListener("enterFrame", $bind(this, this.updatePostProfile));
    },
    loginSuccess: function (e) {
      Y8Api.removeListenerAuthComplete($bind(this, this.loginSuccess));
      this.removeChild(this.sptMessage);
      this.initNickName();
      this.initMessage();
      this.initPosition();
    },
    showMessage: function (e) {
      this.sptMessage.set_visible(true);
    },
    hideMessage: function (e) {
      this.sptMessage.set_visible(false);
    },
    postSuccess: function () {
      this.animPosting.animated.parent.removeChild(this.animPosting.animated);
      this.delay = 20;
      Main.GetInstance().addChild(this.sptPostSuccess);
      Global.align(this.sptPostSuccess, 0.5, 0.5, 0, 0);
    },
    postFailed: function () {
      this.animPosting.animated.parent.removeChild(this.animPosting.animated);
      this.delay = 20;
      Main.GetInstance().addChild(this.sptPostFailed);
      Global.align(this.sptPostFailed, 0.5, 0.5, 0, 0);
    },
    updatePostProfile: function (e) {
      if (this.animPosting.animated.parent != null) {
        this.animPosting.Update(null);
      }
      if (this.delay > 0) {
        this.delay--;
        if (this.delay == 0) {
          this.removeEventListener(
            "enterFrame",
            $bind(this, this.updatePostProfile)
          );
          if (this.sptPostSuccess.parent != null) {
            this.sptPostSuccess.parent.removeChild(this.sptPostSuccess);
            this.btnPost.set_upState(
              this.sheetButton.loadImage("id_posted.png")
            );
            this.btnPost.set_overState(
              this.sheetButton.loadImage("id_posted.png")
            );
            this.btnPost.set_downState(
              this.sheetButton.loadImage("id_posted.png")
            );
            this.btnPost.set_hitTestState(new openfl_display_Sprite());
          }
          if (this.sptPostFailed.parent != null) {
            this.sptPostFailed.parent.removeChild(this.sptPostFailed);
          }
          if (this.sptBlack.parent != null) {
            this.sptBlack.parent.removeChild(this.sptBlack);
          }
        }
      }
    },
    __class__: Y8PostProfile,
  });
  var Y8SaveOption = function () {
    openfl_display_Sprite.call(this);
    Y8SaveOption.Y8SaveOptionGlobal = this;
    this.assetsLoad();
    this.assetsAddChild();
    this.assetsAddEventListener();
  };
  $hxClasses["Y8SaveOption"] = Y8SaveOption;
  Y8SaveOption.__name__ = ["Y8SaveOption"];
  Y8SaveOption.GetInstance = function () {
    return Y8SaveOption.Y8SaveOptionGlobal;
  };
  Y8SaveOption.__super__ = openfl_display_Sprite;
  Y8SaveOption.prototype = $extend(openfl_display_Sprite.prototype, {
    sheetButton: null,
    localGroup: null,
    onlineGroup: null,
    onlineGroup1: null,
    onlineGroup2: null,
    sptGroup: null,
    sptBlack: null,
    sptLocalBG: null,
    sptOnlineBG1: null,
    sptOnlineBG2: null,
    btnClose: null,
    btnLogin: null,
    btnLocal: null,
    btnOnline: null,
    btnIDNET1: null,
    btnIDNET2: null,
    txtNickName: null,
    localGroupPosX: null,
    onlineGroupPosX: null,
    animLoading: null,
    assetsLoad: function () {
      this.sheetButton = new BaseSheet(
        "images/Y8/button.png",
        "images/Y8/button.json"
      );
      this.sptBlack = new openfl_display_Sprite();
      this.sptBlack.get_graphics().beginFill(0, 0.5);
      this.sptBlack
        .get_graphics()
        .drawRect(0, 0, Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
      Global.sptFullScreenList.push(this.sptBlack);
      this.sptGroup = new openfl_display_Sprite();
      this.sptGroup.get_graphics().beginFill(16711680, 0);
      this.sptGroup.get_graphics().drawRect(0, 0, 800, 480);
      this.sptLocalBG = Global.loadImage("images/Y8", "local.png");
      this.sptOnlineBG1 = Global.loadImage("images/Y8", "online1.png");
      this.sptOnlineBG2 = Global.loadImage("images/Y8", "online2.png");
      this.btnClose = Global.createButtonSheet(
        this.sheetButton,
        "button_close1.png",
        "button_close2.png"
      );
      this.btnLogin = Global.createButtonSheet(
        this.sheetButton,
        "button_login1.png",
        "button_login2.png"
      );
      this.btnLocal = Global.createButtonSheet(
        this.sheetButton,
        "button_select1.png",
        "button_select2.png"
      );
      this.btnOnline = Global.createButtonSheet(
        this.sheetButton,
        "button_select1.png",
        "button_select2.png"
      );
      this.btnIDNET1 = new Y8IdnetLogo(0, 0, 0, 0, 0.75);
      this.btnIDNET2 = new Y8IdnetLogo(0, 0, 0, 0, 0.75);
      Global.alignList.pop();
      Global.alignList.pop();
      this.txtNickName = new BaseText("FredokaOne-Regular.ttf", 20, 17285);
      this.txtNickName.mouseEnabled = false;
    },
    assetsAddChild: function () {
      this.localGroup = new openfl_display_Sprite();
      this.onlineGroup1 = new openfl_display_Sprite();
      this.onlineGroup2 = new openfl_display_Sprite();
      this.addChild(this.sptBlack);
      Global.align(this.sptBlack, 0.5, 0.5, 0, 0);
      this.localGroup.addChild(this.sptLocalBG);
      this.onlineGroup1.addChild(this.sptOnlineBG1);
      this.onlineGroup2.addChild(this.sptOnlineBG2);
      this.btnLogin.set_x(40);
      this.btnLogin.set_y(244);
      this.onlineGroup1.addChild(this.btnLogin);
      this.btnLocal.set_x(40);
      this.btnLocal.set_y(244);
      this.localGroup.addChild(this.btnLocal);
      this.btnOnline.set_x(40);
      this.btnOnline.set_y(244);
      this.onlineGroup2.addChild(this.btnOnline);
      this.btnIDNET1.set_x(117);
      this.btnIDNET1.set_y(117);
      this.btnIDNET1.set_hitTestState(new openfl_display_Sprite());
      this.onlineGroup1.addChild(this.btnIDNET1);
      this.btnIDNET2.set_x(117);
      this.btnIDNET2.set_y(117);
      this.btnIDNET2.set_hitTestState(new openfl_display_Sprite());
      this.onlineGroup2.addChild(this.btnIDNET2);
      this.txtNickName.set_text(Y8Api.nickname);
      this.txtNickName.set_x(
        this.onlineGroup2.get_width() / 2 - this.txtNickName.get_width() / 2
      );
      this.txtNickName.set_y(188);
      this.onlineGroup2.addChild(this.txtNickName);
      this.onlineGroup =
        Y8Api.isLogin == false ? this.onlineGroup1 : this.onlineGroup2;
      this.onlineGroup.set_x(160);
      this.onlineGroup.set_y(82);
      this.sptGroup.addChild(this.onlineGroup);
      this.localGroup.set_x(423);
      this.localGroup.set_y(82);
      this.sptGroup.addChild(this.localGroup);
      this.addChild(this.sptGroup);
      Global.align(this.sptGroup, 0.5, 0.5);
      this.localGroupPosX = this.localGroup.get_x();
      this.onlineGroupPosX = this.onlineGroup.get_x();
      this.localGroup.set_x(Main.SCREEN_WIDTH + this.localGroup.get_width());
      this.onlineGroup.set_x(-this.onlineGroup.get_width());
      motion_Actuate
        .tween(this.localGroup, 1, { x: this.localGroupPosX })
        .ease(motion_easing_Bounce.get_easeOut());
      motion_Actuate
        .tween(this.onlineGroup, 1, { x: this.onlineGroupPosX })
        .ease(motion_easing_Bounce.get_easeOut())
        .onComplete($bind(this, this.showBtnClose));
    },
    assetsAddEventListener: function () {
      this.sptOnlineBG1.buttonMode = true;
      this.sptOnlineBG1.useHandCursor = true;
      this.sptOnlineBG1.addEventListener(
        "click",
        $bind(this, this.showLogin),
        false,
        0,
        true
      );
      this.btnLogin.addEventListener(
        "click",
        $bind(this, this.showLogin),
        false,
        0,
        true
      );
      this.sptOnlineBG2.buttonMode = true;
      this.sptOnlineBG2.useHandCursor = true;
      this.sptOnlineBG2.addEventListener(
        "click",
        $bind(this, this.chooseOnline),
        false,
        0,
        true
      );
      this.btnOnline.addEventListener(
        "click",
        $bind(this, this.chooseOnline),
        false,
        0,
        true
      );
      this.sptLocalBG.buttonMode = true;
      this.sptLocalBG.useHandCursor = true;
      this.sptLocalBG.addEventListener(
        "click",
        $bind(this, this.chooseLocal),
        false,
        0,
        true
      );
      this.btnLocal.addEventListener(
        "click",
        $bind(this, this.chooseLocal),
        false,
        0,
        true
      );
      this.btnClose.addEventListener(
        "click",
        $bind(this, this.closeLogin),
        false,
        0,
        true
      );
    },
    showLogin: function (e) {
      Y8Api.login($bind(this, this.loginSuccess));
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    chooseLocal: function (e) {
      Y8Api.isSaveOnline = false;
      DataSave.loadGame();
      this.loadComplete();
      this.btnLocal.removeEventListener("click", $bind(this, this.chooseLocal));
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    chooseOnline: function (e) {
      Y8Api.isSaveOnline = true;
      Main.GetInstance().state = 1;
      this.animLoading = new BaseAnimation(
        "images/Y8/loading.png",
        "images/Y8/loading.json"
      );
      this.animLoading.addBehavior("loop", 0, 15, true);
      this.animLoading.animated.showBehavior("loop", true);
      this.addChild(this.sptBlack);
      this.addChild(this.animLoading.animated);
      Global.align(this.animLoading.animated, 0.5, 0.5, 0, 0);
      DataSave.loadGame();
      this.btnOnline.removeEventListener(
        "click",
        $bind(this, this.chooseOnline)
      );
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    loginSuccess: function (e) {
      Y8Api.removeListenerAuthComplete($bind(this, this.loginSuccess));
      var posX = this.onlineGroup.get_x();
      var posY = this.onlineGroup.get_y();
      this.onlineGroup.parent.removeChild(this.onlineGroup);
      this.onlineGroup = this.onlineGroup2;
      this.onlineGroup.set_x(posX);
      this.onlineGroup.set_y(posY);
      this.sptGroup.addChild(this.onlineGroup);
      this.txtNickName.set_text(Y8Api.nickname);
      Global.log("login success " + Y8Api.nickname + " nickname");
    },
    showBtnClose: function () {
      this.btnClose.set_x(
        this.localGroup.get_width() - this.btnClose.get_width() / 2 - 10
      );
      this.btnClose.set_y(-this.btnClose.get_height() / 2 + 10);
      this.localGroup.addChild(this.btnClose);
    },
    closeLogin: function (e) {
      Y8Api.removeListenerAuthComplete($bind(this, this.loginSuccess));
      this.parent.mouseEnabled = true;
      this.parent.mouseChildren = true;
      this.parent.removeChild(this);
      SoundGame.playSFX("sounds", "click", DataGame.volClick);
    },
    loadComplete: function () {
      if (this.animLoading != null) {
        this.animLoading.animated.parent.removeChild(this.animLoading.animated);
      }
      Main.GetInstance().changeWindow("MainMenu", "Intro");
      Global.log("LOAD COMPLETE");
    },
    __class__: Y8SaveOption,
  });
  var Y8Score = function () {
    openfl_display_Sprite.call(this);
    Y8Score.Y8ScoreGlobal = this;
    var sheetButton = new BaseSheet(
      "images/Y8/button.png",
      "images/Y8/button.json"
    );
    var sheetButtonAsli = new BaseSheet(
      "images/button.png",
      "images/button.json"
    );
    var btnScore = new openfl_display_SimpleButton();
    btnScore.set_upState(sheetButtonAsli.loadImage("btn_score1.png"));
    btnScore.set_overState(sheetButtonAsli.loadImage("btn_score2.png"));
    btnScore.set_downState(sheetButtonAsli.loadImage("btn_score2.png"));
    btnScore.set_hitTestState(btnScore.upState);
    this.addChild(btnScore);
    btnScore.addEventListener("click", $bind(this, this.showHighscores));
  };
  $hxClasses["Y8Score"] = Y8Score;
  Y8Score.__name__ = ["Y8Score"];
  Y8Score.GetInstance = function () {
    return Y8Score.Y8ScoreGlobal;
  };
  Y8Score.__super__ = openfl_display_Sprite;
  Y8Score.prototype = $extend(openfl_display_Sprite.prototype, {
    showHighscores: function (e) {
      if (Setting.isIDNET == true) {
        if (Y8Api.isLogin == true) {
          idnet_js__$Social._ID.GameAPI.Leaderboards.list({
            table: Setting.highscoresName,
            mode: "alltime",
            highest: true,
            allowduplicates: false,
          });
        } else {
          Y8Api.login($bind(this, this.loginSuccess));
        }
      }
    },
    loginSuccess: function (e) {
      Y8Api.removeListenerAuthComplete($bind(this, this.loginSuccess));
      this.showHighscores();
    },
    __class__: Y8Score,
  });
  var haxe_StackItem = ($hxClasses["haxe.StackItem"] = {
    __ename__: ["haxe", "StackItem"],
    __constructs__: [
      "CFunction",
      "Module",
      "FilePos",
      "Method",
      "LocalFunction",
    ],
  });
  haxe_StackItem.CFunction = ["CFunction", 0];
  haxe_StackItem.CFunction.toString = $estr;
  haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
  haxe_StackItem.Module = function (m) {
    var $x = ["Module", 1, m];
    $x.__enum__ = haxe_StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe_StackItem.FilePos = function (s, file, line) {
    var $x = ["FilePos", 2, s, file, line];
    $x.__enum__ = haxe_StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe_StackItem.Method = function (classname, method) {
    var $x = ["Method", 3, classname, method];
    $x.__enum__ = haxe_StackItem;
    $x.toString = $estr;
    return $x;
  };
  haxe_StackItem.LocalFunction = function (v) {
    var $x = ["LocalFunction", 4, v];
    $x.__enum__ = haxe_StackItem;
    $x.toString = $estr;
    return $x;
  };
  var haxe_CallStack = function () {};
  $hxClasses["haxe.CallStack"] = haxe_CallStack;
  haxe_CallStack.__name__ = ["haxe", "CallStack"];
  haxe_CallStack.getStack = function (e) {
    if (e == null) {
      return [];
    }
    var oldValue = Error.prepareStackTrace;
    Error.prepareStackTrace = function (error, callsites) {
      var stack = [];
      var _g = 0;
      while (_g < callsites.length) {
        var site = callsites[_g];
        ++_g;
        if (haxe_CallStack.wrapCallSite != null) {
          site = haxe_CallStack.wrapCallSite(site);
        }
        var method = null;
        var fullName = site.getFunctionName();
        if (fullName != null) {
          var idx = fullName.lastIndexOf(".");
          if (idx >= 0) {
            var className = HxOverrides.substr(fullName, 0, idx);
            var methodName = HxOverrides.substr(fullName, idx + 1, null);
            method = haxe_StackItem.Method(className, methodName);
          }
        }
        stack.push(
          haxe_StackItem.FilePos(
            method,
            site.getFileName(),
            site.getLineNumber()
          )
        );
      }
      return stack;
    };
    var a = haxe_CallStack.makeStack(e.stack);
    Error.prepareStackTrace = oldValue;
    return a;
  };
  haxe_CallStack.callStack = function () {
    try {
      throw new Error();
    } catch (e) {
      haxe_CallStack.lastException = e;
      if (e instanceof js__$Boot_HaxeError) e = e.val;
      var a = haxe_CallStack.getStack(e);
      a.shift();
      return a;
    }
  };
  haxe_CallStack.exceptionStack = function () {
    return haxe_CallStack.getStack(haxe_CallStack.lastException);
  };
  haxe_CallStack.toString = function (stack) {
    var b = new StringBuf();
    var _g = 0;
    while (_g < stack.length) {
      var s = stack[_g];
      ++_g;
      b.b += "\nCalled from ";
      haxe_CallStack.itemToString(b, s);
    }
    return b.b;
  };
  haxe_CallStack.itemToString = function (b, s) {
    switch (s[1]) {
      case 0:
        b.b += "a C function";
        break;
      case 1:
        var m = s[2];
        b.b += "module ";
        b.b += m == null ? "null" : "" + m;
        break;
      case 2:
        var line = s[4];
        var file = s[3];
        var s1 = s[2];
        if (s1 != null) {
          haxe_CallStack.itemToString(b, s1);
          b.b += " (";
        }
        b.b += file == null ? "null" : "" + file;
        b.b += " line ";
        b.b += line == null ? "null" : "" + line;
        if (s1 != null) {
          b.b += ")";
        }
        break;
      case 3:
        var meth = s[3];
        var cname = s[2];
        b.b += cname == null ? "null" : "" + cname;
        b.b += ".";
        b.b += meth == null ? "null" : "" + meth;
        break;
      case 4:
        var n = s[2];
        b.b += "local function #";
        b.b += n == null ? "null" : "" + n;
        break;
    }
  };
  haxe_CallStack.makeStack = function (s) {
    if (s == null) {
      return [];
    } else if (typeof s == "string") {
      var stack = s.split("\n");
      if (stack[0] == "Error") {
        stack.shift();
      }
      var m = [];
      var rie10 = new EReg(
        "^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$",
        ""
      );
      var _g = 0;
      while (_g < stack.length) {
        var line = stack[_g];
        ++_g;
        if (rie10.match(line)) {
          var path = rie10.matched(1).split(".");
          var meth = path.pop();
          var file = rie10.matched(2);
          var line1 = Std.parseInt(rie10.matched(3));
          m.push(
            haxe_StackItem.FilePos(
              meth == "Anonymous function"
                ? haxe_StackItem.LocalFunction()
                : meth == "Global code"
                ? null
                : haxe_StackItem.Method(path.join("."), meth),
              file,
              line1
            )
          );
        } else {
          m.push(haxe_StackItem.Module(StringTools.trim(line)));
        }
      }
      return m;
    } else {
      return s;
    }
  };
  var haxe_IMap = function () {};
  $hxClasses["haxe.IMap"] = haxe_IMap;
  haxe_IMap.__name__ = ["haxe", "IMap"];
  haxe_IMap.prototype = {
    get: null,
    set: null,
    exists: null,
    remove: null,
    keys: null,
    iterator: null,
    __class__: haxe_IMap,
  };
  var haxe__$Int64__$_$_$Int64 = function (high, low) {
    this.high = high;
    this.low = low;
  };
  $hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
  haxe__$Int64__$_$_$Int64.__name__ = ["haxe", "_Int64", "___Int64"];
  haxe__$Int64__$_$_$Int64.prototype = {
    high: null,
    low: null,
    __class__: haxe__$Int64__$_$_$Int64,
  };
  var haxe_Log = function () {};
  $hxClasses["haxe.Log"] = haxe_Log;
  haxe_Log.__name__ = ["haxe", "Log"];
  haxe_Log.trace = function (v, infos) {
    js_Boot.__trace(v, infos);
  };
  var haxe_Resource = function () {};
  $hxClasses["haxe.Resource"] = haxe_Resource;
  haxe_Resource.__name__ = ["haxe", "Resource"];
  haxe_Resource.getString = function (name) {
    var _g = 0;
    var _g1 = haxe_Resource.content;
    while (_g < _g1.length) {
      var x = _g1[_g];
      ++_g;
      if (x.name == name) {
        if (x.str != null) {
          return x.str;
        }
        var b = haxe_crypto_Base64.decode(x.data);
        return b.toString();
      }
    }
    return null;
  };
  var haxe_Serializer = function () {
    this.buf = new StringBuf();
    this.cache = [];
    this.useCache = haxe_Serializer.USE_CACHE;
    this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
    this.shash = new haxe_ds_StringMap();
    this.scount = 0;
  };
  $hxClasses["haxe.Serializer"] = haxe_Serializer;
  haxe_Serializer.__name__ = ["haxe", "Serializer"];
  haxe_Serializer.run = function (v) {
    var s = new haxe_Serializer();
    s.serialize(v);
    return s.toString();
  };
  haxe_Serializer.prototype = {
    buf: null,
    cache: null,
    shash: null,
    scount: null,
    useCache: null,
    useEnumIndex: null,
    toString: function () {
      return this.buf.b;
    },
    serializeString: function (s) {
      var _this = this.shash;
      var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
      if (x != null) {
        this.buf.b += "R";
        this.buf.b += x == null ? "null" : "" + x;
        return;
      }
      var _this1 = this.shash;
      var value = this.scount++;
      if (__map_reserved[s] != null) {
        _this1.setReserved(s, value);
      } else {
        _this1.h[s] = value;
      }
      this.buf.b += "y";
      s = encodeURIComponent(s);
      this.buf.b += Std.string(s.length);
      this.buf.b += ":";
      this.buf.b += s == null ? "null" : "" + s;
    },
    serializeRef: function (v) {
      var vt = typeof v;
      var _g1 = 0;
      var _g = this.cache.length;
      while (_g1 < _g) {
        var i = _g1++;
        var ci = this.cache[i];
        if (typeof ci == vt && ci == v) {
          this.buf.b += "r";
          this.buf.b += i == null ? "null" : "" + i;
          return true;
        }
      }
      this.cache.push(v);
      return false;
    },
    serializeFields: function (v) {
      var _g = 0;
      var _g1 = Reflect.fields(v);
      while (_g < _g1.length) {
        var f = _g1[_g];
        ++_g;
        this.serializeString(f);
        this.serialize(Reflect.field(v, f));
      }
      this.buf.b += "g";
    },
    serialize: function (v) {
      var _g = Type["typeof"](v);
      switch (_g[1]) {
        case 0:
          this.buf.b += "n";
          break;
        case 1:
          var v1 = v;
          if (v1 == 0) {
            this.buf.b += "z";
            return;
          }
          this.buf.b += "i";
          this.buf.b += v1 == null ? "null" : "" + v1;
          break;
        case 2:
          var v2 = v;
          if (isNaN(v2)) {
            this.buf.b += "k";
          } else if (!isFinite(v2)) {
            this.buf.b += v2 < 0 ? "m" : "p";
          } else {
            this.buf.b += "d";
            this.buf.b += v2 == null ? "null" : "" + v2;
          }
          break;
        case 3:
          this.buf.b += v ? "t" : "f";
          break;
        case 4:
          if (js_Boot.__instanceof(v, Class)) {
            var className = Type.getClassName(v);
            this.buf.b += "A";
            this.serializeString(className);
          } else if (js_Boot.__instanceof(v, Enum)) {
            this.buf.b += "B";
            this.serializeString(Type.getEnumName(v));
          } else {
            if (this.useCache && this.serializeRef(v)) {
              return;
            }
            this.buf.b += "o";
            this.serializeFields(v);
          }
          break;
        case 5:
          throw new js__$Boot_HaxeError("Cannot serialize function");
          break;
        case 6:
          var c = _g[2];
          if (c == String) {
            this.serializeString(v);
            return;
          }
          if (this.useCache && this.serializeRef(v)) {
            return;
          }
          switch (c) {
            case Array:
              var ucount = 0;
              this.buf.b += "a";
              var l = v["length"];
              var _g1 = 0;
              var _g2 = l;
              while (_g1 < _g2) {
                var i = _g1++;
                if (v[i] == null) {
                  ++ucount;
                } else {
                  if (ucount > 0) {
                    if (ucount == 1) {
                      this.buf.b += "n";
                    } else {
                      this.buf.b += "u";
                      this.buf.b += ucount == null ? "null" : "" + ucount;
                    }
                    ucount = 0;
                  }
                  this.serialize(v[i]);
                }
              }
              if (ucount > 0) {
                if (ucount == 1) {
                  this.buf.b += "n";
                } else {
                  this.buf.b += "u";
                  this.buf.b += ucount == null ? "null" : "" + ucount;
                }
              }
              this.buf.b += "h";
              break;
            case Date:
              var d = v;
              this.buf.b += "v";
              this.buf.b += Std.string(d.getTime());
              break;
            case List:
              this.buf.b += "l";
              var v3 = v;
              var _g_head = v3.h;
              while (_g_head != null) {
                var val = _g_head.item;
                _g_head = _g_head.next;
                var i1 = val;
                this.serialize(i1);
              }
              this.buf.b += "h";
              break;
            case haxe_ds_IntMap:
              this.buf.b += "q";
              var v4 = v;
              var k = v4.keys();
              while (k.hasNext()) {
                var k1 = k.next();
                this.buf.b += ":";
                this.buf.b += k1 == null ? "null" : "" + k1;
                this.serialize(v4.h[k1]);
              }
              this.buf.b += "h";
              break;
            case haxe_ds_ObjectMap:
              this.buf.b += "M";
              var v5 = v;
              var k2 = v5.keys();
              while (k2.hasNext()) {
                var k3 = k2.next();
                var id = Reflect.field(k3, "__id__");
                Reflect.deleteField(k3, "__id__");
                this.serialize(k3);
                k3["__id__"] = id;
                this.serialize(v5.h[k3.__id__]);
              }
              this.buf.b += "h";
              break;
            case haxe_ds_StringMap:
              this.buf.b += "b";
              var v6 = v;
              var k4 = v6.keys();
              while (k4.hasNext()) {
                var k5 = k4.next();
                this.serializeString(k5);
                this.serialize(
                  __map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]
                );
              }
              this.buf.b += "h";
              break;
            case haxe_io_Bytes:
              var v7 = v;
              this.buf.b += "s";
              this.buf.b += Std.string(Math.ceil((v7.length * 8) / 6));
              this.buf.b += ":";
              var i2 = 0;
              var max = v7.length - 2;
              var b64 = haxe_Serializer.BASE64_CODES;
              if (b64 == null) {
                var length = haxe_Serializer.BASE64.length;
                var this1 = new Array(length);
                b64 = this1;
                var _g11 = 0;
                var _g3 = haxe_Serializer.BASE64.length;
                while (_g11 < _g3) {
                  var i3 = _g11++;
                  b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64, i3);
                }
                haxe_Serializer.BASE64_CODES = b64;
              }
              while (i2 < max) {
                var b1 = v7.b[i2++];
                var b2 = v7.b[i2++];
                var b3 = v7.b[i2++];
                this.buf.b += String.fromCharCode(b64[b1 >> 2]);
                this.buf.b += String.fromCharCode(
                  b64[((b1 << 4) | (b2 >> 4)) & 63]
                );
                this.buf.b += String.fromCharCode(
                  b64[((b2 << 2) | (b3 >> 6)) & 63]
                );
                this.buf.b += String.fromCharCode(b64[b3 & 63]);
              }
              if (i2 == max) {
                var b11 = v7.b[i2++];
                var b21 = v7.b[i2++];
                this.buf.b += String.fromCharCode(b64[b11 >> 2]);
                this.buf.b += String.fromCharCode(
                  b64[((b11 << 4) | (b21 >> 4)) & 63]
                );
                this.buf.b += String.fromCharCode(b64[(b21 << 2) & 63]);
              } else if (i2 == max + 1) {
                var b12 = v7.b[i2++];
                this.buf.b += String.fromCharCode(b64[b12 >> 2]);
                this.buf.b += String.fromCharCode(b64[(b12 << 4) & 63]);
              }
              break;
            default:
              if (this.useCache) {
                this.cache.pop();
              }
              if (v.hxSerialize != null) {
                this.buf.b += "C";
                this.serializeString(Type.getClassName(c));
                if (this.useCache) {
                  this.cache.push(v);
                }
                v.hxSerialize(this);
                this.buf.b += "g";
              } else {
                this.buf.b += "c";
                this.serializeString(Type.getClassName(c));
                if (this.useCache) {
                  this.cache.push(v);
                }
                this.serializeFields(v);
              }
          }
          break;
        case 7:
          var e = _g[2];
          if (this.useCache) {
            if (this.serializeRef(v)) {
              return;
            }
            this.cache.pop();
          }
          this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
          this.serializeString(Type.getEnumName(e));
          if (this.useEnumIndex) {
            this.buf.b += ":";
            this.buf.b += Std.string(v[1]);
          } else {
            this.serializeString(v[0]);
          }
          this.buf.b += ":";
          var l1 = v["length"];
          this.buf.b += Std.string(l1 - 2);
          var _g12 = 2;
          var _g4 = l1;
          while (_g12 < _g4) {
            var i4 = _g12++;
            this.serialize(v[i4]);
          }
          if (this.useCache) {
            this.cache.push(v);
          }
          break;
        default:
          throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
      }
    },
    __class__: haxe_Serializer,
  };
  var haxe_Timer = function (time_ms) {
    var me = this;
    this.id = setInterval(function () {
      me.run();
    }, time_ms);
  };
  $hxClasses["haxe.Timer"] = haxe_Timer;
  haxe_Timer.__name__ = ["haxe", "Timer"];
  haxe_Timer.delay = function (f, time_ms) {
    var t = new haxe_Timer(time_ms);
    t.run = function () {
      t.stop();
      f();
    };
    return t;
  };
  haxe_Timer.measure = function (f, pos) {
    var t0 = new Date().getTime() / 1000;
    var r = f();
    haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s", pos);
    return r;
  };
  haxe_Timer.stamp = function () {
    return new Date().getTime() / 1000;
  };
  haxe_Timer.prototype = {
    id: null,
    stop: function () {
      if (this.id == null) {
        return;
      }
      clearInterval(this.id);
      this.id = null;
    },
    run: function () {},
    __class__: haxe_Timer,
  };
  var haxe__$Unserializer_DefaultResolver = function () {};
  $hxClasses["haxe._Unserializer.DefaultResolver"] =
    haxe__$Unserializer_DefaultResolver;
  haxe__$Unserializer_DefaultResolver.__name__ = [
    "haxe",
    "_Unserializer",
    "DefaultResolver",
  ];
  haxe__$Unserializer_DefaultResolver.prototype = {
    resolveClass: function (name) {
      return Type.resolveClass(name);
    },
    resolveEnum: function (name) {
      return Type.resolveEnum(name);
    },
    __class__: haxe__$Unserializer_DefaultResolver,
  };
  var haxe_Unserializer = function (buf) {
    this.buf = buf;
    this.length = buf.length;
    this.pos = 0;
    this.scache = [];
    this.cache = [];
    var r = haxe_Unserializer.DEFAULT_RESOLVER;
    if (r == null) {
      r = new haxe__$Unserializer_DefaultResolver();
      haxe_Unserializer.DEFAULT_RESOLVER = r;
    }
    this.resolver = r;
  };
  $hxClasses["haxe.Unserializer"] = haxe_Unserializer;
  haxe_Unserializer.__name__ = ["haxe", "Unserializer"];
  haxe_Unserializer.initCodes = function () {
    var codes = [];
    var _g1 = 0;
    var _g = haxe_Unserializer.BASE64.length;
    while (_g1 < _g) {
      var i = _g1++;
      codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
    }
    return codes;
  };
  haxe_Unserializer.run = function (v) {
    return new haxe_Unserializer(v).unserialize();
  };
  haxe_Unserializer.prototype = {
    buf: null,
    pos: null,
    length: null,
    cache: null,
    scache: null,
    resolver: null,
    setResolver: function (r) {
      if (r == null) {
        if (haxe__$Unserializer_NullResolver.instance == null) {
          haxe__$Unserializer_NullResolver.instance =
            new haxe__$Unserializer_NullResolver();
        }
        this.resolver = haxe__$Unserializer_NullResolver.instance;
      } else {
        this.resolver = r;
      }
    },
    readDigits: function () {
      var k = 0;
      var s = false;
      var fpos = this.pos;
      while (true) {
        var c = this.buf.charCodeAt(this.pos);
        if (c != c) {
          break;
        }
        if (c == 45) {
          if (this.pos != fpos) {
            break;
          }
          s = true;
          this.pos++;
          continue;
        }
        if (c < 48 || c > 57) {
          break;
        }
        k = k * 10 + (c - 48);
        this.pos++;
      }
      if (s) {
        k *= -1;
      }
      return k;
    },
    readFloat: function () {
      var p1 = this.pos;
      while (true) {
        var c = this.buf.charCodeAt(this.pos);
        if (c != c) {
          break;
        }
        if ((c >= 43 && c < 58) || c == 101 || c == 69) {
          this.pos++;
        } else {
          break;
        }
      }
      return parseFloat(HxOverrides.substr(this.buf, p1, this.pos - p1));
    },
    unserializeObject: function (o) {
      while (true) {
        if (this.pos >= this.length) {
          throw new js__$Boot_HaxeError("Invalid object");
        }
        if (this.buf.charCodeAt(this.pos) == 103) {
          break;
        }
        var k = this.unserialize();
        if (typeof k != "string") {
          throw new js__$Boot_HaxeError("Invalid object key");
        }
        var v = this.unserialize();
        o[k] = v;
      }
      this.pos++;
    },
    unserializeEnum: function (edecl, tag) {
      if (this.buf.charCodeAt(this.pos++) != 58) {
        throw new js__$Boot_HaxeError("Invalid enum format");
      }
      var nargs = this.readDigits();
      if (nargs == 0) {
        return Type.createEnum(edecl, tag);
      }
      var args = [];
      while (nargs-- > 0) args.push(this.unserialize());
      return Type.createEnum(edecl, tag, args);
    },
    unserialize: function () {
      var _g = this.buf.charCodeAt(this.pos++);
      switch (_g) {
        case 65:
          var name = this.unserialize();
          var cl = this.resolver.resolveClass(name);
          if (cl == null) {
            throw new js__$Boot_HaxeError("Class not found " + name);
          }
          return cl;
        case 66:
          var name1 = this.unserialize();
          var e = this.resolver.resolveEnum(name1);
          if (e == null) {
            throw new js__$Boot_HaxeError("Enum not found " + name1);
          }
          return e;
        case 67:
          var name2 = this.unserialize();
          var cl1 = this.resolver.resolveClass(name2);
          if (cl1 == null) {
            throw new js__$Boot_HaxeError("Class not found " + name2);
          }
          var o = Type.createEmptyInstance(cl1);
          this.cache.push(o);
          o.hxUnserialize(this);
          if (this.buf.charCodeAt(this.pos++) != 103) {
            throw new js__$Boot_HaxeError("Invalid custom data");
          }
          return o;
        case 77:
          var h = new haxe_ds_ObjectMap();
          this.cache.push(h);
          var buf = this.buf;
          while (this.buf.charCodeAt(this.pos) != 104) {
            var s = this.unserialize();
            h.set(s, this.unserialize());
          }
          this.pos++;
          return h;
        case 82:
          var n = this.readDigits();
          if (n < 0 || n >= this.scache.length) {
            throw new js__$Boot_HaxeError("Invalid string reference");
          }
          return this.scache[n];
        case 97:
          var buf1 = this.buf;
          var a = [];
          this.cache.push(a);
          while (true) {
            var c = this.buf.charCodeAt(this.pos);
            if (c == 104) {
              this.pos++;
              break;
            }
            if (c == 117) {
              this.pos++;
              var n1 = this.readDigits();
              a[a.length + n1 - 1] = null;
            } else {
              a.push(this.unserialize());
            }
          }
          return a;
        case 98:
          var h1 = new haxe_ds_StringMap();
          this.cache.push(h1);
          var buf2 = this.buf;
          while (this.buf.charCodeAt(this.pos) != 104) {
            var s1 = this.unserialize();
            var value = this.unserialize();
            if (__map_reserved[s1] != null) {
              h1.setReserved(s1, value);
            } else {
              h1.h[s1] = value;
            }
          }
          this.pos++;
          return h1;
        case 99:
          var name3 = this.unserialize();
          var cl2 = this.resolver.resolveClass(name3);
          if (cl2 == null) {
            throw new js__$Boot_HaxeError("Class not found " + name3);
          }
          var o1 = Type.createEmptyInstance(cl2);
          this.cache.push(o1);
          this.unserializeObject(o1);
          return o1;
        case 100:
          return this.readFloat();
        case 102:
          return false;
        case 105:
          return this.readDigits();
        case 106:
          var name4 = this.unserialize();
          var edecl = this.resolver.resolveEnum(name4);
          if (edecl == null) {
            throw new js__$Boot_HaxeError("Enum not found " + name4);
          }
          this.pos++;
          var index = this.readDigits();
          var tag = edecl.__constructs__.slice()[index];
          if (tag == null) {
            throw new js__$Boot_HaxeError(
              "Unknown enum index " + name4 + "@" + index
            );
          }
          var e1 = this.unserializeEnum(edecl, tag);
          this.cache.push(e1);
          return e1;
        case 107:
          return NaN;
        case 108:
          var l = new List();
          this.cache.push(l);
          var buf3 = this.buf;
          while (this.buf.charCodeAt(this.pos) != 104)
            l.add(this.unserialize());
          this.pos++;
          return l;
        case 109:
          return -Infinity;
        case 110:
          return null;
        case 111:
          var o2 = {};
          this.cache.push(o2);
          this.unserializeObject(o2);
          return o2;
        case 112:
          return Infinity;
        case 113:
          var h2 = new haxe_ds_IntMap();
          this.cache.push(h2);
          var buf4 = this.buf;
          var c1 = this.buf.charCodeAt(this.pos++);
          while (c1 == 58) {
            var i = this.readDigits();
            var value1 = this.unserialize();
            h2.h[i] = value1;
            c1 = this.buf.charCodeAt(this.pos++);
          }
          if (c1 != 104) {
            throw new js__$Boot_HaxeError("Invalid IntMap format");
          }
          return h2;
        case 114:
          var n2 = this.readDigits();
          if (n2 < 0 || n2 >= this.cache.length) {
            throw new js__$Boot_HaxeError("Invalid reference");
          }
          return this.cache[n2];
        case 115:
          var len = this.readDigits();
          var buf5 = this.buf;
          if (
            this.buf.charCodeAt(this.pos++) != 58 ||
            this.length - this.pos < len
          ) {
            throw new js__$Boot_HaxeError("Invalid bytes length");
          }
          var codes = haxe_Unserializer.CODES;
          if (codes == null) {
            codes = haxe_Unserializer.initCodes();
            haxe_Unserializer.CODES = codes;
          }
          var i1 = this.pos;
          var rest = len & 3;
          var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
          var max = i1 + (len - rest);
          var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
          var bpos = 0;
          while (i1 < max) {
            var c11 = codes[buf5.charCodeAt(i1++)];
            var c2 = codes[buf5.charCodeAt(i1++)];
            bytes.b[bpos++] = ((c11 << 2) | (c2 >> 4)) & 255;
            var c3 = codes[buf5.charCodeAt(i1++)];
            bytes.b[bpos++] = ((c2 << 4) | (c3 >> 2)) & 255;
            var c4 = codes[buf5.charCodeAt(i1++)];
            bytes.b[bpos++] = ((c3 << 6) | c4) & 255;
          }
          if (rest >= 2) {
            var c12 = codes[buf5.charCodeAt(i1++)];
            var c21 = codes[buf5.charCodeAt(i1++)];
            bytes.b[bpos++] = ((c12 << 2) | (c21 >> 4)) & 255;
            if (rest == 3) {
              var c31 = codes[buf5.charCodeAt(i1++)];
              bytes.b[bpos++] = ((c21 << 4) | (c31 >> 2)) & 255;
            }
          }
          this.pos += len;
          this.cache.push(bytes);
          return bytes;
        case 116:
          return true;
        case 118:
          var d;
          if (
            this.buf.charCodeAt(this.pos) >= 48 &&
            this.buf.charCodeAt(this.pos) <= 57 &&
            this.buf.charCodeAt(this.pos + 1) >= 48 &&
            this.buf.charCodeAt(this.pos + 1) <= 57 &&
            this.buf.charCodeAt(this.pos + 2) >= 48 &&
            this.buf.charCodeAt(this.pos + 2) <= 57 &&
            this.buf.charCodeAt(this.pos + 3) >= 48 &&
            this.buf.charCodeAt(this.pos + 3) <= 57 &&
            this.buf.charCodeAt(this.pos + 4) == 45
          ) {
            d = HxOverrides.strDate(HxOverrides.substr(this.buf, this.pos, 19));
            this.pos += 19;
          } else {
            var t = this.readFloat();
            d = new Date(t);
          }
          this.cache.push(d);
          return d;
        case 119:
          var name5 = this.unserialize();
          var edecl1 = this.resolver.resolveEnum(name5);
          if (edecl1 == null) {
            throw new js__$Boot_HaxeError("Enum not found " + name5);
          }
          var e2 = this.unserializeEnum(edecl1, this.unserialize());
          this.cache.push(e2);
          return e2;
        case 120:
          throw js__$Boot_HaxeError.wrap(this.unserialize());
          break;
        case 121:
          var len1 = this.readDigits();
          if (
            this.buf.charCodeAt(this.pos++) != 58 ||
            this.length - this.pos < len1
          ) {
            throw new js__$Boot_HaxeError("Invalid string length");
          }
          var s2 = HxOverrides.substr(this.buf, this.pos, len1);
          this.pos += len1;
          s2 = decodeURIComponent(s2.split("+").join(" "));
          this.scache.push(s2);
          return s2;
        case 122:
          return 0;
        default:
      }
      this.pos--;
      throw new js__$Boot_HaxeError(
        "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos
      );
    },
    __class__: haxe_Unserializer,
  };
  var haxe__$Unserializer_NullResolver = function () {};
  $hxClasses["haxe._Unserializer.NullResolver"] =
    haxe__$Unserializer_NullResolver;
  haxe__$Unserializer_NullResolver.__name__ = [
    "haxe",
    "_Unserializer",
    "NullResolver",
  ];
  haxe__$Unserializer_NullResolver.prototype = {
    resolveClass: function (name) {
      return null;
    },
    resolveEnum: function (name) {
      return null;
    },
    __class__: haxe__$Unserializer_NullResolver,
  };
  var haxe_io_Bytes = function (data) {
    this.length = data.byteLength;
    this.b = new Uint8Array(data);
    this.b.bufferValue = data;
    data.hxBytes = this;
    data.bytes = this.b;
  };
  $hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
  haxe_io_Bytes.__name__ = ["haxe", "io", "Bytes"];
  haxe_io_Bytes.alloc = function (length) {
    return new haxe_io_Bytes(new ArrayBuffer(length));
  };
  haxe_io_Bytes.ofString = function (s) {
    var a = [];
    var i = 0;
    while (i < s.length) {
      var c = s.charCodeAt(i++);
      if (55296 <= c && c <= 56319) {
        c = ((c - 55232) << 10) | (s.charCodeAt(i++) & 1023);
      }
      if (c <= 127) {
        a.push(c);
      } else if (c <= 2047) {
        a.push(192 | (c >> 6));
        a.push(128 | (c & 63));
      } else if (c <= 65535) {
        a.push(224 | (c >> 12));
        a.push(128 | ((c >> 6) & 63));
        a.push(128 | (c & 63));
      } else {
        a.push(240 | (c >> 18));
        a.push(128 | ((c >> 12) & 63));
        a.push(128 | ((c >> 6) & 63));
        a.push(128 | (c & 63));
      }
    }
    return new haxe_io_Bytes(new Uint8Array(a).buffer);
  };
  haxe_io_Bytes.ofData = function (b) {
    var hb = b.hxBytes;
    if (hb != null) {
      return hb;
    }
    return new haxe_io_Bytes(b);
  };
  haxe_io_Bytes.fastGet = function (b, pos) {
    return b.bytes[pos];
  };
  haxe_io_Bytes.prototype = {
    length: null,
    b: null,
    data: null,
    get: function (pos) {
      return this.b[pos];
    },
    set: function (pos, v) {
      this.b[pos] = v & 255;
    },
    blit: function (pos, src, srcpos, len) {
      if (
        pos < 0 ||
        srcpos < 0 ||
        len < 0 ||
        pos + len > this.length ||
        srcpos + len > src.length
      ) {
        throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
      }
      if (srcpos == 0 && len == src.b.byteLength) {
        this.b.set(src.b, pos);
      } else {
        this.b.set(src.b.subarray(srcpos, srcpos + len), pos);
      }
    },
    fill: function (pos, len, value) {
      var _g1 = 0;
      var _g = len;
      while (_g1 < _g) {
        var i = _g1++;
        this.b[pos++] = value & 255;
      }
    },
    sub: function (pos, len) {
      if (pos < 0 || len < 0 || pos + len > this.length) {
        throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
      }
      return new haxe_io_Bytes(
        this.b.buffer.slice(
          pos + this.b.byteOffset,
          pos + this.b.byteOffset + len
        )
      );
    },
    compare: function (other) {
      var b1 = this.b;
      var b2 = other.b;
      var len = this.length < other.length ? this.length : other.length;
      var _g1 = 0;
      var _g = len;
      while (_g1 < _g) {
        var i = _g1++;
        if (b1[i] != b2[i]) {
          return b1[i] - b2[i];
        }
      }
      return this.length - other.length;
    },
    initData: function () {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
    },
    getDouble: function (pos) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      return this.data.getFloat64(pos, true);
    },
    getFloat: function (pos) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      return this.data.getFloat32(pos, true);
    },
    setDouble: function (pos, v) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      this.data.setFloat64(pos, v, true);
    },
    setFloat: function (pos, v) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      this.data.setFloat32(pos, v, true);
    },
    getUInt16: function (pos) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      return this.data.getUint16(pos, true);
    },
    setUInt16: function (pos, v) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      this.data.setUint16(pos, v, true);
    },
    getInt32: function (pos) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      return this.data.getInt32(pos, true);
    },
    setInt32: function (pos, v) {
      if (this.data == null) {
        this.data = new DataView(
          this.b.buffer,
          this.b.byteOffset,
          this.b.byteLength
        );
      }
      this.data.setInt32(pos, v, true);
    },
    getInt64: function (pos) {
      var this1 = new haxe__$Int64__$_$_$Int64(
        this.getInt32(pos + 4),
        this.getInt32(pos)
      );
      return this1;
    },
    setInt64: function (pos, v) {
      this.setInt32(pos, v.low);
      this.setInt32(pos + 4, v.high);
    },
    getString: function (pos, len) {
      if (pos < 0 || len < 0 || pos + len > this.length) {
        throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
      }
      var s = "";
      var b = this.b;
      var fcc = String.fromCharCode;
      var i = pos;
      var max = pos + len;
      while (i < max) {
        var c = b[i++];
        if (c < 128) {
          if (c == 0) {
            break;
          }
          s += fcc(c);
        } else if (c < 224) {
          s += fcc(((c & 63) << 6) | (b[i++] & 127));
        } else if (c < 240) {
          var c2 = b[i++];
          s += fcc(((c & 31) << 12) | ((c2 & 127) << 6) | (b[i++] & 127));
        } else {
          var c21 = b[i++];
          var c3 = b[i++];
          var u =
            ((c & 15) << 18) |
            ((c21 & 127) << 12) |
            ((c3 & 127) << 6) |
            (b[i++] & 127);
          s += fcc((u >> 10) + 55232);
          s += fcc((u & 1023) | 56320);
        }
      }
      return s;
    },
    readString: function (pos, len) {
      return this.getString(pos, len);
    },
    toString: function () {
      return this.getString(0, this.length);
    },
    toHex: function () {
      var s_b = "";
      var chars = [];
      var str = "0123456789abcdef";
      var _g1 = 0;
      var _g = str.length;
      while (_g1 < _g) {
        var i = _g1++;
        chars.push(HxOverrides.cca(str, i));
      }
      var _g11 = 0;
      var _g2 = this.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        var c = this.b[i1];
        s_b += String.fromCharCode(chars[c >> 4]);
        s_b += String.fromCharCode(chars[c & 15]);
      }
      return s_b;
    },
    getData: function () {
      return this.b.bufferValue;
    },
    __class__: haxe_io_Bytes,
  };
  var haxe_crypto_Base64 = function () {};
  $hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
  haxe_crypto_Base64.__name__ = ["haxe", "crypto", "Base64"];
  haxe_crypto_Base64.encode = function (bytes, complement) {
    if (complement == null) {
      complement = true;
    }
    var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES)
      .encodeBytes(bytes)
      .toString();
    if (complement) {
      var _g = bytes.length % 3;
      switch (_g) {
        case 1:
          str += "==";
          break;
        case 2:
          str += "=";
          break;
        default:
      }
    }
    return str;
  };
  haxe_crypto_Base64.decode = function (str, complement) {
    if (complement == null) {
      complement = true;
    }
    if (complement) {
      while (HxOverrides.cca(str, str.length - 1) == 61)
        str = HxOverrides.substr(str, 0, -1);
    }
    return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(
      haxe_io_Bytes.ofString(str)
    );
  };
  var haxe_crypto_BaseCode = function (base) {
    var len = base.length;
    var nbits = 1;
    while (len > 1 << nbits) ++nbits;
    if (nbits > 8 || len != 1 << nbits) {
      throw new js__$Boot_HaxeError(
        "BaseCode : base length must be a power of two."
      );
    }
    this.base = base;
    this.nbits = nbits;
  };
  $hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
  haxe_crypto_BaseCode.__name__ = ["haxe", "crypto", "BaseCode"];
  haxe_crypto_BaseCode.prototype = {
    base: null,
    nbits: null,
    tbl: null,
    encodeBytes: function (b) {
      var nbits = this.nbits;
      var base = this.base;
      var size = ((b.length * 8) / nbits) | 0;
      var out = new haxe_io_Bytes(
        new ArrayBuffer(size + ((b.length * 8) % nbits == 0 ? 0 : 1))
      );
      var buf = 0;
      var curbits = 0;
      var mask = (1 << nbits) - 1;
      var pin = 0;
      var pout = 0;
      while (pout < size) {
        while (curbits < nbits) {
          curbits += 8;
          buf <<= 8;
          buf |= b.b[pin++];
        }
        curbits -= nbits;
        out.b[pout++] = base.b[(buf >> curbits) & mask] & 255;
      }
      if (curbits > 0) {
        out.b[pout++] = base.b[(buf << (nbits - curbits)) & mask] & 255;
      }
      return out;
    },
    initTable: function () {
      var tbl = [];
      var _g = 0;
      while (_g < 256) {
        var i = _g++;
        tbl[i] = -1;
      }
      var _g1 = 0;
      var _g2 = this.base.length;
      while (_g1 < _g2) {
        var i1 = _g1++;
        tbl[this.base.b[i1]] = i1;
      }
      this.tbl = tbl;
    },
    decodeBytes: function (b) {
      var nbits = this.nbits;
      var base = this.base;
      if (this.tbl == null) {
        this.initTable();
      }
      var tbl = this.tbl;
      var size = (b.length * nbits) >> 3;
      var out = new haxe_io_Bytes(new ArrayBuffer(size));
      var buf = 0;
      var curbits = 0;
      var pin = 0;
      var pout = 0;
      while (pout < size) {
        while (curbits < 8) {
          curbits += nbits;
          buf <<= nbits;
          var i = tbl[b.b[pin++]];
          if (i == -1) {
            throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
          }
          buf |= i;
        }
        curbits -= 8;
        out.b[pout++] = (buf >> curbits) & 255 & 255;
      }
      return out;
    },
    __class__: haxe_crypto_BaseCode,
  };
  var haxe_ds_BalancedTree = function () {};
  $hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
  haxe_ds_BalancedTree.__name__ = ["haxe", "ds", "BalancedTree"];
  haxe_ds_BalancedTree.prototype = {
    root: null,
    set: function (key, value) {
      this.root = this.setLoop(key, value, this.root);
    },
    get: function (key) {
      var node = this.root;
      while (node != null) {
        var c = this.compare(key, node.key);
        if (c == 0) {
          return node.value;
        }
        if (c < 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      return null;
    },
    remove: function (key) {
      try {
        this.root = this.removeLoop(key, this.root);
        return true;
      } catch (e) {
        haxe_CallStack.lastException = e;
        if (e instanceof js__$Boot_HaxeError) e = e.val;
        if (js_Boot.__instanceof(e, String)) {
          return false;
        } else throw e;
      }
    },
    exists: function (key) {
      var node = this.root;
      while (node != null) {
        var c = this.compare(key, node.key);
        if (c == 0) {
          return true;
        } else if (c < 0) {
          node = node.left;
        } else {
          node = node.right;
        }
      }
      return false;
    },
    iterator: function () {
      var ret = [];
      this.iteratorLoop(this.root, ret);
      return HxOverrides.iter(ret);
    },
    keys: function () {
      var ret = [];
      this.keysLoop(this.root, ret);
      return HxOverrides.iter(ret);
    },
    setLoop: function (k, v, node) {
      if (node == null) {
        return new haxe_ds_TreeNode(null, k, v, null);
      }
      var c = this.compare(k, node.key);
      if (c == 0) {
        return new haxe_ds_TreeNode(
          node.left,
          k,
          v,
          node.right,
          node == null ? 0 : node._height
        );
      } else if (c < 0) {
        var nl = this.setLoop(k, v, node.left);
        return this.balance(nl, node.key, node.value, node.right);
      } else {
        var nr = this.setLoop(k, v, node.right);
        return this.balance(node.left, node.key, node.value, nr);
      }
    },
    removeLoop: function (k, node) {
      if (node == null) {
        throw new js__$Boot_HaxeError("Not_found");
      }
      var c = this.compare(k, node.key);
      if (c == 0) {
        return this.merge(node.left, node.right);
      } else if (c < 0) {
        return this.balance(
          this.removeLoop(k, node.left),
          node.key,
          node.value,
          node.right
        );
      } else {
        return this.balance(
          node.left,
          node.key,
          node.value,
          this.removeLoop(k, node.right)
        );
      }
    },
    iteratorLoop: function (node, acc) {
      if (node != null) {
        this.iteratorLoop(node.left, acc);
        acc.push(node.value);
        this.iteratorLoop(node.right, acc);
      }
    },
    keysLoop: function (node, acc) {
      if (node != null) {
        this.keysLoop(node.left, acc);
        acc.push(node.key);
        this.keysLoop(node.right, acc);
      }
    },
    merge: function (t1, t2) {
      if (t1 == null) {
        return t2;
      }
      if (t2 == null) {
        return t1;
      }
      var t = this.minBinding(t2);
      return this.balance(t1, t.key, t.value, this.removeMinBinding(t2));
    },
    minBinding: function (t) {
      if (t == null) {
        throw new js__$Boot_HaxeError("Not_found");
      } else if (t.left == null) {
        return t;
      } else {
        return this.minBinding(t.left);
      }
    },
    removeMinBinding: function (t) {
      if (t.left == null) {
        return t.right;
      } else {
        return this.balance(
          this.removeMinBinding(t.left),
          t.key,
          t.value,
          t.right
        );
      }
    },
    balance: function (l, k, v, r) {
      var hl = l == null ? 0 : l._height;
      var hr = r == null ? 0 : r._height;
      if (hl > hr + 2) {
        var _this = l.left;
        var _this1 = l.right;
        if (
          (_this == null ? 0 : _this._height) >=
          (_this1 == null ? 0 : _this1._height)
        ) {
          return new haxe_ds_TreeNode(
            l.left,
            l.key,
            l.value,
            new haxe_ds_TreeNode(l.right, k, v, r)
          );
        } else {
          return new haxe_ds_TreeNode(
            new haxe_ds_TreeNode(l.left, l.key, l.value, l.right.left),
            l.right.key,
            l.right.value,
            new haxe_ds_TreeNode(l.right.right, k, v, r)
          );
        }
      } else if (hr > hl + 2) {
        var _this2 = r.right;
        var _this3 = r.left;
        if (
          (_this2 == null ? 0 : _this2._height) >
          (_this3 == null ? 0 : _this3._height)
        ) {
          return new haxe_ds_TreeNode(
            new haxe_ds_TreeNode(l, k, v, r.left),
            r.key,
            r.value,
            r.right
          );
        } else {
          return new haxe_ds_TreeNode(
            new haxe_ds_TreeNode(l, k, v, r.left.left),
            r.left.key,
            r.left.value,
            new haxe_ds_TreeNode(r.left.right, r.key, r.value, r.right)
          );
        }
      } else {
        return new haxe_ds_TreeNode(l, k, v, r, (hl > hr ? hl : hr) + 1);
      }
    },
    compare: function (k1, k2) {
      return Reflect.compare(k1, k2);
    },
    __class__: haxe_ds_BalancedTree,
  };
  var haxe_ds_TreeNode = function (l, k, v, r, h) {
    if (h == null) {
      h = -1;
    }
    this.left = l;
    this.key = k;
    this.value = v;
    this.right = r;
    if (h == -1) {
      var tmp;
      var _this = this.left;
      var _this1 = this.right;
      if (
        (_this == null ? 0 : _this._height) >
        (_this1 == null ? 0 : _this1._height)
      ) {
        var _this2 = this.left;
        if (_this2 == null) {
          tmp = 0;
        } else {
          tmp = _this2._height;
        }
      } else {
        var _this3 = this.right;
        if (_this3 == null) {
          tmp = 0;
        } else {
          tmp = _this3._height;
        }
      }
      this._height = tmp + 1;
    } else {
      this._height = h;
    }
  };
  $hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
  haxe_ds_TreeNode.__name__ = ["haxe", "ds", "TreeNode"];
  haxe_ds_TreeNode.prototype = {
    left: null,
    right: null,
    key: null,
    value: null,
    _height: null,
    __class__: haxe_ds_TreeNode,
  };
  var haxe_ds_EnumValueMap = function () {
    haxe_ds_BalancedTree.call(this);
  };
  $hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
  haxe_ds_EnumValueMap.__name__ = ["haxe", "ds", "EnumValueMap"];
  haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
  haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
  haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype, {
    compare: function (k1, k2) {
      var d = k1[1] - k2[1];
      if (d != 0) {
        return d;
      }
      var p1 = k1.slice(2);
      var p2 = k2.slice(2);
      if (p1.length == 0 && p2.length == 0) {
        return 0;
      }
      return this.compareArgs(p1, p2);
    },
    compareArgs: function (a1, a2) {
      var ld = a1.length - a2.length;
      if (ld != 0) {
        return ld;
      }
      var _g1 = 0;
      var _g = a1.length;
      while (_g1 < _g) {
        var i = _g1++;
        var d = this.compareArg(a1[i], a2[i]);
        if (d != 0) {
          return d;
        }
      }
      return 0;
    },
    compareArg: function (v1, v2) {
      if (Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
        return this.compare(v1, v2);
      } else if (
        v1 instanceof Array &&
        v1.__enum__ == null &&
        v2 instanceof Array &&
        v2.__enum__ == null
      ) {
        return this.compareArgs(v1, v2);
      } else {
        return Reflect.compare(v1, v2);
      }
    },
    __class__: haxe_ds_EnumValueMap,
  });
  var haxe_ds_IntMap = function () {
    this.h = {};
  };
  $hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
  haxe_ds_IntMap.__name__ = ["haxe", "ds", "IntMap"];
  haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
  haxe_ds_IntMap.prototype = {
    h: null,
    set: function (key, value) {
      this.h[key] = value;
    },
    get: function (key) {
      return this.h[key];
    },
    exists: function (key) {
      return this.h.hasOwnProperty(key);
    },
    remove: function (key) {
      if (!this.h.hasOwnProperty(key)) {
        return false;
      }
      delete this.h[key];
      return true;
    },
    keys: function () {
      var a = [];
      for (var key in this.h)
        if (this.h.hasOwnProperty(key)) {
          a.push(key | 0);
        }
      return HxOverrides.iter(a);
    },
    iterator: function () {
      return {
        ref: this.h,
        it: this.keys(),
        hasNext: function () {
          return this.it.hasNext();
        },
        next: function () {
          var i = this.it.next();
          return this.ref[i];
        },
      };
    },
    __class__: haxe_ds_IntMap,
  };
  var haxe_ds_ObjectMap = function () {
    this.h = { __keys__: {} };
  };
  $hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
  haxe_ds_ObjectMap.__name__ = ["haxe", "ds", "ObjectMap"];
  haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
  haxe_ds_ObjectMap.assignId = function (obj) {
    return (obj.__id__ = ++haxe_ds_ObjectMap.count);
  };
  haxe_ds_ObjectMap.getId = function (obj) {
    return obj.__id__;
  };
  haxe_ds_ObjectMap.prototype = {
    h: null,
    set: function (key, value) {
      var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
      this.h[id] = value;
      this.h.__keys__[id] = key;
    },
    get: function (key) {
      return this.h[key.__id__];
    },
    exists: function (key) {
      return this.h.__keys__[key.__id__] != null;
    },
    remove: function (key) {
      var id = key.__id__;
      if (this.h.__keys__[id] == null) {
        return false;
      }
      delete this.h[id];
      delete this.h.__keys__[id];
      return true;
    },
    keys: function () {
      var a = [];
      for (var key in this.h.__keys__) {
        if (this.h.hasOwnProperty(key)) {
          a.push(this.h.__keys__[key]);
        }
      }
      return HxOverrides.iter(a);
    },
    iterator: function () {
      return {
        ref: this.h,
        it: this.keys(),
        hasNext: function () {
          return this.it.hasNext();
        },
        next: function () {
          var i = this.it.next();
          return this.ref[i.__id__];
        },
      };
    },
    toString: function () {
      var s_b = "";
      s_b += "{";
      var it = this.keys();
      var i = it;
      while (i.hasNext()) {
        var i1 = i.next();
        s_b += Std.string(Std.string(i1));
        s_b += " => ";
        s_b += Std.string(Std.string(this.h[i1.__id__]));
        if (it.hasNext()) {
          s_b += ", ";
        }
      }
      s_b += "}";
      return s_b;
    },
    __class__: haxe_ds_ObjectMap,
  };
  var haxe_ds__$StringMap_StringMapIterator = function (map, keys) {
    this.map = map;
    this.keys = keys;
    this.index = 0;
    this.count = keys.length;
  };
  $hxClasses["haxe.ds._StringMap.StringMapIterator"] =
    haxe_ds__$StringMap_StringMapIterator;
  haxe_ds__$StringMap_StringMapIterator.__name__ = [
    "haxe",
    "ds",
    "_StringMap",
    "StringMapIterator",
  ];
  haxe_ds__$StringMap_StringMapIterator.prototype = {
    map: null,
    keys: null,
    index: null,
    count: null,
    hasNext: function () {
      return this.index < this.count;
    },
    next: function () {
      var _this = this.map;
      var key = this.keys[this.index++];
      if (__map_reserved[key] != null) {
        return _this.getReserved(key);
      } else {
        return _this.h[key];
      }
    },
    __class__: haxe_ds__$StringMap_StringMapIterator,
  };
  var haxe_ds_StringMap = function () {
    this.h = {};
  };
  $hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
  haxe_ds_StringMap.__name__ = ["haxe", "ds", "StringMap"];
  haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
  haxe_ds_StringMap.prototype = {
    h: null,
    rh: null,
    set: function (key, value) {
      if (__map_reserved[key] != null) {
        this.setReserved(key, value);
      } else {
        this.h[key] = value;
      }
    },
    get: function (key) {
      if (__map_reserved[key] != null) {
        return this.getReserved(key);
      }
      return this.h[key];
    },
    exists: function (key) {
      if (__map_reserved[key] != null) {
        return this.existsReserved(key);
      }
      return this.h.hasOwnProperty(key);
    },
    setReserved: function (key, value) {
      if (this.rh == null) {
        this.rh = {};
      }
      this.rh["$" + key] = value;
    },
    getReserved: function (key) {
      if (this.rh == null) {
        return null;
      } else {
        return this.rh["$" + key];
      }
    },
    existsReserved: function (key) {
      if (this.rh == null) {
        return false;
      }
      return this.rh.hasOwnProperty("$" + key);
    },
    remove: function (key) {
      if (__map_reserved[key] != null) {
        key = "$" + key;
        if (this.rh == null || !this.rh.hasOwnProperty(key)) {
          return false;
        }
        delete this.rh[key];
        return true;
      } else {
        if (!this.h.hasOwnProperty(key)) {
          return false;
        }
        delete this.h[key];
        return true;
      }
    },
    keys: function () {
      return HxOverrides.iter(this.arrayKeys());
    },
    arrayKeys: function () {
      var out = [];
      for (var key in this.h) {
        if (this.h.hasOwnProperty(key)) {
          out.push(key);
        }
      }
      if (this.rh != null) {
        for (var key in this.rh) {
          if (key.charCodeAt(0) == 36) {
            out.push(key.substr(1));
          }
        }
      }
      return out;
    },
    iterator: function () {
      return new haxe_ds__$StringMap_StringMapIterator(this, this.arrayKeys());
    },
    toString: function () {
      var s_b = "";
      s_b += "{";
      var keys = this.arrayKeys();
      var _g1 = 0;
      var _g = keys.length;
      while (_g1 < _g) {
        var i = _g1++;
        var k = keys[i];
        s_b += k == null ? "null" : "" + k;
        s_b += " => ";
        s_b += Std.string(
          Std.string(
            __map_reserved[k] != null ? this.getReserved(k) : this.h[k]
          )
        );
        if (i < keys.length - 1) {
          s_b += ", ";
        }
      }
      s_b += "}";
      return s_b;
    },
    __class__: haxe_ds_StringMap,
  };
  var haxe_io_Eof = function () {};
  $hxClasses["haxe.io.Eof"] = haxe_io_Eof;
  haxe_io_Eof.__name__ = ["haxe", "io", "Eof"];
  haxe_io_Eof.prototype = {
    toString: function () {
      return "Eof";
    },
    __class__: haxe_io_Eof,
  };
  var haxe_io_Error = ($hxClasses["haxe.io.Error"] = {
    __ename__: ["haxe", "io", "Error"],
    __constructs__: ["Blocked", "Overflow", "OutsideBounds", "Custom"],
  });
  haxe_io_Error.Blocked = ["Blocked", 0];
  haxe_io_Error.Blocked.toString = $estr;
  haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
  haxe_io_Error.Overflow = ["Overflow", 1];
  haxe_io_Error.Overflow.toString = $estr;
  haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
  haxe_io_Error.OutsideBounds = ["OutsideBounds", 2];
  haxe_io_Error.OutsideBounds.toString = $estr;
  haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
  haxe_io_Error.Custom = function (e) {
    var $x = ["Custom", 3, e];
    $x.__enum__ = haxe_io_Error;
    $x.toString = $estr;
    return $x;
  };
  var haxe_io_FPHelper = function () {};
  $hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
  haxe_io_FPHelper.__name__ = ["haxe", "io", "FPHelper"];
  haxe_io_FPHelper.i32ToFloat = function (i) {
    var sign = 1 - ((i >>> 31) << 1);
    var exp = (i >>> 23) & 255;
    var sig = i & 8388607;
    if (sig == 0 && exp == 0) {
      return 0.0;
    }
    return sign * (1 + Math.pow(2, -23) * sig) * Math.pow(2, exp - 127);
  };
  haxe_io_FPHelper.floatToI32 = function (f) {
    if (f == 0) {
      return 0;
    }
    var af = f < 0 ? -f : f;
    var exp = Math.floor(Math.log(af) / 0.6931471805599453);
    if (exp < -127) {
      exp = -127;
    } else if (exp > 128) {
      exp = 128;
    }
    var sig = Math.round((af / Math.pow(2, exp) - 1) * 8388608);
    if (sig == 8388608 && exp < 128) {
      sig = 0;
      ++exp;
    }
    return (f < 0 ? -2147483648 : 0) | ((exp + 127) << 23) | sig;
  };
  haxe_io_FPHelper.i64ToDouble = function (low, high) {
    var sign = 1 - ((high >>> 31) << 1);
    var exp = ((high >> 20) & 2047) - 1023;
    var sig =
      (high & 1048575) * 4294967296 +
      (low >>> 31) * 2147483648 +
      (low & 2147483647);
    if (sig == 0 && exp == -1023) {
      return 0.0;
    }
    return sign * (1.0 + Math.pow(2, -52) * sig) * Math.pow(2, exp);
  };
  haxe_io_FPHelper.doubleToI64 = function (v) {
    var i64 = haxe_io_FPHelper.i64tmp;
    if (v == 0) {
      i64.low = 0;
      i64.high = 0;
    } else if (!isFinite(v)) {
      if (v > 0) {
        i64.low = 0;
        i64.high = 2146435072;
      } else {
        i64.low = 0;
        i64.high = -1048576;
      }
    } else {
      var av = v < 0 ? -v : v;
      var exp = Math.floor(Math.log(av) / 0.6931471805599453);
      var sig = Math.round((av / Math.pow(2, exp) - 1) * 4503599627370496);
      var sig_l = sig | 0;
      var sig_h = (sig / 4294967296.0) | 0;
      i64.low = sig_l;
      i64.high = (v < 0 ? -2147483648 : 0) | ((exp + 1023) << 20) | sig_h;
    }
    return i64;
  };
  var haxe_io_Path = function (path) {
    switch (path) {
      case ".":
      case "..":
        this.dir = path;
        this.file = "";
        return;
    }
    var c1 = path.lastIndexOf("/");
    var c2 = path.lastIndexOf("\\");
    if (c1 < c2) {
      this.dir = HxOverrides.substr(path, 0, c2);
      path = HxOverrides.substr(path, c2 + 1, null);
      this.backslash = true;
    } else if (c2 < c1) {
      this.dir = HxOverrides.substr(path, 0, c1);
      path = HxOverrides.substr(path, c1 + 1, null);
    } else {
      this.dir = null;
    }
    var cp = path.lastIndexOf(".");
    if (cp != -1) {
      this.ext = HxOverrides.substr(path, cp + 1, null);
      this.file = HxOverrides.substr(path, 0, cp);
    } else {
      this.ext = null;
      this.file = path;
    }
  };
  $hxClasses["haxe.io.Path"] = haxe_io_Path;
  haxe_io_Path.__name__ = ["haxe", "io", "Path"];
  haxe_io_Path.directory = function (path) {
    var s = new haxe_io_Path(path);
    if (s.dir == null) {
      return "";
    }
    return s.dir;
  };
  haxe_io_Path.prototype = {
    dir: null,
    file: null,
    ext: null,
    backslash: null,
    __class__: haxe_io_Path,
  };
  var idnet_IDispatcher = function () {};
  $hxClasses["idnet.IDispatcher"] = idnet_IDispatcher;
  idnet_IDispatcher.__name__ = ["idnet", "IDispatcher"];
  idnet_IDispatcher.prototype = {
    dispatch: null,
    dispatchPostStatus: null,
    __class__: idnet_IDispatcher,
  };
  var idnet_Social = function () {
    openfl_events_EventDispatcher.call(this);
    this._social = new idnet_js__$Social();
  };
  $hxClasses["idnet.Social"] = idnet_Social;
  idnet_Social.__name__ = ["idnet", "Social"];
  idnet_Social.__interfaces__ = [idnet_IDispatcher];
  idnet_Social.__properties__ = { get_i: "get_i" };
  idnet_Social.get_i = function () {
    if (idnet_Social._instance == null) {
      idnet_Social._instance = new idnet_Social();
    }
    return idnet_Social._instance;
  };
  idnet_Social.__super__ = openfl_events_EventDispatcher;
  idnet_Social.prototype = $extend(openfl_events_EventDispatcher.prototype, {
    username: null,
    sessionKey: null,
    set_username: function (newName) {
      this.username = newName;
      return this.get_username();
    },
    get_username: function () {
      return this.username;
    },
    set_sessionKey: function (newKey) {
      this.sessionKey = newKey;
      return this.get_sessionKey();
    },
    get_sessionKey: function () {
      return this.sessionKey;
    },
    _social: null,
    init: function (
      appId,
      appSecret,
      verbose,
      showPreloader,
      protection,
      status,
      responseType,
      redirectUri,
      channelUrl,
      meta
    ) {
      if (redirectUri == null) {
        redirectUri = "https://mocksite.com/auth/idnet/callback";
      }
      if (responseType == null) {
        responseType = "code";
      }
      if (status == null) {
        status = true;
      }
      if (protection == null) {
        protection = true;
      }
      if (showPreloader == null) {
        showPreloader = false;
      }
      if (verbose == null) {
        verbose = true;
      }
      this._social.injectDispatcher(this);
      this._social.injectInitParams(
        new idnet_common_InitParameters(
          appId,
          status,
          responseType,
          redirectUri,
          channelUrl,
          meta
        )
      );
      this._social.init();
    },
    isAuthorized: function () {
      return this._social.authorized;
    },
    setAuthorized: function (value) {
      this._social.authorized = value;
    },
    register: function () {
      this._social.register();
    },
    loginPopup: function () {
      this._social.loginPopup();
    },
    postToFeed: function (params) {
      this._social.postToFeed(params);
    },
    logout: function () {
      this._social.logout();
    },
    setUseLocalStorage: function (value) {
      if (value == null) {
        value = false;
      }
      this._social.setUseLocalStorage(value);
    },
    setSaveData: function (field, value) {
      this._social.setSaveData(field, value);
    },
    getSaveData: function (field, callback) {
      this._social.getSaveData(field, callback);
    },
    clearSaveData: function (field) {
      this._social.clearSaveData(field);
    },
    achievementsSave: function (
      achName,
      achKey,
      playerName,
      overwrite,
      allowDuplicates
    ) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (overwrite == null) {
        overwrite = false;
      }
      this._social.achievementsSave(
        achName,
        achKey,
        playerName,
        overwrite,
        allowDuplicates
      );
    },
    achievementsList: function () {
      this._social.achievementsList();
    },
    showLeaderBoard: function (
      table,
      highest,
      allowDuplicates,
      useMilliseconds
    ) {
      if (useMilliseconds == null) {
        useMilliseconds = false;
      }
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
      this._social.showLeaderBoard(
        table,
        highest,
        allowDuplicates,
        useMilliseconds
      );
    },
    submitScore: function (table, score, playerName, highest, allowDuplicates) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
      this._social.submitScore(
        table,
        score,
        playerName,
        highest,
        allowDuplicates
      );
    },
    dispatch: function (evName) {
      this.dispatchEvent(new openfl_events_Event(evName));
    },
    dispatchPostStatus: function (evName, postId, failReason) {
      this.dispatchEvent(
        new idnet_common_events_PostStatusEvent(evName, postId, failReason)
      );
    },
    __class__: idnet_Social,
    __properties__: {
      set_sessionKey: "set_sessionKey",
      get_sessionKey: "get_sessionKey",
      set_username: "set_username",
      get_username: "get_username",
    },
  });
  var idnet_SocialBase = function () {
    this.authorized = false;
  };
  $hxClasses["idnet.SocialBase"] = idnet_SocialBase;
  idnet_SocialBase.__name__ = ["idnet", "SocialBase"];
  idnet_SocialBase.prototype = {
    params: null,
    d: null,
    authorized: null,
    injectInitParams: function (params) {
      this.params = params;
    },
    injectDispatcher: function (dispatcher) {
      this.d = dispatcher;
    },
    init: function () {},
    register: function () {},
    loginPopup: function () {},
    sendImage: function (myImage, imageType) {},
    postToFeed: function (params) {},
    logout: function () {},
    setUseLocalStorage: function (value) {
      if (value == null) {
        value = false;
      }
    },
    setSaveData: function (field, value) {},
    getSaveData: function (field, callback) {},
    clearSaveData: function (field) {},
    achievementsSave: function (
      achName,
      achKey,
      playerName,
      overwrite,
      allowDuplicates
    ) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (overwrite == null) {
        overwrite = false;
      }
    },
    achievementsList: function () {},
    showLeaderBoard: function (
      table,
      highest,
      allowDuplicates,
      useMilliseconds
    ) {
      if (useMilliseconds == null) {
        useMilliseconds = false;
      }
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
    },
    submitScore: function (table, score, playerName, highest, allowDuplicates) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
    },
    __class__: idnet_SocialBase,
  };
  var idnet_common_FeedParameters = function (
    link,
    description,
    picture,
    name,
    caption,
    message,
    source,
    redirect_uri
  ) {
    this.link = link;
    this.description = description;
    this.picture = picture;
    this.name = name;
    this.caption = caption;
    this.message = message;
    this.source = source;
    this.redirect_uri = redirect_uri;
  };
  $hxClasses["idnet.common.FeedParameters"] = idnet_common_FeedParameters;
  idnet_common_FeedParameters.__name__ = ["idnet", "common", "FeedParameters"];
  idnet_common_FeedParameters.prototype = {
    link: null,
    description: null,
    picture: null,
    name: null,
    caption: null,
    message: null,
    source: null,
    redirect_uri: null,
    serialize: function () {
      var serialized = {
        method: "feed",
        link: this.link,
        description: this.description,
        picture: this.picture,
        name: this.name,
        caption: this.caption,
      };
      if (this.message != null) {
        serialized.message = this.message;
      }
      if (this.source != null) {
        serialized.source = this.source;
      }
      if (this.redirect_uri != null) {
        serialized.redirect_uri = this.redirect_uri;
      }
      return serialized;
    },
    __class__: idnet_common_FeedParameters,
  };
  var idnet_common_InitParameters = function (
    appId,
    status,
    responseType,
    redirectUri,
    channelUrl,
    meta
  ) {
    this.appId = appId;
    this.status = status;
    this.responseType = responseType;
    this.redirectUri = redirectUri;
    this.channelUrl = channelUrl;
    this.meta = meta;
  };
  $hxClasses["idnet.common.InitParameters"] = idnet_common_InitParameters;
  idnet_common_InitParameters.__name__ = ["idnet", "common", "InitParameters"];
  idnet_common_InitParameters.prototype = {
    appId: null,
    status: null,
    responseType: null,
    redirectUri: null,
    channelUrl: null,
    meta: null,
    serialize: function () {
      var serialized = {
        appId: this.appId,
        status: this.status,
        responseType: this.responseType,
        redirectUri: this.redirectUri,
      };
      if (this.channelUrl != null) {
        serialized.channelUrl = this.channelUrl;
      }
      if (this.meta != null) {
        serialized.meta = this.meta;
      }
      return serialized;
    },
    __class__: idnet_common_InitParameters,
  };
  var idnet_common_events_IDNetEvent = function () {};
  $hxClasses["idnet.common.events.IDNetEvent"] = idnet_common_events_IDNetEvent;
  idnet_common_events_IDNetEvent.__name__ = [
    "idnet",
    "common",
    "events",
    "IDNetEvent",
  ];
  idnet_common_events_IDNetEvent.prototype = {
    __class__: idnet_common_events_IDNetEvent,
  };
  var openfl_events_Event = function (type, bubbles, cancelable) {
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.eventPhase = 2;
  };
  $hxClasses["openfl.events.Event"] = openfl_events_Event;
  openfl_events_Event.__name__ = ["openfl", "events", "Event"];
  openfl_events_Event.prototype = {
    bubbles: null,
    cancelable: null,
    currentTarget: null,
    eventPhase: null,
    target: null,
    type: null,
    __isCanceled: null,
    __isCanceledNow: null,
    __preventDefault: null,
    clone: function () {
      var event = new openfl_events_Event(
        this.type,
        this.bubbles,
        this.cancelable
      );
      event.eventPhase = this.eventPhase;
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      return event;
    },
    formatToString: function (className, p1, p2, p3, p4, p5) {
      var parameters = [];
      if (p1 != null) {
        parameters.push(p1);
      }
      if (p2 != null) {
        parameters.push(p2);
      }
      if (p3 != null) {
        parameters.push(p3);
      }
      if (p4 != null) {
        parameters.push(p4);
      }
      if (p5 != null) {
        parameters.push(p5);
      }
      return $bind(this, this.__formatToString).apply(this, [
        className,
        parameters,
      ]);
    },
    isDefaultPrevented: function () {
      return this.__preventDefault;
    },
    preventDefault: function () {
      if (this.cancelable) {
        this.__preventDefault = true;
      }
    },
    stopImmediatePropagation: function () {
      this.__isCanceled = true;
      this.__isCanceledNow = true;
    },
    stopPropagation: function () {
      this.__isCanceled = true;
    },
    toString: function () {
      return this.__formatToString("Event", ["type", "bubbles", "cancelable"]);
    },
    __formatToString: function (className, parameters) {
      var output = "[" + className;
      var arg = null;
      var _g = 0;
      while (_g < parameters.length) {
        var param = parameters[_g];
        ++_g;
        arg = Reflect.field(this, param);
        if (typeof arg == "string") {
          output += " " + param + '="' + Std.string(arg) + '"';
        } else {
          output += " " + param + "=" + Std.string(arg);
        }
      }
      output += "]";
      return output;
    },
    __class__: openfl_events_Event,
  };
  var idnet_common_events_PostStatusEvent = function (
    type,
    postId,
    failReason
  ) {
    this._failReason = null;
    openfl_events_Event.call(this, type);
    if (postId == null && failReason == null) {
      throw new js__$Boot_HaxeError(
        "PostStatusEvent: Either postId or failReason should be supplied"
      );
    }
    this._postId = postId;
    this._failReason = failReason;
  };
  $hxClasses["idnet.common.events.PostStatusEvent"] =
    idnet_common_events_PostStatusEvent;
  idnet_common_events_PostStatusEvent.__name__ = [
    "idnet",
    "common",
    "events",
    "PostStatusEvent",
  ];
  idnet_common_events_PostStatusEvent.__super__ = openfl_events_Event;
  idnet_common_events_PostStatusEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      _postId: null,
      get_postId: function () {
        return this._postId;
      },
      _failReason: null,
      get_failReason: function () {
        return this._failReason;
      },
      __class__: idnet_common_events_PostStatusEvent,
      __properties__: {
        get_failReason: "get_failReason",
        get_postId: "get_postId",
      },
    }
  );
  var idnet_js__$Social = function () {
    idnet_SocialBase.call(this);
    this._document = window.document;
    this._unsafeWindow = this._document.defaultView;
  };
  $hxClasses["idnet.js._Social"] = idnet_js__$Social;
  idnet_js__$Social.__name__ = ["idnet", "js", "_Social"];
  idnet_js__$Social.__super__ = idnet_SocialBase;
  idnet_js__$Social.prototype = $extend(idnet_SocialBase.prototype, {
    _document: null,
    _unsafeWindow: null,
    init: function () {
      if (this._document.getElementById("id-jssdk") != null) {
        throw new js__$Boot_HaxeError("Error: Double id.net initialization");
      }
      var idnetSDKloader = this._document.createElement("script");
      idnetSDKloader.id = "id-jssdk";
      idnetSDKloader.src =
        this._document.location.protocol == "https:"
          ? "https://scdn.id.net/api/sdk.js"
          : "http://cdn.id.net/api/sdk.js";
      this._document.head.appendChild(idnetSDKloader);
      this._unsafeWindow.idAsyncInit = $bind(this, this.asyncInit);
    },
    register: function () {
      this._unsafeWindow.ID.register($bind(this, this.registerCallback));
    },
    loginPopup: function () {
      this._unsafeWindow.ID.login($bind(this, this.registerCallback));
    },
    postToFeed: function (params) {
      if (!this.authorized) {
        this.d.dispatchPostStatus("feed.post.fail", null, "not.authorized");
        return;
      }
      this._unsafeWindow.ID.ui(
        params.serialize(),
        $bind(this, this.feedPostCallback)
      );
    },
    asyncInit: function () {
      this._unsafeWindow.ID.Event.subscribe(
        "id.init",
        $bind(this, this.onIDInitializeComplete)
      );
      this._unsafeWindow.ID.Event.subscribe(
        "id.init.fail",
        $bind(this, this.onIDInitializeFailed)
      );
      this._unsafeWindow.ID.Event.subscribe(
        "auth.fail",
        $bind(this, this.onIDInitializeFailed)
      );
      this._unsafeWindow.ID.init({ appId: this.params.appId });
    },
    registerCallback: function (response) {
      if (
        response != null &&
        response.authResponse != null &&
        response.authResponse.details != null
      ) {
        haxe_Log.trace(response.authResponse.details.nickname, {
          fileName: "_Social.hx",
          lineNumber: 122,
          className: "idnet.js._Social",
          methodName: "registerCallback",
        });
        idnet_Social
          .get_i()
          .set_username(response.authResponse.details.nickname);
      }
      if (response == null) {
        this.d.dispatch("auth.fail");
      } else {
        Y8Api.isLogin = true;
        Y8Api.nickname = response.authResponse.details.nickname;
        DataSave.loadAchievements();
        this.d.dispatch("auth.complete");
      }
    },
    feedPostCallback: function (response) {
      if (response == null || response.post_id == null) {
        this.d.dispatchPostStatus("feed.post.fail", null, "unknown");
        this._document.defaultView.alert("post failed");
      } else {
        this.d.dispatchPostStatus("feed.post.success", response.post_id);
        this._document.defaultView.alert(
          "successfully posted. check your feed."
        );
      }
    },
    onIDInitializeComplete: function () {
      haxe_Log.trace("ID.initialize_complete", {
        fileName: "_Social.hx",
        lineNumber: 160,
        className: "idnet.js._Social",
        methodName: "onIDInitializeComplete",
      });
      Y8Api.isConnect = true;
      idnet_js__$Social._ID = this._unsafeWindow.ID;
      this._unsafeWindow.ID.GameAPI.init(
        this.params.appId,
        null,
        function (data, response) {
          haxe_Log.trace("GameAPI.initialize_complete, data: " + data, {
            fileName: "_Social.hx",
            lineNumber: 166,
            className: "idnet.js._Social",
            methodName: "onIDInitializeComplete",
          });
        }
      );
      this._unsafeWindow.window.idnet_autologin = function (response1) {};
      Y8Api.checkAutoLogin();
      Y8Api.checkProtection();
      var autologinElement = this._document.createElement("script");
      autologinElement.src =
        "https://www.id.net/api/user_data/autologin?app_id=" +
        this.params.appId +
        "&callback=window.idnet_autologin";
      this._document.head.appendChild(autologinElement);
      this.d.dispatch("id.init");
    },
    onIDInitializeFailed: function () {
      Setting.isIDNET = false;
      Global.log("ID.initializeFailed");
      this.d.dispatch("id.init.fail");
    },
    setUseLocalStorage: function (value) {
      if (value == null) {
        value = false;
      }
    },
    showLeaderBoard: function (
      table,
      highest,
      allowDuplicates,
      useMilliseconds
    ) {
      if (useMilliseconds == null) {
        useMilliseconds = false;
      }
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
      var tableData = {
        table: table,
        highest: highest,
        allowDuplicates: allowDuplicates,
        useMilliseconds: useMilliseconds,
      };
      this._unsafeWindow.ID.GameAPI.Leaderboards.list(tableData);
    },
    submitScore: function (table, score, playerName, highest, allowDuplicates) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (highest == null) {
        highest = true;
      }
      var scoreData = {
        table: table,
        points: score,
        playerName: playerName,
        highest: highest,
        allowDuplicates: allowDuplicates,
      };
      this._unsafeWindow.ID.GameAPI.Leaderboards.save(
        scoreData,
        $bind(this, this.onSubmitScoresCallback)
      );
    },
    onSubmitScoresCallback: function (aData) {
      this.d.dispatch("achievement.score_sended");
    },
    setSaveData: function (field, myValue) {
      haxe_Log.trace("[j] seSaveData: " + field + ": " + Std.string(myValue), {
        fileName: "_Social.hx",
        lineNumber: 286,
        className: "idnet.js._Social",
        methodName: "setSaveData",
      });
      this._unsafeWindow.ID.api(
        "user_data/submit",
        "POST",
        { key: field, value: myValue },
        function (response) {
          haxe_Log.trace(response, {
            fileName: "_Social.hx",
            lineNumber: 289,
            className: "idnet.js._Social",
            methodName: "setSaveData",
          });
        }
      );
    },
    getSaveData: function (field, callback) {
      haxe_Log.trace("[j] getSaveData: " + field, {
        fileName: "_Social.hx",
        lineNumber: 294,
        className: "idnet.js._Social",
        methodName: "getSaveData",
      });
      this._unsafeWindow.ID.api(
        "user_data/retrieve",
        "POST",
        { key: field },
        callback
      );
    },
    clearSaveData: function (field) {
      haxe_Log.trace("[j] clearSaveData: " + field, {
        fileName: "_Social.hx",
        lineNumber: 300,
        className: "idnet.js._Social",
        methodName: "clearSaveData",
      });
      this._unsafeWindow.ID.api(
        "user_data/remove",
        "POST",
        { key: field },
        function (response) {
          haxe_Log.trace(response, {
            fileName: "_Social.hx",
            lineNumber: 303,
            className: "idnet.js._Social",
            methodName: "clearSaveData",
          });
        }
      );
    },
    achievementsSave: function (
      achName,
      achKey,
      playerName,
      overwrite,
      allowDuplicates
    ) {
      if (allowDuplicates == null) {
        allowDuplicates = false;
      }
      if (overwrite == null) {
        overwrite = false;
      }
      var achievement = {
        achievement: achName,
        achievementkey: achKey,
        playerName: playerName,
        overwrite: overwrite,
        allowDuplicates: allowDuplicates,
      };
      this._unsafeWindow.ID.GameAPI.Achievements.save(
        achievement,
        $bind(this, this.achievementsSaveCallback)
      );
    },
    achievementsList: function () {
      this._unsafeWindow.ID.GameAPI.Achievements.list();
    },
    achievementsSaveCallback: function () {
      this.d.dispatch("achievement.unlocked");
    },
    __class__: idnet_js__$Social,
  });
  var js__$Boot_HaxeError = function (val) {
    Error.call(this);
    this.val = val;
    this.message = String(val);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, js__$Boot_HaxeError);
    }
  };
  $hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
  js__$Boot_HaxeError.__name__ = ["js", "_Boot", "HaxeError"];
  js__$Boot_HaxeError.wrap = function (val) {
    if (val instanceof Error) {
      return val;
    } else {
      return new js__$Boot_HaxeError(val);
    }
  };
  js__$Boot_HaxeError.__super__ = Error;
  js__$Boot_HaxeError.prototype = $extend(Error.prototype, {
    val: null,
    __class__: js__$Boot_HaxeError,
  });
  var js_Boot = function () {};
  $hxClasses["js.Boot"] = js_Boot;
  js_Boot.__name__ = ["js", "Boot"];
  js_Boot.__unhtml = function (s) {
    return s
      .split("&")
      .join("&amp;")
      .split("<")
      .join("&lt;")
      .split(">")
      .join("&gt;");
  };
  js_Boot.__trace = function (v, i) {
    var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
    msg += js_Boot.__string_rec(v, "");
    if (i != null && i.customParams != null) {
      var _g = 0;
      var _g1 = i.customParams;
      while (_g < _g1.length) {
        var v1 = _g1[_g];
        ++_g;
        msg += "," + js_Boot.__string_rec(v1, "");
      }
    }
    var d;
    var tmp;
    if (typeof document != "undefined") {
      d = document.getElementById("haxe:trace");
      tmp = d != null;
    } else {
      tmp = false;
    }
    if (tmp) {
      d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
    } else if (typeof console != "undefined" && console.log != null) {
      console.log(msg);
    }
  };
  js_Boot.getClass = function (o) {
    if (o instanceof Array && o.__enum__ == null) {
      return Array;
    } else {
      var cl = o.__class__;
      if (cl != null) {
        return cl;
      }
      var name = js_Boot.__nativeClassName(o);
      if (name != null) {
        return js_Boot.__resolveNativeClass(name);
      }
      return null;
    }
  };
  js_Boot.__string_rec = function (o, s) {
    if (o == null) {
      return "null";
    }
    if (s.length >= 5) {
      return "<...>";
    }
    var t = typeof o;
    if (t == "function" && (o.__name__ || o.__ename__)) {
      t = "object";
    }
    switch (t) {
      case "function":
        return "<function>";
      case "object":
        if (o instanceof Array) {
          if (o.__enum__) {
            if (o.length == 2) {
              return o[0];
            }
            var str = o[0] + "(";
            s += "\t";
            var _g1 = 2;
            var _g = o.length;
            while (_g1 < _g) {
              var i = _g1++;
              if (i != 2) {
                str += "," + js_Boot.__string_rec(o[i], s);
              } else {
                str += js_Boot.__string_rec(o[i], s);
              }
            }
            return str + ")";
          }
          var l = o.length;
          var i1;
          var str1 = "[";
          s += "\t";
          var _g11 = 0;
          var _g2 = l;
          while (_g11 < _g2) {
            var i2 = _g11++;
            str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2], s);
          }
          str1 += "]";
          return str1;
        }
        var tostr;
        try {
          tostr = o.toString;
        } catch (e) {
          haxe_CallStack.lastException = e;
          return "???";
        }
        if (
          tostr != null &&
          tostr != Object.toString &&
          typeof tostr == "function"
        ) {
          var s2 = o.toString();
          if (s2 != "[object Object]") {
            return s2;
          }
        }
        var k = null;
        var str2 = "{\n";
        s += "\t";
        var hasp = o.hasOwnProperty != null;
        for (var k in o) {
          if (hasp && !o.hasOwnProperty(k)) {
            continue;
          }
          if (
            k == "prototype" ||
            k == "__class__" ||
            k == "__super__" ||
            k == "__interfaces__" ||
            k == "__properties__"
          ) {
            continue;
          }
          if (str2.length != 2) {
            str2 += ", \n";
          }
          str2 += s + k + " : " + js_Boot.__string_rec(o[k], s);
        }
        s = s.substring(1);
        str2 += "\n" + s + "}";
        return str2;
      case "string":
        return o;
      default:
        return String(o);
    }
  };
  js_Boot.__interfLoop = function (cc, cl) {
    if (cc == null) {
      return false;
    }
    if (cc == cl) {
      return true;
    }
    var intf = cc.__interfaces__;
    if (intf != null) {
      var _g1 = 0;
      var _g = intf.length;
      while (_g1 < _g) {
        var i = _g1++;
        var i1 = intf[i];
        if (i1 == cl || js_Boot.__interfLoop(i1, cl)) {
          return true;
        }
      }
    }
    return js_Boot.__interfLoop(cc.__super__, cl);
  };
  js_Boot.__instanceof = function (o, cl) {
    if (cl == null) {
      return false;
    }
    switch (cl) {
      case Array:
        if (o instanceof Array) {
          return o.__enum__ == null;
        } else {
          return false;
        }
        break;
      case Bool:
        return typeof o == "boolean";
      case Dynamic:
        return true;
      case Float:
        return typeof o == "number";
      case Int:
        if (typeof o == "number") {
          return (o | 0) === o;
        } else {
          return false;
        }
        break;
      case String:
        return typeof o == "string";
      default:
        if (o != null) {
          if (typeof cl == "function") {
            if (o instanceof cl) {
              return true;
            }
            if (js_Boot.__interfLoop(js_Boot.getClass(o), cl)) {
              return true;
            }
          } else if (typeof cl == "object" && js_Boot.__isNativeObj(cl)) {
            if (o instanceof cl) {
              return true;
            }
          }
        } else {
          return false;
        }
        if (cl == Class ? o.__name__ != null : false) {
          return true;
        }
        if (cl == Enum ? o.__ename__ != null : false) {
          return true;
        }
        return o.__enum__ == cl;
    }
  };
  js_Boot.__cast = function (o, t) {
    if (js_Boot.__instanceof(o, t)) {
      return o;
    } else {
      throw new js__$Boot_HaxeError(
        "Cannot cast " + Std.string(o) + " to " + Std.string(t)
      );
    }
  };
  js_Boot.__nativeClassName = function (o) {
    var name = js_Boot.__toStr.call(o).slice(8, -1);
    if (
      name == "Object" ||
      name == "Function" ||
      name == "Math" ||
      name == "JSON"
    ) {
      return null;
    }
    return name;
  };
  js_Boot.__isNativeObj = function (o) {
    return js_Boot.__nativeClassName(o) != null;
  };
  js_Boot.__resolveNativeClass = function (name) {
    return $global[name];
  };
  var js_html__$CanvasElement_CanvasUtil = function () {};
  $hxClasses["js.html._CanvasElement.CanvasUtil"] =
    js_html__$CanvasElement_CanvasUtil;
  js_html__$CanvasElement_CanvasUtil.__name__ = [
    "js",
    "html",
    "_CanvasElement",
    "CanvasUtil",
  ];
  js_html__$CanvasElement_CanvasUtil.getContextWebGL = function (
    canvas,
    attribs
  ) {
    var _g = 0;
    var _g1 = ["webgl", "experimental-webgl"];
    while (_g < _g1.length) {
      var name = _g1[_g];
      ++_g;
      var ctx = canvas.getContext(name, attribs);
      if (ctx != null) {
        return ctx;
      }
    }
    return null;
  };
  var js_html_compat_ArrayBuffer = function (a) {
    if (a instanceof Array && a.__enum__ == null) {
      this.a = a;
      this.byteLength = a.length;
    } else {
      var len = a;
      this.a = [];
      var _g1 = 0;
      var _g = len;
      while (_g1 < _g) {
        var i = _g1++;
        this.a[i] = 0;
      }
      this.byteLength = len;
    }
  };
  $hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
  js_html_compat_ArrayBuffer.__name__ = ["js", "html", "compat", "ArrayBuffer"];
  js_html_compat_ArrayBuffer.sliceImpl = function (begin, end) {
    var u = new Uint8Array(this, begin, end == null ? null : end - begin);
    var result = new ArrayBuffer(u.byteLength);
    var resultArray = new Uint8Array(result);
    resultArray.set(u);
    return result;
  };
  js_html_compat_ArrayBuffer.prototype = {
    byteLength: null,
    a: null,
    slice: function (begin, end) {
      return new js_html_compat_ArrayBuffer(this.a.slice(begin, end));
    },
    __class__: js_html_compat_ArrayBuffer,
  };
  var js_html_compat_DataView = function (buffer, byteOffset, byteLength) {
    this.buf = buffer;
    this.offset = byteOffset == null ? 0 : byteOffset;
    this.length =
      byteLength == null ? buffer.byteLength - this.offset : byteLength;
    if (
      this.offset < 0 ||
      this.length < 0 ||
      this.offset + this.length > buffer.byteLength
    ) {
      throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
    }
    this.byteLength = this.length;
    this.byteOffset = this.offset;
    this.buffer = this.buf;
  };
  $hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
  js_html_compat_DataView.__name__ = ["js", "html", "compat", "DataView"];
  js_html_compat_DataView.prototype = {
    buf: null,
    offset: null,
    length: null,
    byteLength: null,
    byteOffset: null,
    buffer: null,
    getInt8: function (byteOffset) {
      var v = this.buf.a[this.offset + byteOffset];
      if (v >= 128) {
        return v - 256;
      } else {
        return v;
      }
    },
    getUint8: function (byteOffset) {
      return this.buf.a[this.offset + byteOffset];
    },
    getInt16: function (byteOffset, littleEndian) {
      var v = this.getUint16(byteOffset, littleEndian);
      if (v >= 32768) {
        return v - 65536;
      } else {
        return v;
      }
    },
    getUint16: function (byteOffset, littleEndian) {
      if (littleEndian) {
        return (
          this.buf.a[this.offset + byteOffset] |
          (this.buf.a[this.offset + byteOffset + 1] << 8)
        );
      } else {
        return (
          (this.buf.a[this.offset + byteOffset] << 8) |
          this.buf.a[this.offset + byteOffset + 1]
        );
      }
    },
    getInt32: function (byteOffset, littleEndian) {
      var p = this.offset + byteOffset;
      var a = this.buf.a[p++];
      var b = this.buf.a[p++];
      var c = this.buf.a[p++];
      var d = this.buf.a[p++];
      if (littleEndian) {
        return a | (b << 8) | (c << 16) | (d << 24);
      } else {
        return d | (c << 8) | (b << 16) | (a << 24);
      }
    },
    getUint32: function (byteOffset, littleEndian) {
      var v = this.getInt32(byteOffset, littleEndian);
      if (v < 0) {
        return v + 4294967296;
      } else {
        return v;
      }
    },
    getFloat32: function (byteOffset, littleEndian) {
      return haxe_io_FPHelper.i32ToFloat(
        this.getInt32(byteOffset, littleEndian)
      );
    },
    getFloat64: function (byteOffset, littleEndian) {
      var a = this.getInt32(byteOffset, littleEndian);
      var b = this.getInt32(byteOffset + 4, littleEndian);
      return haxe_io_FPHelper.i64ToDouble(
        littleEndian ? a : b,
        littleEndian ? b : a
      );
    },
    setInt8: function (byteOffset, value) {
      this.buf.a[byteOffset + this.offset] =
        value < 0 ? (value + 128) & 255 : value & 255;
    },
    setUint8: function (byteOffset, value) {
      this.buf.a[byteOffset + this.offset] = value & 255;
    },
    setInt16: function (byteOffset, value, littleEndian) {
      this.setUint16(
        byteOffset,
        value < 0 ? value + 65536 : value,
        littleEndian
      );
    },
    setUint16: function (byteOffset, value, littleEndian) {
      var p = byteOffset + this.offset;
      if (littleEndian) {
        this.buf.a[p] = value & 255;
        this.buf.a[p++] = (value >> 8) & 255;
      } else {
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p] = value & 255;
      }
    },
    setInt32: function (byteOffset, value, littleEndian) {
      this.setUint32(byteOffset, value, littleEndian);
    },
    setUint32: function (byteOffset, value, littleEndian) {
      var p = byteOffset + this.offset;
      if (littleEndian) {
        this.buf.a[p++] = value & 255;
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p++] = (value >> 16) & 255;
        this.buf.a[p++] = value >>> 24;
      } else {
        this.buf.a[p++] = value >>> 24;
        this.buf.a[p++] = (value >> 16) & 255;
        this.buf.a[p++] = (value >> 8) & 255;
        this.buf.a[p++] = value & 255;
      }
    },
    setFloat32: function (byteOffset, value, littleEndian) {
      this.setUint32(
        byteOffset,
        haxe_io_FPHelper.floatToI32(value),
        littleEndian
      );
    },
    setFloat64: function (byteOffset, value, littleEndian) {
      var i64 = haxe_io_FPHelper.doubleToI64(value);
      if (littleEndian) {
        this.setUint32(byteOffset, i64.low);
        this.setUint32(byteOffset, i64.high);
      } else {
        this.setUint32(byteOffset, i64.high);
        this.setUint32(byteOffset, i64.low);
      }
    },
    __class__: js_html_compat_DataView,
  };
  var js_html_compat_Float32Array = function () {};
  $hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
  js_html_compat_Float32Array.__name__ = [
    "js",
    "html",
    "compat",
    "Float32Array",
  ];
  js_html_compat_Float32Array._new = function (arg1, offset, length) {
    var arr;
    if (typeof arg1 == "number") {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = 0;
      var _g2 = [];
      var _g21 = 0;
      var _g11 = arr.length << 2;
      while (_g21 < _g11) {
        var i1 = _g21++;
        _g2.push(0);
      }
      arr.buffer = new js_html_compat_ArrayBuffer(_g2);
    } else if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = (buffer.byteLength - offset) >> 2;
      }
      arr = [];
      var _g12 = 0;
      var _g3 = length;
      while (_g12 < _g3) {
        var i2 = _g12++;
        var val =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        arr.push(haxe_io_FPHelper.i32ToFloat(val));
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      var buffer1 = [];
      var _g4 = 0;
      while (_g4 < arr.length) {
        var f = arr[_g4];
        ++_g4;
        var i3 = haxe_io_FPHelper.floatToI32(f);
        buffer1.push(i3 & 255);
        buffer1.push((i3 >> 8) & 255);
        buffer1.push((i3 >> 16) & 255);
        buffer1.push(i3 >>> 24);
      }
      arr.byteLength = arr.length << 2;
      arr.byteOffset = 0;
      arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
    } else {
      throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
    }
    arr.subarray = js_html_compat_Float32Array._subarray;
    arr.set = js_html_compat_Float32Array._set;
    return arr;
  };
  js_html_compat_Float32Array._set = function (arg, offset) {
    if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js__$Boot_HaxeError("TODO");
    }
  };
  js_html_compat_Float32Array._subarray = function (start, end) {
    var a = js_html_compat_Float32Array._new(this.slice(start, end));
    a.byteOffset = start * 4;
    return a;
  };
  var js_html_compat_Float64Array = function () {};
  $hxClasses["js.html.compat.Float64Array"] = js_html_compat_Float64Array;
  js_html_compat_Float64Array.__name__ = [
    "js",
    "html",
    "compat",
    "Float64Array",
  ];
  js_html_compat_Float64Array._new = function (arg1, offset, length) {
    var arr;
    if (typeof arg1 == "number") {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = 0;
      var _g2 = [];
      var _g21 = 0;
      var _g11 = arr.length << 3;
      while (_g21 < _g11) {
        var i1 = _g21++;
        _g2.push(0);
      }
      arr.buffer = new js_html_compat_ArrayBuffer(_g2);
    } else if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = (buffer.byteLength - offset) >> 3;
      }
      arr = [];
      var _g12 = 0;
      var _g3 = length;
      while (_g12 < _g3) {
        var i2 = _g12++;
        var val1 =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        var val2 =
          buffer.a[offset++] |
          (buffer.a[offset++] << 8) |
          (buffer.a[offset++] << 16) |
          (buffer.a[offset++] << 24);
        arr.push(haxe_io_FPHelper.i64ToDouble(val1, val2));
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      var buffer1 = [];
      var _g4 = 0;
      while (_g4 < arr.length) {
        var f = arr[_g4];
        ++_g4;
        var v = haxe_io_FPHelper.doubleToI64(f);
        var i3 = v.low;
        buffer1.push(i3 & 255);
        buffer1.push((i3 >> 8) & 255);
        buffer1.push((i3 >> 16) & 255);
        buffer1.push(i3 >>> 24);
        var i4 = v.high;
        buffer1.push(i4 & 255);
        buffer1.push((i4 >> 8) & 255);
        buffer1.push((i4 >> 16) & 255);
        buffer1.push(i4 >>> 24);
      }
      arr.byteLength = arr.length << 3;
      arr.byteOffset = 0;
      arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
    } else {
      throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
    }
    arr.subarray = js_html_compat_Float64Array._subarray;
    arr.set = js_html_compat_Float64Array._set;
    return arr;
  };
  js_html_compat_Float64Array._set = function (arg, offset) {
    if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js__$Boot_HaxeError("TODO");
    }
  };
  js_html_compat_Float64Array._subarray = function (start, end) {
    var a = js_html_compat_Float64Array._new(this.slice(start, end));
    a.byteOffset = start * 8;
    return a;
  };
  var js_html_compat_Uint8Array = function () {};
  $hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
  js_html_compat_Uint8Array.__name__ = ["js", "html", "compat", "Uint8Array"];
  js_html_compat_Uint8Array._new = function (arg1, offset, length) {
    var arr;
    if (typeof arg1 == "number") {
      arr = [];
      var _g1 = 0;
      var _g = arg1;
      while (_g1 < _g) {
        var i = _g1++;
        arr[i] = 0;
      }
      arr.byteLength = arr.length;
      arr.byteOffset = 0;
      arr.buffer = new js_html_compat_ArrayBuffer(arr);
    } else if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
      var buffer = arg1;
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = buffer.byteLength - offset;
      }
      if (offset == 0) {
        arr = buffer.a;
      } else {
        arr = buffer.a.slice(offset, offset + length);
      }
      arr.byteLength = arr.length;
      arr.byteOffset = offset;
      arr.buffer = buffer;
    } else if (arg1 instanceof Array && arg1.__enum__ == null) {
      arr = arg1.slice();
      arr.byteLength = arr.length;
      arr.byteOffset = 0;
      arr.buffer = new js_html_compat_ArrayBuffer(arr);
    } else {
      throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
    }
    arr.subarray = js_html_compat_Uint8Array._subarray;
    arr.set = js_html_compat_Uint8Array._set;
    return arr;
  };
  js_html_compat_Uint8Array._set = function (arg, offset) {
    if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
      var a = arg;
      if (arg.byteLength + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g1 = 0;
      var _g = arg.byteLength;
      while (_g1 < _g) {
        var i = _g1++;
        this[i + offset] = a[i];
      }
    } else if (arg instanceof Array && arg.__enum__ == null) {
      var a1 = arg;
      if (a1.length + offset > this.byteLength) {
        throw new js__$Boot_HaxeError("set() outside of range");
      }
      var _g11 = 0;
      var _g2 = a1.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        this[i1 + offset] = a1[i1];
      }
    } else {
      throw new js__$Boot_HaxeError("TODO");
    }
  };
  js_html_compat_Uint8Array._subarray = function (start, end) {
    var a = js_html_compat_Uint8Array._new(this.slice(start, end));
    a.byteOffset = start;
    return a;
  };
  var lime__$backend_html5_HTML5Application = function (parent) {
    this.gameDeviceCache = new haxe_ds_IntMap();
    this.parent = parent;
    this.currentUpdate = 0;
    this.lastUpdate = 0;
    this.nextUpdate = 0;
    this.framePeriod = -1;
    lime_media_AudioManager.init();
  };
  $hxClasses["lime._backend.html5.HTML5Application"] =
    lime__$backend_html5_HTML5Application;
  lime__$backend_html5_HTML5Application.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5Application",
  ];
  lime__$backend_html5_HTML5Application.prototype = {
    gameDeviceCache: null,
    currentUpdate: null,
    deltaTime: null,
    framePeriod: null,
    lastUpdate: null,
    nextUpdate: null,
    parent: null,
    convertKeyCode: function (keyCode) {
      if (keyCode >= 65 && keyCode <= 90) {
        return keyCode + 32;
      }
      switch (keyCode) {
        case 16:
          return 1073742049;
        case 17:
          return 1073742048;
        case 18:
          return 1073742050;
        case 20:
          return 1073741881;
        case 33:
          return 1073741899;
        case 34:
          return 1073741902;
        case 35:
          return 1073741901;
        case 36:
          return 1073741898;
        case 37:
          return 1073741904;
        case 38:
          return 1073741906;
        case 39:
          return 1073741903;
        case 40:
          return 1073741905;
        case 45:
          return 1073741897;
        case 46:
          return 127;
        case 96:
          return 1073741922;
        case 97:
          return 1073741913;
        case 98:
          return 1073741914;
        case 99:
          return 1073741915;
        case 100:
          return 1073741916;
        case 101:
          return 1073741917;
        case 102:
          return 1073741918;
        case 103:
          return 1073741919;
        case 104:
          return 1073741920;
        case 105:
          return 1073741921;
        case 106:
          return 1073741909;
        case 107:
          return 1073741911;
        case 109:
          return 1073741910;
        case 110:
          return 1073741923;
        case 111:
          return 1073741908;
        case 112:
          return 1073741882;
        case 113:
          return 1073741883;
        case 114:
          return 1073741884;
        case 115:
          return 1073741885;
        case 116:
          return 1073741886;
        case 117:
          return 1073741887;
        case 118:
          return 1073741888;
        case 119:
          return 1073741889;
        case 120:
          return 1073741890;
        case 121:
          return 1073741891;
        case 122:
          return 1073741892;
        case 123:
          return 1073741893;
        case 124:
          return 1073741928;
        case 125:
          return 1073741929;
        case 126:
          return 1073741930;
        case 144:
          return 1073741907;
        case 186:
          return 59;
        case 187:
          return 61;
        case 188:
          return 44;
        case 189:
          return 45;
        case 190:
          return 46;
        case 191:
          return 47;
        case 192:
          return 96;
        case 219:
          return 91;
        case 220:
          return 92;
        case 221:
          return 93;
        case 222:
          return 39;
      }
      return keyCode;
    },
    create: function (config) {},
    exec: function () {
      window.addEventListener(
        "keydown",
        $bind(this, this.handleKeyEvent),
        false
      );
      window.addEventListener("keyup", $bind(this, this.handleKeyEvent), false);
      window.addEventListener(
        "focus",
        $bind(this, this.handleWindowEvent),
        false
      );
      window.addEventListener(
        "blur",
        $bind(this, this.handleWindowEvent),
        false
      );
      window.addEventListener(
        "resize",
        $bind(this, this.handleWindowEvent),
        false
      );
      window.addEventListener(
        "beforeunload",
        $bind(this, this.handleWindowEvent),
        false
      );

      if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
        CanvasRenderingContext2D.prototype.isPointInStroke = function (
          path,
          x,
          y
        ) {
          return false;
        };
      }
      if (!CanvasRenderingContext2D.prototype.isPointInPath) {
        CanvasRenderingContext2D.prototype.isPointInPath = function (
          path,
          x,
          y
        ) {
          return false;
        };
      }

      var lastTime = 0;
      var vendors = ["ms", "moz", "webkit", "o"];
      for (
        var x = 0;
        x < vendors.length && !window.requestAnimationFrame;
        ++x
      ) {
        window.requestAnimationFrame =
          window[vendors[x] + "RequestAnimationFrame"];
        window.cancelAnimationFrame =
          window[vendors[x] + "CancelAnimationFrame"] ||
          window[vendors[x] + "CancelRequestAnimationFrame"];
      }

      if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function (callback, element) {
          var currTime = new Date().getTime();
          var timeToCall = Math.max(0, 16 - (currTime - lastTime));
          var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
          }, timeToCall);
          lastTime = currTime + timeToCall;
          return id;
        };

      if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function (id) {
          clearTimeout(id);
        };

      window.requestAnimFrame = window.requestAnimationFrame;
      this.lastUpdate = new Date().getTime();
      this.handleApplicationEvent();
      return 0;
    },
    exit: function () {},
    getFrameRate: function () {
      if (this.framePeriod < 0) {
        return 60;
      } else if (this.framePeriod == 1000) {
        return 0;
      } else {
        return 1000 / this.framePeriod;
      }
    },
    handleApplicationEvent: function (__) {
      if (this.parent.__windows[0] != null) {
        this.parent.__windows[0].backend.updateSize();
      }
      this.updateGameDevices();
      this.currentUpdate = new Date().getTime();
      if (this.currentUpdate >= this.nextUpdate) {
        this.deltaTime = this.currentUpdate - this.lastUpdate;
        this.parent.onUpdate.dispatch(this.deltaTime | 0);
        if (
          this.parent.__renderers[0] != null &&
          this.parent.__renderers[0].context != null
        ) {
          this.parent.__renderers[0].render();
          this.parent.__renderers[0].onRender.dispatch();
          this.parent.__renderers[0].flip();
        }
        if (this.framePeriod < 0) {
          this.nextUpdate = this.currentUpdate;
          this.nextUpdate = this.currentUpdate;
        } else {
          this.nextUpdate = this.currentUpdate + this.framePeriod;
        }
        this.lastUpdate = this.currentUpdate;
      }
      window.requestAnimationFrame($bind(this, this.handleApplicationEvent));
    },
    handleKeyEvent: function (event) {
      if (this.parent.__windows[0] != null) {
        var keyCode = this.convertKeyCode(
          event.keyCode != null ? event.keyCode : event.which
        );
        var modifier =
          (event.shiftKey ? 3 : 0) |
          (event.ctrlKey ? 192 : 0) |
          (event.altKey ? 768 : 0) |
          (event.metaKey ? 3072 : 0);
        if (event.type == "keydown") {
          this.parent.__windows[0].onKeyDown.dispatch(keyCode, modifier);
          if (this.parent.__windows[0].onKeyDown.canceled) {
            event.preventDefault();
          }
        } else {
          this.parent.__windows[0].onKeyUp.dispatch(keyCode, modifier);
          if (this.parent.__windows[0].onKeyUp.canceled) {
            event.preventDefault();
          }
        }
      }
    },
    handleWindowEvent: function (event) {
      if (this.parent.__windows[0] != null) {
        var _g = event.type;
        switch (_g) {
          case "beforeunload":
            this.parent.__windows[0].onClose.dispatch();
            break;
          case "blur":
            this.parent.__windows[0].onFocusOut.dispatch();
            this.parent.__windows[0].onDeactivate.dispatch();
            break;
          case "focus":
            this.parent.__windows[0].onFocusIn.dispatch();
            this.parent.__windows[0].onActivate.dispatch();
            break;
          case "resize":
            this.parent.__windows[0].backend.handleResizeEvent(event);
            break;
        }
      }
    },
    setFrameRate: function (value) {
      if (value >= 60) {
        this.framePeriod = -1;
      } else if (value > 0) {
        this.framePeriod = 1000 / value;
      } else {
        this.framePeriod = 1000;
      }
      return value;
    },
    updateGameDevices: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      if (devices == null) {
        return;
      }
      var id;
      var gamepad;
      var joystick;
      var data;
      var cache;
      var _g1 = 0;
      var _g = devices.length;
      while (_g1 < _g) {
        var i = _g1++;
        id = i;
        data = devices[id];
        if (data == null) {
          continue;
        }
        if (!this.gameDeviceCache.h.hasOwnProperty(id)) {
          cache = new lime__$backend_html5_GameDeviceData();
          cache.id = id;
          cache.connected = data.connected;
          var _g3 = 0;
          var _g2 = data.buttons.length;
          while (_g3 < _g2) {
            var i1 = _g3++;
            cache.buttons.push(data.buttons[i1].value);
          }
          var _g31 = 0;
          var _g21 = data.axes.length;
          while (_g31 < _g21) {
            var i2 = _g31++;
            cache.axes.push(data.axes[i2]);
          }
          if (data.mapping == "standard") {
            cache.isGamepad = true;
          }
          this.gameDeviceCache.h[id] = cache;
          if (data.connected) {
            lime_ui_Joystick.__connect(id);
            if (cache.isGamepad) {
              lime_ui_Gamepad.__connect(id);
            }
          }
        }
        cache = this.gameDeviceCache.h[id];
        joystick = lime_ui_Joystick.devices.h[id];
        gamepad = lime_ui_Gamepad.devices.h[id];
        if (data.connected) {
          var button;
          var value;
          var _g32 = 0;
          var _g22 = data.buttons.length;
          while (_g32 < _g22) {
            var i3 = _g32++;
            value = data.buttons[i3].value;
            if (value != cache.buttons[i3]) {
              if (i3 == 6) {
                joystick.onAxisMove.dispatch(data.axes.length, value);
                if (gamepad != null) {
                  gamepad.onAxisMove.dispatch(4, value);
                }
              } else if (i3 == 7) {
                joystick.onAxisMove.dispatch(data.axes.length + 1, value);
                if (gamepad != null) {
                  gamepad.onAxisMove.dispatch(5, value);
                }
              } else {
                if (value > 0) {
                  joystick.onButtonDown.dispatch(i3);
                } else {
                  joystick.onButtonUp.dispatch(i3);
                }
                if (gamepad != null) {
                  switch (i3) {
                    case 0:
                      button = 0;
                      break;
                    case 1:
                      button = 1;
                      break;
                    case 2:
                      button = 2;
                      break;
                    case 3:
                      button = 3;
                      break;
                    case 4:
                      button = 9;
                      break;
                    case 5:
                      button = 10;
                      break;
                    case 8:
                      button = 4;
                      break;
                    case 9:
                      button = 6;
                      break;
                    case 10:
                      button = 7;
                      break;
                    case 11:
                      button = 8;
                      break;
                    case 12:
                      button = 11;
                      break;
                    case 13:
                      button = 12;
                      break;
                    case 14:
                      button = 13;
                      break;
                    case 15:
                      button = 14;
                      break;
                    case 16:
                      button = 5;
                      break;
                    default:
                      continue;
                  }
                  if (value > 0) {
                    gamepad.onButtonDown.dispatch(button);
                  } else {
                    gamepad.onButtonUp.dispatch(button);
                  }
                }
              }
              cache.buttons[i3] = value;
            }
          }
          var _g33 = 0;
          var _g23 = data.axes.length;
          while (_g33 < _g23) {
            var i4 = _g33++;
            if (data.axes[i4] != cache.axes[i4]) {
              joystick.onAxisMove.dispatch(i4, data.axes[i4]);
              if (gamepad != null) {
                gamepad.onAxisMove.dispatch(i4, data.axes[i4]);
              }
              cache.axes[i4] = data.axes[i4];
            }
          }
        } else if (cache.connected) {
          cache.connected = false;
          lime_ui_Joystick.__disconnect(id);
          lime_ui_Gamepad.__disconnect(id);
        }
      }
    },
    __class__: lime__$backend_html5_HTML5Application,
  };
  var lime__$backend_html5_GameDeviceData = function () {
    this.connected = true;
    this.buttons = [];
    this.axes = [];
  };
  $hxClasses["lime._backend.html5.GameDeviceData"] =
    lime__$backend_html5_GameDeviceData;
  lime__$backend_html5_GameDeviceData.__name__ = [
    "lime",
    "_backend",
    "html5",
    "GameDeviceData",
  ];
  lime__$backend_html5_GameDeviceData.prototype = {
    connected: null,
    id: null,
    isGamepad: null,
    buttons: null,
    axes: null,
    __class__: lime__$backend_html5_GameDeviceData,
  };
  var lime__$backend_html5_HTML5AudioSource = function (parent) {
    this.parent = parent;
    this.id = -1;
    this.gain = 1;
    this.position = new lime_math_Vector4();
  };
  $hxClasses["lime._backend.html5.HTML5AudioSource"] =
    lime__$backend_html5_HTML5AudioSource;
  lime__$backend_html5_HTML5AudioSource.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5AudioSource",
  ];
  lime__$backend_html5_HTML5AudioSource.prototype = {
    completed: null,
    gain: null,
    id: null,
    length: null,
    loops: null,
    parent: null,
    playing: null,
    position: null,
    dispose: function () {},
    init: function () {},
    play: function () {
      if (this.playing || this.parent.buffer == null) {
        return;
      }
      this.playing = true;
      var time = this.getCurrentTime();
      this.completed = false;
      var cacheVolume = this.parent.buffer.__srcHowl._volume;
      this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
      this.id = this.parent.buffer.__srcHowl.play();
      this.parent.buffer.__srcHowl._volume = cacheVolume;
      this.setPosition(this.parent.get_position());
      this.parent.buffer.__srcHowl.on(
        "end",
        $bind(this, this.howl_onEnd),
        this.id
      );
      this.setCurrentTime(time);
    },
    pause: function () {
      this.playing = false;
      this.parent.buffer.__srcHowl.pause(this.id);
    },
    stop: function () {
      this.playing = false;
      this.parent.buffer.__srcHowl.stop(this.id);
    },
    howl_onEnd: function () {
      this.playing = false;
      if (this.loops > 0) {
        this.loops--;
        this.stop();
        this.play();
        return;
      } else {
        this.parent.buffer.__srcHowl.stop(this.id);
      }
      this.completed = true;
      this.parent.onComplete.dispatch();
    },
    getCurrentTime: function () {
      if (this.id == -1) {
        return 0;
      }
      if (this.completed) {
        return this.getLength();
      } else {
        var time =
          ((this.parent.buffer.__srcHowl.seek(this.id) * 1000) | 0) -
          this.parent.offset;
        if (time < 0) {
          return 0;
        }
        return time;
      }
    },
    setCurrentTime: function (value) {
      if (this.parent.buffer != null) {
        var pos = (value + this.parent.offset) / 1000;
        if (pos < 0) {
          pos = 0;
        }
        this.parent.buffer.__srcHowl.seek(pos, this.id);
      }
      return value;
    },
    getGain: function () {
      return this.gain;
    },
    setGain: function (value) {
      if (this.parent.buffer != null) {
        this.parent.buffer.__srcHowl.volume(value, this.id);
      }
      return (this.gain = value);
    },
    getLength: function () {
      if (this.length != 0) {
        return this.length;
      }
      return (this.parent.buffer.__srcHowl.duration() * 1000) | 0;
    },
    setLength: function (value) {
      return (this.length = value);
    },
    getLoops: function () {
      return this.loops;
    },
    setLoops: function (value) {
      return (this.loops = value);
    },
    getPosition: function () {
      return this.position;
    },
    setPosition: function (value) {
      this.position.x = value.x;
      this.position.y = value.y;
      this.position.z = value.z;
      this.position.w = value.w;
      return this.position;
    },
    __class__: lime__$backend_html5_HTML5AudioSource,
  };
  var lime__$backend_html5_HTML5GLRenderContext = function (context) {
    this.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
    this.TIMEOUT_IGNORED = -1;
    this.INVALID_INDEX = -1;
    this.DEPTH32F_STENCIL8 = 36013;
    this.DEPTH_COMPONENT32F = 36012;
    this.DYNAMIC_COPY = 35050;
    this.DYNAMIC_READ = 35049;
    this.STATIC_COPY = 35046;
    this.STATIC_READ = 35045;
    this.STREAM_COPY = 35042;
    this.STREAM_READ = 35041;
    this.DEPTH_COMPONENT24 = 33190;
    this.MAX = 32776;
    this.MIN = 32775;
    this.STENCIL = 6146;
    this.DEPTH = 6145;
    this.COLOR = 6144;
    this.SYNC_FLUSH_COMMANDS_BIT = 1;
    this.WAIT_FAILED = 37149;
    this.CONDITION_SATISFIED = 37148;
    this.TIMEOUT_EXPIRED = 37147;
    this.ALREADY_SIGNALED = 37146;
    this.SIGNALED = 37145;
    this.UNSIGNALED = 37144;
    this.SYNC_GPU_COMMANDS_COMPLETE = 37143;
    this.SYNC_FENCE = 37142;
    this.SYNC_FLAGS = 37141;
    this.SYNC_STATUS = 37140;
    this.SYNC_CONDITION = 37139;
    this.OBJECT_TYPE = 37138;
    this.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
    this.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
    this.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
    this.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
    this.UNIFORM_BLOCK_DATA_SIZE = 35392;
    this.UNIFORM_BLOCK_BINDING = 35391;
    this.UNIFORM_IS_ROW_MAJOR = 35390;
    this.UNIFORM_MATRIX_STRIDE = 35389;
    this.UNIFORM_ARRAY_STRIDE = 35388;
    this.UNIFORM_OFFSET = 35387;
    this.UNIFORM_BLOCK_INDEX = 35386;
    this.UNIFORM_SIZE = 35384;
    this.UNIFORM_TYPE = 35383;
    this.ACTIVE_UNIFORM_BLOCKS = 35382;
    this.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
    this.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
    this.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
    this.MAX_UNIFORM_BLOCK_SIZE = 35376;
    this.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
    this.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
    this.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
    this.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
    this.UNIFORM_BUFFER_SIZE = 35370;
    this.UNIFORM_BUFFER_START = 35369;
    this.UNIFORM_BUFFER_BINDING = 35368;
    this.UNIFORM_BUFFER = 35345;
    this.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
    this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
    this.RENDERBUFFER_SAMPLES = 36011;
    this.READ_FRAMEBUFFER_BINDING = 36010;
    this.DRAW_FRAMEBUFFER = 36009;
    this.READ_FRAMEBUFFER = 36008;
    this.DRAW_FRAMEBUFFER_BINDING = 36006;
    this.DEPTH24_STENCIL8 = 35056;
    this.FRAMEBUFFER_DEFAULT = 33304;
    this.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
    this.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
    this.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
    this.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
    this.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
    this.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
    this.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
    this.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
    this.TRANSFORM_FEEDBACK_BINDING = 36389;
    this.TRANSFORM_FEEDBACK_ACTIVE = 36388;
    this.TRANSFORM_FEEDBACK_PAUSED = 36387;
    this.TRANSFORM_FEEDBACK = 36386;
    this.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
    this.TRANSFORM_FEEDBACK_BUFFER = 35982;
    this.SEPARATE_ATTRIBS = 35981;
    this.INTERLEAVED_ATTRIBS = 35980;
    this.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
    this.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
    this.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
    this.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
    this.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
    this.TRANSFORM_FEEDBACK_VARYINGS = 35971;
    this.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
    this.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
    this.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
    this.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
    this.SIGNED_NORMALIZED = 36764;
    this.UNSIGNED_NORMALIZED = 35863;
    this.UNSIGNED_INT_VEC4 = 36296;
    this.UNSIGNED_INT_VEC3 = 36295;
    this.UNSIGNED_INT_VEC2 = 36294;
    this.FLOAT_MAT4x3 = 35690;
    this.FLOAT_MAT4x2 = 35689;
    this.FLOAT_MAT3x4 = 35688;
    this.FLOAT_MAT3x2 = 35687;
    this.FLOAT_MAT2x4 = 35686;
    this.FLOAT_MAT2x3 = 35685;
    this.COPY_WRITE_BUFFER_BINDING = 36663;
    this.COPY_READ_BUFFER_BINDING = 36662;
    this.COPY_WRITE_BUFFER = 36663;
    this.COPY_READ_BUFFER = 36662;
    this.PIXEL_UNPACK_BUFFER_BINDING = 35055;
    this.PIXEL_PACK_BUFFER_BINDING = 35053;
    this.PIXEL_UNPACK_BUFFER = 35052;
    this.PIXEL_PACK_BUFFER = 35051;
    this.SAMPLER_BINDING = 35097;
    this.MAX_SAMPLES = 36183;
    this.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
    this.UNSIGNED_INT_SAMPLER_CUBE = 36308;
    this.UNSIGNED_INT_SAMPLER_3D = 36307;
    this.UNSIGNED_INT_SAMPLER_2D = 36306;
    this.INT_SAMPLER_2D_ARRAY = 36303;
    this.INT_SAMPLER_CUBE = 36300;
    this.INT_SAMPLER_3D = 36299;
    this.INT_SAMPLER_2D = 36298;
    this.SAMPLER_CUBE_SHADOW = 36293;
    this.SAMPLER_2D_ARRAY_SHADOW = 36292;
    this.SAMPLER_2D_ARRAY = 36289;
    this.SAMPLER_2D_SHADOW = 35682;
    this.SAMPLER_3D = 35679;
    this.COLOR_ATTACHMENT15 = 36079;
    this.COLOR_ATTACHMENT14 = 36078;
    this.COLOR_ATTACHMENT13 = 36077;
    this.COLOR_ATTACHMENT12 = 36076;
    this.COLOR_ATTACHMENT11 = 36075;
    this.COLOR_ATTACHMENT10 = 36074;
    this.COLOR_ATTACHMENT9 = 36073;
    this.COLOR_ATTACHMENT8 = 36072;
    this.COLOR_ATTACHMENT7 = 36071;
    this.COLOR_ATTACHMENT6 = 36070;
    this.COLOR_ATTACHMENT5 = 36069;
    this.COLOR_ATTACHMENT4 = 36068;
    this.COLOR_ATTACHMENT3 = 36067;
    this.COLOR_ATTACHMENT2 = 36066;
    this.COLOR_ATTACHMENT1 = 36065;
    this.MAX_COLOR_ATTACHMENTS = 36063;
    this.DRAW_BUFFER15 = 34868;
    this.DRAW_BUFFER14 = 34867;
    this.DRAW_BUFFER13 = 34866;
    this.DRAW_BUFFER12 = 34865;
    this.DRAW_BUFFER11 = 34864;
    this.DRAW_BUFFER10 = 34863;
    this.DRAW_BUFFER9 = 34862;
    this.DRAW_BUFFER8 = 34861;
    this.DRAW_BUFFER7 = 34860;
    this.DRAW_BUFFER6 = 34859;
    this.DRAW_BUFFER5 = 34858;
    this.DRAW_BUFFER4 = 34857;
    this.DRAW_BUFFER3 = 34856;
    this.DRAW_BUFFER2 = 34855;
    this.DRAW_BUFFER1 = 34854;
    this.DRAW_BUFFER0 = 34853;
    this.MAX_DRAW_BUFFERS = 34852;
    this.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
    this.ANY_SAMPLES_PASSED = 35887;
    this.QUERY_RESULT_AVAILABLE = 34919;
    this.QUERY_RESULT = 34918;
    this.CURRENT_QUERY = 34917;
    this.INT_2_10_10_10_REV = 36255;
    this.RG_INTEGER = 33320;
    this.RG = 33319;
    this.HALF_FLOAT = 5131;
    this.UNSIGNED_INT_24_8 = 34042;
    this.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
    this.UNSIGNED_INT_5_9_9_9_REV = 35902;
    this.UNSIGNED_INT_10F_11F_11F_REV = 35899;
    this.UNSIGNED_INT_2_10_10_10_REV = 33640;
    this.TEXTURE_IMMUTABLE_LEVELS = 33503;
    this.TEXTURE_IMMUTABLE_FORMAT = 37167;
    this.RGB10_A2UI = 36975;
    this.RGBA8_SNORM = 36759;
    this.RGB8_SNORM = 36758;
    this.RG8_SNORM = 36757;
    this.R8_SNORM = 36756;
    this.RG32UI = 33340;
    this.RG32I = 33339;
    this.RG16UI = 33338;
    this.RG16I = 33337;
    this.RG8UI = 33336;
    this.RG8I = 33335;
    this.R32UI = 33334;
    this.R32I = 33333;
    this.R16UI = 33332;
    this.R16I = 33331;
    this.R8UI = 33330;
    this.R8I = 33329;
    this.RG32F = 33328;
    this.RG16F = 33327;
    this.R32F = 33326;
    this.R16F = 33325;
    this.RG8 = 33323;
    this.R8 = 33321;
    this.RGBA_INTEGER = 36249;
    this.RGB_INTEGER = 36248;
    this.RED_INTEGER = 36244;
    this.RGB8I = 36239;
    this.RGBA8I = 36238;
    this.RGB16I = 36233;
    this.RGBA16I = 36232;
    this.RGB32I = 36227;
    this.RGBA32I = 36226;
    this.RGB8UI = 36221;
    this.RGBA8UI = 36220;
    this.RGB16UI = 36215;
    this.RGBA16UI = 36214;
    this.RGB32UI = 36209;
    this.RGBA32UI = 36208;
    this.RGB9_E5 = 35901;
    this.R11F_G11F_B10F = 35898;
    this.TEXTURE_BINDING_2D_ARRAY = 35869;
    this.TEXTURE_2D_ARRAY = 35866;
    this.RGB16F = 34843;
    this.RGBA16F = 34842;
    this.RGB32F = 34837;
    this.RGBA32F = 34836;
    this.COMPARE_REF_TO_TEXTURE = 34894;
    this.SRGB8_ALPHA8 = 35907;
    this.SRGB8 = 35905;
    this.SRGB = 35904;
    this.TEXTURE_COMPARE_FUNC = 34893;
    this.TEXTURE_COMPARE_MODE = 34892;
    this.TEXTURE_MAX_LEVEL = 33085;
    this.TEXTURE_BASE_LEVEL = 33084;
    this.TEXTURE_MAX_LOD = 33083;
    this.TEXTURE_MIN_LOD = 33082;
    this.TEXTURE_WRAP_R = 32882;
    this.TEXTURE_3D = 32879;
    this.RGB10_A2 = 32857;
    this.RGBA8 = 32856;
    this.RGB8 = 32849;
    this.RED = 6403;
    this.MAX_ELEMENT_INDEX = 36203;
    this.MAX_SERVER_WAIT_TIMEOUT = 37137;
    this.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
    this.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
    this.VERTEX_ARRAY_BINDING = 34229;
    this.RASTERIZER_DISCARD = 35977;
    this.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
    this.MAX_VARYING_COMPONENTS = 35659;
    this.MAX_PROGRAM_TEXEL_OFFSET = 35077;
    this.MIN_PROGRAM_TEXEL_OFFSET = 35076;
    this.MAX_ARRAY_TEXTURE_LAYERS = 35071;
    this.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
    this.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
    this.MAX_TEXTURE_LOD_BIAS = 34045;
    this.MAX_ELEMENTS_INDICES = 33001;
    this.MAX_ELEMENTS_VERTICES = 33000;
    this.MAX_3D_TEXTURE_SIZE = 32883;
    this.UNPACK_IMAGE_HEIGHT = 32878;
    this.UNPACK_SKIP_IMAGES = 32877;
    this.TEXTURE_BINDING_3D = 32874;
    this.PACK_SKIP_PIXELS = 3332;
    this.PACK_SKIP_ROWS = 3331;
    this.PACK_ROW_LENGTH = 3330;
    this.UNPACK_SKIP_PIXELS = 3316;
    this.UNPACK_SKIP_ROWS = 3315;
    this.UNPACK_ROW_LENGTH = 3314;
    this.READ_BUFFER = 3074;
    this.BROWSER_DEFAULT_WEBGL = 37444;
    this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
    this.CONTEXT_LOST_WEBGL = 37442;
    this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
    this.UNPACK_FLIP_Y_WEBGL = 37440;
    this.INVALID_FRAMEBUFFER_OPERATION = 1286;
    this.MAX_RENDERBUFFER_SIZE = 34024;
    this.RENDERBUFFER_BINDING = 36007;
    this.FRAMEBUFFER_BINDING = 36006;
    this.FRAMEBUFFER_UNSUPPORTED = 36061;
    this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
    this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
    this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
    this.FRAMEBUFFER_COMPLETE = 36053;
    this.NONE = 0;
    this.DEPTH_STENCIL_ATTACHMENT = 33306;
    this.STENCIL_ATTACHMENT = 36128;
    this.DEPTH_ATTACHMENT = 36096;
    this.COLOR_ATTACHMENT0 = 36064;
    this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
    this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
    this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
    this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
    this.RENDERBUFFER_STENCIL_SIZE = 36181;
    this.RENDERBUFFER_DEPTH_SIZE = 36180;
    this.RENDERBUFFER_ALPHA_SIZE = 36179;
    this.RENDERBUFFER_BLUE_SIZE = 36178;
    this.RENDERBUFFER_GREEN_SIZE = 36177;
    this.RENDERBUFFER_RED_SIZE = 36176;
    this.RENDERBUFFER_INTERNAL_FORMAT = 36164;
    this.RENDERBUFFER_HEIGHT = 36163;
    this.RENDERBUFFER_WIDTH = 36162;
    this.DEPTH_STENCIL = 34041;
    this.STENCIL_INDEX8 = 36168;
    this.STENCIL_INDEX = 6401;
    this.DEPTH_COMPONENT16 = 33189;
    this.RGB565 = 36194;
    this.RGB5_A1 = 32855;
    this.RGBA4 = 32854;
    this.RENDERBUFFER = 36161;
    this.FRAMEBUFFER = 36160;
    this.HIGH_INT = 36341;
    this.MEDIUM_INT = 36340;
    this.LOW_INT = 36339;
    this.HIGH_FLOAT = 36338;
    this.MEDIUM_FLOAT = 36337;
    this.LOW_FLOAT = 36336;
    this.COMPILE_STATUS = 35713;
    this.POINT_SPRITE = 34913;
    this.VERTEX_PROGRAM_POINT_SIZE = 34370;
    this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
    this.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
    this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
    this.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
    this.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
    this.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
    this.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
    this.SAMPLER_CUBE = 35680;
    this.SAMPLER_2D = 35678;
    this.FLOAT_MAT4 = 35676;
    this.FLOAT_MAT3 = 35675;
    this.FLOAT_MAT2 = 35674;
    this.BOOL_VEC4 = 35673;
    this.BOOL_VEC3 = 35672;
    this.BOOL_VEC2 = 35671;
    this.BOOL = 35670;
    this.INT_VEC4 = 35669;
    this.INT_VEC3 = 35668;
    this.INT_VEC2 = 35667;
    this.FLOAT_VEC4 = 35666;
    this.FLOAT_VEC3 = 35665;
    this.FLOAT_VEC2 = 35664;
    this.MIRRORED_REPEAT = 33648;
    this.CLAMP_TO_EDGE = 33071;
    this.REPEAT = 10497;
    this.ACTIVE_TEXTURE = 34016;
    this.TEXTURE31 = 34015;
    this.TEXTURE30 = 34014;
    this.TEXTURE29 = 34013;
    this.TEXTURE28 = 34012;
    this.TEXTURE27 = 34011;
    this.TEXTURE26 = 34010;
    this.TEXTURE25 = 34009;
    this.TEXTURE24 = 34008;
    this.TEXTURE23 = 34007;
    this.TEXTURE22 = 34006;
    this.TEXTURE21 = 34005;
    this.TEXTURE20 = 34004;
    this.TEXTURE19 = 34003;
    this.TEXTURE18 = 34002;
    this.TEXTURE17 = 34001;
    this.TEXTURE16 = 34000;
    this.TEXTURE15 = 33999;
    this.TEXTURE14 = 33998;
    this.TEXTURE13 = 33997;
    this.TEXTURE12 = 33996;
    this.TEXTURE11 = 33995;
    this.TEXTURE10 = 33994;
    this.TEXTURE9 = 33993;
    this.TEXTURE8 = 33992;
    this.TEXTURE7 = 33991;
    this.TEXTURE6 = 33990;
    this.TEXTURE5 = 33989;
    this.TEXTURE4 = 33988;
    this.TEXTURE3 = 33987;
    this.TEXTURE2 = 33986;
    this.TEXTURE1 = 33985;
    this.TEXTURE0 = 33984;
    this.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
    this.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
    this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
    this.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
    this.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
    this.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
    this.TEXTURE_BINDING_CUBE_MAP = 34068;
    this.TEXTURE_CUBE_MAP = 34067;
    this.TEXTURE = 5890;
    this.TEXTURE_2D = 3553;
    this.TEXTURE_WRAP_T = 10243;
    this.TEXTURE_WRAP_S = 10242;
    this.TEXTURE_MIN_FILTER = 10241;
    this.TEXTURE_MAG_FILTER = 10240;
    this.LINEAR_MIPMAP_LINEAR = 9987;
    this.NEAREST_MIPMAP_LINEAR = 9986;
    this.LINEAR_MIPMAP_NEAREST = 9985;
    this.NEAREST_MIPMAP_NEAREST = 9984;
    this.LINEAR = 9729;
    this.NEAREST = 9728;
    this.VERSION = 7938;
    this.RENDERER = 7937;
    this.VENDOR = 7936;
    this.DECR_WRAP = 34056;
    this.INCR_WRAP = 34055;
    this.INVERT = 5386;
    this.DECR = 7683;
    this.INCR = 7682;
    this.REPLACE = 7681;
    this.KEEP = 7680;
    this.ALWAYS = 519;
    this.GEQUAL = 518;
    this.NOTEQUAL = 517;
    this.GREATER = 516;
    this.LEQUAL = 515;
    this.EQUAL = 514;
    this.LESS = 513;
    this.NEVER = 512;
    this.CURRENT_PROGRAM = 35725;
    this.SHADING_LANGUAGE_VERSION = 35724;
    this.ACTIVE_ATTRIBUTES = 35721;
    this.ACTIVE_UNIFORMS = 35718;
    this.ATTACHED_SHADERS = 35717;
    this.VALIDATE_STATUS = 35715;
    this.LINK_STATUS = 35714;
    this.DELETE_STATUS = 35712;
    this.SHADER_TYPE = 35663;
    this.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
    this.MAX_TEXTURE_IMAGE_UNITS = 34930;
    this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
    this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
    this.MAX_VARYING_VECTORS = 36348;
    this.MAX_VERTEX_UNIFORM_VECTORS = 36347;
    this.MAX_VERTEX_ATTRIBS = 34921;
    this.VERTEX_SHADER = 35633;
    this.FRAGMENT_SHADER = 35632;
    this.UNSIGNED_SHORT_5_6_5 = 33635;
    this.UNSIGNED_SHORT_5_5_5_1 = 32820;
    this.UNSIGNED_SHORT_4_4_4_4 = 32819;
    this.LUMINANCE_ALPHA = 6410;
    this.LUMINANCE = 6409;
    this.RGBA = 6408;
    this.RGB = 6407;
    this.ALPHA = 6406;
    this.DEPTH_COMPONENT = 6402;
    this.FLOAT = 5126;
    this.UNSIGNED_INT = 5125;
    this.INT = 5124;
    this.UNSIGNED_SHORT = 5123;
    this.SHORT = 5122;
    this.UNSIGNED_BYTE = 5121;
    this.BYTE = 5120;
    this.GENERATE_MIPMAP_HINT = 33170;
    this.NICEST = 4354;
    this.FASTEST = 4353;
    this.DONT_CARE = 4352;
    this.COMPRESSED_TEXTURE_FORMATS = 34467;
    this.SAMPLE_COVERAGE_INVERT = 32939;
    this.SAMPLE_COVERAGE_VALUE = 32938;
    this.SAMPLES = 32937;
    this.SAMPLE_BUFFERS = 32936;
    this.TEXTURE_BINDING_2D = 32873;
    this.POLYGON_OFFSET_FACTOR = 32824;
    this.POLYGON_OFFSET_UNITS = 10752;
    this.STENCIL_BITS = 3415;
    this.DEPTH_BITS = 3414;
    this.ALPHA_BITS = 3413;
    this.BLUE_BITS = 3412;
    this.GREEN_BITS = 3411;
    this.RED_BITS = 3410;
    this.SUBPIXEL_BITS = 3408;
    this.MAX_VIEWPORT_DIMS = 3386;
    this.MAX_TEXTURE_SIZE = 3379;
    this.PACK_ALIGNMENT = 3333;
    this.UNPACK_ALIGNMENT = 3317;
    this.COLOR_WRITEMASK = 3107;
    this.COLOR_CLEAR_VALUE = 3106;
    this.SCISSOR_BOX = 3088;
    this.VIEWPORT = 2978;
    this.STENCIL_BACK_WRITEMASK = 36005;
    this.STENCIL_BACK_VALUE_MASK = 36004;
    this.STENCIL_BACK_REF = 36003;
    this.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
    this.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
    this.STENCIL_BACK_FAIL = 34817;
    this.STENCIL_BACK_FUNC = 34816;
    this.STENCIL_WRITEMASK = 2968;
    this.STENCIL_VALUE_MASK = 2963;
    this.STENCIL_REF = 2967;
    this.STENCIL_PASS_DEPTH_PASS = 2966;
    this.STENCIL_PASS_DEPTH_FAIL = 2965;
    this.STENCIL_FAIL = 2964;
    this.STENCIL_FUNC = 2962;
    this.STENCIL_CLEAR_VALUE = 2961;
    this.DEPTH_FUNC = 2932;
    this.DEPTH_CLEAR_VALUE = 2931;
    this.DEPTH_WRITEMASK = 2930;
    this.DEPTH_RANGE = 2928;
    this.FRONT_FACE = 2886;
    this.CULL_FACE_MODE = 2885;
    this.ALIASED_LINE_WIDTH_RANGE = 33902;
    this.ALIASED_POINT_SIZE_RANGE = 33901;
    this.LINE_WIDTH = 2849;
    this.CCW = 2305;
    this.CW = 2304;
    this.OUT_OF_MEMORY = 1285;
    this.INVALID_OPERATION = 1282;
    this.INVALID_VALUE = 1281;
    this.INVALID_ENUM = 1280;
    this.NO_ERROR = 0;
    this.SAMPLE_COVERAGE = 32928;
    this.SAMPLE_ALPHA_TO_COVERAGE = 32926;
    this.POLYGON_OFFSET_FILL = 32823;
    this.SCISSOR_TEST = 3089;
    this.DEPTH_TEST = 2929;
    this.STENCIL_TEST = 2960;
    this.DITHER = 3024;
    this.BLEND = 3042;
    this.CULL_FACE = 2884;
    this.FRONT_AND_BACK = 1032;
    this.BACK = 1029;
    this.FRONT = 1028;
    this.CURRENT_VERTEX_ATTRIB = 34342;
    this.BUFFER_USAGE = 34661;
    this.BUFFER_SIZE = 34660;
    this.DYNAMIC_DRAW = 35048;
    this.STATIC_DRAW = 35044;
    this.STREAM_DRAW = 35040;
    this.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
    this.ARRAY_BUFFER_BINDING = 34964;
    this.ELEMENT_ARRAY_BUFFER = 34963;
    this.ARRAY_BUFFER = 34962;
    this.BLEND_COLOR = 32773;
    this.ONE_MINUS_CONSTANT_ALPHA = 32772;
    this.CONSTANT_ALPHA = 32771;
    this.ONE_MINUS_CONSTANT_COLOR = 32770;
    this.CONSTANT_COLOR = 32769;
    this.BLEND_SRC_ALPHA = 32971;
    this.BLEND_DST_ALPHA = 32970;
    this.BLEND_SRC_RGB = 32969;
    this.BLEND_DST_RGB = 32968;
    this.FUNC_REVERSE_SUBTRACT = 32779;
    this.FUNC_SUBTRACT = 32778;
    this.BLEND_EQUATION_ALPHA = 34877;
    this.BLEND_EQUATION_RGB = 32777;
    this.BLEND_EQUATION = 32777;
    this.FUNC_ADD = 32774;
    this.SRC_ALPHA_SATURATE = 776;
    this.ONE_MINUS_DST_COLOR = 775;
    this.DST_COLOR = 774;
    this.ONE_MINUS_DST_ALPHA = 773;
    this.DST_ALPHA = 772;
    this.ONE_MINUS_SRC_ALPHA = 771;
    this.SRC_ALPHA = 770;
    this.ONE_MINUS_SRC_COLOR = 769;
    this.SRC_COLOR = 768;
    this.ONE = 1;
    this.ZERO = 0;
    this.TRIANGLE_FAN = 6;
    this.TRIANGLE_STRIP = 5;
    this.TRIANGLES = 4;
    this.LINE_STRIP = 3;
    this.LINE_LOOP = 2;
    this.LINES = 1;
    this.POINTS = 0;
    this.COLOR_BUFFER_BIT = 16384;
    this.STENCIL_BUFFER_BIT = 1024;
    this.DEPTH_BUFFER_BIT = 256;
    this.__context = context;
    this.version = 1;
    this.type = lime_graphics_opengl_GLContextType.WEBGL;
    if (context != null) {
      var gl = context;
      if (Object.prototype.hasOwnProperty.call(gl, "rawgl")) {
        gl = Reflect.field(context, "rawgl");
      }
      if (
        Object.prototype.hasOwnProperty.call(
          window,
          "WebGL2RenderingContext"
        ) &&
        js_Boot.__instanceof(gl, WebGL2RenderingContext)
      ) {
        this.version = 2;
      }
    }
  };
  $hxClasses["lime._backend.html5.HTML5GLRenderContext"] =
    lime__$backend_html5_HTML5GLRenderContext;
  lime__$backend_html5_HTML5GLRenderContext.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5GLRenderContext",
  ];
  lime__$backend_html5_HTML5GLRenderContext.prototype = {
    DEPTH_BUFFER_BIT: null,
    STENCIL_BUFFER_BIT: null,
    COLOR_BUFFER_BIT: null,
    POINTS: null,
    LINES: null,
    LINE_LOOP: null,
    LINE_STRIP: null,
    TRIANGLES: null,
    TRIANGLE_STRIP: null,
    TRIANGLE_FAN: null,
    ZERO: null,
    ONE: null,
    SRC_COLOR: null,
    ONE_MINUS_SRC_COLOR: null,
    SRC_ALPHA: null,
    ONE_MINUS_SRC_ALPHA: null,
    DST_ALPHA: null,
    ONE_MINUS_DST_ALPHA: null,
    DST_COLOR: null,
    ONE_MINUS_DST_COLOR: null,
    SRC_ALPHA_SATURATE: null,
    FUNC_ADD: null,
    BLEND_EQUATION: null,
    BLEND_EQUATION_RGB: null,
    BLEND_EQUATION_ALPHA: null,
    FUNC_SUBTRACT: null,
    FUNC_REVERSE_SUBTRACT: null,
    BLEND_DST_RGB: null,
    BLEND_SRC_RGB: null,
    BLEND_DST_ALPHA: null,
    BLEND_SRC_ALPHA: null,
    CONSTANT_COLOR: null,
    ONE_MINUS_CONSTANT_COLOR: null,
    CONSTANT_ALPHA: null,
    ONE_MINUS_CONSTANT_ALPHA: null,
    BLEND_COLOR: null,
    ARRAY_BUFFER: null,
    ELEMENT_ARRAY_BUFFER: null,
    ARRAY_BUFFER_BINDING: null,
    ELEMENT_ARRAY_BUFFER_BINDING: null,
    STREAM_DRAW: null,
    STATIC_DRAW: null,
    DYNAMIC_DRAW: null,
    BUFFER_SIZE: null,
    BUFFER_USAGE: null,
    CURRENT_VERTEX_ATTRIB: null,
    FRONT: null,
    BACK: null,
    FRONT_AND_BACK: null,
    CULL_FACE: null,
    BLEND: null,
    DITHER: null,
    STENCIL_TEST: null,
    DEPTH_TEST: null,
    SCISSOR_TEST: null,
    POLYGON_OFFSET_FILL: null,
    SAMPLE_ALPHA_TO_COVERAGE: null,
    SAMPLE_COVERAGE: null,
    NO_ERROR: null,
    INVALID_ENUM: null,
    INVALID_VALUE: null,
    INVALID_OPERATION: null,
    OUT_OF_MEMORY: null,
    CW: null,
    CCW: null,
    LINE_WIDTH: null,
    ALIASED_POINT_SIZE_RANGE: null,
    ALIASED_LINE_WIDTH_RANGE: null,
    CULL_FACE_MODE: null,
    FRONT_FACE: null,
    DEPTH_RANGE: null,
    DEPTH_WRITEMASK: null,
    DEPTH_CLEAR_VALUE: null,
    DEPTH_FUNC: null,
    STENCIL_CLEAR_VALUE: null,
    STENCIL_FUNC: null,
    STENCIL_FAIL: null,
    STENCIL_PASS_DEPTH_FAIL: null,
    STENCIL_PASS_DEPTH_PASS: null,
    STENCIL_REF: null,
    STENCIL_VALUE_MASK: null,
    STENCIL_WRITEMASK: null,
    STENCIL_BACK_FUNC: null,
    STENCIL_BACK_FAIL: null,
    STENCIL_BACK_PASS_DEPTH_FAIL: null,
    STENCIL_BACK_PASS_DEPTH_PASS: null,
    STENCIL_BACK_REF: null,
    STENCIL_BACK_VALUE_MASK: null,
    STENCIL_BACK_WRITEMASK: null,
    VIEWPORT: null,
    SCISSOR_BOX: null,
    COLOR_CLEAR_VALUE: null,
    COLOR_WRITEMASK: null,
    UNPACK_ALIGNMENT: null,
    PACK_ALIGNMENT: null,
    MAX_TEXTURE_SIZE: null,
    MAX_VIEWPORT_DIMS: null,
    SUBPIXEL_BITS: null,
    RED_BITS: null,
    GREEN_BITS: null,
    BLUE_BITS: null,
    ALPHA_BITS: null,
    DEPTH_BITS: null,
    STENCIL_BITS: null,
    POLYGON_OFFSET_UNITS: null,
    POLYGON_OFFSET_FACTOR: null,
    TEXTURE_BINDING_2D: null,
    SAMPLE_BUFFERS: null,
    SAMPLES: null,
    SAMPLE_COVERAGE_VALUE: null,
    SAMPLE_COVERAGE_INVERT: null,
    COMPRESSED_TEXTURE_FORMATS: null,
    DONT_CARE: null,
    FASTEST: null,
    NICEST: null,
    GENERATE_MIPMAP_HINT: null,
    BYTE: null,
    UNSIGNED_BYTE: null,
    SHORT: null,
    UNSIGNED_SHORT: null,
    INT: null,
    UNSIGNED_INT: null,
    FLOAT: null,
    DEPTH_COMPONENT: null,
    ALPHA: null,
    RGB: null,
    RGBA: null,
    LUMINANCE: null,
    LUMINANCE_ALPHA: null,
    UNSIGNED_SHORT_4_4_4_4: null,
    UNSIGNED_SHORT_5_5_5_1: null,
    UNSIGNED_SHORT_5_6_5: null,
    FRAGMENT_SHADER: null,
    VERTEX_SHADER: null,
    MAX_VERTEX_ATTRIBS: null,
    MAX_VERTEX_UNIFORM_VECTORS: null,
    MAX_VARYING_VECTORS: null,
    MAX_COMBINED_TEXTURE_IMAGE_UNITS: null,
    MAX_VERTEX_TEXTURE_IMAGE_UNITS: null,
    MAX_TEXTURE_IMAGE_UNITS: null,
    MAX_FRAGMENT_UNIFORM_VECTORS: null,
    SHADER_TYPE: null,
    DELETE_STATUS: null,
    LINK_STATUS: null,
    VALIDATE_STATUS: null,
    ATTACHED_SHADERS: null,
    ACTIVE_UNIFORMS: null,
    ACTIVE_ATTRIBUTES: null,
    SHADING_LANGUAGE_VERSION: null,
    CURRENT_PROGRAM: null,
    NEVER: null,
    LESS: null,
    EQUAL: null,
    LEQUAL: null,
    GREATER: null,
    NOTEQUAL: null,
    GEQUAL: null,
    ALWAYS: null,
    KEEP: null,
    REPLACE: null,
    INCR: null,
    DECR: null,
    INVERT: null,
    INCR_WRAP: null,
    DECR_WRAP: null,
    VENDOR: null,
    RENDERER: null,
    VERSION: null,
    NEAREST: null,
    LINEAR: null,
    NEAREST_MIPMAP_NEAREST: null,
    LINEAR_MIPMAP_NEAREST: null,
    NEAREST_MIPMAP_LINEAR: null,
    LINEAR_MIPMAP_LINEAR: null,
    TEXTURE_MAG_FILTER: null,
    TEXTURE_MIN_FILTER: null,
    TEXTURE_WRAP_S: null,
    TEXTURE_WRAP_T: null,
    TEXTURE_2D: null,
    TEXTURE: null,
    TEXTURE_CUBE_MAP: null,
    TEXTURE_BINDING_CUBE_MAP: null,
    TEXTURE_CUBE_MAP_POSITIVE_X: null,
    TEXTURE_CUBE_MAP_NEGATIVE_X: null,
    TEXTURE_CUBE_MAP_POSITIVE_Y: null,
    TEXTURE_CUBE_MAP_NEGATIVE_Y: null,
    TEXTURE_CUBE_MAP_POSITIVE_Z: null,
    TEXTURE_CUBE_MAP_NEGATIVE_Z: null,
    MAX_CUBE_MAP_TEXTURE_SIZE: null,
    TEXTURE0: null,
    TEXTURE1: null,
    TEXTURE2: null,
    TEXTURE3: null,
    TEXTURE4: null,
    TEXTURE5: null,
    TEXTURE6: null,
    TEXTURE7: null,
    TEXTURE8: null,
    TEXTURE9: null,
    TEXTURE10: null,
    TEXTURE11: null,
    TEXTURE12: null,
    TEXTURE13: null,
    TEXTURE14: null,
    TEXTURE15: null,
    TEXTURE16: null,
    TEXTURE17: null,
    TEXTURE18: null,
    TEXTURE19: null,
    TEXTURE20: null,
    TEXTURE21: null,
    TEXTURE22: null,
    TEXTURE23: null,
    TEXTURE24: null,
    TEXTURE25: null,
    TEXTURE26: null,
    TEXTURE27: null,
    TEXTURE28: null,
    TEXTURE29: null,
    TEXTURE30: null,
    TEXTURE31: null,
    ACTIVE_TEXTURE: null,
    REPEAT: null,
    CLAMP_TO_EDGE: null,
    MIRRORED_REPEAT: null,
    FLOAT_VEC2: null,
    FLOAT_VEC3: null,
    FLOAT_VEC4: null,
    INT_VEC2: null,
    INT_VEC3: null,
    INT_VEC4: null,
    BOOL: null,
    BOOL_VEC2: null,
    BOOL_VEC3: null,
    BOOL_VEC4: null,
    FLOAT_MAT2: null,
    FLOAT_MAT3: null,
    FLOAT_MAT4: null,
    SAMPLER_2D: null,
    SAMPLER_CUBE: null,
    VERTEX_ATTRIB_ARRAY_ENABLED: null,
    VERTEX_ATTRIB_ARRAY_SIZE: null,
    VERTEX_ATTRIB_ARRAY_STRIDE: null,
    VERTEX_ATTRIB_ARRAY_TYPE: null,
    VERTEX_ATTRIB_ARRAY_NORMALIZED: null,
    VERTEX_ATTRIB_ARRAY_POINTER: null,
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: null,
    VERTEX_PROGRAM_POINT_SIZE: null,
    POINT_SPRITE: null,
    COMPILE_STATUS: null,
    LOW_FLOAT: null,
    MEDIUM_FLOAT: null,
    HIGH_FLOAT: null,
    LOW_INT: null,
    MEDIUM_INT: null,
    HIGH_INT: null,
    FRAMEBUFFER: null,
    RENDERBUFFER: null,
    RGBA4: null,
    RGB5_A1: null,
    RGB565: null,
    DEPTH_COMPONENT16: null,
    STENCIL_INDEX: null,
    STENCIL_INDEX8: null,
    DEPTH_STENCIL: null,
    RENDERBUFFER_WIDTH: null,
    RENDERBUFFER_HEIGHT: null,
    RENDERBUFFER_INTERNAL_FORMAT: null,
    RENDERBUFFER_RED_SIZE: null,
    RENDERBUFFER_GREEN_SIZE: null,
    RENDERBUFFER_BLUE_SIZE: null,
    RENDERBUFFER_ALPHA_SIZE: null,
    RENDERBUFFER_DEPTH_SIZE: null,
    RENDERBUFFER_STENCIL_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: null,
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: null,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: null,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: null,
    COLOR_ATTACHMENT0: null,
    DEPTH_ATTACHMENT: null,
    STENCIL_ATTACHMENT: null,
    DEPTH_STENCIL_ATTACHMENT: null,
    NONE: null,
    FRAMEBUFFER_COMPLETE: null,
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: null,
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: null,
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: null,
    FRAMEBUFFER_UNSUPPORTED: null,
    FRAMEBUFFER_BINDING: null,
    RENDERBUFFER_BINDING: null,
    MAX_RENDERBUFFER_SIZE: null,
    INVALID_FRAMEBUFFER_OPERATION: null,
    UNPACK_FLIP_Y_WEBGL: null,
    UNPACK_PREMULTIPLY_ALPHA_WEBGL: null,
    CONTEXT_LOST_WEBGL: null,
    UNPACK_COLORSPACE_CONVERSION_WEBGL: null,
    BROWSER_DEFAULT_WEBGL: null,
    READ_BUFFER: null,
    UNPACK_ROW_LENGTH: null,
    UNPACK_SKIP_ROWS: null,
    UNPACK_SKIP_PIXELS: null,
    PACK_ROW_LENGTH: null,
    PACK_SKIP_ROWS: null,
    PACK_SKIP_PIXELS: null,
    TEXTURE_BINDING_3D: null,
    UNPACK_SKIP_IMAGES: null,
    UNPACK_IMAGE_HEIGHT: null,
    MAX_3D_TEXTURE_SIZE: null,
    MAX_ELEMENTS_VERTICES: null,
    MAX_ELEMENTS_INDICES: null,
    MAX_TEXTURE_LOD_BIAS: null,
    MAX_FRAGMENT_UNIFORM_COMPONENTS: null,
    MAX_VERTEX_UNIFORM_COMPONENTS: null,
    MAX_ARRAY_TEXTURE_LAYERS: null,
    MIN_PROGRAM_TEXEL_OFFSET: null,
    MAX_PROGRAM_TEXEL_OFFSET: null,
    MAX_VARYING_COMPONENTS: null,
    FRAGMENT_SHADER_DERIVATIVE_HINT: null,
    RASTERIZER_DISCARD: null,
    VERTEX_ARRAY_BINDING: null,
    MAX_VERTEX_OUTPUT_COMPONENTS: null,
    MAX_FRAGMENT_INPUT_COMPONENTS: null,
    MAX_SERVER_WAIT_TIMEOUT: null,
    MAX_ELEMENT_INDEX: null,
    RED: null,
    RGB8: null,
    RGBA8: null,
    RGB10_A2: null,
    TEXTURE_3D: null,
    TEXTURE_WRAP_R: null,
    TEXTURE_MIN_LOD: null,
    TEXTURE_MAX_LOD: null,
    TEXTURE_BASE_LEVEL: null,
    TEXTURE_MAX_LEVEL: null,
    TEXTURE_COMPARE_MODE: null,
    TEXTURE_COMPARE_FUNC: null,
    SRGB: null,
    SRGB8: null,
    SRGB8_ALPHA8: null,
    COMPARE_REF_TO_TEXTURE: null,
    RGBA32F: null,
    RGB32F: null,
    RGBA16F: null,
    RGB16F: null,
    TEXTURE_2D_ARRAY: null,
    TEXTURE_BINDING_2D_ARRAY: null,
    R11F_G11F_B10F: null,
    RGB9_E5: null,
    RGBA32UI: null,
    RGB32UI: null,
    RGBA16UI: null,
    RGB16UI: null,
    RGBA8UI: null,
    RGB8UI: null,
    RGBA32I: null,
    RGB32I: null,
    RGBA16I: null,
    RGB16I: null,
    RGBA8I: null,
    RGB8I: null,
    RED_INTEGER: null,
    RGB_INTEGER: null,
    RGBA_INTEGER: null,
    R8: null,
    RG8: null,
    R16F: null,
    R32F: null,
    RG16F: null,
    RG32F: null,
    R8I: null,
    R8UI: null,
    R16I: null,
    R16UI: null,
    R32I: null,
    R32UI: null,
    RG8I: null,
    RG8UI: null,
    RG16I: null,
    RG16UI: null,
    RG32I: null,
    RG32UI: null,
    R8_SNORM: null,
    RG8_SNORM: null,
    RGB8_SNORM: null,
    RGBA8_SNORM: null,
    RGB10_A2UI: null,
    TEXTURE_IMMUTABLE_FORMAT: null,
    TEXTURE_IMMUTABLE_LEVELS: null,
    UNSIGNED_INT_2_10_10_10_REV: null,
    UNSIGNED_INT_10F_11F_11F_REV: null,
    UNSIGNED_INT_5_9_9_9_REV: null,
    FLOAT_32_UNSIGNED_INT_24_8_REV: null,
    UNSIGNED_INT_24_8: null,
    HALF_FLOAT: null,
    RG: null,
    RG_INTEGER: null,
    INT_2_10_10_10_REV: null,
    CURRENT_QUERY: null,
    QUERY_RESULT: null,
    QUERY_RESULT_AVAILABLE: null,
    ANY_SAMPLES_PASSED: null,
    ANY_SAMPLES_PASSED_CONSERVATIVE: null,
    MAX_DRAW_BUFFERS: null,
    DRAW_BUFFER0: null,
    DRAW_BUFFER1: null,
    DRAW_BUFFER2: null,
    DRAW_BUFFER3: null,
    DRAW_BUFFER4: null,
    DRAW_BUFFER5: null,
    DRAW_BUFFER6: null,
    DRAW_BUFFER7: null,
    DRAW_BUFFER8: null,
    DRAW_BUFFER9: null,
    DRAW_BUFFER10: null,
    DRAW_BUFFER11: null,
    DRAW_BUFFER12: null,
    DRAW_BUFFER13: null,
    DRAW_BUFFER14: null,
    DRAW_BUFFER15: null,
    MAX_COLOR_ATTACHMENTS: null,
    COLOR_ATTACHMENT1: null,
    COLOR_ATTACHMENT2: null,
    COLOR_ATTACHMENT3: null,
    COLOR_ATTACHMENT4: null,
    COLOR_ATTACHMENT5: null,
    COLOR_ATTACHMENT6: null,
    COLOR_ATTACHMENT7: null,
    COLOR_ATTACHMENT8: null,
    COLOR_ATTACHMENT9: null,
    COLOR_ATTACHMENT10: null,
    COLOR_ATTACHMENT11: null,
    COLOR_ATTACHMENT12: null,
    COLOR_ATTACHMENT13: null,
    COLOR_ATTACHMENT14: null,
    COLOR_ATTACHMENT15: null,
    SAMPLER_3D: null,
    SAMPLER_2D_SHADOW: null,
    SAMPLER_2D_ARRAY: null,
    SAMPLER_2D_ARRAY_SHADOW: null,
    SAMPLER_CUBE_SHADOW: null,
    INT_SAMPLER_2D: null,
    INT_SAMPLER_3D: null,
    INT_SAMPLER_CUBE: null,
    INT_SAMPLER_2D_ARRAY: null,
    UNSIGNED_INT_SAMPLER_2D: null,
    UNSIGNED_INT_SAMPLER_3D: null,
    UNSIGNED_INT_SAMPLER_CUBE: null,
    UNSIGNED_INT_SAMPLER_2D_ARRAY: null,
    MAX_SAMPLES: null,
    SAMPLER_BINDING: null,
    PIXEL_PACK_BUFFER: null,
    PIXEL_UNPACK_BUFFER: null,
    PIXEL_PACK_BUFFER_BINDING: null,
    PIXEL_UNPACK_BUFFER_BINDING: null,
    COPY_READ_BUFFER: null,
    COPY_WRITE_BUFFER: null,
    COPY_READ_BUFFER_BINDING: null,
    COPY_WRITE_BUFFER_BINDING: null,
    FLOAT_MAT2x3: null,
    FLOAT_MAT2x4: null,
    FLOAT_MAT3x2: null,
    FLOAT_MAT3x4: null,
    FLOAT_MAT4x2: null,
    FLOAT_MAT4x3: null,
    UNSIGNED_INT_VEC2: null,
    UNSIGNED_INT_VEC3: null,
    UNSIGNED_INT_VEC4: null,
    UNSIGNED_NORMALIZED: null,
    SIGNED_NORMALIZED: null,
    VERTEX_ATTRIB_ARRAY_INTEGER: null,
    VERTEX_ATTRIB_ARRAY_DIVISOR: null,
    TRANSFORM_FEEDBACK_BUFFER_MODE: null,
    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: null,
    TRANSFORM_FEEDBACK_VARYINGS: null,
    TRANSFORM_FEEDBACK_BUFFER_START: null,
    TRANSFORM_FEEDBACK_BUFFER_SIZE: null,
    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: null,
    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: null,
    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: null,
    INTERLEAVED_ATTRIBS: null,
    SEPARATE_ATTRIBS: null,
    TRANSFORM_FEEDBACK_BUFFER: null,
    TRANSFORM_FEEDBACK_BUFFER_BINDING: null,
    TRANSFORM_FEEDBACK: null,
    TRANSFORM_FEEDBACK_PAUSED: null,
    TRANSFORM_FEEDBACK_ACTIVE: null,
    TRANSFORM_FEEDBACK_BINDING: null,
    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: null,
    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: null,
    FRAMEBUFFER_ATTACHMENT_RED_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: null,
    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: null,
    FRAMEBUFFER_DEFAULT: null,
    DEPTH24_STENCIL8: null,
    DRAW_FRAMEBUFFER_BINDING: null,
    READ_FRAMEBUFFER: null,
    DRAW_FRAMEBUFFER: null,
    READ_FRAMEBUFFER_BINDING: null,
    RENDERBUFFER_SAMPLES: null,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: null,
    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: null,
    UNIFORM_BUFFER: null,
    UNIFORM_BUFFER_BINDING: null,
    UNIFORM_BUFFER_START: null,
    UNIFORM_BUFFER_SIZE: null,
    MAX_VERTEX_UNIFORM_BLOCKS: null,
    MAX_FRAGMENT_UNIFORM_BLOCKS: null,
    MAX_COMBINED_UNIFORM_BLOCKS: null,
    MAX_UNIFORM_BUFFER_BINDINGS: null,
    MAX_UNIFORM_BLOCK_SIZE: null,
    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: null,
    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: null,
    UNIFORM_BUFFER_OFFSET_ALIGNMENT: null,
    ACTIVE_UNIFORM_BLOCKS: null,
    UNIFORM_TYPE: null,
    UNIFORM_SIZE: null,
    UNIFORM_BLOCK_INDEX: null,
    UNIFORM_OFFSET: null,
    UNIFORM_ARRAY_STRIDE: null,
    UNIFORM_MATRIX_STRIDE: null,
    UNIFORM_IS_ROW_MAJOR: null,
    UNIFORM_BLOCK_BINDING: null,
    UNIFORM_BLOCK_DATA_SIZE: null,
    UNIFORM_BLOCK_ACTIVE_UNIFORMS: null,
    UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: null,
    UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: null,
    UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: null,
    OBJECT_TYPE: null,
    SYNC_CONDITION: null,
    SYNC_STATUS: null,
    SYNC_FLAGS: null,
    SYNC_FENCE: null,
    SYNC_GPU_COMMANDS_COMPLETE: null,
    UNSIGNALED: null,
    SIGNALED: null,
    ALREADY_SIGNALED: null,
    TIMEOUT_EXPIRED: null,
    CONDITION_SATISFIED: null,
    WAIT_FAILED: null,
    SYNC_FLUSH_COMMANDS_BIT: null,
    COLOR: null,
    DEPTH: null,
    STENCIL: null,
    MIN: null,
    MAX: null,
    DEPTH_COMPONENT24: null,
    STREAM_READ: null,
    STREAM_COPY: null,
    STATIC_READ: null,
    STATIC_COPY: null,
    DYNAMIC_READ: null,
    DYNAMIC_COPY: null,
    DEPTH_COMPONENT32F: null,
    DEPTH32F_STENCIL8: null,
    INVALID_INDEX: null,
    TIMEOUT_IGNORED: null,
    MAX_CLIENT_WAIT_TIMEOUT_WEBGL: null,
    type: null,
    version: null,
    __context: null,
    __contextLost: null,
    activeTexture: function (texture) {
      this.__context.activeTexture(texture);
    },
    attachShader: function (program, shader) {
      this.__context.attachShader(program, shader);
    },
    beginQuery: function (target, query) {
      this.__context.beginQuery(target, query);
    },
    beginTransformFeedback: function (primitiveNode) {
      this.__context.beginTransformFeedback(primitiveNode);
    },
    bindAttribLocation: function (program, index, name) {
      this.__context.bindAttribLocation(program, index, name);
    },
    bindBuffer: function (target, buffer) {
      this.__context.bindBuffer(target, buffer);
    },
    bindBufferBase: function (target, index, buffer) {
      this.__context.bindBufferBase(target, index, buffer);
    },
    bindBufferRange: function (target, index, buffer, offset, size) {
      this.__context.bindBufferRange(
        target,
        index,
        buffer,
        offset,
        lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size)
      );
    },
    bindFramebuffer: function (target, framebuffer) {
      this.__context.bindFramebuffer(target, framebuffer);
    },
    bindRenderbuffer: function (target, renderbuffer) {
      this.__context.bindRenderbuffer(target, renderbuffer);
    },
    bindSampler: function (unit, sampler) {
      this.__context.bindSampler(unit, sampler);
    },
    bindTexture: function (target, texture) {
      this.__context.bindTexture(target, texture);
    },
    bindTransformFeedback: function (target, transformFeedback) {
      this.__context.bindTransformFeedback(target, transformFeedback);
    },
    bindVertexArray: function (vertexArray) {
      this.__context.bindVertexArray(vertexArray);
    },
    blendColor: function (red, green, blue, alpha) {
      this.__context.blendColor(red, green, blue, alpha);
    },
    blendEquation: function (mode) {
      this.__context.blendEquation(mode);
    },
    blendEquationSeparate: function (modeRGB, modeAlpha) {
      this.__context.blendEquationSeparate(modeRGB, modeAlpha);
    },
    blendFunc: function (sfactor, dfactor) {
      this.__context.blendFunc(sfactor, dfactor);
    },
    blendFuncSeparate: function (srcRGB, dstRGB, srcAlpha, dstAlpha) {
      this.__context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    },
    blitFramebuffer: function (
      srcX0,
      srcY0,
      srcX1,
      srcY1,
      dstX0,
      dstY0,
      dstX1,
      dstY1,
      mask,
      filter
    ) {
      this.__context.blitFramebuffer(
        srcX0,
        srcY0,
        srcX1,
        srcY1,
        dstX0,
        dstY0,
        dstX1,
        dstY1,
        mask,
        filter
      );
    },
    bufferData: function (target, size, srcData, usage, srcOffset, length) {
      if (!(typeof srcData == "number" && (srcData | 0) === srcData)) {
        srcData = this.__prepareData(size, srcData);
        if (this.version > 1 && srcOffset != null) {
          this.__context.bufferData(target, srcData, usage, srcOffset, length);
        } else {
          this.__context.bufferData(target, srcData, usage);
        }
      } else if (this.version > 1 && usage != null) {
        this.__context.bufferData(target, size, srcData, usage, srcOffset);
      } else {
        this.__context.bufferData(target, size, srcData);
      }
    },
    bufferSubData: function (
      target,
      dstByteOffset,
      size,
      srcData,
      srcOffset,
      length
    ) {
      if (typeof size == "number" && (size | 0) === size) {
        srcData = this.__prepareData(size, srcData);
        if (this.version > 1 && srcOffset != null) {
          this.__context.bufferSubData(
            target,
            dstByteOffset,
            srcData,
            srcOffset,
            length
          );
        } else {
          this.__context.bufferSubData(target, dstByteOffset, srcData);
        }
      } else if (this.version > 1 && srcData != null) {
        this.__context.bufferSubData(
          target,
          dstByteOffset,
          size,
          srcData,
          srcOffset
        );
      } else {
        this.__context.bufferSubData(target, dstByteOffset, size);
      }
    },
    checkFramebufferStatus: function (target) {
      return this.__context.checkFramebufferStatus(target);
    },
    clear: function (mask) {
      this.__context.clear(mask);
    },
    clearBufferfi: function (buffer, drawbuffer, depth, stencil) {
      this.__context.clearBufferfi(buffer, drawbuffer, depth, stencil);
    },
    clearBufferfv: function (buffer, drawbuffer, values, srcOffset) {
      this.__context.clearBufferfv(buffer, drawbuffer, values, srcOffset);
    },
    clearBufferiv: function (buffer, drawbuffer, values, srcOffset) {
      this.__context.clearBufferiv(buffer, drawbuffer, values, srcOffset);
    },
    clearBufferuiv: function (buffer, drawbuffer, values, srcOffset) {
      this.__context.clearBufferuiv(buffer, drawbuffer, values, srcOffset);
    },
    clearColor: function (red, green, blue, alpha) {
      this.__context.clearColor(red, green, blue, alpha);
    },
    clearDepth: function (depth) {
      this.__context.clearDepth(depth);
    },
    clearDepthf: function (depth) {
      this.__context.clearDepth(depth);
    },
    clearStencil: function (s) {
      this.__context.clearStencil(s);
    },
    clientWaitSync: function (sync, flags, timeout) {
      return this.__context.clientWaitSync(sync, flags, timeout);
    },
    copyBufferSubData: function (
      readTarget,
      writeTarget,
      readOffset,
      writeOffset,
      size
    ) {},
    colorMask: function (red, green, blue, alpha) {
      this.__context.colorMask(red, green, blue, alpha);
    },
    compileShader: function (shader) {
      this.__context.compileShader(shader);
    },
    compressedTexImage2D: function (
      target,
      level,
      internalformat,
      width,
      height,
      border,
      imageSize,
      srcData,
      srcOffset,
      srcLengthOverride
    ) {
      if (typeof imageSize == "number" && (imageSize | 0) === imageSize) {
        srcData = this.__prepareData(null, srcData);
        if (this.version > 1 && srcOffset != null) {
          this.__context.compressedTexImage2D(
            target,
            level,
            internalformat,
            width,
            height,
            border,
            srcData,
            srcOffset,
            srcLengthOverride
          );
        } else {
          this.__context.compressedTexImage2D(
            target,
            level,
            internalformat,
            width,
            height,
            border,
            srcData
          );
        }
      } else if (this.version > 1 && srcData != null) {
        this.__context.compressedTexImage2D(
          target,
          level,
          internalformat,
          width,
          height,
          border,
          imageSize,
          srcData,
          srcOffset
        );
      } else {
        this.__context.compressedTexImage2D(
          target,
          level,
          internalformat,
          width,
          height,
          border,
          imageSize
        );
      }
    },
    compressedTexImage3D: function (
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      srcData,
      srcOffset,
      srcLengthOverride
    ) {
      this.__context.compressedTexImage3D(
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        srcData,
        srcOffset,
        srcLengthOverride
      );
    },
    compressedTexSubImage2D: function (
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      srcData,
      srcOffset,
      srcLengthOverride
    ) {
      if (typeof imageSize == "number" && (imageSize | 0) === imageSize) {
        srcData = this.__prepareData(null, srcData);
        if (this.version > 1 && srcOffset != null) {
          this.__context.compressedTexSubImage2D(
            target,
            level,
            xoffset,
            yoffset,
            width,
            height,
            format,
            srcData,
            srcOffset,
            srcLengthOverride
          );
        } else {
          this.__context.compressedTexSubImage2D(
            target,
            level,
            xoffset,
            yoffset,
            width,
            height,
            format,
            srcData
          );
        }
      } else if (this.version > 1 && srcData != null) {
        this.__context.compressedTexSubImage2D(
          target,
          level,
          xoffset,
          yoffset,
          width,
          height,
          format,
          imageSize,
          srcData,
          srcOffset
        );
      } else {
        this.__context.compressedTexSubImage2D(
          target,
          level,
          xoffset,
          yoffset,
          width,
          height,
          format,
          imageSize
        );
      }
    },
    compressedTexSubImage3D: function (
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      srcData,
      srcOffset,
      srcLengthOverride
    ) {
      this.__context.compressedTexSubImage3D(
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        srcData,
        srcOffset,
        srcLengthOverride
      );
    },
    copySubBufferData: function (
      readTarget,
      writeTarget,
      readOffset,
      writeOffset,
      size
    ) {
      this.__context.copySubBufferData(
        readTarget,
        writeTarget,
        readOffset,
        writeOffset,
        size
      );
    },
    copyTexImage2D: function (
      target,
      level,
      internalformat,
      x,
      y,
      width,
      height,
      border
    ) {
      this.__context.copyTexImage2D(
        target,
        level,
        internalformat,
        x,
        y,
        width,
        height,
        border
      );
    },
    copyTexSubImage2D: function (
      target,
      level,
      xoffset,
      yoffset,
      x,
      y,
      width,
      height
    ) {
      this.__context.copyTexSubImage2D(
        target,
        level,
        xoffset,
        yoffset,
        x,
        y,
        width,
        height
      );
    },
    copyTexSubImage3D: function (
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      x,
      y,
      width,
      height
    ) {
      this.__context.copyTexSubImage3D(
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        x,
        y,
        width,
        height
      );
    },
    createBuffer: function () {
      return this.__context.createBuffer();
    },
    createFramebuffer: function () {
      return this.__context.createFramebuffer();
    },
    createProgram: function () {
      return this.__context.createProgram();
    },
    createQuery: function () {
      return this.__context.createQuery();
    },
    createRenderbuffer: function () {
      return this.__context.createRenderbuffer();
    },
    createSampler: function () {
      return this.__context.createSampler();
    },
    createShader: function (type) {
      return this.__context.createShader(type);
    },
    createTexture: function () {
      return this.__context.createTexture();
    },
    createTransformFeedback: function () {
      return this.__context.createTransformFeedback();
    },
    createVertexArray: function () {
      return this.__context.createVertexArray();
    },
    cullFace: function (mode) {
      this.__context.cullFace(mode);
    },
    deleteBuffer: function (buffer) {
      this.__context.deleteBuffer(buffer);
    },
    deleteFramebuffer: function (framebuffer) {
      this.__context.deleteFramebuffer(framebuffer);
    },
    deleteProgram: function (program) {
      this.__context.deleteProgram(program);
    },
    deleteQuery: function (query) {
      this.__context.deleteQuery(query);
    },
    deleteRenderbuffer: function (renderbuffer) {
      this.__context.deleteRenderbuffer(renderbuffer);
    },
    deleteSampler: function (sampler) {
      this.__context.deleteSampler(sampler);
    },
    deleteShader: function (shader) {
      this.__context.deleteShader(shader);
    },
    deleteSync: function (sync) {
      this.__context.deleteSync(sync);
    },
    deleteTexture: function (texture) {
      this.__context.deleteTexture(texture);
    },
    deleteTransformFeedback: function (transformFeedback) {
      this.__context.deleteTransformFeedback(transformFeedback);
    },
    deleteVertexArray: function (vertexArray) {
      this.__context.deleteVertexArray(vertexArray);
    },
    depthFunc: function (func) {
      this.__context.depthFunc(func);
    },
    depthMask: function (flag) {
      this.__context.depthMask(flag);
    },
    depthRange: function (zNear, zFar) {
      this.__context.depthRange(zNear, zFar);
    },
    depthRangef: function (zNear, zFar) {
      this.__context.depthRange(zNear, zFar);
    },
    detachShader: function (program, shader) {
      this.__context.detachShader(program, shader);
    },
    disable: function (cap) {
      this.__context.disable(cap);
    },
    disableVertexAttribArray: function (index) {
      this.__context.disableVertexAttribArray(index);
    },
    drawArrays: function (mode, first, count) {
      this.__context.drawArrays(mode, first, count);
    },
    drawArraysInstanced: function (mode, first, count, instanceCount) {
      this.__context.drawArraysInstanced(mode, first, count, instanceCount);
    },
    drawBuffers: function (buffers) {
      this.__context.drawBuffers(buffers);
    },
    drawElements: function (mode, count, type, offset) {
      this.__context.drawElements(mode, count, type, offset);
    },
    drawElementsInstanced: function (mode, count, type, offset, instanceCount) {
      this.__context.drawElementsInstanced(
        mode,
        count,
        type,
        offset,
        instanceCount
      );
    },
    drawRangeElements: function (mode, start, end, count, type, offset) {
      this.__context.drawRangeElements(mode, start, end, count, type, offset);
    },
    enable: function (cap) {
      this.__context.enable(cap);
    },
    enableVertexAttribArray: function (index) {
      this.__context.enableVertexAttribArray(index);
    },
    endQuery: function (target) {
      this.__context.endQuery(target);
    },
    endTransformFeedback: function () {
      this.__context.endTransformFeedback();
    },
    fenceSync: function (condition, flags) {
      return this.__context.fenceSync(condition, flags);
    },
    finish: function () {
      this.__context.finish();
    },
    flush: function () {
      this.__context.flush();
    },
    framebufferRenderbuffer: function (
      target,
      attachment,
      renderbuffertarget,
      renderbuffer
    ) {
      this.__context.framebufferRenderbuffer(
        target,
        attachment,
        renderbuffertarget,
        renderbuffer
      );
    },
    framebufferTexture2D: function (
      target,
      attachment,
      textarget,
      texture,
      level
    ) {
      this.__context.framebufferTexture2D(
        target,
        attachment,
        textarget,
        texture,
        level
      );
    },
    framebufferTextureLayer: function (
      target,
      attachment,
      texture,
      level,
      layer
    ) {
      this.__context.framebufferTextureLayer(
        target,
        attachment,
        texture,
        level,
        layer
      );
    },
    frontFace: function (mode) {
      this.__context.frontFace(mode);
    },
    generateMipmap: function (target) {
      this.__context.generateMipmap(target);
    },
    getActiveAttrib: function (program, index) {
      return this.__context.getActiveAttrib(program, index);
    },
    getActiveUniform: function (program, index) {
      return this.__context.getActiveUniform(program, index);
    },
    getActiveUniformBlocki: function (program, uniformBlockIndex, pname) {
      return this.__context.getActiveUniformBlockParameter(
        program,
        uniformBlockIndex,
        pname
      );
    },
    getActiveUniformBlockiv: function (
      program,
      uniformBlockIndex,
      pname,
      params
    ) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getActiveUniformBlockParameter(
        program,
        uniformBlockIndex,
        pname
      );
    },
    getActiveUniformBlockName: function (program, uniformBlockIndex) {
      return this.__context.getActiveUniformBlockName(
        program,
        uniformBlockIndex
      );
    },
    getActiveUniformBlockParameter: function (
      program,
      uniformBlockIndex,
      pname
    ) {
      return this.__context.getActiveUniformBlockParameter(
        program,
        uniformBlockIndex,
        pname
      );
    },
    getActiveUniforms: function (program, uniformIndices, pname) {
      return this.__context.getActiveUniforms(program, uniformIndices, pname);
    },
    getActiveUniformsiv: function (program, uniformIndices, pname, params) {},
    getAttachedShaders: function (program) {
      return this.__context.getAttachedShaders(program);
    },
    getAttribLocation: function (program, name) {
      return this.__context.getAttribLocation(program, name);
    },
    getBoolean: function (pname) {
      return this.__context.getParameter(pname);
    },
    getBooleanv: function (pname, params) {
      var buffer = params;
      var this1;
      if (params != null) {
        this1 = new Uint8Array(params);
      } else {
        this1 = null;
      }
      var view = this1;
      var result = this.__context.getParameter(pname);
      if (result instanceof Array && result.__enum__ == null) {
        var data = result;
        var _g1 = 0;
        var _g = data.length;
        while (_g1 < _g) {
          var i = _g1++;
          view[i] = data[i] ? 1 : 0;
        }
      } else {
        view[0] = js_Boot.__cast(result, Bool) ? 1 : 0;
      }
    },
    getBufferParameter: function (target, pname) {
      return this.__context.getBufferParameter(target, pname);
    },
    getBufferParameteri: function (target, pname) {
      return this.__context.getBufferParameter(target, pname);
    },
    getBufferParameteri64v: function (target, pname, params) {},
    getBufferParameteriv: function (target, pname, data) {
      var buffer = data;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getBufferParameter(target, pname);
    },
    getBufferPointerv: function (target, pname) {
      return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
    },
    getBufferSubData: function (
      target,
      srcByteOffset,
      dstData,
      srcOffset,
      length
    ) {
      if (typeof dstData == "number" && (dstData | 0) === dstData) {
        this.__context.getBufferSubData(target, srcByteOffset, srcOffset);
      } else if (srcOffset != null) {
        this.__context.getBufferSubData(
          target,
          srcByteOffset,
          dstData,
          srcOffset,
          length
        );
      } else {
        this.__context.getBufferSubData(target, srcByteOffset, dstData);
      }
    },
    getContextAttributes: function () {
      return this.__context.getContextAttributes();
    },
    getError: function () {
      return this.__context.getError();
    },
    getExtension: function (name) {
      return this.__context.getExtension(name);
    },
    getFloat: function (pname) {
      return this.__context.getParameter(pname);
    },
    getFloatv: function (pname, params) {
      var buffer = params;
      var this1;
      if (params != null) {
        this1 = new Float32Array(params);
      } else {
        this1 = null;
      }
      var view = this1;
      var result = this.__context.getParameter(pname);
      if (js_Boot.__instanceof(result, ArrayBufferView)) {
        var data = result;
        var _g1 = 0;
        var _g = data.length;
        while (_g1 < _g) {
          var i = _g1++;
          view[i] = data[i];
        }
      } else {
        view[0] = js_Boot.__cast(result, Float);
      }
    },
    getFragDataLocation: function (program, name) {
      return this.__context.getFragDataLocation(program, name);
    },
    getFramebufferAttachmentParameter: function (target, attachment, pname) {
      return this.__context.getFramebufferAttachmentParameter(
        target,
        attachment,
        pname
      );
    },
    getFramebufferAttachmentParameteri: function (target, attachment, pname) {
      return this.__context.getFramebufferAttachmentParameter(
        target,
        attachment,
        pname
      );
    },
    getFramebufferAttachmentParameteriv: function (
      target,
      attachment,
      pname,
      params
    ) {
      var value = this.getFramebufferAttachmentParameteri(
        target,
        attachment,
        pname
      );
      if (typeof params == "number" && (params | 0) === params) {
        var buffer = params;
        var this1;
        if (buffer != null) {
          this1 = new Int32Array(buffer, 0);
        } else {
          this1 = null;
        }
        var view = this1;
        view[0] = value;
      }
    },
    getIndexedParameter: function (target, index) {
      return this.__context.getIndexedParameter(target, index);
    },
    getInteger: function (pname) {
      return this.__context.getParameter(pname);
    },
    getInteger64: function (pname) {
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    getInteger64i: function (pname) {
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    getInteger64i_v: function (pname, params) {},
    getInteger64v: function (pname, params) {},
    getIntegeri: function (pname) {
      return 0;
    },
    getIntegeri_v: function (pname, params) {},
    getIntegerv: function (pname, params) {
      var buffer = params;
      var this1;
      if (params != null) {
        this1 = new Int32Array(params);
      } else {
        this1 = null;
      }
      var view = this1;
      var result = this.__context.getParameter(pname);
      if (js_Boot.__instanceof(result, ArrayBufferView)) {
        var data = result;
        var _g1 = 0;
        var _g = data.length;
        while (_g1 < _g) {
          var i = _g1++;
          view[i] = data[i];
        }
      } else {
        view[0] = js_Boot.__cast(result, Int);
      }
    },
    getInternalformati: function (target, internalformat, pname) {
      return 0;
    },
    getInternalformativ: function (target, internalformat, pname, params) {},
    getInternalformatParameter: function (target, internalformat, pname) {
      return this.__context.getInternalformatParameter(
        target,
        internalformat,
        pname
      );
    },
    getParameter: function (pname) {
      return this.__context.getParameter(pname);
    },
    getProgramBinary: function (program, binaryFormat) {
      return null;
    },
    getProgrami: function (program, pname) {
      return this.__context.getProgramParameter(program, pname);
    },
    getProgramiv: function (program, pname, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getProgramParameter(program, pname);
    },
    getProgramInfoLog: function (program) {
      return this.__context.getProgramInfoLog(program);
    },
    getProgramParameter: function (program, pname) {
      return this.__context.getProgramParameter(program, pname);
    },
    getQuery: function (target, pname) {
      return this.__context.getQuery(target, pname);
    },
    getQueryi: function (target, pname) {
      return 0;
    },
    getQueryiv: function (target, pname, params) {},
    getQueryObjectui: function (query, pname) {
      return 0;
    },
    getQueryObjectuiv: function (query, pname, params) {},
    getQueryParameter: function (query, pname) {
      return this.__context.getQueryParameter(query, pname);
    },
    getRenderbufferParameter: function (target, pname) {
      return this.__context.getRenderbufferParameter(target, pname);
    },
    getRenderbufferParameteri: function (target, pname) {
      return this.__context.getRenderbufferParameter(target, pname);
    },
    getRenderbufferParameteriv: function (target, pname, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getRenderbufferParameter(target, pname);
    },
    getSamplerParameter: function (sampler, pname) {
      return this.__context.getSamplerParameter(sampler, pname);
    },
    getSamplerParameterf: function (sampler, pname) {
      return 0;
    },
    getSamplerParameterfv: function (sampler, pname, params) {},
    getSamplerParameteri: function (sampler, pname) {
      return 0;
    },
    getSamplerParameteriv: function (sampler, pname, params) {},
    getShaderi: function (shader, pname) {
      return this.__context.getShaderParameter(shader, pname);
    },
    getShaderiv: function (shader, pname, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getShaderParameter(shader, pname);
    },
    getShaderInfoLog: function (shader) {
      return this.__context.getShaderInfoLog(shader);
    },
    getShaderParameter: function (shader, pname) {
      return this.__context.getShaderParameter(shader, pname);
    },
    getShaderPrecisionFormat: function (shadertype, precisiontype) {
      return this.__context.getShaderPrecisionFormat(shadertype, precisiontype);
    },
    getShaderSource: function (shader) {
      return this.__context.getShaderSource(shader);
    },
    getString: function (pname) {
      if (pname == 7939) {
        return this.__context.getSupportedExtensions().join(" ");
      } else {
        return this.__context.getParameter(pname);
      }
    },
    getStringi: function (name, index) {
      return null;
    },
    getSupportedExtensions: function () {
      return this.__context.getSupportedExtensions();
    },
    getSyncParameter: function (sync, pname) {
      return this.__context.getSyncParameter(sync, pname);
    },
    getSyncParameteri: function (sync, pname) {
      return 0;
    },
    getSyncParameteriv: function (sync, pname, params) {},
    getTexParameter: function (target, pname) {
      return this.__context.getTexParameter(target, pname);
    },
    getTexParameterf: function (target, pname) {
      return this.__context.getTexParameter(target, pname);
    },
    getTexParameterfv: function (target, pname, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Float32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getTexParameter(target, pname);
    },
    getTexParameteri: function (target, pname) {
      return this.__context.getTexParameter(target, pname);
    },
    getTexParameteriv: function (target, pname, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Int32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getTexParameter(target, pname);
    },
    getTransformFeedbackVarying: function (program, index) {
      return this.__context.getTransformFeedbackVarying(program, index);
    },
    getUniform: function (program, location) {
      return this.__context.getUniform(program, location);
    },
    getUniformf: function (program, location) {
      return this.__context.getUniform(program, location);
    },
    getUniformfv: function (program, location, params) {
      var buffer = params;
      var this1;
      if (buffer != null) {
        this1 = new Float32Array(buffer, 0);
      } else {
        this1 = null;
      }
      var view = this1;
      view[0] = this.__context.getUniform(program, location);
    },
    getUniformi: function (program, location) {
      return this.__context.getUniform(program, location);
    },
    getUniformiv: function (program, location, params) {
      var value = this.getUniformi(program, location);
      if (typeof value == "number" && (value | 0) === value) {
        var buffer = params;
        var this1;
        if (buffer != null) {
          this1 = new Int32Array(buffer, 0);
        } else {
          this1 = null;
        }
        var view = this1;
        view[0] = value;
      }
    },
    getUniformui: function (program, location) {
      return 0;
    },
    getUniformuiv: function (program, location, params) {},
    getUniformBlockIndex: function (program, uniformBlockName) {
      return this.__context.getUniformBlockIndex(program, uniformBlockName);
    },
    getUniformIndices: function (program, uniformNames) {
      return this.__context.getUniformIndices(program, uniformNames);
    },
    getUniformLocation: function (program, name) {
      return this.__context.getUniformLocation(program, name);
    },
    getVertexAttrib: function (index, pname) {
      return this.__context.getVertexAttrib(index, pname);
    },
    getVertexAttribf: function (index, pname) {
      return 0;
    },
    getVertexAttribfv: function (index, pname, params) {},
    getVertexAttribi: function (index, pname) {
      return 0;
    },
    getVertexAttribIi: function (index, pname) {
      return 0;
    },
    getVertexAttribIiv: function (index, pname, params) {},
    getVertexAttribIui: function (index, pname) {
      return 0;
    },
    getVertexAttribIuiv: function (index, pname, params) {},
    getVertexAttribiv: function (index, pname, params) {},
    getVertexAttribOffset: function (index, pname) {
      return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(
        this.__context.getVertexAttribOffset(index, pname)
      );
    },
    getVertexAttribPointerv: function (index, pname) {
      return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(
        this.__context.getVertexAttribOffset(index, pname)
      );
    },
    hint: function (target, mode) {
      this.__context.hint(target, mode);
    },
    invalidateFramebuffer: function (target, attachments) {
      this.__context.invalidateFramebuffer(target, attachments);
    },
    invalidateSubFramebuffer: function (
      target,
      attachments,
      x,
      y,
      width,
      height
    ) {
      this.__context.invalidateSubFramebuffer(
        target,
        attachments,
        x,
        y,
        width,
        height
      );
    },
    isBuffer: function (buffer) {
      return this.__context.isBuffer(buffer);
    },
    isContextLost: function () {
      if (!this.__contextLost) {
        return this.__context.isContextLost();
      } else {
        return true;
      }
    },
    isEnabled: function (cap) {
      return this.__context.isEnabled(cap);
    },
    isFramebuffer: function (framebuffer) {
      return this.__context.isFramebuffer(framebuffer);
    },
    isProgram: function (program) {
      return this.__context.isProgram(program);
    },
    isQuery: function (query) {
      return this.__context.isQuery(query);
    },
    isRenderbuffer: function (renderbuffer) {
      return this.__context.isRenderbuffer(renderbuffer);
    },
    isSampler: function (sampler) {
      return this.__context.isSampler(sampler);
    },
    isShader: function (shader) {
      return this.__context.isShader(shader);
    },
    isSync: function (sync) {
      return this.__context.isSync(sync);
    },
    isTexture: function (texture) {
      return this.__context.isTexture(texture);
    },
    isTransformFeedback: function (transformFeedback) {
      return this.__context.isTransformFeedback(transformFeedback);
    },
    isVertexArray: function (vertexArray) {
      return this.__context.isVertexArray(vertexArray);
    },
    lineWidth: function (width) {
      this.__context.lineWidth(width);
    },
    linkProgram: function (program) {
      this.__context.linkProgram(program);
    },
    mapBufferRange: function (target, offset, length, access) {},
    pauseTransformFeedback: function () {
      this.__context.pauseTransformFeedback();
    },
    pixelStorei: function (pname, param) {
      this.__context.pixelStorei(pname, param);
    },
    polygonOffset: function (factor, units) {
      this.__context.polygonOffset(factor, units);
    },
    programBinary: function (program, binaryFormat, binary, length) {},
    programParameteri: function (program, pname, value) {},
    readBuffer: function (src) {
      this.__context.readBuffer(src);
    },
    readPixels: function (
      x,
      y,
      width,
      height,
      format,
      type,
      pixels,
      dstOffset
    ) {
      pixels = this.__prepareData(null, pixels);
      if (pixels == null) {
        return;
      }
      if (js_Boot.__instanceof(pixels, ArrayBuffer)) {
        var elements = pixels;
        var this1;
        if (elements != null) {
          this1 = new Uint8Array(elements);
        } else {
          this1 = null;
        }
        pixels = this1;
      }
      if (this.version > 1 && dstOffset != null) {
        this.__context.readPixels(
          x,
          y,
          width,
          height,
          format,
          type,
          pixels,
          dstOffset
        );
      } else {
        this.__context.readPixels(x, y, width, height, format, type, pixels);
      }
    },
    releaseShaderCompiler: function () {},
    renderbufferStorage: function (target, internalformat, width, height) {
      this.__context.renderbufferStorage(target, internalformat, width, height);
    },
    renderbufferStorageMultisample: function (
      target,
      samples,
      internalFormat,
      width,
      height
    ) {
      this.__context.renderbufferStorageMultisample(
        target,
        samples,
        internalFormat,
        width,
        height
      );
    },
    resumeTransformFeedback: function () {
      this.__context.resumeTransformFeedback();
    },
    sampleCoverage: function (value, invert) {
      this.__context.sampleCoverage(value, invert);
    },
    samplerParameterf: function (sampler, pname, param) {
      this.__context.samplerParameterf(sampler, pname, param);
    },
    samplerParameteri: function (sampler, pname, param) {
      this.__context.samplerParameteri(sampler, pname, param);
    },
    scissor: function (x, y, width, height) {
      this.__context.scissor(x, y, width, height);
    },
    shaderBinary: function (shaders, binaryformat, binary, length) {},
    shaderSource: function (shader, source) {
      this.__context.shaderSource(shader, source);
    },
    stencilFunc: function (func, ref, mask) {
      this.__context.stencilFunc(func, ref, mask);
    },
    stencilFuncSeparate: function (face, func, ref, mask) {
      this.__context.stencilFuncSeparate(face, func, ref, mask);
    },
    stencilMask: function (mask) {
      this.__context.stencilMask(mask);
    },
    stencilMaskSeparate: function (face, mask) {
      this.__context.stencilMaskSeparate(face, mask);
    },
    stencilOp: function (fail, zfail, zpass) {
      this.__context.stencilOp(fail, zfail, zpass);
    },
    stencilOpSeparate: function (face, fail, zfail, zpass) {
      this.__context.stencilOpSeparate(face, fail, zfail, zpass);
    },
    texImage2D: function (
      target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      srcData,
      srcOffset
    ) {
      if (format == null) {
        this.__context.texImage2D(
          target,
          level,
          internalformat,
          width,
          height,
          border
        );
      } else {
        srcData = this.__prepareData(null, srcData);
        if (srcData != null && js_Boot.__instanceof(srcData, ArrayBuffer)) {
          var elements = srcData;
          var this1;
          if (elements != null) {
            this1 = new Uint8Array(elements);
          } else {
            this1 = null;
          }
          srcData = this1;
        }
        if (this.version > 1 && srcOffset != null) {
          this.__context.texImage2D(
            target,
            level,
            internalformat,
            width,
            height,
            border,
            format,
            type,
            srcData,
            srcOffset
          );
        } else {
          this.__context.texImage2D(
            target,
            level,
            internalformat,
            width,
            height,
            border,
            format,
            type,
            srcData
          );
        }
      }
    },
    texImage3D: function (
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      srcData,
      srcOffset
    ) {
      this.__context.texImage3D(
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        srcData,
        srcOffset
      );
    },
    texStorage2D: function (target, level, internalformat, width, height) {
      this.__context.texStorage2D(target, level, internalformat, width, height);
    },
    texStorage3D: function (
      target,
      level,
      internalformat,
      width,
      height,
      depth
    ) {
      this.__context.texStorage3D(
        target,
        level,
        internalformat,
        width,
        height,
        depth
      );
    },
    texParameterf: function (target, pname, param) {
      this.__context.texParameterf(target, pname, param);
    },
    texParameteri: function (target, pname, param) {
      this.__context.texParameteri(target, pname, param);
    },
    texSubImage2D: function (
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      srcData,
      srcOffset
    ) {
      if (type == null) {
        this.__context.texSubImage2D(
          target,
          level,
          xoffset,
          yoffset,
          width,
          height,
          format
        );
      } else {
        srcData = this.__prepareData(null, srcData);
        if (srcData != null && js_Boot.__instanceof(srcData, ArrayBuffer)) {
          var elements = srcData;
          var this1;
          if (elements != null) {
            this1 = new Uint8Array(elements);
          } else {
            this1 = null;
          }
          srcData = this1;
        }
        if (this.version > 1 && srcOffset != null) {
          this.__context.texSubImage2D(
            target,
            level,
            xoffset,
            yoffset,
            width,
            height,
            format,
            type,
            srcData,
            srcOffset
          );
        } else {
          this.__context.texSubImage2D(
            target,
            level,
            xoffset,
            yoffset,
            width,
            height,
            format,
            type,
            srcData
          );
        }
      }
    },
    texSubImage3D: function (
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      source,
      srcOffset
    ) {
      if (srcOffset != null) {
        this.__context.texSubImage3D(
          target,
          level,
          xoffset,
          yoffset,
          zoffset,
          width,
          height,
          depth,
          format,
          type,
          source,
          srcOffset
        );
      } else {
        this.__context.texSubImage3D(
          target,
          level,
          xoffset,
          yoffset,
          zoffset,
          width,
          height,
          depth,
          format,
          type,
          source
        );
      }
    },
    transformFeedbackVaryings: function (program, varyings, bufferMode) {
      this.__context.transformFeedbackVaryings(program, varyings, bufferMode);
    },
    uniform1f: function (location, v0) {
      this.__context.uniform1f(location, v0);
    },
    uniform1fv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform1fv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform1fv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform1fv(location, data);
      }
    },
    uniform1i: function (location, v0) {
      this.__context.uniform1i(location, v0);
    },
    uniform1iv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform1iv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform1iv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform1iv(location, data);
      }
    },
    uniform1ui: function (location, v0) {
      this.__context.uniform1ui(location, v0);
      return;
    },
    uniform1uiv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform1uiv(location, data1);
      } else if (srcOffset != null) {
        this.__context.uniform1uiv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform1uiv(location, data);
      }
    },
    uniform2f: function (location, v0, v1) {
      this.__context.uniform2f(location, v0, v1);
    },
    uniform2fv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform2fv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform2fv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform2fv(location, data);
      }
    },
    uniform2i: function (location, x, y) {
      this.__context.uniform2i(location, x, y);
    },
    uniform2iv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform2iv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform2iv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform2iv(location, data);
      }
    },
    uniform2ui: function (location, v0, v1) {
      this.__context.uniform2ui(location, v0, v1);
    },
    uniform2uiv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform2uiv(location, data1);
      } else if (srcOffset != null) {
        this.__context.uniform2uiv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform2uiv(location, data);
      }
    },
    uniform3f: function (location, v0, v1, v2) {
      this.__context.uniform3f(location, v0, v1, v2);
    },
    uniform3fv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform3fv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform3fv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform3fv(location, data);
      }
    },
    uniform3i: function (location, x, y, z) {
      this.__context.uniform3i(location, x, y, z);
    },
    uniform3iv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform3iv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform3iv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform3iv(location, data);
      }
    },
    uniform3ui: function (location, v0, v1, v2) {
      this.__context.uniform3ui(location, v0, v1, v2);
    },
    uniform3uiv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform3uiv(location, data1);
      } else if (srcOffset != null) {
        this.__context.uniform3uiv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform3uiv(location, data);
      }
    },
    uniform4f: function (location, v0, v1, v2, v3) {
      this.__context.uniform4f(location, v0, v1, v2, v3);
    },
    uniform4fv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform4fv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform4fv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform4fv(location, data);
      }
    },
    uniform4i: function (location, v0, v1, v2, v3) {
      this.__context.uniform4i(location, v0, v1, v2, v3);
    },
    uniform4iv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform4iv(location, data1);
      } else if (this.version > 1 && srcOffset != null) {
        this.__context.uniform4iv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform4iv(location, data);
      }
    },
    uniform4ui: function (location, v0, v1, v2, v3) {
      this.__context.uniform4ui(location, v0, v1, v2, v3);
    },
    uniform4uiv: function (location, data, srcOffset, srcLength) {
      if (typeof data == "number" && (data | 0) === data) {
        var data1 = srcOffset;
        data1 = this.__prepareData(null, data1);
        if (js_Boot.__instanceof(data1, ArrayBuffer)) {
          var elements = data1;
          var this1;
          if (elements != null) {
            this1 = new Float32Array(elements);
          } else {
            this1 = null;
          }
          data1 = this1;
        }
        this.__context.uniform4uiv(location, data1);
      } else if (srcOffset != null) {
        this.__context.uniform4uiv(location, data, srcOffset, srcLength);
      } else {
        this.__context.uniform4uiv(location, data);
      }
    },
    uniformBlockBinding: function (
      program,
      uniformBlockIndex,
      uniformBlockBinding
    ) {
      this.__context.uniformBlockBinding(
        program,
        uniformBlockIndex,
        uniformBlockBinding
      );
    },
    uniformMatrix2fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (this.version > 1 && typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix2fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix2fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix2fv(location, count, transpose);
      }
    },
    uniformMatrix2x3fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix2x3fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix2x3fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix2x3fv(location, count, transpose);
      }
    },
    uniformMatrix2x4fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix2x4fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix2x3fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix2x4fv(location, count, transpose);
      }
    },
    uniformMatrix3fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (this.version > 1 && typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix3fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix3fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix3fv(location, count, transpose);
      }
    },
    uniformMatrix3x2fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix3x2fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix3x2fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix3x2fv(location, count, transpose);
      }
    },
    uniformMatrix3x4fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix3x4fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix3x4fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix3x4fv(location, count, transpose);
      }
    },
    uniformMatrix4fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (this.version > 1 && typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix4fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix4fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix4fv(location, count, transpose);
      }
    },
    uniformMatrix4x2fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix4x2fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix4x2fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix4x2fv(location, count, transpose);
      }
    },
    uniformMatrix4x3fv: function (location, count, transpose, v, srcOffset) {
      if (v != null) {
        if (typeof v == "number" && (v | 0) === v) {
          this.__context.uniformMatrix4x3fv(
            location,
            count,
            transpose,
            v,
            srcOffset
          );
        } else {
          v = this.__prepareData(null, v);
          if (js_Boot.__instanceof(v, ArrayBuffer)) {
            var elements = v;
            var this1;
            if (elements != null) {
              this1 = new Float32Array(elements);
            } else {
              this1 = null;
            }
            v = this1;
          }
          this.__context.uniformMatrix4x3fv(location, transpose, v);
        }
      } else {
        this.__context.uniformMatrix4x3fv(location, count, transpose);
      }
    },
    unmapBuffer: function (target) {
      return false;
    },
    useProgram: function (program) {
      this.__context.useProgram(program);
    },
    validateProgram: function (program) {
      this.__context.validateProgram(program);
    },
    vertexAttrib1f: function (index, v0) {
      this.__context.vertexAttrib1f(index, v0);
    },
    vertexAttrib1fv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Float32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttrib1fv(index, v);
    },
    vertexAttrib2f: function (index, v0, v1) {
      this.__context.vertexAttrib2f(index, v0, v1);
    },
    vertexAttrib2fv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Float32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttrib2fv(index, v);
    },
    vertexAttrib3f: function (index, v0, v1, v2) {
      this.__context.vertexAttrib3f(index, v0, v1, v2);
    },
    vertexAttrib3fv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Float32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttrib3fv(index, v);
    },
    vertexAttrib4f: function (index, v0, v1, v2, v3) {
      this.__context.vertexAttrib4f(index, v0, v1, v2, v3);
    },
    vertexAttrib4fv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Float32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttrib4fv(index, v);
    },
    vertexAttribDivisor: function (index, divisor) {
      this.__context.vertexAttribDivisor(index, divisor);
    },
    vertexAttribI4i: function (index, v0, v1, v2, v3) {
      this.__context.vertexAttribI4i(index, v0, v1, v2, v3);
    },
    vertexAttribI4iv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Int32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttribI4iv(index, v);
    },
    vertexAttribI4ui: function (index, v0, v1, v2, v3) {
      this.__context.vertexAttribI4ui(index, v0, v1, v2, v3);
    },
    vertexAttribI4uiv: function (index, v) {
      v = this.__prepareData(null, v);
      if (js_Boot.__instanceof(v, ArrayBuffer)) {
        var elements = v;
        var this1;
        if (elements != null) {
          this1 = new Uint32Array(elements);
        } else {
          this1 = null;
        }
        v = this1;
      }
      this.__context.vertexAttribI4uiv(index, v);
    },
    vertexAttribIPointer: function (index, size, type, stride, offset) {
      this.__context.vertexAttribIPointer(index, size, type, stride, offset);
    },
    vertexAttribPointer: function (
      index,
      size,
      type,
      normalized,
      stride,
      offset
    ) {
      this.__context.vertexAttribPointer(
        index,
        size,
        type,
        normalized,
        stride,
        offset
      );
    },
    viewport: function (x, y, width, height) {
      this.__context.viewport(x, y, width, height);
    },
    waitSync: function (sync, flags, timeout) {
      this.__context.waitSync(sync, flags, timeout);
    },
    __isArrayBufferView: function (object) {
      return (
        object &&
        object.buffer instanceof ArrayBuffer &&
        object.byteLength !== undefined
      );
    },
    __prepareData: function (size, data) {
      if (data != null) {
        if (!data) return null;
        if (size != null) {
          if (size <= 0) {
            return null;
          } else if (this.__isArrayBufferView(data)) {
            var arrayBufferView = data;
            if (arrayBufferView.byteLength == size) {
              return data;
            }
            var buffer = arrayBufferView.buffer;
            var byteoffset = arrayBufferView.byteOffset;
            var this1;
            if (buffer != null) {
              if (size == null) {
                this1 = new Uint8Array(buffer, byteoffset);
              } else {
                this1 = new Uint8Array(buffer, byteoffset, size);
              }
            } else {
              this1 = null;
            }
            return this1;
          } else if (js_Boot.__instanceof(data, ArrayBuffer)) {
            var arrayBuffer = data;
            var this2;
            if (arrayBuffer != null) {
              if (size == null) {
                this2 = new Uint8Array(arrayBuffer, 0);
              } else {
                this2 = new Uint8Array(arrayBuffer, 0, size);
              }
            } else {
              this2 = null;
            }
            return this2;
          } else if (js_Boot.__instanceof(data, lime_utils_BytePointerData)) {
            var bytePointer = data;
            var buffer1 = bytePointer.bytes.b.bufferValue;
            var byteoffset1 = bytePointer.offset;
            var this3;
            if (buffer1 != null) {
              if (size == null) {
                this3 = new Uint8Array(buffer1, byteoffset1);
              } else {
                this3 = new Uint8Array(buffer1, byteoffset1, size);
              }
            } else {
              this3 = null;
            }
            return this3;
          } else if (js_Boot.__instanceof(data, haxe_io_Bytes)) {
            var bytes = data;
            var buffer2 = bytes.b.bufferValue;
            var this4;
            if (buffer2 != null) {
              if (size == null) {
                this4 = new Uint8Array(buffer2, 0);
              } else {
                this4 = new Uint8Array(buffer2, 0, size);
              }
            } else {
              this4 = null;
            }
            return this4;
          }
        } else if (js_Boot.__instanceof(data, lime_utils_BytePointerData)) {
          var bytePointer1 = data;
          if (bytePointer1.offset != 0) {
            var buffer3 = bytePointer1.bytes.b.bufferValue;
            var byteoffset2 = bytePointer1.offset;
            var this5;
            if (buffer3 != null) {
              this5 = new Uint8Array(buffer3, byteoffset2);
            } else {
              this5 = null;
            }
            return this5;
          } else {
            return bytePointer1.bytes.b.bufferValue;
          }
        } else if (js_Boot.__instanceof(data, haxe_io_Bytes)) {
          var bytes1 = data;
          return bytes1.b.bufferValue;
        }
      }
      return data;
    },
    get_canvas: function () {
      return this.__context.canvas;
    },
    get_drawingBufferHeight: function () {
      return this.__context.drawingBufferHeight;
    },
    get_drawingBufferWidth: function () {
      return this.__context.drawingBufferWidth;
    },
    __class__: lime__$backend_html5_HTML5GLRenderContext,
    __properties__: {
      get_drawingBufferWidth: "get_drawingBufferWidth",
      get_drawingBufferHeight: "get_drawingBufferHeight",
      get_canvas: "get_canvas",
    },
  };
  var lime__$backend_html5_HTML5HTTPRequest = function () {};
  $hxClasses["lime._backend.html5.HTML5HTTPRequest"] =
    lime__$backend_html5_HTML5HTTPRequest;
  lime__$backend_html5_HTML5HTTPRequest.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5HTTPRequest",
  ];
  lime__$backend_html5_HTML5HTTPRequest.loadImage = function (uri) {
    var promise = new lime_app_Promise();
    if (
      lime__$backend_html5_HTML5HTTPRequest.activeRequests <
      lime__$backend_html5_HTML5HTTPRequest.requestLimit
    ) {
      lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
      lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri, promise);
    } else {
      lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
        instance: null,
        uri: uri,
        promise: promise,
        type: "IMAGE",
      });
    }
    return promise.future;
  };
  lime__$backend_html5_HTML5HTTPRequest.processQueue = function () {
    if (
      lime__$backend_html5_HTML5HTTPRequest.activeRequests <
        lime__$backend_html5_HTML5HTTPRequest.requestLimit &&
      lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0
    ) {
      lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
      var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
      var _g = queueItem.type;
      switch (_g) {
        case "BINARY":
          queueItem.instance.__loadData(queueItem.uri, queueItem.promise);
          break;
        case "IMAGE":
          lime__$backend_html5_HTML5HTTPRequest.__loadImage(
            queueItem.uri,
            queueItem.promise
          );
          break;
        case "TEXT":
          queueItem.instance.__loadText(queueItem.uri, queueItem.promise);
          break;
        default:
          lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
      }
    }
  };
  lime__$backend_html5_HTML5HTTPRequest.__loadImage = function (uri, promise) {
    var image = new Image();
    image.crossOrigin = "Anonymous";
    image.addEventListener(
      "load",
      function (event) {
        var buffer = new lime_graphics_ImageBuffer(
          null,
          image.width,
          image.height
        );
        buffer.__srcImage = image;
        lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
        lime__$backend_html5_HTML5HTTPRequest.processQueue();
        promise.complete(new lime_graphics_Image(buffer));
      },
      false
    );
    image.addEventListener(
      "progress",
      function (event1) {
        promise.progress(event1.loaded, event1.total);
      },
      false
    );
    image.addEventListener(
      "error",
      function (event2) {
        lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
        lime__$backend_html5_HTML5HTTPRequest.processQueue();
        promise.error(event2.detail);
      },
      false
    );
    image.src = uri;
  };
  lime__$backend_html5_HTML5HTTPRequest.prototype = {
    binary: null,
    parent: null,
    request: null,
    cancel: function () {
      if (this.request != null) {
        this.request.abort();
      }
    },
    init: function (parent) {
      this.parent = parent;
    },
    load: function (uri, progress, readyStateChange) {
      this.request = new XMLHttpRequest();
      this.request.addEventListener("progress", progress, false);
      this.request.onreadystatechange = readyStateChange;
      var query = "";
      if (this.parent.data == null) {
        var key = this.parent.formData.keys();
        while (key.hasNext()) {
          var key1 = key.next();
          if (query.length > 0) {
            query += "&";
          }
          var query1 = encodeURIComponent(key1) + "=";
          var _this = this.parent.formData;
          var s = Std.string(
            __map_reserved[key1] != null
              ? _this.getReserved(key1)
              : _this.h[key1]
          );
          query += query1 + encodeURIComponent(s);
        }
        if (this.parent.method == "GET" && query != "") {
          if (uri.indexOf("?") > -1) {
            uri += "&" + query;
          } else {
            uri += "?" + query;
          }
          query = "";
        }
      }
      this.request.open(Std.string(this.parent.method), uri, true);
      if (this.parent.timeout > 0) {
        this.request.timeout = this.parent.timeout;
      }
      if (this.binary) {
        this.request.responseType = "arraybuffer";
      }
      var hasContentType = false;
      var _g = 0;
      var _g1 = this.parent.headers;
      while (_g < _g1.length) {
        var header = _g1[_g];
        ++_g;
        if (header.name == "Content-Type") {
          hasContentType = true;
        }
        this.request.setRequestHeader(header.name, header.value);
      }
      if (!hasContentType) {
        this.request.setRequestHeader("Content-Type", this.parent.contentType);
      }
      if (this.parent.data != null) {
        this.request.send(this.parent.data.b.bufferValue);
      } else {
        this.request.send(query);
      }
    },
    loadData: function (uri) {
      var promise = new lime_app_Promise();
      if (
        lime__$backend_html5_HTML5HTTPRequest.activeRequests <
        lime__$backend_html5_HTML5HTTPRequest.requestLimit
      ) {
        lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
        this.__loadData(uri, promise);
      } else {
        lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
          instance: this,
          uri: uri,
          promise: promise,
          type: "BINARY",
        });
      }
      return promise.future;
    },
    loadText: function (uri) {
      var promise = new lime_app_Promise();
      if (
        lime__$backend_html5_HTML5HTTPRequest.activeRequests <
        lime__$backend_html5_HTML5HTTPRequest.requestLimit
      ) {
        lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
        this.__loadText(uri, promise);
      } else {
        lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
          instance: this,
          uri: uri,
          promise: promise,
          type: "TEXT",
        });
      }
      return promise.future;
    },
    processResponse: function () {
      if (this.parent.enableResponseHeaders) {
        this.parent.responseHeaders = [];
        var name;
        var value;
        var _g = 0;
        var _g1 = this.request.getAllResponseHeaders().split("\n");
        while (_g < _g1.length) {
          var line = _g1[_g];
          ++_g;
          name = StringTools.trim(
            HxOverrides.substr(line, 0, line.indexOf(":"))
          );
          value = StringTools.trim(
            HxOverrides.substr(line, line.indexOf(":") + 1, null)
          );
          if (name != "") {
            this.parent.responseHeaders.push(
              new lime_net_HTTPRequestHeader(name, value)
            );
          }
        }
      }
      this.parent.responseStatus = this.request.status;
    },
    __loadData: function (uri, promise) {
      var _gthis = this;
      var progress = function (event) {
        promise.progress(event.loaded, event.total);
      };
      var readyStateChange = function (event1) {
        if (_gthis.request.readyState != 4) {
          return;
        }
        if (
          _gthis.request.status != null &&
          _gthis.request.status >= 200 &&
          _gthis.request.status <= 400
        ) {
          var bytes;
          if (_gthis.request.responseType == "") {
            bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
          } else {
            bytes = haxe_io_Bytes.ofData(_gthis.request.response);
          }
          _gthis.processResponse();
          promise.complete(bytes);
        } else {
          _gthis.processResponse();
          promise.error(_gthis.request.status);
        }
        _gthis.request = null;
        lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
        lime__$backend_html5_HTML5HTTPRequest.processQueue();
      };
      this.binary = true;
      this.load(uri, progress, readyStateChange);
    },
    __loadText: function (uri, promise) {
      var _gthis = this;
      var progress = function (event) {
        promise.progress(event.loaded, event.total);
      };
      var readyStateChange = function (event1) {
        if (_gthis.request.readyState != 4) {
          return;
        }
        if (
          _gthis.request.status != null &&
          _gthis.request.status >= 200 &&
          _gthis.request.status <= 400
        ) {
          _gthis.processResponse();
          promise.complete(_gthis.request.responseText);
        } else {
          _gthis.processResponse();
          promise.error(_gthis.request.status);
        }
        _gthis.request = null;
        lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
        lime__$backend_html5_HTML5HTTPRequest.processQueue();
      };
      this.binary = false;
      this.load(uri, progress, readyStateChange);
    },
    __class__: lime__$backend_html5_HTML5HTTPRequest,
  };
  var lime__$backend_html5_HTML5Mouse = function () {};
  $hxClasses["lime._backend.html5.HTML5Mouse"] =
    lime__$backend_html5_HTML5Mouse;
  lime__$backend_html5_HTML5Mouse.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5Mouse",
  ];
  lime__$backend_html5_HTML5Mouse.hide = function () {
    if (!lime__$backend_html5_HTML5Mouse.__hidden) {
      lime__$backend_html5_HTML5Mouse.__hidden = true;
      var _g = 0;
      var _g1 = lime_app_Application.current.__windows;
      while (_g < _g1.length) {
        var $window = _g1[_g];
        ++_g;
        $window.backend.element.style.cursor = "none";
      }
    }
  };
  lime__$backend_html5_HTML5Mouse.show = function () {
    if (lime__$backend_html5_HTML5Mouse.__hidden) {
      lime__$backend_html5_HTML5Mouse.__hidden = false;
      var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
      lime__$backend_html5_HTML5Mouse.__cursor = null;
      lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
    }
  };
  lime__$backend_html5_HTML5Mouse.warp = function (x, y, window) {};
  lime__$backend_html5_HTML5Mouse.get_cursor = function () {
    if (lime__$backend_html5_HTML5Mouse.__cursor == null) {
      return lime_ui_MouseCursor.DEFAULT;
    }
    return lime__$backend_html5_HTML5Mouse.__cursor;
  };
  lime__$backend_html5_HTML5Mouse.set_cursor = function (value) {
    if (lime__$backend_html5_HTML5Mouse.__cursor != value) {
      if (!lime__$backend_html5_HTML5Mouse.__hidden) {
        var _g = 0;
        var _g1 = lime_app_Application.current.__windows;
        while (_g < _g1.length) {
          var $window = _g1[_g];
          ++_g;
          var tmp;
          switch (value[1]) {
            case 0:
              tmp = "default";
              break;
            case 1:
              tmp = "crosshair";
              break;
            case 3:
              tmp = "move";
              break;
            case 4:
              tmp = "pointer";
              break;
            case 5:
              tmp = "nesw-resize";
              break;
            case 6:
              tmp = "ns-resize";
              break;
            case 7:
              tmp = "nwse-resize";
              break;
            case 8:
              tmp = "ew-resize";
              break;
            case 9:
              tmp = "text";
              break;
            case 10:
              tmp = "wait";
              break;
            case 11:
              tmp = "wait";
              break;
            default:
              tmp = "auto";
          }
          $window.backend.element.style.cursor = tmp;
        }
      }
      lime__$backend_html5_HTML5Mouse.__cursor = value;
    }
    return lime__$backend_html5_HTML5Mouse.__cursor;
  };
  lime__$backend_html5_HTML5Mouse.get_lock = function () {
    return false;
  };
  lime__$backend_html5_HTML5Mouse.set_lock = function (value) {
    return value;
  };
  var lime__$backend_html5_HTML5Renderer = function (parent) {
    this.parent = parent;
  };
  $hxClasses["lime._backend.html5.HTML5Renderer"] =
    lime__$backend_html5_HTML5Renderer;
  lime__$backend_html5_HTML5Renderer.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5Renderer",
  ];
  lime__$backend_html5_HTML5Renderer.prototype = {
    parent: null,
    create: function () {
      this.createContext();
      var _g = this.parent.context;
      if (_g[1] == 0) {
        this.parent.window.backend.canvas.addEventListener(
          "webglcontextlost",
          $bind(this, this.handleEvent),
          false
        );
        this.parent.window.backend.canvas.addEventListener(
          "webglcontextrestored",
          $bind(this, this.handleEvent),
          false
        );
      }
    },
    createContext: function () {
      if (this.parent.window.backend.div != null) {
        this.parent.context = lime_graphics_RenderContext.DOM(
          this.parent.window.backend.div
        );
        this.parent.type = lime_graphics_RendererType.DOM;
      } else if (this.parent.window.backend.canvas != null) {
        var webgl = null;
        if (webgl == null) {
          this.parent.context = lime_graphics_RenderContext.CANVAS(
            this.parent.window.backend.canvas.getContext("2d")
          );
          this.parent.type = lime_graphics_RendererType.CANVAS;
        } else {
          lime_graphics_opengl_GL.context =
            new lime__$backend_html5_HTML5GLRenderContext(webgl);
          this.parent.context = lime_graphics_RenderContext.OPENGL(
            lime_graphics_opengl_GL.context
          );
          this.parent.type = lime_graphics_RendererType.OPENGL;
        }
      }
    },
    flip: function () {},
    handleEvent: function (event) {
      var _g = event.type;
      switch (_g) {
        case "webglcontextlost":
          event.preventDefault();
          if (lime_graphics_opengl_GL.context != null) {
            lime_graphics_opengl_GL.context.__contextLost = true;
          }
          this.parent.context = null;
          this.parent.onContextLost.dispatch();
          break;
        case "webglcontextrestored":
          this.createContext();
          this.parent.onContextRestored.dispatch(this.parent.context);
          break;
        default:
      }
    },
    readPixels: function (rect) {
      if (this.parent.window.backend.canvas != null) {
        if (rect == null) {
          rect = new lime_math_Rectangle(
            0,
            0,
            this.parent.window.backend.canvas.width,
            this.parent.window.backend.canvas.height
          );
        } else {
          rect.__contract(
            0,
            0,
            this.parent.window.backend.canvas.width,
            this.parent.window.backend.canvas.height
          );
        }
        if (rect.width > 0 && rect.height > 0) {
          var canvas = window.document.createElement("canvas");
          canvas.width = rect.width | 0;
          canvas.height = rect.height | 0;
          var context = canvas.getContext("2d");
          context.drawImage(
            this.parent.window.backend.canvas,
            -rect.x,
            -rect.y
          );
          return lime_graphics_Image.fromCanvas(canvas);
        }
      }
      return null;
    },
    render: function () {},
    __class__: lime__$backend_html5_HTML5Renderer,
  };
  var lime__$backend_html5_HTML5Window = function (parent) {
    this.unusedTouchesPool = new List();
    this.scale = 1.0;
    this.currentTouches = new haxe_ds_IntMap();
    this.parent = parent;
    if (
      parent.config != null &&
      Object.prototype.hasOwnProperty.call(parent.config, "element")
    ) {
      this.element = parent.config.element;
    }
    if (
      parent.config != null &&
      Object.prototype.hasOwnProperty.call(parent.config, "allowHighDPI") &&
      parent.config.allowHighDPI
    ) {
      this.scale = window.devicePixelRatio;
    }
    parent.__scale = this.scale;
    this.cacheMouseX = 0;
    this.cacheMouseY = 0;
  };
  $hxClasses["lime._backend.html5.HTML5Window"] =
    lime__$backend_html5_HTML5Window;
  lime__$backend_html5_HTML5Window.__name__ = [
    "lime",
    "_backend",
    "html5",
    "HTML5Window",
  ];
  lime__$backend_html5_HTML5Window.prototype = {
    canvas: null,
    div: null,
    element: null,
    cacheElementHeight: null,
    cacheElementWidth: null,
    cacheMouseX: null,
    cacheMouseY: null,
    currentTouches: null,
    enableTextEvents: null,
    parent: null,
    primaryTouch: null,
    scale: null,
    setHeight: null,
    setWidth: null,
    unusedTouchesPool: null,
    alert: function (message, title) {
      if (message != null) {
        js_Browser.alert(message);
      }
    },
    close: function () {
      this.parent.application.removeWindow(this.parent);
    },
    create: function (application) {
      this.setWidth = this.parent.__width;
      this.setHeight = this.parent.__height;
      this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
      if (js_Boot.__instanceof(this.element, HTMLCanvasElement)) {
        this.canvas = this.element;
      } else {
        this.canvas = window.document.createElement("canvas");
      }
      if (this.canvas != null) {
        var style = this.canvas.style;
        style.setProperty("-webkit-transform", "translateZ(0)", null);
        style.setProperty("transform", "translateZ(0)", null);
      } else if (this.div != null) {
        var style1 = this.div.style;
        style1.setProperty("-webkit-transform", "translate3D(0,0,0)", null);
        style1.setProperty("transform", "translate3D(0,0,0)", null);
        style1.position = "relative";
        style1.overflow = "hidden";
        style1.setProperty("-webkit-user-select", "none", null);
        style1.setProperty("-moz-user-select", "none", null);
        style1.setProperty("-ms-user-select", "none", null);
        style1.setProperty("-o-user-select", "none", null);
      }
      if (this.parent.__width == 0 && this.parent.__height == 0) {
        if (this.element != null) {
          this.parent.set_width(this.element.clientWidth);
          this.parent.set_height(this.element.clientHeight);
        } else {
          this.parent.set_width(window.innerWidth);
          this.parent.set_height(window.innerHeight);
        }
        this.cacheElementWidth = this.parent.__width;
        this.cacheElementHeight = this.parent.__height;
        this.parent.set_fullscreen(true);
      }
      if (this.canvas != null) {
        this.canvas.width = Math.round(this.parent.__width * this.scale);
        this.canvas.height = Math.round(this.parent.__height * this.scale);
        this.canvas.style.width = this.parent.__width + "px";
        this.canvas.style.height = this.parent.__height + "px";
      } else {
        this.div.style.width = this.parent.__width + "px";
        this.div.style.height = this.parent.__height + "px";
      }
      this.updateSize();
      if (this.element != null) {
        if (this.canvas != null) {
          if (this.element != this.canvas) {
            this.element.appendChild(this.canvas);
          }
        } else {
          this.element.appendChild(this.div);
        }
        var events = [
          "mousedown",
          "mouseenter",
          "mouseleave",
          "mousemove",
          "mouseup",
          "wheel",
        ];
        var _g = 0;
        while (_g < events.length) {
          var event = events[_g];
          ++_g;
          this.element.addEventListener(
            event,
            $bind(this, this.handleMouseEvent),
            true
          );
        }
        window.document.addEventListener(
          "dragstart",
          function (e) {
            if (e.target.nodeName.toLowerCase() == "img") {
              e.preventDefault();
              return false;
            }
            return true;
          },
          false
        );
        this.element.addEventListener(
          "contextmenu",
          $bind(this, this.handleContextMenuEvent),
          true
        );
        this.element.addEventListener(
          "touchstart",
          $bind(this, this.handleTouchEvent),
          true
        );
        this.element.addEventListener(
          "touchmove",
          $bind(this, this.handleTouchEvent),
          true
        );
        this.element.addEventListener(
          "touchend",
          $bind(this, this.handleTouchEvent),
          true
        );
        this.element.addEventListener(
          "gamepadconnected",
          $bind(this, this.handleGamepadEvent),
          true
        );
        this.element.addEventListener(
          "gamepaddisconnected",
          $bind(this, this.handleGamepadEvent),
          true
        );
      }
    },
    focus: function () {},
    getDisplay: function () {
      return lime_system_System.getDisplay(0);
    },
    getDisplayMode: function () {
      return lime_system_System.getDisplay(0).currentMode;
    },
    setDisplayMode: function (value) {
      return value;
    },
    getEnableTextEvents: function () {
      return this.enableTextEvents;
    },
    handleContextMenuEvent: function (event) {
      if (this.parent.onMouseUp.canceled) {
        event.preventDefault();
      }
    },
    handleFocusEvent: function (event) {
      if (this.enableTextEvents) {
        haxe_Timer.delay(function () {
          lime__$backend_html5_HTML5Window.textInput.focus();
        }, 20);
      }
    },
    handleGamepadEvent: function (event) {
      var _g = event.type;
      switch (_g) {
        case "gamepadconnected":
          lime_ui_Joystick.__connect(event.gamepad.index);
          if (event.gamepad.mapping == "standard") {
            lime_ui_Gamepad.__connect(event.gamepad.index);
          }
          break;
        case "gamepaddisconnected":
          lime_ui_Joystick.__disconnect(event.gamepad.index);
          lime_ui_Gamepad.__disconnect(event.gamepad.index);
          break;
        default:
      }
    },
    handleCutOrCopyEvent: function (event) {
      event.clipboardData.setData(
        "text/plain",
        lime_system_Clipboard.get_text()
      );
      event.preventDefault();
    },
    handlePasteEvent: function (event) {
      if (event.clipboardData.types.indexOf("text/plain") > -1) {
        var text = lime_system_Clipboard.set_text(
          event.clipboardData.getData("text/plain")
        );
        this.parent.onTextInput.dispatch(text);
        event.preventDefault();
      }
    },
    handleInputEvent: function (event) {
      if (
        lime__$backend_html5_HTML5Window.textInput.value !=
        lime__$backend_html5_HTML5Window.dummyCharacter
      ) {
        if (
          lime__$backend_html5_HTML5Window.textInput.value.charAt(0) ==
          lime__$backend_html5_HTML5Window.dummyCharacter
        ) {
          this.parent.onTextInput.dispatch(
            HxOverrides.substr(
              lime__$backend_html5_HTML5Window.textInput.value,
              1,
              null
            )
          );
        } else {
          this.parent.onTextInput.dispatch(
            lime__$backend_html5_HTML5Window.textInput.value
          );
        }
        lime__$backend_html5_HTML5Window.textInput.value =
          lime__$backend_html5_HTML5Window.dummyCharacter;
      }
    },
    handleMouseEvent: function (event) {
      var x = 0.0;
      var y = 0.0;
      if (event.type != "wheel") {
        if (this.element != null) {
          if (this.canvas != null) {
            var rect = this.canvas.getBoundingClientRect();
            x =
              (event.clientX - rect.left) * (this.parent.__width / rect.width);
            y =
              (event.clientY - rect.top) * (this.parent.__height / rect.height);
          } else if (this.div != null) {
            var rect1 = this.div.getBoundingClientRect();
            x = event.clientX - rect1.left;
            y = event.clientY - rect1.top;
          } else {
            var rect2 = this.element.getBoundingClientRect();
            x =
              (event.clientX - rect2.left) *
              (this.parent.__width / rect2.width);
            y =
              (event.clientY - rect2.top) *
              (this.parent.__height / rect2.height);
          }
        } else {
          x = event.clientX;
          y = event.clientY;
        }
        var _g = event.type;
        switch (_g) {
          case "mousedown":
            this.parent.onMouseDown.dispatch(x, y, event.button);
            if (this.parent.onMouseDown.canceled) {
              event.preventDefault();
            }
            break;
          case "mouseenter":
            if (event.target == this.element) {
              this.parent.onEnter.dispatch();
              if (this.parent.onEnter.canceled) {
                event.preventDefault();
              }
            }
            break;
          case "mouseleave":
            if (event.target == this.element) {
              this.parent.onLeave.dispatch();
              if (this.parent.onLeave.canceled) {
                event.preventDefault();
              }
            }
            break;
          case "mousemove":
            if (x != this.cacheMouseX || y != this.cacheMouseY) {
              this.parent.onMouseMove.dispatch(x, y);
              this.parent.onMouseMoveRelative.dispatch(
                x - this.cacheMouseX,
                y - this.cacheMouseY
              );
              if (
                this.parent.onMouseMove.canceled ||
                this.parent.onMouseMoveRelative.canceled
              ) {
                event.preventDefault();
              }
            }
            break;
          case "mouseup":
            this.parent.onMouseUp.dispatch(x, y, event.button);
            if (this.parent.onMouseUp.canceled) {
              event.preventDefault();
            }
            break;
          default:
        }
        this.cacheMouseX = x;
        this.cacheMouseY = y;
      } else {
        this.parent.onMouseWheel.dispatch(event.deltaX, -event.deltaY);
        if (this.parent.onMouseWheel.canceled) {
          event.preventDefault();
        }
      }
    },
    handleResizeEvent: function (event) {
      this.primaryTouch = null;
      this.updateSize();
    },
    handleTouchEvent: function (event) {
      event.preventDefault();
      var rect = null;
      if (this.element != null) {
        if (this.canvas != null) {
          rect = this.canvas.getBoundingClientRect();
        } else if (this.div != null) {
          rect = this.div.getBoundingClientRect();
        } else {
          rect = this.element.getBoundingClientRect();
        }
      }
      var windowWidth = this.setWidth;
      var windowHeight = this.setHeight;
      if (windowWidth == 0 || windowHeight == 0) {
        if (rect != null) {
          windowWidth = rect.width;
          windowHeight = rect.height;
        } else {
          windowWidth = 1;
          windowHeight = 1;
        }
      }
      var _g = 0;
      var _g1 = event.changedTouches;
      while (_g < _g1.length) {
        var data = _g1[_g];
        ++_g;
        var x = 0.0;
        var y = 0.0;
        if (rect != null) {
          x = (data.clientX - rect.left) * (windowWidth / rect.width);
          y = (data.clientY - rect.top) * (windowHeight / rect.height);
        } else {
          x = data.clientX;
          y = data.clientY;
        }
        var _g2 = event.type;
        switch (_g2) {
          case "touchend":
            var touch = this.currentTouches.get(data.identifier);
            if (touch != null) {
              var cacheX = touch.x;
              var cacheY = touch.y;
              touch.x = x / windowWidth;
              touch.y = y / windowHeight;
              touch.dx = touch.x - cacheX;
              touch.dy = touch.y - cacheY;
              touch.pressure = data.force;
              lime_ui_Touch.onEnd.dispatch(touch);
              this.currentTouches.remove(data.identifier);
              this.unusedTouchesPool.add(touch);
              if (touch == this.primaryTouch) {
                this.parent.onMouseUp.dispatch(x, y, 0);
                this.primaryTouch = null;
              }
            }
            break;
          case "touchmove":
            var touch1 = this.currentTouches.get(data.identifier);
            if (touch1 != null) {
              var cacheX1 = touch1.x;
              var cacheY1 = touch1.y;
              touch1.x = x / windowWidth;
              touch1.y = y / windowHeight;
              touch1.dx = touch1.x - cacheX1;
              touch1.dy = touch1.y - cacheY1;
              touch1.pressure = data.force;
              lime_ui_Touch.onMove.dispatch(touch1);
              if (touch1 == this.primaryTouch) {
                this.parent.onMouseMove.dispatch(x, y);
              }
            }
            break;
          case "touchstart":
            var touch2 = this.unusedTouchesPool.pop();
            if (touch2 == null) {
              touch2 = new lime_ui_Touch(
                x / windowWidth,
                y / windowHeight,
                data.identifier,
                0,
                0,
                data.force,
                this.parent.id
              );
            } else {
              touch2.x = x / windowWidth;
              touch2.y = y / windowHeight;
              touch2.id = data.identifier;
              touch2.dx = 0;
              touch2.dy = 0;
              touch2.pressure = data.force;
              touch2.device = this.parent.id;
            }
            this.currentTouches.set(data.identifier, touch2);
            lime_ui_Touch.onStart.dispatch(touch2);
            if (this.primaryTouch == null) {
              this.primaryTouch = touch2;
            }
            if (touch2 == this.primaryTouch) {
              this.parent.onMouseDown.dispatch(x, y, 0);
            }
            break;
          default:
        }
      }
    },
    move: function (x, y) {},
    resize: function (width, height) {},
    setBorderless: function (value) {
      return value;
    },
    setClipboard: function (value) {
      if (window.document.queryCommandEnabled("copy")) {
        var inputEnabled = this.enableTextEvents;
        this.setEnableTextEvents(true);
        this.setEnableTextEvents(false);
        var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
        lime__$backend_html5_HTML5Window.textInput.value = value;
        window.document.execCommand("copy");
        lime__$backend_html5_HTML5Window.textInput.value = cacheText;
        this.setEnableTextEvents(inputEnabled);
      }
    },
    setEnableTextEvents: function (value) {
      if (value) {
        if (lime__$backend_html5_HTML5Window.textInput == null) {
          lime__$backend_html5_HTML5Window.textInput =
            window.document.createElement("input");
          lime__$backend_html5_HTML5Window.textInput.type = "text";
          lime__$backend_html5_HTML5Window.textInput.style.position =
            "absolute";
          lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
          lime__$backend_html5_HTML5Window.textInput.style.color =
            "transparent";
          lime__$backend_html5_HTML5Window.textInput.value =
            lime__$backend_html5_HTML5Window.dummyCharacter;
          lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
          lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
          lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
          lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
          lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
          if (
            new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(
              window.navigator.userAgent
            )
          ) {
            lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
            lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
            lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
          } else {
            lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
            lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
          }
          lime__$backend_html5_HTML5Window.textInput.style.pointerEvents =
            "none";
          lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
          window.document.body.appendChild(
            lime__$backend_html5_HTML5Window.textInput
          );
        }
        if (!this.enableTextEvents) {
          lime__$backend_html5_HTML5Window.textInput.addEventListener(
            "input",
            $bind(this, this.handleInputEvent),
            true
          );
          lime__$backend_html5_HTML5Window.textInput.addEventListener(
            "blur",
            $bind(this, this.handleFocusEvent),
            true
          );
          lime__$backend_html5_HTML5Window.textInput.addEventListener(
            "cut",
            $bind(this, this.handleCutOrCopyEvent),
            true
          );
          lime__$backend_html5_HTML5Window.textInput.addEventListener(
            "copy",
            $bind(this, this.handleCutOrCopyEvent),
            true
          );
          lime__$backend_html5_HTML5Window.textInput.addEventListener(
            "paste",
            $bind(this, this.handlePasteEvent),
            true
          );
        }
        lime__$backend_html5_HTML5Window.textInput.focus();
        lime__$backend_html5_HTML5Window.textInput.select();
      } else if (lime__$backend_html5_HTML5Window.textInput != null) {
        lime__$backend_html5_HTML5Window.textInput.removeEventListener(
          "input",
          $bind(this, this.handleInputEvent),
          true
        );
        lime__$backend_html5_HTML5Window.textInput.removeEventListener(
          "blur",
          $bind(this, this.handleFocusEvent),
          true
        );
        lime__$backend_html5_HTML5Window.textInput.removeEventListener(
          "cut",
          $bind(this, this.handleCutOrCopyEvent),
          true
        );
        lime__$backend_html5_HTML5Window.textInput.removeEventListener(
          "copy",
          $bind(this, this.handleCutOrCopyEvent),
          true
        );
        lime__$backend_html5_HTML5Window.textInput.removeEventListener(
          "paste",
          $bind(this, this.handlePasteEvent),
          true
        );
        lime__$backend_html5_HTML5Window.textInput.blur();
      }
      return (this.enableTextEvents = value);
    },
    setFullscreen: function (value) {
      return false;
    },
    setIcon: function (image) {},
    setMaximized: function (value) {
      return false;
    },
    setMinimized: function (value) {
      return false;
    },
    setResizable: function (value) {
      return value;
    },
    setTitle: function (value) {
      return value;
    },
    updateSize: function () {
      var elementWidth;
      var elementHeight;
      if (this.element != null) {
        elementWidth = this.element.clientWidth;
        elementHeight = this.element.clientHeight;
      } else {
        elementWidth = window.innerWidth;
        elementHeight = window.innerHeight;
      }
      if (
        elementWidth != this.cacheElementWidth ||
        elementHeight != this.cacheElementHeight
      ) {
        this.cacheElementWidth = elementWidth;
        this.cacheElementHeight = elementHeight;
        var stretch =
          this.parent.__fullscreen ||
          (this.setWidth == 0 && this.setHeight == 0);
        if (
          this.element != null &&
          (this.div == null || (this.div != null && stretch))
        ) {
          if (stretch) {
            if (
              this.parent.__width != elementWidth ||
              this.parent.__height != elementHeight
            ) {
              this.parent.set_width(elementWidth);
              this.parent.set_height(elementHeight);
              if (this.canvas != null) {
                if (this.element != this.canvas) {
                  this.canvas.width = Math.round(elementWidth * this.scale);
                  this.canvas.height = Math.round(elementHeight * this.scale);
                  this.canvas.style.width = elementWidth + "px";
                  this.canvas.style.height = elementHeight + "px";
                }
              } else {
                this.div.style.width = elementWidth + "px";
                this.div.style.height = elementHeight + "px";
              }
              this.parent.onResize.dispatch(elementWidth, elementHeight);
            }
          } else {
            var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
            var scaleY =
              this.setHeight != 0 ? elementHeight / this.setHeight : 1;
            var targetWidth = elementWidth;
            var targetHeight = elementHeight;
            var marginLeft = 0;
            var marginTop = 0;
            if (scaleX < scaleY) {
              targetHeight = Math.floor(this.setHeight * scaleX);
              marginTop = Math.floor((elementHeight - targetHeight) / 2);
            } else {
              targetWidth = Math.floor(this.setWidth * scaleY);
              marginLeft = Math.floor((elementWidth - targetWidth) / 2);
            }
            if (this.canvas != null) {
              if (this.element != this.canvas) {
                this.canvas.style.width = targetWidth + "px";
                this.canvas.style.height = targetHeight + "px";
                this.canvas.style.marginLeft = marginLeft + "px";
                this.canvas.style.marginTop = marginTop + "px";
              }
            } else {
              this.div.style.width = targetWidth + "px";
              this.div.style.height = targetHeight + "px";
              this.div.style.marginLeft = marginLeft + "px";
              this.div.style.marginTop = marginTop + "px";
            }
          }
        }
      }
    },
    __class__: lime__$backend_html5_HTML5Window,
  };
  var lime__$backend_native_NativeCFFI = function () {};
  $hxClasses["lime._backend.native.NativeCFFI"] =
    lime__$backend_native_NativeCFFI;
  lime__$backend_native_NativeCFFI.__name__ = [
    "lime",
    "_backend",
    "native",
    "NativeCFFI",
  ];
  var lime__$macros_AssetsMacro = function () {};
  $hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
  lime__$macros_AssetsMacro.__name__ = ["lime", "_macros", "AssetsMacro"];
  var lime_app_IModule = function () {};
  $hxClasses["lime.app.IModule"] = lime_app_IModule;
  lime_app_IModule.__name__ = ["lime", "app", "IModule"];
  lime_app_IModule.prototype = {
    addRenderer: null,
    addWindow: null,
    registerModule: null,
    removeRenderer: null,
    removeWindow: null,
    setPreloader: null,
    unregisterModule: null,
    __class__: lime_app_IModule,
  };
  var lime_app_Module = function () {
    this.onExit = new lime_app__$Event_$Int_$Void();
    this.__renderers = [];
    this.__windows = [];
  };
  $hxClasses["lime.app.Module"] = lime_app_Module;
  lime_app_Module.__name__ = ["lime", "app", "Module"];
  lime_app_Module.__interfaces__ = [lime_app_IModule];
  lime_app_Module.prototype = {
    onExit: null,
    __application: null,
    __preloader: null,
    __renderers: null,
    __windows: null,
    addRenderer: function (renderer) {
      var f = $bind(this, this.render);
      var a1 = renderer;
      var tmp = function () {
        f(a1);
      };
      renderer.onRender.add(tmp);
      var f1 = $bind(this, this.onRenderContextLost);
      var a11 = renderer;
      var tmp1 = function () {
        f1(a11);
      };
      renderer.onContextLost.add(tmp1);
      var f2 = $bind(this, this.onRenderContextRestored);
      var a12 = renderer;
      var tmp2 = function (a2) {
        f2(a12, a2);
      };
      renderer.onContextRestored.add(tmp2);
      this.__renderers.push(renderer);
    },
    addWindow: function (window) {
      var f = $bind(this, this.onWindowActivate);
      var a1 = window;
      var tmp = function () {
        f(a1);
      };
      window.onActivate.add(tmp);
      var f1 = $bind(this, this.__onWindowClose);
      var a11 = window;
      var tmp1 = function () {
        f1(a11);
      };
      window.onClose.add(tmp1, false, -10000);
      var f2 = $bind(this, this.onWindowCreate);
      var a12 = window;
      var tmp2 = function () {
        f2(a12);
      };
      window.onCreate.add(tmp2);
      var f3 = $bind(this, this.onWindowDeactivate);
      var a13 = window;
      var tmp3 = function () {
        f3(a13);
      };
      window.onDeactivate.add(tmp3);
      var f4 = $bind(this, this.onWindowDropFile);
      var a14 = window;
      var tmp4 = function (a2) {
        f4(a14, a2);
      };
      window.onDropFile.add(tmp4);
      var f5 = $bind(this, this.onWindowEnter);
      var a15 = window;
      var tmp5 = function () {
        f5(a15);
      };
      window.onEnter.add(tmp5);
      var f6 = $bind(this, this.onWindowFocusIn);
      var a16 = window;
      var tmp6 = function () {
        f6(a16);
      };
      window.onFocusIn.add(tmp6);
      var f7 = $bind(this, this.onWindowFocusOut);
      var a17 = window;
      var tmp7 = function () {
        f7(a17);
      };
      window.onFocusOut.add(tmp7);
      var f8 = $bind(this, this.onWindowFullscreen);
      var a18 = window;
      var tmp8 = function () {
        f8(a18);
      };
      window.onFullscreen.add(tmp8);
      var f9 = $bind(this, this.onKeyDown);
      var a19 = window;
      var tmp9 = function (a21, a3) {
        f9(a19, a21, a3);
      };
      window.onKeyDown.add(tmp9);
      var f10 = $bind(this, this.onKeyUp);
      var a110 = window;
      var tmp10 = function (a22, a31) {
        f10(a110, a22, a31);
      };
      window.onKeyUp.add(tmp10);
      var f11 = $bind(this, this.onWindowLeave);
      var a111 = window;
      var tmp11 = function () {
        f11(a111);
      };
      window.onLeave.add(tmp11);
      var f12 = $bind(this, this.onWindowMinimize);
      var a112 = window;
      var tmp12 = function () {
        f12(a112);
      };
      window.onMinimize.add(tmp12);
      var f13 = $bind(this, this.onMouseDown);
      var a113 = window;
      var tmp13 = function (x, y, a23) {
        f13(a113, x, y, a23);
      };
      window.onMouseDown.add(tmp13);
      var f14 = $bind(this, this.onMouseMove);
      var a114 = window;
      var tmp14 = function (x1, y1) {
        f14(a114, x1, y1);
      };
      window.onMouseMove.add(tmp14);
      var f15 = $bind(this, this.onMouseMoveRelative);
      var a115 = window;
      var tmp15 = function (x2, y2) {
        f15(a115, x2, y2);
      };
      window.onMouseMoveRelative.add(tmp15);
      var f16 = $bind(this, this.onMouseUp);
      var a116 = window;
      var tmp16 = function (x3, y3, a24) {
        f16(a116, x3, y3, a24);
      };
      window.onMouseUp.add(tmp16);
      var f17 = $bind(this, this.onMouseWheel);
      var a117 = window;
      var tmp17 = function (a25, a32) {
        f17(a117, a25, a32);
      };
      window.onMouseWheel.add(tmp17);
      var f18 = $bind(this, this.onWindowMove);
      var a118 = window;
      var tmp18 = function (x4, y4) {
        f18(a118, x4, y4);
      };
      window.onMove.add(tmp18);
      var f19 = $bind(this, this.onWindowResize);
      var a119 = window;
      var tmp19 = function (a26, a33) {
        f19(a119, a26, a33);
      };
      window.onResize.add(tmp19);
      var f20 = $bind(this, this.onWindowRestore);
      var a120 = window;
      var tmp20 = function () {
        f20(a120);
      };
      window.onRestore.add(tmp20);
      var f21 = $bind(this, this.onTextEdit);
      var a121 = window;
      var tmp21 = function (a27, a34, a4) {
        f21(a121, a27, a34, a4);
      };
      window.onTextEdit.add(tmp21);
      var f22 = $bind(this, this.onTextInput);
      var a122 = window;
      var tmp22 = function (a28) {
        f22(a122, a28);
      };
      window.onTextInput.add(tmp22);
      if (window.id > -1) {
        this.onWindowCreate(window);
      }
      this.__windows.push(window);
    },
    registerModule: function (application) {
      this.__application = application;
      application.onExit.add($bind(this, this.onModuleExit), false, 0);
      application.onUpdate.add($bind(this, this.update));
      var gamepad = lime_ui_Gamepad.devices.iterator();
      while (gamepad.hasNext()) {
        var gamepad1 = gamepad.next();
        this.__onGamepadConnect(gamepad1);
      }
      lime_ui_Gamepad.onConnect.add($bind(this, this.__onGamepadConnect));
      var joystick = lime_ui_Joystick.devices.iterator();
      while (joystick.hasNext()) {
        var joystick1 = joystick.next();
        this.__onJoystickConnect(joystick1);
      }
      lime_ui_Joystick.onConnect.add($bind(this, this.__onJoystickConnect));
      lime_ui_Touch.onStart.add($bind(this, this.onTouchStart));
      lime_ui_Touch.onMove.add($bind(this, this.onTouchMove));
      lime_ui_Touch.onEnd.add($bind(this, this.onTouchEnd));
    },
    removeRenderer: function (renderer) {
      if (renderer != null && this.__renderers.indexOf(renderer) > -1) {
        HxOverrides.remove(this.__renderers, renderer);
      }
    },
    removeWindow: function (window) {
      if (window != null && this.__windows.indexOf(window) > -1) {
        HxOverrides.remove(this.__windows, window);
      }
    },
    setPreloader: function (preloader) {
      if (this.__preloader != null) {
        this.__preloader.onProgress.remove($bind(this, this.onPreloadProgress));
        this.__preloader.onComplete.remove($bind(this, this.onPreloadComplete));
      }
      this.__preloader = preloader;
      if (preloader == null || preloader.complete) {
        this.onPreloadComplete();
      } else {
        preloader.onProgress.add($bind(this, this.onPreloadProgress));
        preloader.onComplete.add($bind(this, this.onPreloadComplete));
      }
    },
    unregisterModule: function (application) {
      this.__application.onExit.remove($bind(this, this.onModuleExit));
      this.__application.onUpdate.remove($bind(this, this.update));
      lime_ui_Gamepad.onConnect.remove($bind(this, this.__onGamepadConnect));
      lime_ui_Joystick.onConnect.remove($bind(this, this.__onJoystickConnect));
      lime_ui_Touch.onStart.remove($bind(this, this.onTouchStart));
      lime_ui_Touch.onMove.remove($bind(this, this.onTouchMove));
      lime_ui_Touch.onEnd.remove($bind(this, this.onTouchEnd));
      this.onModuleExit(0);
    },
    onGamepadAxisMove: function (gamepad, axis, value) {},
    onGamepadButtonDown: function (gamepad, button) {},
    onGamepadButtonUp: function (gamepad, button) {},
    onGamepadConnect: function (gamepad) {},
    onGamepadDisconnect: function (gamepad) {},
    onJoystickAxisMove: function (joystick, axis, value) {},
    onJoystickButtonDown: function (joystick, button) {},
    onJoystickButtonUp: function (joystick, button) {},
    onJoystickConnect: function (joystick) {},
    onJoystickDisconnect: function (joystick) {},
    onJoystickHatMove: function (joystick, hat, position) {},
    onJoystickTrackballMove: function (joystick, trackball, value) {},
    onKeyDown: function (window, keyCode, modifier) {},
    onKeyUp: function (window, keyCode, modifier) {},
    onModuleExit: function (code) {},
    onMouseDown: function (window, x, y, button) {},
    onMouseMove: function (window, x, y) {},
    onMouseMoveRelative: function (window, x, y) {},
    onMouseUp: function (window, x, y, button) {},
    onMouseWheel: function (window, deltaX, deltaY) {},
    onPreloadComplete: function () {},
    onPreloadProgress: function (loaded, total) {},
    onRenderContextLost: function (renderer) {},
    onRenderContextRestored: function (renderer, context) {},
    onTextEdit: function (window, text, start, length) {},
    onTextInput: function (window, text) {},
    onTouchEnd: function (touch) {},
    onTouchMove: function (touch) {},
    onTouchStart: function (touch) {},
    onWindowActivate: function (window) {},
    onWindowClose: function (window) {},
    onWindowCreate: function (window) {},
    onWindowDeactivate: function (window) {},
    onWindowDropFile: function (window, file) {},
    onWindowEnter: function (window) {},
    onWindowFocusIn: function (window) {},
    onWindowFocusOut: function (window) {},
    onWindowFullscreen: function (window) {},
    onWindowLeave: function (window) {},
    onWindowMove: function (window, x, y) {},
    onWindowMinimize: function (window) {},
    onWindowResize: function (window, width, height) {},
    onWindowRestore: function (window) {},
    render: function (renderer) {},
    update: function (deltaTime) {},
    __onGamepadConnect: function (gamepad) {
      this.onGamepadConnect(gamepad);
      var f = $bind(this, this.onGamepadAxisMove);
      var a1 = gamepad;
      var tmp = function (a2, a3) {
        f(a1, a2, a3);
      };
      gamepad.onAxisMove.add(tmp);
      var f1 = $bind(this, this.onGamepadButtonDown);
      var a11 = gamepad;
      var tmp1 = function (a21) {
        f1(a11, a21);
      };
      gamepad.onButtonDown.add(tmp1);
      var f2 = $bind(this, this.onGamepadButtonUp);
      var a12 = gamepad;
      var tmp2 = function (a22) {
        f2(a12, a22);
      };
      gamepad.onButtonUp.add(tmp2);
      var f3 = $bind(this, this.onGamepadDisconnect);
      var a13 = gamepad;
      var tmp3 = function () {
        f3(a13);
      };
      gamepad.onDisconnect.add(tmp3);
    },
    __onJoystickConnect: function (joystick) {
      this.onJoystickConnect(joystick);
      var f = $bind(this, this.onJoystickAxisMove);
      var a1 = joystick;
      var tmp = function (a2, a3) {
        f(a1, a2, a3);
      };
      joystick.onAxisMove.add(tmp);
      var f1 = $bind(this, this.onJoystickButtonDown);
      var a11 = joystick;
      var tmp1 = function (a21) {
        f1(a11, a21);
      };
      joystick.onButtonDown.add(tmp1);
      var f2 = $bind(this, this.onJoystickButtonUp);
      var a12 = joystick;
      var tmp2 = function (a22) {
        f2(a12, a22);
      };
      joystick.onButtonUp.add(tmp2);
      var f3 = $bind(this, this.onJoystickDisconnect);
      var a13 = joystick;
      var tmp3 = function () {
        f3(a13);
      };
      joystick.onDisconnect.add(tmp3);
      var f4 = $bind(this, this.onJoystickHatMove);
      var a14 = joystick;
      var tmp4 = function (a23, a31) {
        f4(a14, a23, a31);
      };
      joystick.onHatMove.add(tmp4);
      var f5 = $bind(this, this.onJoystickTrackballMove);
      var a15 = joystick;
      var tmp5 = function (a24, a32) {
        f5(a15, a24, a32);
      };
      joystick.onTrackballMove.add(tmp5);
    },
    __onWindowClose: function (window) {
      this.onWindowClose(window);
      HxOverrides.remove(this.__windows, window);
    },
    __class__: lime_app_Module,
  };
  var lime_app_Application = function () {
    this.onUpdate = new lime_app__$Event_$Int_$Void();
    lime_app_Module.call(this);
    if (lime_app_Application.current == null) {
      lime_app_Application.current = this;
    }
    this.modules = [];
    this.windowByID = new haxe_ds_IntMap();
    this.backend = new lime__$backend_html5_HTML5Application(this);
    this.registerModule(this);
  };
  $hxClasses["lime.app.Application"] = lime_app_Application;
  lime_app_Application.__name__ = ["lime", "app", "Application"];
  lime_app_Application.__super__ = lime_app_Module;
  lime_app_Application.prototype = $extend(lime_app_Module.prototype, {
    config: null,
    modules: null,
    preloader: null,
    onUpdate: null,
    renderer: null,
    renderers: null,
    window: null,
    windows: null,
    backend: null,
    windowByID: null,
    addModule: function (module) {
      module.registerModule(this);
      this.modules.push(module);
      if (this.__renderers.length > 0) {
        var _g = 0;
        var _g1 = this.__renderers;
        while (_g < _g1.length) {
          var renderer = _g1[_g];
          ++_g;
          module.addRenderer(renderer);
        }
      }
      if (this.__windows.length > 0) {
        var _g2 = 0;
        var _g11 = this.__windows;
        while (_g2 < _g11.length) {
          var $window = _g11[_g2];
          ++_g2;
          module.addWindow($window);
        }
      }
      module.setPreloader(this.__preloader);
    },
    addRenderer: function (renderer) {
      lime_app_Module.prototype.addRenderer.call(this, renderer);
      var _g = 0;
      var _g1 = this.modules;
      while (_g < _g1.length) {
        var module = _g1[_g];
        ++_g;
        module.addRenderer(renderer);
      }
    },
    create: function (config) {
      this.config = config;
      this.backend.create(config);
      if (config != null) {
        if (Object.prototype.hasOwnProperty.call(config, "fps")) {
          this.backend.setFrameRate(config.fps);
        }
        if (Object.prototype.hasOwnProperty.call(config, "windows")) {
          var _g = 0;
          var _g1 = config.windows;
          while (_g < _g1.length) {
            var windowConfig = _g1[_g];
            ++_g;
            var $window = new lime_ui_Window(windowConfig);
            this.createWindow($window);
            break;
          }
        }
        if (this.__preloader == null || this.__preloader.complete) {
          this.setPreloader(this.__preloader);
          var _g2 = 0;
          var _g11 = this.modules;
          while (_g2 < _g11.length) {
            var module = _g11[_g2];
            ++_g2;
            this.setPreloader(this.__preloader);
          }
        }
      }
    },
    createWindow: function (window) {
      lime_app_Module.prototype.addWindow.call(this, window);
      var _g = 0;
      var _g1 = this.modules;
      while (_g < _g1.length) {
        var module = _g1[_g];
        ++_g;
        module.addWindow(window);
      }
      if (window.renderer == null) {
        var renderer = new lime_graphics_Renderer(window);
        this.addRenderer(renderer);
      }
      window.create(this);
      this.windowByID.h[window.id] = window;
      window.onCreate.dispatch();
    },
    exec: function () {
      lime_app_Application.current = this;
      return this.backend.exec();
    },
    onModuleExit: function (code) {
      this.backend.exit();
    },
    onWindowClose: function (window) {
      this.removeWindow(window);
    },
    removeModule: function (module) {
      if (module != null) {
        module.unregisterModule(this);
        HxOverrides.remove(this.modules, module);
      }
    },
    removeWindow: function (window) {
      if (window != null && this.windowByID.h.hasOwnProperty(window.id)) {
        HxOverrides.remove(this.__windows, window);
        this.windowByID.remove(window.id);
        window.close();
        if (window.renderer != null) {
          this.removeRenderer(window.renderer);
        }
        if (this.__windows[0] == window) {
          this.window = null;
        }
        if (this.__windows.length == 0) {
          lime_system_System.exit(0);
        }
      }
    },
    setPreloader: function (preloader) {
      lime_app_Module.prototype.setPreloader.call(this, preloader);
      var _g = 0;
      var _g1 = this.modules;
      while (_g < _g1.length) {
        var module = _g1[_g];
        ++_g;
        module.setPreloader(preloader);
      }
    },
    get_frameRate: function () {
      return this.backend.getFrameRate();
    },
    set_frameRate: function (value) {
      return this.backend.setFrameRate(value);
    },
    get_preloader: function () {
      return this.__preloader;
    },
    get_renderer: function () {
      return this.__renderers[0];
    },
    get_renderers: function () {
      return this.__renderers;
    },
    get_window: function () {
      return this.__windows[0];
    },
    get_windows: function () {
      return this.__windows;
    },
    __class__: lime_app_Application,
    __properties__: {
      get_windows: "get_windows",
      get_window: "get_window",
      get_renderers: "get_renderers",
      get_renderer: "get_renderer",
      get_preloader: "get_preloader",
      set_frameRate: "set_frameRate",
      get_frameRate: "get_frameRate",
    },
  });
  var lime_app_Event = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app.Event"] = lime_app_Event;
  lime_app_Event.__name__ = ["lime", "app", "Event"];
  lime_app_Event.prototype = {
    canceled: null,
    __listeners: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    dispatch: null,
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __class__: lime_app_Event,
  };
  var lime_app_Future = function (work, async) {
    if (async == null) {
      async = false;
    }
    if (work != null) {
      if (async) {
        var promise = new lime_app_Promise();
        promise.future = this;
        lime_app__$Future_FutureWork.queue({ promise: promise, work: work });
      } else {
        try {
          this.value = work();
          this.isComplete = true;
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.error = e;
          this.isError = true;
        }
      }
    }
  };
  $hxClasses["lime.app.Future"] = lime_app_Future;
  lime_app_Future.__name__ = ["lime", "app", "Future"];
  lime_app_Future.ofEvents = function (onComplete, onError, onProgress) {
    var promise = new lime_app_Promise();
    onComplete.add(function (data) {
      promise.complete(data);
    }, true);
    if (onError != null) {
      onError.add(function (error) {
        promise.error(error);
      }, true);
    }
    if (onProgress != null) {
      onProgress.add(function (progress, total) {
        promise.progress(progress, total);
      }, true);
    }
    return promise.future;
  };
  lime_app_Future.withError = function (error) {
    var future = new lime_app_Future();
    future.isError = true;
    future.error = error;
    return future;
  };
  lime_app_Future.withValue = function (value) {
    var future = new lime_app_Future();
    future.isComplete = true;
    future.value = value;
    return future;
  };
  lime_app_Future.prototype = {
    error: null,
    isComplete: null,
    isError: null,
    value: null,
    __completeListeners: null,
    __errorListeners: null,
    __progressListeners: null,
    onComplete: function (listener) {
      if (listener != null) {
        if (this.isComplete) {
          listener(this.value);
        } else if (!this.isError) {
          if (this.__completeListeners == null) {
            this.__completeListeners = [];
          }
          this.__completeListeners.push(listener);
        }
      }
      return this;
    },
    onError: function (listener) {
      if (listener != null) {
        if (this.isError) {
          listener(this.error);
        } else if (!this.isComplete) {
          if (this.__errorListeners == null) {
            this.__errorListeners = [];
          }
          this.__errorListeners.push(listener);
        }
      }
      return this;
    },
    onProgress: function (listener) {
      if (listener != null) {
        if (this.__progressListeners == null) {
          this.__progressListeners = [];
        }
        this.__progressListeners.push(listener);
      }
      return this;
    },
    ready: function (waitTime) {
      if (waitTime == null) {
        waitTime = -1;
      }
      if (this.isComplete || this.isError) {
        return this;
      } else {
        lime_utils_Log.warn("Cannot block thread in JavaScript", {
          fileName: "Future.hx",
          lineNumber: 157,
          className: "lime.app.Future",
          methodName: "ready",
        });
        return this;
      }
    },
    result: function (waitTime) {
      if (waitTime == null) {
        waitTime = -1;
      }
      this.ready(waitTime);
      if (this.isComplete) {
        return this.value;
      } else {
        return null;
      }
    },
    then: function (next) {
      if (this.isComplete) {
        return next(this.value);
      } else if (this.isError) {
        var future = new lime_app_Future();
        future.onError(this.error);
        return future;
      } else {
        var promise = new lime_app_Promise();
        this.onError($bind(promise, promise.error));
        this.onProgress($bind(promise, promise.progress));
        this.onComplete(function (val) {
          var future1 = next(val);
          future1.onError($bind(promise, promise.error));
          future1.onComplete($bind(promise, promise.complete));
        });
        return promise.future;
      }
    },
    __class__: lime_app_Future,
  };
  var lime_app__$Future_FutureWork = function () {};
  $hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
  lime_app__$Future_FutureWork.__name__ = [
    "lime",
    "app",
    "_Future",
    "FutureWork",
  ];
  lime_app__$Future_FutureWork.queue = function (state) {
    if (lime_app__$Future_FutureWork.threadPool == null) {
      lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
      lime_app__$Future_FutureWork.threadPool.doWork.add(
        lime_app__$Future_FutureWork.threadPool_doWork
      );
      lime_app__$Future_FutureWork.threadPool.onComplete.add(
        lime_app__$Future_FutureWork.threadPool_onComplete
      );
      lime_app__$Future_FutureWork.threadPool.onError.add(
        lime_app__$Future_FutureWork.threadPool_onError
      );
    }
    lime_app__$Future_FutureWork.threadPool.queue(state);
  };
  lime_app__$Future_FutureWork.threadPool_doWork = function (state) {
    try {
      var result = state.work();
      lime_app__$Future_FutureWork.threadPool.sendComplete({
        promise: state.promise,
        result: result,
      });
    } catch (e) {
      haxe_CallStack.lastException = e;
      if (e instanceof js__$Boot_HaxeError) e = e.val;
      lime_app__$Future_FutureWork.threadPool.sendError({
        promise: state.promise,
        error: e,
      });
    }
  };
  lime_app__$Future_FutureWork.threadPool_onComplete = function (state) {
    state.promise.complete(state.result);
  };
  lime_app__$Future_FutureWork.threadPool_onError = function (state) {
    state.promise.error(state.error);
  };
  var lime_app_Preloader = function () {
    this.bytesTotalCache = new haxe_ds_StringMap();
    this.bytesLoadedCache2 = new haxe_ds_StringMap();
    this.bytesLoadedCache = new haxe_ds_ObjectMap();
    this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
    this.onComplete = new lime_app__$Event_$Void_$Void();
    this.bytesLoaded = 0;
    this.bytesTotal = 0;
    this.libraries = [];
    this.libraryNames = [];
    this.onProgress.add($bind(this, this.update));
  };
  $hxClasses["lime.app.Preloader"] = lime_app_Preloader;
  lime_app_Preloader.__name__ = ["lime", "app", "Preloader"];
  lime_app_Preloader.prototype = {
    complete: null,
    onComplete: null,
    onProgress: null,
    bytesLoaded: null,
    bytesLoadedCache: null,
    bytesLoadedCache2: null,
    bytesTotal: null,
    bytesTotalCache: null,
    initLibraryNames: null,
    libraries: null,
    libraryNames: null,
    loadedLibraries: null,
    loadedStage: null,
    preloadComplete: null,
    preloadStarted: null,
    simulateProgress: null,
    addLibrary: function (library) {
      this.libraries.push(library);
    },
    addLibraryName: function (name) {
      if (this.libraryNames.indexOf(name) == -1) {
        this.libraryNames.push(name);
      }
    },
    create: function (config) {},
    load: function () {
      var _gthis = this;
      var _g = 0;
      var _g1 = this.libraries;
      while (_g < _g1.length) {
        var library = _g1[_g];
        ++_g;
        this.bytesTotal += library.bytesTotal;
      }
      this.loadedLibraries = -1;
      this.preloadStarted = false;
      var _g2 = 0;
      var _g11 = this.libraries;
      while (_g2 < _g11.length) {
        var library1 = [_g11[_g2]];
        ++_g2;
        lime_utils_Log.verbose("Preloading asset library", {
          fileName: "Preloader.hx",
          lineNumber: 153,
          className: "lime.app.Preloader",
          methodName: "load",
        });
        library1[0]
          .load()
          .onProgress(
            (function (library2) {
              return function (loaded, total) {
                if (
                  _gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null
                ) {
                  _gthis.bytesLoaded += loaded;
                } else {
                  _gthis.bytesLoaded +=
                    loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
                }
                _gthis.bytesLoadedCache.set(library2[0], loaded);
                if (!_gthis.simulateProgress) {
                  _gthis.onProgress.dispatch(
                    _gthis.bytesLoaded,
                    _gthis.bytesTotal
                  );
                }
              };
            })(library1)
          )
          .onComplete(
            (function (library3) {
              return function (_) {
                if (
                  _gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null
                ) {
                  _gthis.bytesLoaded += library3[0].bytesTotal;
                } else {
                  _gthis.bytesLoaded +=
                    library3[0].bytesTotal -
                    _gthis.bytesLoadedCache.h[library3[0].__id__];
                }
                _gthis.loadedAssetLibrary();
              };
            })(library1)
          )
          .onError(
            (function () {
              return function (e) {
                lime_utils_Log.error(e, {
                  fileName: "Preloader.hx",
                  lineNumber: 191,
                  className: "lime.app.Preloader",
                  methodName: "load",
                });
              };
            })()
          );
      }
      var _g3 = 0;
      var _g12 = this.libraryNames;
      while (_g3 < _g12.length) {
        var name = _g12[_g3];
        ++_g3;
        this.bytesTotal += 200;
      }
      this.loadedLibraries++;
      this.preloadStarted = true;
      this.updateProgress();
    },
    loadedAssetLibrary: function (name) {
      this.loadedLibraries++;
      var current = this.loadedLibraries;
      if (!this.preloadStarted) {
        ++current;
      }
      var totalLibraries = this.libraries.length + this.libraryNames.length;
      if (name != null) {
        lime_utils_Log.verbose(
          "Loaded asset library: " +
            name +
            " [" +
            current +
            "/" +
            totalLibraries +
            "]",
          {
            fileName: "Preloader.hx",
            lineNumber: 223,
            className: "lime.app.Preloader",
            methodName: "loadedAssetLibrary",
          }
        );
      } else {
        lime_utils_Log.verbose(
          "Loaded asset library [" + current + "/" + totalLibraries + "]",
          {
            fileName: "Preloader.hx",
            lineNumber: 227,
            className: "lime.app.Preloader",
            methodName: "loadedAssetLibrary",
          }
        );
      }
      this.updateProgress();
    },
    start: function () {
      if (this.complete) {
        return;
      }
      this.complete = true;
      this.onComplete.dispatch();
    },
    update: function (loaded, total) {},
    updateProgress: function () {
      var _gthis = this;
      if (!this.simulateProgress) {
        this.onProgress.dispatch(this.bytesLoaded, this.bytesTotal);
      }
      if (
        this.loadedLibraries == this.libraries.length &&
        !this.initLibraryNames
      ) {
        this.initLibraryNames = true;
        var _g = 0;
        var _g1 = this.libraryNames;
        while (_g < _g1.length) {
          var name = [_g1[_g]];
          ++_g;
          lime_utils_Log.verbose("Preloading asset library: " + name[0], {
            fileName: "Preloader.hx",
            lineNumber: 276,
            className: "lime.app.Preloader",
            methodName: "updateProgress",
          });
          lime_utils_Assets
            .loadLibrary(name[0])
            .onProgress(
              (function (name1) {
                return function (loaded, total) {
                  if (total > 0) {
                    var _this = _gthis.bytesTotalCache;
                    if (
                      !(__map_reserved[name1[0]] != null
                        ? _this.existsReserved(name1[0])
                        : _this.h.hasOwnProperty(name1[0]))
                    ) {
                      var _this1 = _gthis.bytesTotalCache;
                      if (__map_reserved[name1[0]] != null) {
                        _this1.setReserved(name1[0], total);
                      } else {
                        _this1.h[name1[0]] = total;
                      }
                      _gthis.bytesTotal += total - 200;
                    }
                    if (loaded > total) {
                      loaded = total;
                    }
                    var _this2 = _gthis.bytesLoadedCache2;
                    if (
                      !(__map_reserved[name1[0]] != null
                        ? _this2.existsReserved(name1[0])
                        : _this2.h.hasOwnProperty(name1[0]))
                    ) {
                      _gthis.bytesLoaded += loaded;
                    } else {
                      var _this3 = _gthis.bytesLoadedCache2;
                      _gthis.bytesLoaded +=
                        loaded -
                        (__map_reserved[name1[0]] != null
                          ? _this3.getReserved(name1[0])
                          : _this3.h[name1[0]]);
                    }
                    var _this4 = _gthis.bytesLoadedCache2;
                    if (__map_reserved[name1[0]] != null) {
                      _this4.setReserved(name1[0], loaded);
                    } else {
                      _this4.h[name1[0]] = loaded;
                    }
                    if (!_gthis.simulateProgress) {
                      _gthis.onProgress.dispatch(
                        _gthis.bytesLoaded,
                        _gthis.bytesTotal
                      );
                    }
                  }
                };
              })(name)
            )
            .onComplete(
              (function (name2) {
                return function (library) {
                  var total1 = 200;
                  var _this5 = _gthis.bytesTotalCache;
                  if (
                    __map_reserved[name2[0]] != null
                      ? _this5.existsReserved(name2[0])
                      : _this5.h.hasOwnProperty(name2[0])
                  ) {
                    var _this6 = _gthis.bytesTotalCache;
                    if (__map_reserved[name2[0]] != null) {
                      total1 = _this6.getReserved(name2[0]);
                    } else {
                      total1 = _this6.h[name2[0]];
                    }
                  }
                  var _this7 = _gthis.bytesLoadedCache2;
                  if (
                    !(__map_reserved[name2[0]] != null
                      ? _this7.existsReserved(name2[0])
                      : _this7.h.hasOwnProperty(name2[0]))
                  ) {
                    _gthis.bytesLoaded += total1;
                  } else {
                    var _this8 = _gthis.bytesLoadedCache2;
                    _gthis.bytesLoaded +=
                      total1 -
                      (__map_reserved[name2[0]] != null
                        ? _this8.getReserved(name2[0])
                        : _this8.h[name2[0]]);
                  }
                  _gthis.loadedAssetLibrary(name2[0]);
                };
              })(name)
            )
            .onError(
              (function () {
                return function (e) {
                  lime_utils_Log.error(e, {
                    fileName: "Preloader.hx",
                    lineNumber: 335,
                    className: "lime.app.Preloader",
                    methodName: "updateProgress",
                  });
                };
              })()
            );
        }
      }
      if (
        !this.simulateProgress &&
        this.loadedLibraries == this.libraries.length + this.libraryNames.length
      ) {
        if (!this.preloadComplete) {
          this.preloadComplete = true;
          lime_utils_Log.verbose("Preload complete", {
            fileName: "Preloader.hx",
            lineNumber: 349,
            className: "lime.app.Preloader",
            methodName: "updateProgress",
          });
        }
        this.start();
      }
    },
    __class__: lime_app_Preloader,
  };
  var lime_app_Promise = function () {
    this.future = new lime_app_Future();
  };
  $hxClasses["lime.app.Promise"] = lime_app_Promise;
  lime_app_Promise.__name__ = ["lime", "app", "Promise"];
  lime_app_Promise.prototype = {
    future: null,
    isComplete: null,
    isError: null,
    complete: function (data) {
      if (!this.future.isError) {
        this.future.isComplete = true;
        this.future.value = data;
        if (this.future.__completeListeners != null) {
          var _g = 0;
          var _g1 = this.future.__completeListeners;
          while (_g < _g1.length) {
            var listener = _g1[_g];
            ++_g;
            listener(data);
          }
          this.future.__completeListeners = null;
        }
      }
      return this;
    },
    completeWith: function (future) {
      future.onComplete($bind(this, this.complete));
      future.onError($bind(this, this.error));
      future.onProgress($bind(this, this.progress));
      return this;
    },
    error: function (msg) {
      if (!this.future.isComplete) {
        this.future.isError = true;
        this.future.error = msg;
        if (this.future.__errorListeners != null) {
          var _g = 0;
          var _g1 = this.future.__errorListeners;
          while (_g < _g1.length) {
            var listener = _g1[_g];
            ++_g;
            listener(msg);
          }
          this.future.__errorListeners = null;
        }
      }
      return this;
    },
    progress: function (progress, total) {
      if (!this.future.isError && !this.future.isComplete) {
        if (this.future.__progressListeners != null) {
          var _g = 0;
          var _g1 = this.future.__progressListeners;
          while (_g < _g1.length) {
            var listener = _g1[_g];
            ++_g;
            listener(progress, total);
          }
        }
      }
      return this;
    },
    get_isComplete: function () {
      return this.future.isComplete;
    },
    get_isError: function () {
      return this.future.isError;
    },
    __class__: lime_app_Promise,
    __properties__: {
      get_isError: "get_isError",
      get_isComplete: "get_isComplete",
    },
  };
  var lime_app__$Event_$Dynamic_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
  lime_app__$Event_$Dynamic_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Dynamic_Void",
  ];
  lime_app__$Event_$Dynamic_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Dynamic_$Void,
  };
  var lime_app__$Event_$Float_$Float_$Int_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Float_Float_Int_Void"] =
    lime_app__$Event_$Float_$Float_$Int_$Void;
  lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Float_Float_Int_Void",
  ];
  lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1, a2) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1, a2);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Float_$Float_$Int_$Void,
  };
  var lime_app__$Event_$Float_$Float_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Float_Float_Void"] =
    lime_app__$Event_$Float_$Float_$Void;
  lime_app__$Event_$Float_$Float_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Float_Float_Void",
  ];
  lime_app__$Event_$Float_$Float_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Float_$Float_$Void,
  };
  var lime_app__$Event_$Int_$Float_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Int_Float_Void"] =
    lime_app__$Event_$Int_$Float_$Void;
  lime_app__$Event_$Int_$Float_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Int_Float_Void",
  ];
  lime_app__$Event_$Int_$Float_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Int_$Float_$Void,
  };
  var lime_app__$Event_$Int_$Int_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
  lime_app__$Event_$Int_$Int_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Int_Int_Void",
  ];
  lime_app__$Event_$Int_$Int_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Int_$Int_$Void,
  };
  var lime_app__$Event_$Int_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
  lime_app__$Event_$Int_$Void.__name__ = ["lime", "app", "_Event_Int_Void"];
  lime_app__$Event_$Int_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Int_$Void,
  };
  var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] =
    lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
  lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = [
    "lime",
    "app",
    "_Event_Int_lime_ui_JoystickHatPosition_Void",
  ];
  lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void,
  };
  var lime_app__$Event_$String_$Int_$Int_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_String_Int_Int_Void"] =
    lime_app__$Event_$String_$Int_$Int_$Void;
  lime_app__$Event_$String_$Int_$Int_$Void.__name__ = [
    "lime",
    "app",
    "_Event_String_Int_Int_Void",
  ];
  lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1, a2) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1, a2);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$String_$Int_$Int_$Void,
  };
  var lime_app__$Event_$String_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
  lime_app__$Event_$String_$Void.__name__ = [
    "lime",
    "app",
    "_Event_String_Void",
  ];
  lime_app__$Event_$String_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$String_$Void,
  };
  var lime_app__$Event_$Void_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
  lime_app__$Event_$Void_$Void.__name__ = ["lime", "app", "_Event_Void_Void"];
  lime_app__$Event_$Void_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function () {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i]();
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$Void_$Void,
  };
  var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] =
    lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
  lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_graphics_RenderContext_Void",
  ];
  lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void,
  };
  var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] =
    lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
  lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_GamepadAxis_Float_Void",
  ];
  lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void,
  };
  var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] =
    lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
  lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_GamepadButton_Void",
  ];
  lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void,
  };
  var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] =
    lime_app__$Event_$lime_$ui_$Gamepad_$Void;
  lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_Gamepad_Void",
  ];
  lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void,
  };
  var lime_app__$Event_$lime_$ui_$Joystick_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_ui_Joystick_Void"] =
    lime_app__$Event_$lime_$ui_$Joystick_$Void;
  lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_Joystick_Void",
  ];
  lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$Joystick_$Void,
  };
  var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void =
    function () {
      this.canceled = false;
      this.__listeners = [];
      this.__priorities = [];
      this.__repeat = [];
    };
  $hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] =
    lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
  lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void",
  ];
  lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a, a1) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a, a1);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void,
  };
  var lime_app__$Event_$lime_$ui_$Touch_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_lime_ui_Touch_Void"] =
    lime_app__$Event_$lime_$ui_$Touch_$Void;
  lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = [
    "lime",
    "app",
    "_Event_lime_ui_Touch_Void",
  ];
  lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$lime_$ui_$Touch_$Void,
  };
  var lime_app__$Event_$ofEvents_$T_$Void = function () {
    this.canceled = false;
    this.__listeners = [];
    this.__priorities = [];
    this.__repeat = [];
  };
  $hxClasses["lime.app._Event_ofEvents_T_Void"] =
    lime_app__$Event_$ofEvents_$T_$Void;
  lime_app__$Event_$ofEvents_$T_$Void.__name__ = [
    "lime",
    "app",
    "_Event_ofEvents_T_Void",
  ];
  lime_app__$Event_$ofEvents_$T_$Void.prototype = {
    canceled: null,
    __repeat: null,
    __priorities: null,
    add: function (listener, once, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (once == null) {
        once = false;
      }
      var _g1 = 0;
      var _g = this.__priorities.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (priority > this.__priorities[i]) {
          this.__listeners.splice(i, 0, listener);
          this.__priorities.splice(i, 0, priority);
          this.__repeat.splice(i, 0, !once);
          return;
        }
      }
      this.__listeners.push(listener);
      this.__priorities.push(priority);
      this.__repeat.push(!once);
    },
    cancel: function () {
      this.canceled = true;
    },
    has: function (listener) {
      var _g = 0;
      var _g1 = this.__listeners;
      while (_g < _g1.length) {
        var l = _g1[_g];
        ++_g;
        if (Reflect.compareMethods(l, listener)) {
          return true;
        }
      }
      return false;
    },
    remove: function (listener) {
      var i = this.__listeners.length;
      while (--i >= 0)
        if (Reflect.compareMethods(this.__listeners[i], listener)) {
          this.__listeners.splice(i, 1);
          this.__priorities.splice(i, 1);
          this.__repeat.splice(i, 1);
        }
    },
    __listeners: null,
    dispatch: function (a) {
      this.canceled = false;
      var listeners = this.__listeners;
      var repeat = this.__repeat;
      var i = 0;
      while (i < listeners.length) {
        listeners[i](a);
        if (!repeat[i]) {
          this.remove(listeners[i]);
        } else {
          ++i;
        }
        if (this.canceled) {
          break;
        }
      }
    },
    __class__: lime_app__$Event_$ofEvents_$T_$Void,
  };
  var lime_graphics_ConsoleRenderContext = function () {};
  $hxClasses["lime.graphics.ConsoleRenderContext"] =
    lime_graphics_ConsoleRenderContext;
  lime_graphics_ConsoleRenderContext.__name__ = [
    "lime",
    "graphics",
    "ConsoleRenderContext",
  ];
  lime_graphics_ConsoleRenderContext.prototype = {
    createIndexBuffer: function (indices, count) {
      return new lime_graphics_console_IndexBuffer();
    },
    createVertexBuffer: function (decl, count) {
      return new lime_graphics_console_VertexBuffer();
    },
    lookupShader: function (name) {
      return new lime_graphics_console_Shader();
    },
    clear: function (r, g, b, a, depth, stencil) {
      if (stencil == null) {
        stencil = 0;
      }
      if (depth == null) {
        depth = 1.0;
      }
    },
    bindShader: function (shader) {},
    setViewport: function (x, y, width, height, nearPlane, farPlane) {
      if (farPlane == null) {
        farPlane = 1.0;
      }
      if (nearPlane == null) {
        nearPlane = 0.0;
      }
    },
    setVertexShaderConstantF: function (startRegister, vec4, vec4count) {},
    setVertexSource: function (vb) {},
    setIndexSource: function (ib) {},
    draw: function (primitive, startVertex, primitiveCount) {},
    drawIndexed: function (
      primitive,
      vertexCount,
      startIndex,
      primitiveCount
    ) {},
    get_width: function () {
      return 0;
    },
    get_height: function () {
      return 0;
    },
    __class__: lime_graphics_ConsoleRenderContext,
    __properties__: { get_height: "get_height", get_width: "get_width" },
  };
  var lime_graphics_FlashRenderContext = function () {};
  $hxClasses["lime.graphics.FlashRenderContext"] =
    lime_graphics_FlashRenderContext;
  lime_graphics_FlashRenderContext.__name__ = [
    "lime",
    "graphics",
    "FlashRenderContext",
  ];
  lime_graphics_FlashRenderContext.prototype = {
    accessibilityImplementation: null,
    accessibilityProperties: null,
    alpha: null,
    blendMode: null,
    blendShader: null,
    buttonMode: null,
    cacheAsBitmap: null,
    contextMenu: null,
    doubleClickEnabled: null,
    dropTarget: null,
    filters: null,
    focusRect: null,
    graphics: null,
    height: null,
    hitArea: null,
    loaderInfo: null,
    mask: null,
    mouseChildren: null,
    mouseEnabled: null,
    mouseX: null,
    mouseY: null,
    name: null,
    needsSoftKeyboard: null,
    numChildren: null,
    opaqueBackground: null,
    parent: null,
    root: null,
    rotation: null,
    rotationX: null,
    rotationY: null,
    rotationZ: null,
    scale9Grid: null,
    scaleX: null,
    scaleY: null,
    scaleZ: null,
    scrollRect: null,
    softKeyboardInputAreaOfInterest: null,
    soundTransform: null,
    stage: null,
    tabChildren: null,
    tabEnabled: null,
    tabIndex: null,
    textSnapshot: null,
    transform: null,
    useHandCursor: null,
    visible: null,
    width: null,
    x: null,
    y: null,
    z: null,
    addChild: function (child) {
      return null;
    },
    addChildAt: function (child, index) {
      return null;
    },
    addEventListener: function (
      type,
      listener,
      useCapture,
      priority,
      useWeakReference
    ) {
      if (useWeakReference == null) {
        useWeakReference = false;
      }
      if (priority == null) {
        priority = 0;
      }
      if (useCapture == null) {
        useCapture = false;
      }
    },
    areInaccessibleObjectsUnderPoint: function (point) {
      return false;
    },
    contains: function (child) {
      return false;
    },
    dispatchEvent: function (event) {
      return false;
    },
    getBounds: function (targetCoordinateSpace) {
      return null;
    },
    getChildAt: function (index) {
      return null;
    },
    getChildByName: function (name) {
      return null;
    },
    getChildIndex: function (child) {
      return 0;
    },
    getObjectsUnderPoint: function (point) {
      return null;
    },
    getRect: function (targetCoordinateSpace) {
      return null;
    },
    globalToLocal: function (point) {
      return null;
    },
    globalToLocal3D: function (point) {
      return null;
    },
    hasEventListener: function (type) {
      return false;
    },
    hitTestObject: function (obj) {
      return false;
    },
    hitTestPoint: function (x, y, shapeFlag) {
      if (shapeFlag == null) {
        shapeFlag = false;
      }
      return false;
    },
    local3DToGlobal: function (point3d) {
      return null;
    },
    localToGlobal: function (point) {
      return null;
    },
    removeChild: function (child) {
      return null;
    },
    removeChildAt: function (index) {
      return null;
    },
    removeChildren: function (beginIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 2147483647;
      }
      if (beginIndex == null) {
        beginIndex = 0;
      }
    },
    removeEventListener: function (type, listener, useCapture) {
      if (useCapture == null) {
        useCapture = false;
      }
    },
    requestSoftKeyboard: function () {
      return false;
    },
    setChildIndex: function (child, index) {},
    startDrag: function (lockCenter, bounds) {
      if (lockCenter == null) {
        lockCenter = false;
      }
    },
    startTouchDrag: function (touchPointID, lockCenter, bounds) {
      if (lockCenter == null) {
        lockCenter = false;
      }
    },
    stopAllMovieClips: function () {},
    stopDrag: function () {},
    stopTouchDrag: function (touchPointID) {},
    swapChildren: function (child1, child2) {},
    swapChildrenAt: function (index1, index2) {},
    toString: function () {
      return null;
    },
    willTrigger: function (type) {
      return false;
    },
    __class__: lime_graphics_FlashRenderContext,
  };
  var lime_graphics_Image = function (
    buffer,
    offsetX,
    offsetY,
    width,
    height,
    color,
    type
  ) {
    if (height == null) {
      height = -1;
    }
    if (width == null) {
      width = -1;
    }
    if (offsetY == null) {
      offsetY = 0;
    }
    if (offsetX == null) {
      offsetX = 0;
    }
    this.offsetX = offsetX;
    this.offsetY = offsetY;
    this.width = width;
    this.height = height;
    this.version = 0;
    if (type == null) {
      if (
        lime_app_Application.current != null &&
        lime_app_Application.current.__renderers[0] != null
      ) {
        var _g = lime_app_Application.current.__renderers[0].context;
        var tmp;
        switch (_g[1]) {
          case 1:
          case 2:
            tmp = lime_graphics_ImageType.CANVAS;
            break;
          case 3:
            tmp = lime_graphics_ImageType.FLASH;
            break;
          default:
            tmp = lime_graphics_ImageType.DATA;
        }
        this.type = tmp;
      } else {
        this.type = lime_graphics_ImageType.DATA;
      }
    } else {
      this.type = type;
    }
    if (buffer == null) {
      if (width > 0 && height > 0) {
        var _g1 = this.type;
        switch (_g1[1]) {
          case 0:
            this.buffer = new lime_graphics_ImageBuffer(null, width, height);
            lime_graphics_utils_ImageCanvasUtil.createCanvas(
              this,
              width,
              height
            );
            if (color != null) {
              this.fillRect(
                new lime_math_Rectangle(0, 0, width, height),
                color
              );
            }
            break;
          case 1:
            var elements = width * height * 4;
            var this1;
            if (elements != null) {
              this1 = new Uint8Array(elements);
            } else {
              this1 = null;
            }
            this.buffer = new lime_graphics_ImageBuffer(this1, width, height);
            if (color != null) {
              this.fillRect(
                new lime_math_Rectangle(0, 0, width, height),
                color
              );
            }
            break;
          case 2:
            break;
          default:
        }
      }
    } else {
      this.__fromImageBuffer(buffer);
    }
  };
  $hxClasses["lime.graphics.Image"] = lime_graphics_Image;
  lime_graphics_Image.__name__ = ["lime", "graphics", "Image"];
  lime_graphics_Image.fromBase64 = function (base64, type) {
    if (base64 == null) {
      return null;
    }
    var image = new lime_graphics_Image();
    image.__fromBase64(base64, type);
    return image;
  };
  lime_graphics_Image.fromBitmapData = function (bitmapData) {
    if (bitmapData == null) {
      return null;
    }
    return bitmapData.image;
  };
  lime_graphics_Image.fromBytes = function (bytes) {
    if (bytes == null) {
      return null;
    }
    var image = new lime_graphics_Image();
    image.__fromBytes(bytes);
    return image;
  };
  lime_graphics_Image.fromCanvas = function (canvas) {
    if (canvas == null) {
      return null;
    }
    var buffer = new lime_graphics_ImageBuffer(
      null,
      canvas.width,
      canvas.height
    );
    buffer.set_src(canvas);
    var image = new lime_graphics_Image(buffer);
    image.type = lime_graphics_ImageType.CANVAS;
    return image;
  };
  lime_graphics_Image.fromFile = function (path) {
    if (path == null) {
      return null;
    }
    var image = new lime_graphics_Image();
    image.__fromFile(path);
    return image;
  };
  lime_graphics_Image.fromImageElement = function (image) {
    if (image == null) {
      return null;
    }
    var buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
    buffer.set_src(image);
    var _image = new lime_graphics_Image(buffer);
    _image.type = lime_graphics_ImageType.CANVAS;
    return _image;
  };
  lime_graphics_Image.loadFromBase64 = function (base64, type) {
    if (base64 == null || type == null) {
      return lime_app_Future.withValue(null);
    }
    return lime__$backend_html5_HTML5HTTPRequest.loadImage(
      "data:" + type + ";base64," + base64
    );
  };
  lime_graphics_Image.loadFromBytes = function (bytes) {
    if (bytes == null) {
      return lime_app_Future.withValue(null);
    }
    var type = "";
    if (lime_graphics_Image.__isPNG(bytes)) {
      type = "image/png";
    } else if (lime_graphics_Image.__isJPG(bytes)) {
      type = "image/jpeg";
    } else if (lime_graphics_Image.__isGIF(bytes)) {
      type = "image/gif";
    } else {
      throw new js__$Boot_HaxeError(
        "Image tried to read PNG/JPG Bytes, but found an invalid header."
      );
    }
    return lime_graphics_Image.loadFromBase64(
      lime_graphics_Image.__base64Encode(bytes),
      type
    );
  };
  lime_graphics_Image.loadFromFile = function (path) {
    if (path == null) {
      return lime_app_Future.withValue(null);
    }
    return lime__$backend_html5_HTML5HTTPRequest.loadImage(path);
  };
  lime_graphics_Image.__base64Encode = function (bytes) {
    var extension;
    var _g = bytes.length % 3;
    switch (_g) {
      case 1:
        extension = "==";
        break;
      case 2:
        extension = "=";
        break;
      default:
        extension = "";
    }
    if (lime_graphics_Image.__base64Encoder == null) {
      lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(
        haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars)
      );
    }
    return (
      lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() +
      extension
    );
  };
  lime_graphics_Image.__isJPG = function (bytes) {
    if (bytes.b[0] == 255) {
      return bytes.b[1] == 216;
    } else {
      return false;
    }
  };
  lime_graphics_Image.__isPNG = function (bytes) {
    if (
      bytes.b[0] == 137 &&
      bytes.b[1] == 80 &&
      bytes.b[2] == 78 &&
      bytes.b[3] == 71 &&
      bytes.b[4] == 13 &&
      bytes.b[5] == 10 &&
      bytes.b[6] == 26
    ) {
      return bytes.b[7] == 10;
    } else {
      return false;
    }
  };
  lime_graphics_Image.__isGIF = function (bytes) {
    if (
      bytes.b[0] == 71 &&
      bytes.b[1] == 73 &&
      bytes.b[2] == 70 &&
      bytes.b[3] == 56
    ) {
      var b = bytes.b[4];
      if (b == 55 || b == 57) {
        return bytes.b[5] == 97;
      } else {
        return false;
      }
    }
    return false;
  };
  lime_graphics_Image.prototype = {
    buffer: null,
    dirty: null,
    height: null,
    offsetX: null,
    offsetY: null,
    rect: null,
    type: null,
    version: null,
    width: null,
    x: null,
    y: null,
    clone: function () {
      if (this.buffer != null) {
        if (this.type == lime_graphics_ImageType.CANVAS) {
          lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
        } else {
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
        }
        var image = new lime_graphics_Image(
          this.buffer.clone(),
          this.offsetX,
          this.offsetY,
          this.width,
          this.height,
          null,
          this.type
        );
        image.version = this.version;
        return image;
      } else {
        return new lime_graphics_Image(
          null,
          this.offsetX,
          this.offsetY,
          this.width,
          this.height,
          null,
          this.type
        );
      }
    },
    colorTransform: function (rect, colorMatrix) {
      rect = this.__clipRect(rect);
      if (this.buffer == null || rect == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.colorTransform(
            this,
            rect,
            colorMatrix
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.colorTransform(
            this,
            rect,
            colorMatrix
          );
          break;
        case 2:
          rect.offset(this.offsetX, this.offsetY);
          this.buffer.__srcBitmapData.colorTransform(
            rect.__toFlashRectangle(),
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(
              colorMatrix
            )
          );
          break;
        default:
      }
    },
    copyChannel: function (
      sourceImage,
      sourceRect,
      destPoint,
      sourceChannel,
      destChannel
    ) {
      sourceRect = this.__clipRect(sourceRect);
      if (this.buffer == null || sourceRect == null) {
        return;
      }
      if (
        destChannel == lime_graphics_ImageChannel.ALPHA &&
        !this.get_transparent()
      ) {
        return;
      }
      if (sourceRect.width <= 0 || sourceRect.height <= 0) {
        return;
      }
      if (sourceRect.x + sourceRect.width > sourceImage.width) {
        sourceRect.width = sourceImage.width - sourceRect.x;
      }
      if (sourceRect.y + sourceRect.height > sourceImage.height) {
        sourceRect.height = sourceImage.height - sourceRect.y;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.copyChannel(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            sourceChannel,
            destChannel
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
          lime_graphics_utils_ImageDataUtil.copyChannel(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            sourceChannel,
            destChannel
          );
          break;
        case 2:
          var srcChannel;
          switch (sourceChannel[1]) {
            case 0:
              srcChannel = 1;
              break;
            case 1:
              srcChannel = 2;
              break;
            case 2:
              srcChannel = 4;
              break;
            case 3:
              srcChannel = 8;
              break;
          }
          var dstChannel;
          switch (destChannel[1]) {
            case 0:
              dstChannel = 1;
              break;
            case 1:
              dstChannel = 2;
              break;
            case 2:
              dstChannel = 4;
              break;
            case 3:
              dstChannel = 8;
              break;
          }
          sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
          destPoint.offset(this.offsetX, this.offsetY);
          this.buffer.__srcBitmapData.copyChannel(
            sourceImage.buffer.get_src(),
            sourceRect.__toFlashRectangle(),
            destPoint.__toFlashPoint(),
            srcChannel,
            dstChannel
          );
          break;
        default:
      }
    },
    copyPixels: function (
      sourceImage,
      sourceRect,
      destPoint,
      alphaImage,
      alphaPoint,
      mergeAlpha
    ) {
      if (mergeAlpha == null) {
        mergeAlpha = false;
      }
      if (this.buffer == null || sourceImage == null) {
        return;
      }
      if (sourceRect.width <= 0 || sourceRect.height <= 0) {
        return;
      }
      if (this.width <= 0 || this.height <= 0) {
        return;
      }
      if (sourceRect.x + sourceRect.width > sourceImage.width) {
        sourceRect.width = sourceImage.width - sourceRect.x;
      }
      if (sourceRect.y + sourceRect.height > sourceImage.height) {
        sourceRect.height = sourceImage.height - sourceRect.y;
      }
      if (sourceRect.x < 0) {
        sourceRect.width += sourceRect.x;
        sourceRect.x = 0;
      }
      if (sourceRect.y < 0) {
        sourceRect.height += sourceRect.y;
        sourceRect.y = 0;
      }
      if (destPoint.x + sourceRect.width > this.width) {
        sourceRect.width = this.width - destPoint.x;
      }
      if (destPoint.y + sourceRect.height > this.height) {
        sourceRect.height = this.height - destPoint.y;
      }
      if (destPoint.x < 0) {
        sourceRect.width += destPoint.x;
        sourceRect.x -= destPoint.x;
        destPoint.x = 0;
      }
      if (destPoint.y < 0) {
        sourceRect.height += destPoint.y;
        sourceRect.y -= destPoint.y;
        destPoint.y = 0;
      }
      if (sourceImage == this) {
        sourceImage = this.clone();
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
          lime_graphics_utils_ImageCanvasUtil.copyPixels(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            alphaImage,
            alphaPoint,
            mergeAlpha
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
          lime_graphics_utils_ImageDataUtil.copyPixels(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            alphaImage,
            alphaPoint,
            mergeAlpha
          );
          break;
        case 2:
          sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
          destPoint.offset(this.offsetX, this.offsetY);
          if (alphaImage != null && alphaPoint != null) {
            alphaPoint.offset(alphaImage.offsetX, alphaImage.offsetY);
          }
          this.buffer.__srcBitmapData.copyPixels(
            sourceImage.buffer.__srcBitmapData,
            sourceRect.__toFlashRectangle(),
            destPoint.__toFlashPoint(),
            alphaImage != null ? alphaImage.buffer.get_src() : null,
            alphaPoint != null ? alphaPoint.__toFlashPoint() : null,
            mergeAlpha
          );
          break;
        default:
      }
    },
    encode: function (format, quality) {
      if (quality == null) {
        quality = 90;
      }
      if (format == null) {
        format = "png";
      }
      switch (format) {
        case "bmp":
          return lime_graphics_format_BMP.encode(this);
        case "jpeg":
        case "jpg":
          return lime_graphics_format_JPEG.encode(this, quality);
        case "png":
          return lime_graphics_format_PNG.encode(this);
        default:
      }
      return null;
    },
    fillRect: function (rect, color, format) {
      rect = this.__clipRect(rect);
      if (this.buffer == null || rect == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.fillRect(
            this,
            rect,
            color,
            format
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          if (this.buffer.data.length == 0) {
            return;
          }
          lime_graphics_utils_ImageDataUtil.fillRect(this, rect, color, format);
          break;
        case 2:
          rect.offset(this.offsetX, this.offsetY);
          var argb;
          if (format == null) {
            var rgba = color;
            var this1 = 0;
            var argb1 = this1;
            argb1 =
              ((rgba & 255 & 255) << 24) |
              (((rgba >>> 24) & 255 & 255) << 16) |
              (((rgba >>> 16) & 255 & 255) << 8) |
              ((rgba >>> 8) & 255 & 255);
            argb = argb1;
          } else {
            switch (format) {
              case 1:
                argb = color;
                break;
              case 2:
                var bgra = color;
                var this2 = 0;
                var argb2 = this2;
                argb2 =
                  ((bgra & 255 & 255) << 24) |
                  (((bgra >>> 8) & 255 & 255) << 16) |
                  (((bgra >>> 16) & 255 & 255) << 8) |
                  ((bgra >>> 24) & 255 & 255);
                argb = argb2;
                break;
              default:
                var rgba1 = color;
                var this3 = 0;
                var argb3 = this3;
                argb3 =
                  ((rgba1 & 255 & 255) << 24) |
                  (((rgba1 >>> 24) & 255 & 255) << 16) |
                  (((rgba1 >>> 16) & 255 & 255) << 8) |
                  ((rgba1 >>> 8) & 255 & 255);
                argb = argb3;
            }
          }
          this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(), argb);
          break;
        default:
      }
    },
    floodFill: function (x, y, color, format) {
      if (this.buffer == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.floodFill(
            this,
            x,
            y,
            color,
            format
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.floodFill(
            this,
            x,
            y,
            color,
            format
          );
          break;
        case 2:
          var argb;
          if (format == null) {
            var rgba = color;
            var this1 = 0;
            var argb1 = this1;
            argb1 =
              ((rgba & 255 & 255) << 24) |
              (((rgba >>> 24) & 255 & 255) << 16) |
              (((rgba >>> 16) & 255 & 255) << 8) |
              ((rgba >>> 8) & 255 & 255);
            argb = argb1;
          } else {
            switch (format) {
              case 1:
                argb = color;
                break;
              case 2:
                var bgra = color;
                var this2 = 0;
                var argb2 = this2;
                argb2 =
                  ((bgra & 255 & 255) << 24) |
                  (((bgra >>> 8) & 255 & 255) << 16) |
                  (((bgra >>> 16) & 255 & 255) << 8) |
                  ((bgra >>> 24) & 255 & 255);
                argb = argb2;
                break;
              default:
                var rgba1 = color;
                var this3 = 0;
                var argb3 = this3;
                argb3 =
                  ((rgba1 & 255 & 255) << 24) |
                  (((rgba1 >>> 24) & 255 & 255) << 16) |
                  (((rgba1 >>> 16) & 255 & 255) << 8) |
                  ((rgba1 >>> 8) & 255 & 255);
                argb = argb3;
            }
          }
          this.buffer.__srcBitmapData.floodFill(
            x + this.offsetX,
            y + this.offsetY,
            argb
          );
          break;
        default:
      }
    },
    getColorBoundsRect: function (mask, color, findColor, format) {
      if (findColor == null) {
        findColor = true;
      }
      if (this.buffer == null) {
        return null;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(
            this,
            mask,
            color,
            findColor,
            format
          );
        case 1:
          return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(
            this,
            mask,
            color,
            findColor,
            format
          );
        case 2:
          var rect = this.buffer.__srcBitmapData.getColorBoundsRect(
            mask,
            color,
            findColor
          );
          return new lime_math_Rectangle(
            rect.x,
            rect.y,
            rect.width,
            rect.height
          );
        default:
          return null;
      }
    },
    getPixel: function (x, y, format) {
      if (
        this.buffer == null ||
        x < 0 ||
        y < 0 ||
        x >= this.width ||
        y >= this.height
      ) {
        return 0;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          return lime_graphics_utils_ImageCanvasUtil.getPixel(
            this,
            x,
            y,
            format
          );
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          return lime_graphics_utils_ImageDataUtil.getPixel(this, x, y, format);
        case 2:
          var color = this.buffer.__srcBitmapData.getPixel(
            x + this.offsetX,
            y + this.offsetY
          );
          if (format == null) {
            var this1 = 0;
            var rgba = this1;
            rgba =
              (((color >>> 16) & 255 & 255) << 24) |
              (((color >>> 8) & 255 & 255) << 16) |
              ((color & 255 & 255) << 8) |
              ((color >>> 24) & 255 & 255);
            var rgba1 = rgba;
            return rgba1;
          } else {
            switch (format) {
              case 1:
                return color;
              case 2:
                var this2 = 0;
                var bgra = this2;
                bgra =
                  ((color & 255 & 255) << 24) |
                  (((color >>> 8) & 255 & 255) << 16) |
                  (((color >>> 16) & 255 & 255) << 8) |
                  ((color >>> 24) & 255 & 255);
                var bgra1 = bgra;
                return bgra1;
              default:
                var this3 = 0;
                var rgba2 = this3;
                rgba2 =
                  (((color >>> 16) & 255 & 255) << 24) |
                  (((color >>> 8) & 255 & 255) << 16) |
                  ((color & 255 & 255) << 8) |
                  ((color >>> 24) & 255 & 255);
                var rgba3 = rgba2;
                return rgba3;
            }
          }
          break;
        default:
          return 0;
      }
    },
    getPixel32: function (x, y, format) {
      if (
        this.buffer == null ||
        x < 0 ||
        y < 0 ||
        x >= this.width ||
        y >= this.height
      ) {
        return 0;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          return lime_graphics_utils_ImageCanvasUtil.getPixel32(
            this,
            x,
            y,
            format
          );
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          return lime_graphics_utils_ImageDataUtil.getPixel32(
            this,
            x,
            y,
            format
          );
        case 2:
          var color = this.buffer.__srcBitmapData.getPixel32(
            x + this.offsetX,
            y + this.offsetY
          );
          if (format == null) {
            var this1 = 0;
            var rgba = this1;
            rgba =
              (((color >>> 16) & 255 & 255) << 24) |
              (((color >>> 8) & 255 & 255) << 16) |
              ((color & 255 & 255) << 8) |
              ((color >>> 24) & 255 & 255);
            var rgba1 = rgba;
            return rgba1;
          } else {
            switch (format) {
              case 1:
                return color;
              case 2:
                var this2 = 0;
                var bgra = this2;
                bgra =
                  ((color & 255 & 255) << 24) |
                  (((color >>> 8) & 255 & 255) << 16) |
                  (((color >>> 16) & 255 & 255) << 8) |
                  ((color >>> 24) & 255 & 255);
                var bgra1 = bgra;
                return bgra1;
              default:
                var this3 = 0;
                var rgba2 = this3;
                rgba2 =
                  (((color >>> 16) & 255 & 255) << 24) |
                  (((color >>> 8) & 255 & 255) << 16) |
                  ((color & 255 & 255) << 8) |
                  ((color >>> 24) & 255 & 255);
                var rgba3 = rgba2;
                return rgba3;
            }
          }
          break;
        default:
          return 0;
      }
    },
    getPixels: function (rect, format) {
      if (this.buffer == null) {
        return null;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          return lime_graphics_utils_ImageCanvasUtil.getPixels(
            this,
            rect,
            format
          );
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          return lime_graphics_utils_ImageDataUtil.getPixels(
            this,
            rect,
            format
          );
        case 2:
          return null;
        default:
          return null;
      }
    },
    merge: function (
      sourceImage,
      sourceRect,
      destPoint,
      redMultiplier,
      greenMultiplier,
      blueMultiplier,
      alphaMultiplier
    ) {
      if (this.buffer == null || sourceImage == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
          lime_graphics_utils_ImageCanvasUtil.merge(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            redMultiplier,
            greenMultiplier,
            blueMultiplier,
            alphaMultiplier
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
          lime_graphics_utils_ImageDataUtil.merge(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            redMultiplier,
            greenMultiplier,
            blueMultiplier,
            alphaMultiplier
          );
          break;
        case 2:
          sourceRect.offset(this.offsetX, this.offsetY);
          this.buffer.__srcBitmapData.merge(
            sourceImage.buffer.__srcBitmapData,
            sourceRect.__toFlashRectangle(),
            destPoint.__toFlashPoint(),
            redMultiplier,
            greenMultiplier,
            blueMultiplier,
            alphaMultiplier
          );
          break;
        default:
          return;
      }
    },
    resize: function (newWidth, newHeight) {
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.resize(this, newWidth, newHeight);
          break;
        case 1:
          lime_graphics_utils_ImageDataUtil.resize(this, newWidth, newHeight);
          break;
        case 2:
          break;
        default:
      }
      this.buffer.width = newWidth;
      this.buffer.height = newHeight;
      this.offsetX = 0;
      this.offsetY = 0;
      this.width = newWidth;
      this.height = newHeight;
    },
    scroll: function (x, y) {
      if (this.buffer == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.scroll(this, x, y);
          break;
        case 1:
          this.copyPixels(this, this.get_rect(), new lime_math_Vector2(x, y));
          break;
        case 2:
          this.buffer.__srcBitmapData.scroll(
            x + this.offsetX,
            y + this.offsetX
          );
          break;
        default:
      }
    },
    setPixel: function (x, y, color, format) {
      if (
        this.buffer == null ||
        x < 0 ||
        y < 0 ||
        x >= this.width ||
        y >= this.height
      ) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.setPixel(
            this,
            x,
            y,
            color,
            format
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.setPixel(this, x, y, color, format);
          break;
        case 2:
          var argb;
          if (format == null) {
            var rgba = color;
            var this1 = 0;
            var argb1 = this1;
            argb1 =
              ((rgba & 255 & 255) << 24) |
              (((rgba >>> 24) & 255 & 255) << 16) |
              (((rgba >>> 16) & 255 & 255) << 8) |
              ((rgba >>> 8) & 255 & 255);
            argb = argb1;
          } else {
            switch (format) {
              case 1:
                argb = color;
                break;
              case 2:
                var bgra = color;
                var this2 = 0;
                var argb2 = this2;
                argb2 =
                  ((bgra & 255 & 255) << 24) |
                  (((bgra >>> 8) & 255 & 255) << 16) |
                  (((bgra >>> 16) & 255 & 255) << 8) |
                  ((bgra >>> 24) & 255 & 255);
                argb = argb2;
                break;
              default:
                var rgba1 = color;
                var this3 = 0;
                var argb3 = this3;
                argb3 =
                  ((rgba1 & 255 & 255) << 24) |
                  (((rgba1 >>> 24) & 255 & 255) << 16) |
                  (((rgba1 >>> 16) & 255 & 255) << 8) |
                  ((rgba1 >>> 8) & 255 & 255);
                argb = argb3;
            }
          }
          this.buffer.__srcBitmapData.setPixel(
            x + this.offsetX,
            y + this.offsetX,
            argb
          );
          break;
        default:
      }
    },
    setPixel32: function (x, y, color, format) {
      if (
        this.buffer == null ||
        x < 0 ||
        y < 0 ||
        x >= this.width ||
        y >= this.height
      ) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.setPixel32(
            this,
            x,
            y,
            color,
            format
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.setPixel32(
            this,
            x,
            y,
            color,
            format
          );
          break;
        case 2:
          var argb;
          if (format == null) {
            var rgba = color;
            var this1 = 0;
            var argb1 = this1;
            argb1 =
              ((rgba & 255 & 255) << 24) |
              (((rgba >>> 24) & 255 & 255) << 16) |
              (((rgba >>> 16) & 255 & 255) << 8) |
              ((rgba >>> 8) & 255 & 255);
            argb = argb1;
          } else {
            switch (format) {
              case 1:
                argb = color;
                break;
              case 2:
                var bgra = color;
                var this2 = 0;
                var argb2 = this2;
                argb2 =
                  ((bgra & 255 & 255) << 24) |
                  (((bgra >>> 8) & 255 & 255) << 16) |
                  (((bgra >>> 16) & 255 & 255) << 8) |
                  ((bgra >>> 24) & 255 & 255);
                argb = argb2;
                break;
              default:
                var rgba1 = color;
                var this3 = 0;
                var argb3 = this3;
                argb3 =
                  ((rgba1 & 255 & 255) << 24) |
                  (((rgba1 >>> 24) & 255 & 255) << 16) |
                  (((rgba1 >>> 16) & 255 & 255) << 8) |
                  ((rgba1 >>> 8) & 255 & 255);
                argb = argb3;
            }
          }
          this.buffer.__srcBitmapData.setPixel32(
            x + this.offsetX,
            y + this.offsetY,
            argb
          );
          break;
        default:
      }
    },
    setPixels: function (rect, bytes, format) {
      rect = this.__clipRect(rect);
      if (this.buffer == null || rect == null) {
        return;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
          lime_graphics_utils_ImageCanvasUtil.setPixels(
            this,
            rect,
            bytes,
            format
          );
          break;
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.setPixels(
            this,
            rect,
            bytes,
            format
          );
          break;
        case 2:
          break;
        default:
      }
    },
    threshold: function (
      sourceImage,
      sourceRect,
      destPoint,
      operation,
      threshold,
      color,
      mask,
      copySource,
      format
    ) {
      if (copySource == null) {
        copySource = false;
      }
      if (mask == null) {
        mask = -1;
      }
      if (color == null) {
        color = 0;
      }
      if (this.buffer == null || sourceImage == null || sourceRect == null) {
        return 0;
      }
      var _g = this.type;
      switch (_g[1]) {
        case 0:
        case 1:
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
          return lime_graphics_utils_ImageDataUtil.threshold(
            this,
            sourceImage,
            sourceRect,
            destPoint,
            operation,
            threshold,
            color,
            mask,
            copySource,
            format
          );
        case 2:
          var _color;
          if (format == null) {
            var rgba = color;
            var this1 = 0;
            var argb = this1;
            argb =
              ((rgba & 255 & 255) << 24) |
              (((rgba >>> 24) & 255 & 255) << 16) |
              (((rgba >>> 16) & 255 & 255) << 8) |
              ((rgba >>> 8) & 255 & 255);
            _color = argb;
          } else {
            switch (format) {
              case 1:
                _color = color;
                break;
              case 2:
                var bgra = color;
                var this2 = 0;
                var argb1 = this2;
                argb1 =
                  ((bgra & 255 & 255) << 24) |
                  (((bgra >>> 8) & 255 & 255) << 16) |
                  (((bgra >>> 16) & 255 & 255) << 8) |
                  ((bgra >>> 24) & 255 & 255);
                _color = argb1;
                break;
              default:
                var rgba1 = color;
                var this3 = 0;
                var argb2 = this3;
                argb2 =
                  ((rgba1 & 255 & 255) << 24) |
                  (((rgba1 >>> 24) & 255 & 255) << 16) |
                  (((rgba1 >>> 16) & 255 & 255) << 8) |
                  ((rgba1 >>> 8) & 255 & 255);
                _color = argb2;
            }
          }
          var _mask;
          if (format == null) {
            var rgba2 = mask;
            var this4 = 0;
            var argb3 = this4;
            argb3 =
              ((rgba2 & 255 & 255) << 24) |
              (((rgba2 >>> 24) & 255 & 255) << 16) |
              (((rgba2 >>> 16) & 255 & 255) << 8) |
              ((rgba2 >>> 8) & 255 & 255);
            _mask = argb3;
          } else {
            switch (format) {
              case 1:
                _mask = mask;
                break;
              case 2:
                var bgra1 = mask;
                var this5 = 0;
                var argb4 = this5;
                argb4 =
                  ((bgra1 & 255 & 255) << 24) |
                  (((bgra1 >>> 8) & 255 & 255) << 16) |
                  (((bgra1 >>> 16) & 255 & 255) << 8) |
                  ((bgra1 >>> 24) & 255 & 255);
                _mask = argb4;
                break;
              default:
                var rgba3 = mask;
                var this6 = 0;
                var argb5 = this6;
                argb5 =
                  ((rgba3 & 255 & 255) << 24) |
                  (((rgba3 >>> 24) & 255 & 255) << 16) |
                  (((rgba3 >>> 16) & 255 & 255) << 8) |
                  ((rgba3 >>> 8) & 255 & 255);
                _mask = argb5;
            }
          }
          sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
          destPoint.offset(this.offsetX, this.offsetY);
          return this.buffer.__srcBitmapData.threshold(
            sourceImage.buffer.get_src(),
            sourceRect.__toFlashRectangle(),
            destPoint.__toFlashPoint(),
            operation,
            threshold,
            _color,
            _mask,
            copySource
          );
        default:
      }
      return 0;
    },
    __clipRect: function (r) {
      if (r == null) {
        return null;
      }
      if (r.x < 0) {
        r.width -= -r.x;
        r.x = 0;
        if (r.x + r.width <= 0) {
          return null;
        }
      }
      if (r.y < 0) {
        r.height -= -r.y;
        r.y = 0;
        if (r.y + r.height <= 0) {
          return null;
        }
      }
      if (r.x + r.width >= this.width) {
        r.width -= r.x + r.width - this.width;
        if (r.width <= 0) {
          return null;
        }
      }
      if (r.y + r.height >= this.height) {
        r.height -= r.y + r.height - this.height;
        if (r.height <= 0) {
          return null;
        }
      }
      return r;
    },
    __fromBase64: function (base64, type, onload) {
      var _gthis = this;
      var image = new Image();
      var image_onLoaded = function (event) {
        _gthis.buffer = new lime_graphics_ImageBuffer(
          null,
          image.width,
          image.height
        );
        _gthis.buffer.__srcImage = image;
        _gthis.offsetX = 0;
        _gthis.offsetY = 0;
        _gthis.width = _gthis.buffer.width;
        _gthis.height = _gthis.buffer.height;
        if (onload != null) {
          onload(_gthis);
        }
      };
      image.addEventListener("load", image_onLoaded, false);
      image.src = "data:" + type + ";base64," + base64;
    },
    __fromBytes: function (bytes, onload) {
      var type = "";
      if (lime_graphics_Image.__isPNG(bytes)) {
        type = "image/png";
      } else if (lime_graphics_Image.__isJPG(bytes)) {
        type = "image/jpeg";
      } else if (lime_graphics_Image.__isGIF(bytes)) {
        type = "image/gif";
      } else {
        throw new js__$Boot_HaxeError(
          "Image tried to read PNG/JPG Bytes, but found an invalid header."
        );
      }
      this.__fromBase64(
        lime_graphics_Image.__base64Encode(bytes),
        type,
        onload
      );
    },
    __fromFile: function (path, onload, onerror) {
      var _gthis = this;
      var image = new Image();
      image.crossOrigin = "Anonymous";
      image.onload = function (_) {
        _gthis.buffer = new lime_graphics_ImageBuffer(
          null,
          image.width,
          image.height
        );
        _gthis.buffer.__srcImage = image;
        _gthis.width = image.width;
        _gthis.height = image.height;
        if (onload != null) {
          onload(_gthis);
        }
      };
      image.onerror = function (_1) {
        if (onerror != null) {
          onerror();
        }
      };
      image.src = path;
      var image1 = image.complete;
    },
    __fromImageBuffer: function (buffer) {
      this.buffer = buffer;
      if (buffer != null) {
        if (this.width == -1) {
          this.width = buffer.width;
        }
        if (this.height == -1) {
          this.height = buffer.height;
        }
      }
    },
    get_data: function () {
      if (
        this.buffer.data == null &&
        this.buffer.width > 0 &&
        this.buffer.height > 0
      ) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(this);
      }
      return this.buffer.data;
    },
    set_data: function (value) {
      return (this.buffer.data = value);
    },
    get_format: function () {
      return this.buffer.format;
    },
    set_format: function (value) {
      if (this.buffer.format != value) {
        var _g = this.type;
        if (_g[1] == 1) {
          lime_graphics_utils_ImageDataUtil.setFormat(this, value);
        }
      }
      return (this.buffer.format = value);
    },
    get_powerOfTwo: function () {
      if (
        this.buffer.width != 0 &&
        (this.buffer.width & (~this.buffer.width + 1)) == this.buffer.width
      ) {
        if (this.buffer.height != 0) {
          return (
            (this.buffer.height & (~this.buffer.height + 1)) ==
            this.buffer.height
          );
        } else {
          return false;
        }
      } else {
        return false;
      }
    },
    set_powerOfTwo: function (value) {
      if (value != this.get_powerOfTwo()) {
        var newWidth = 1;
        var newHeight = 1;
        while (newWidth < this.buffer.width) newWidth <<= 1;
        while (newHeight < this.buffer.height) newHeight <<= 1;
        var _g = this.type;
        switch (_g[1]) {
          case 0:
            break;
          case 1:
            lime_graphics_utils_ImageDataUtil.resizeBuffer(
              this,
              newWidth,
              newHeight
            );
            break;
          case 2:
            break;
          default:
        }
      }
      return value;
    },
    get_premultiplied: function () {
      return this.buffer.premultiplied;
    },
    set_premultiplied: function (value) {
      if (value && !this.buffer.premultiplied) {
        var _g = this.type;
        switch (_g[1]) {
          case 0:
          case 1:
            lime_graphics_utils_ImageCanvasUtil.convertToData(this);
            lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
            break;
          default:
        }
      } else if (!value && this.buffer.premultiplied) {
        var _g1 = this.type;
        if (_g1[1] == 1) {
          lime_graphics_utils_ImageCanvasUtil.convertToData(this);
          lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
        }
      }
      return value;
    },
    get_rect: function () {
      return new lime_math_Rectangle(0, 0, this.width, this.height);
    },
    get_src: function () {
      if (this.buffer.__srcCanvas == null) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
      }
      return this.buffer.get_src();
    },
    set_src: function (value) {
      return this.buffer.set_src(value);
    },
    get_transparent: function () {
      if (this.buffer == null) {
        return false;
      }
      return this.buffer.transparent;
    },
    set_transparent: function (value) {
      if (this.buffer == null) {
        return false;
      }
      return (this.buffer.transparent = value);
    },
    __class__: lime_graphics_Image,
    __properties__: {
      set_transparent: "set_transparent",
      get_transparent: "get_transparent",
      set_src: "set_src",
      get_src: "get_src",
      get_rect: "get_rect",
      set_premultiplied: "set_premultiplied",
      get_premultiplied: "get_premultiplied",
      set_powerOfTwo: "set_powerOfTwo",
      get_powerOfTwo: "get_powerOfTwo",
      set_format: "set_format",
      get_format: "get_format",
      set_data: "set_data",
      get_data: "get_data",
    },
  };
  var lime_graphics_ImageBuffer = function (
    data,
    width,
    height,
    bitsPerPixel,
    format
  ) {
    if (bitsPerPixel == null) {
      bitsPerPixel = 32;
    }
    if (height == null) {
      height = 0;
    }
    if (width == null) {
      width = 0;
    }
    this.data = data;
    this.width = width;
    this.height = height;
    this.bitsPerPixel = bitsPerPixel;
    this.format = format == null ? 0 : format;
    this.premultiplied = false;
    this.transparent = true;
  };
  $hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
  lime_graphics_ImageBuffer.__name__ = ["lime", "graphics", "ImageBuffer"];
  lime_graphics_ImageBuffer.prototype = {
    bitsPerPixel: null,
    data: null,
    format: null,
    height: null,
    premultiplied: null,
    transparent: null,
    width: null,
    __srcBitmapData: null,
    __srcCanvas: null,
    __srcContext: null,
    __srcCustom: null,
    __srcImage: null,
    __srcImageData: null,
    clone: function () {
      var buffer = new lime_graphics_ImageBuffer(
        this.data,
        this.width,
        this.height,
        this.bitsPerPixel
      );
      if (this.data != null) {
        var elements = this.data.byteLength;
        var this1;
        if (elements != null) {
          this1 = new Uint8Array(elements);
        } else {
          this1 = null;
        }
        buffer.data = this1;
        var view = this.data;
        var this2;
        if (view != null) {
          this2 = new Uint8Array(view);
        } else {
          this2 = null;
        }
        var copy = this2;
        buffer.data.set(copy);
      } else if (this.__srcImageData != null) {
        buffer.__srcCanvas = window.document.createElement("canvas");
        buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
        buffer.__srcCanvas.width = this.__srcImageData.width;
        buffer.__srcCanvas.height = this.__srcImageData.height;
        buffer.__srcImageData = buffer.__srcContext.createImageData(
          this.__srcImageData.width,
          this.__srcImageData.height
        );
        var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
        buffer.__srcImageData.data.set(copy1);
      } else if (this.__srcCanvas != null) {
        buffer.__srcCanvas = window.document.createElement("canvas");
        buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
        buffer.__srcCanvas.width = this.__srcCanvas.width;
        buffer.__srcCanvas.height = this.__srcCanvas.height;
        buffer.__srcContext.drawImage(this.__srcCanvas, 0, 0);
      } else {
        buffer.__srcImage = this.__srcImage;
      }
      buffer.bitsPerPixel = this.bitsPerPixel;
      buffer.format = this.format;
      buffer.premultiplied = this.premultiplied;
      buffer.transparent = this.transparent;
      return buffer;
    },
    get_src: function () {
      if (this.__srcImage != null) {
        return this.__srcImage;
      }
      return this.__srcCanvas;
    },
    set_src: function (value) {
      if (js_Boot.__instanceof(value, Image)) {
        this.__srcImage = value;
      } else if (js_Boot.__instanceof(value, HTMLCanvasElement)) {
        this.__srcCanvas = value;
        this.__srcContext = this.__srcCanvas.getContext("2d");
      }
      return value;
    },
    get_stride: function () {
      return this.width * 4;
    },
    __class__: lime_graphics_ImageBuffer,
    __properties__: {
      get_stride: "get_stride",
      set_src: "set_src",
      get_src: "get_src",
    },
  };
  var lime_graphics_ImageChannel = ($hxClasses["lime.graphics.ImageChannel"] = {
    __ename__: ["lime", "graphics", "ImageChannel"],
    __constructs__: ["RED", "GREEN", "BLUE", "ALPHA"],
  });
  lime_graphics_ImageChannel.RED = ["RED", 0];
  lime_graphics_ImageChannel.RED.toString = $estr;
  lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
  lime_graphics_ImageChannel.GREEN = ["GREEN", 1];
  lime_graphics_ImageChannel.GREEN.toString = $estr;
  lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
  lime_graphics_ImageChannel.BLUE = ["BLUE", 2];
  lime_graphics_ImageChannel.BLUE.toString = $estr;
  lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
  lime_graphics_ImageChannel.ALPHA = ["ALPHA", 3];
  lime_graphics_ImageChannel.ALPHA.toString = $estr;
  lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
  var lime_graphics_ImageType = ($hxClasses["lime.graphics.ImageType"] = {
    __ename__: ["lime", "graphics", "ImageType"],
    __constructs__: ["CANVAS", "DATA", "FLASH", "CUSTOM"],
  });
  lime_graphics_ImageType.CANVAS = ["CANVAS", 0];
  lime_graphics_ImageType.CANVAS.toString = $estr;
  lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
  lime_graphics_ImageType.DATA = ["DATA", 1];
  lime_graphics_ImageType.DATA.toString = $estr;
  lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
  lime_graphics_ImageType.FLASH = ["FLASH", 2];
  lime_graphics_ImageType.FLASH.toString = $estr;
  lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
  lime_graphics_ImageType.CUSTOM = ["CUSTOM", 3];
  lime_graphics_ImageType.CUSTOM.toString = $estr;
  lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
  var lime_graphics_RenderContext = ($hxClasses["lime.graphics.RenderContext"] =
    {
      __ename__: ["lime", "graphics", "RenderContext"],
      __constructs__: [
        "OPENGL",
        "CANVAS",
        "DOM",
        "FLASH",
        "CAIRO",
        "CONSOLE",
        "CUSTOM",
        "NONE",
      ],
    });
  lime_graphics_RenderContext.OPENGL = function (gl) {
    var $x = ["OPENGL", 0, gl];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.CANVAS = function (context) {
    var $x = ["CANVAS", 1, context];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.DOM = function (element) {
    var $x = ["DOM", 2, element];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.FLASH = function (stage) {
    var $x = ["FLASH", 3, stage];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.CAIRO = function (cairo) {
    var $x = ["CAIRO", 4, cairo];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.CONSOLE = function (context) {
    var $x = ["CONSOLE", 5, context];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.CUSTOM = function (data) {
    var $x = ["CUSTOM", 6, data];
    $x.__enum__ = lime_graphics_RenderContext;
    $x.toString = $estr;
    return $x;
  };
  lime_graphics_RenderContext.NONE = ["NONE", 7];
  lime_graphics_RenderContext.NONE.toString = $estr;
  lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
  var lime_graphics_Renderer = function (window) {
    this.onRender = new lime_app__$Event_$Void_$Void();
    this.onContextRestored =
      new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
    this.onContextLost = new lime_app__$Event_$Void_$Void();
    this.window = window;
    this.backend = new lime__$backend_html5_HTML5Renderer(this);
    this.window.renderer = this;
  };
  $hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
  lime_graphics_Renderer.__name__ = ["lime", "graphics", "Renderer"];
  lime_graphics_Renderer.prototype = {
    context: null,
    onContextLost: null,
    onContextRestored: null,
    onRender: null,
    type: null,
    window: null,
    backend: null,
    create: function () {
      this.backend.create();
    },
    flip: function () {
      this.backend.flip();
    },
    readPixels: function (rect) {
      return this.backend.readPixels(rect);
    },
    render: function () {
      this.backend.render();
    },
    __class__: lime_graphics_Renderer,
  };
  var lime_graphics_RendererType = ($hxClasses["lime.graphics.RendererType"] = {
    __ename__: ["lime", "graphics", "RendererType"],
    __constructs__: [
      "OPENGL",
      "CANVAS",
      "DOM",
      "FLASH",
      "CAIRO",
      "CONSOLE",
      "CUSTOM",
    ],
  });
  lime_graphics_RendererType.OPENGL = ["OPENGL", 0];
  lime_graphics_RendererType.OPENGL.toString = $estr;
  lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.CANVAS = ["CANVAS", 1];
  lime_graphics_RendererType.CANVAS.toString = $estr;
  lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.DOM = ["DOM", 2];
  lime_graphics_RendererType.DOM.toString = $estr;
  lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.FLASH = ["FLASH", 3];
  lime_graphics_RendererType.FLASH.toString = $estr;
  lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.CAIRO = ["CAIRO", 4];
  lime_graphics_RendererType.CAIRO.toString = $estr;
  lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.CONSOLE = ["CONSOLE", 5];
  lime_graphics_RendererType.CONSOLE.toString = $estr;
  lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
  lime_graphics_RendererType.CUSTOM = ["CUSTOM", 6];
  lime_graphics_RendererType.CUSTOM.toString = $estr;
  lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
  var lime_graphics_cairo_Cairo = function (surface) {
    var tmp = surface != null;
  };
  $hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
  lime_graphics_cairo_Cairo.__name__ = ["lime", "graphics", "cairo", "Cairo"];
  lime_graphics_cairo_Cairo.__properties__ = {
    get_versionString: "get_versionString",
    get_version: "get_version",
  };
  lime_graphics_cairo_Cairo.get_version = function () {
    return 0;
  };
  lime_graphics_cairo_Cairo.get_versionString = function () {
    return "";
  };
  lime_graphics_cairo_Cairo.prototype = {
    target: null,
    userData: null,
    handle: null,
    arc: function (xc, yc, radius, angle1, angle2) {},
    arcNegative: function (xc, yc, radius, angle1, angle2) {},
    clip: function () {},
    clipExtents: function (x1, y1, x2, y2) {},
    clipPreserve: function () {},
    closePath: function () {},
    copyPage: function () {},
    curveTo: function (x1, y1, x2, y2, x3, y3) {},
    fill: function () {},
    fillExtents: function (x1, y1, x2, y2) {},
    fillPreserve: function () {},
    identityMatrix: function () {},
    inClip: function (x, y) {
      return false;
    },
    inFill: function (x, y) {
      return false;
    },
    inStroke: function (x, y) {
      return false;
    },
    lineTo: function (x, y) {},
    moveTo: function (x, y) {},
    mask: function (pattern) {},
    maskSurface: function (surface, x, y) {},
    newPath: function () {},
    paint: function () {},
    paintWithAlpha: function (alpha) {},
    popGroup: function () {
      return null;
    },
    popGroupToSource: function () {},
    pushGroup: function () {},
    pushGroupWithContent: function (content) {},
    recreate: function (surface) {},
    rectangle: function (x, y, width, height) {},
    relCurveTo: function (dx1, dy1, dx2, dy2, dx3, dy3) {},
    relLineTo: function (dx, dy) {},
    relMoveTo: function (dx, dy) {},
    resetClip: function () {},
    restore: function () {},
    save: function () {},
    setFontSize: function (size) {},
    setSourceRGB: function (r, g, b) {},
    setSourceRGBA: function (r, g, b, a) {},
    setSourceSurface: function (surface, x, y) {},
    showGlyphs: function (glyphs) {},
    showPage: function () {},
    showText: function (utf8) {},
    status: function () {
      return 0;
    },
    stroke: function () {},
    strokeExtents: function (x1, y1, x2, y2) {},
    strokePreserve: function () {},
    textPath: function (utf8) {},
    transform: function (matrix) {},
    rotate: function (amount) {},
    scale: function (x, y) {},
    translate: function (x, y) {},
    get_antialias: function () {
      return 0;
    },
    set_antialias: function (value) {
      return value;
    },
    get_currentPoint: function () {
      return null;
    },
    get_dash: function () {
      return [];
    },
    set_dash: function (value) {
      return value;
    },
    get_dashCount: function () {
      return 0;
    },
    get_fillRule: function () {
      return 0;
    },
    set_fillRule: function (value) {
      return value;
    },
    get_fontFace: function () {
      return 0;
    },
    set_fontFace: function (value) {
      return value;
    },
    get_fontOptions: function () {
      return null;
    },
    set_fontOptions: function (value) {
      return value;
    },
    get_groupTarget: function () {
      return 0;
    },
    get_hasCurrentPoint: function () {
      return false;
    },
    get_lineCap: function () {
      return 0;
    },
    set_lineCap: function (value) {
      return value;
    },
    get_lineJoin: function () {
      return 0;
    },
    set_lineJoin: function (value) {
      return value;
    },
    get_lineWidth: function () {
      return 0;
    },
    set_lineWidth: function (value) {
      return value;
    },
    get_matrix: function () {
      return null;
    },
    set_matrix: function (value) {
      return value;
    },
    get_miterLimit: function () {
      return 0;
    },
    set_miterLimit: function (value) {
      return value;
    },
    get_operator: function () {
      return 0;
    },
    set_operator: function (value) {
      return value;
    },
    get_source: function () {
      return 0;
    },
    set_source: function (value) {
      return value;
    },
    get_target: function () {
      return 0;
    },
    get_tolerance: function () {
      return 0;
    },
    set_tolerance: function (value) {
      return value;
    },
    __class__: lime_graphics_cairo_Cairo,
    __properties__: {
      set_tolerance: "set_tolerance",
      get_tolerance: "get_tolerance",
      get_target: "get_target",
      set_source: "set_source",
      get_source: "get_source",
      set_operator: "set_operator",
      get_operator: "get_operator",
      set_miterLimit: "set_miterLimit",
      get_miterLimit: "get_miterLimit",
      set_matrix: "set_matrix",
      get_matrix: "get_matrix",
      set_lineWidth: "set_lineWidth",
      get_lineWidth: "get_lineWidth",
      set_lineJoin: "set_lineJoin",
      get_lineJoin: "get_lineJoin",
      set_lineCap: "set_lineCap",
      get_lineCap: "get_lineCap",
      get_hasCurrentPoint: "get_hasCurrentPoint",
      get_groupTarget: "get_groupTarget",
      set_fontOptions: "set_fontOptions",
      get_fontOptions: "get_fontOptions",
      set_fontFace: "set_fontFace",
      get_fontFace: "get_fontFace",
      set_fillRule: "set_fillRule",
      get_fillRule: "get_fillRule",
      get_dashCount: "get_dashCount",
      set_dash: "set_dash",
      get_dash: "get_dash",
      get_currentPoint: "get_currentPoint",
      set_antialias: "set_antialias",
      get_antialias: "get_antialias",
    },
  };
  var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] =
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
  lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoFTFontFace",
    "CairoFTFontFace_Impl_",
  ];
  lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new =
    function () {
      var this1 = 0;
      return this1;
    };
  lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create =
    function (face, loadFlags) {
      return 0;
    };
  var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] =
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
  lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoFontFace",
    "CairoFontFace_Impl_",
  ];
  lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function () {
    var this1 = null;
    return this1;
  };
  lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function (
    this1
  ) {
    return 0;
  };
  var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] =
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoFontOptions",
    "CairoFontOptions_Impl_",
  ];
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ =
    {
      set_subpixelOrder: "set_subpixelOrder",
      get_subpixelOrder: "get_subpixelOrder",
      set_hintStyle: "set_hintStyle",
      get_hintStyle: "get_hintStyle",
      set_hintMetrics: "set_hintMetrics",
      get_hintMetrics: "get_hintMetrics",
      set_antialias: "set_antialias",
      get_antialias: "get_antialias",
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new =
    function () {
      var this1 = null;
      return this1;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias =
    function (this1, value) {
      return value;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics =
    function (this1, value) {
      return value;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle =
    function (this1, value) {
      return value;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder =
    function (this1, value) {
      return value;
    };
  var lime_graphics_cairo_CairoGlyph = function (index, x, y) {
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.index = index;
    this.x = x;
    this.y = y;
  };
  $hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
  lime_graphics_cairo_CairoGlyph.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "CairoGlyph",
  ];
  lime_graphics_cairo_CairoGlyph.prototype = {
    index: null,
    x: null,
    y: null,
    __class__: lime_graphics_cairo_CairoGlyph,
  };
  var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] =
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoImageSurface",
    "CairoImageSurface_Impl_",
  ];
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ =
    {
      get_width: "get_width",
      get_stride: "get_stride",
      get_height: "get_height",
      get_format: "get_format",
      get_data: "get_data",
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new =
    function (format, width, height) {
      var this1 = 0;
      return this1;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create =
    function (data, format, width, height, stride) {
      return 0;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage =
    function (image) {
      return null;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data =
    function (this1) {
      return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width =
    function (this1) {
      return 0;
    };
  var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] =
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoPattern",
    "CairoPattern_Impl_",
  ];
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {
    set_matrix: "set_matrix",
    get_matrix: "get_matrix",
    set_filter: "set_filter",
    get_filter: "get_filter",
    set_extend: "set_extend",
    get_extend: "get_extend",
    get_colorStopCount: "get_colorStopCount",
  };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function (
    handle
  ) {
    var this1 = handle;
    return this1;
  };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB =
    function (this1, offset, r, g, b) {};
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA =
    function (this1, offset, r, g, b, a) {};
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface =
    function (surface) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear =
    function (x0, y0, x1, y1) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial =
    function (cx0, cy0, radius0, cx1, cy1, radius1) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function (
    r,
    g,
    b
  ) {
    return 0;
  };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA =
    function (r, g, b, a) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend =
    function (this1, value) {
      return value;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter =
    function (this1) {
      return 0;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter =
    function (this1, value) {
      return value;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix =
    function (this1) {
      return null;
    };
  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix =
    function (this1, value) {
      return value;
    };
  var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
  $hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] =
    lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
  lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = [
    "lime",
    "graphics",
    "cairo",
    "_CairoSurface",
    "CairoSurface_Impl_",
  ];
  lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function (
    this1
  ) {};
  var lime_graphics_console_IndexBuffer = function () {};
  $hxClasses["lime.graphics.console.IndexBuffer"] =
    lime_graphics_console_IndexBuffer;
  lime_graphics_console_IndexBuffer.__name__ = [
    "lime",
    "graphics",
    "console",
    "IndexBuffer",
  ];
  lime_graphics_console_IndexBuffer.prototype = {
    __class__: lime_graphics_console_IndexBuffer,
  };
  var lime_graphics_console_Primitive = ($hxClasses[
    "lime.graphics.console.Primitive"
  ] = {
    __ename__: ["lime", "graphics", "console", "Primitive"],
    __constructs__: ["Point", "Line", "LineStrip", "Triangle", "TriangleStrip"],
  });
  lime_graphics_console_Primitive.Point = ["Point", 0];
  lime_graphics_console_Primitive.Point.toString = $estr;
  lime_graphics_console_Primitive.Point.__enum__ =
    lime_graphics_console_Primitive;
  lime_graphics_console_Primitive.Line = ["Line", 1];
  lime_graphics_console_Primitive.Line.toString = $estr;
  lime_graphics_console_Primitive.Line.__enum__ =
    lime_graphics_console_Primitive;
  lime_graphics_console_Primitive.LineStrip = ["LineStrip", 2];
  lime_graphics_console_Primitive.LineStrip.toString = $estr;
  lime_graphics_console_Primitive.LineStrip.__enum__ =
    lime_graphics_console_Primitive;
  lime_graphics_console_Primitive.Triangle = ["Triangle", 3];
  lime_graphics_console_Primitive.Triangle.toString = $estr;
  lime_graphics_console_Primitive.Triangle.__enum__ =
    lime_graphics_console_Primitive;
  lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip", 4];
  lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
  lime_graphics_console_Primitive.TriangleStrip.__enum__ =
    lime_graphics_console_Primitive;
  var lime_graphics_console_Shader = function () {};
  $hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
  lime_graphics_console_Shader.__name__ = [
    "lime",
    "graphics",
    "console",
    "Shader",
  ];
  lime_graphics_console_Shader.prototype = {
    __class__: lime_graphics_console_Shader,
  };
  var lime_graphics_console_VertexBuffer = function () {};
  $hxClasses["lime.graphics.console.VertexBuffer"] =
    lime_graphics_console_VertexBuffer;
  lime_graphics_console_VertexBuffer.__name__ = [
    "lime",
    "graphics",
    "console",
    "VertexBuffer",
  ];
  lime_graphics_console_VertexBuffer.prototype = {
    lock: function () {
      return new lime_graphics_console_VertexOutput();
    },
    unlock: function () {},
    __class__: lime_graphics_console_VertexBuffer,
  };
  var lime_graphics_console_VertexOutput = function () {};
  $hxClasses["lime.graphics.console.VertexOutput"] =
    lime_graphics_console_VertexOutput;
  lime_graphics_console_VertexOutput.__name__ = [
    "lime",
    "graphics",
    "console",
    "VertexOutput",
  ];
  lime_graphics_console_VertexOutput.prototype = {
    vec2: function (x, y) {},
    vec3: function (x, y, z) {},
    color: function (r, g, b, a) {},
    __class__: lime_graphics_console_VertexOutput,
  };
  var lime_graphics_format_BMP = function () {};
  $hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
  lime_graphics_format_BMP.__name__ = ["lime", "graphics", "format", "BMP"];
  lime_graphics_format_BMP.encode = function (image, type) {
    if (image.get_premultiplied() || image.get_format() != 0) {
      image = image.clone();
      image.set_premultiplied(false);
      image.set_format(0);
    }
    if (type == null) {
      type = lime_graphics_format_BMPType.RGB;
    }
    var fileHeaderLength = 14;
    var infoHeaderLength = 40;
    var pixelValuesLength = image.width * image.height * 4;
    if (type != null) {
      switch (type[1]) {
        case 0:
          pixelValuesLength =
            image.width * 3 +
            ((image.width * 3) % 4) +
            image.height * 3 +
            image.height * 3;
          break;
        case 1:
          infoHeaderLength = 108;
          break;
        case 2:
          fileHeaderLength = 0;
          pixelValuesLength += image.width * image.height;
          break;
      }
    }
    var data = new haxe_io_Bytes(
      new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength)
    );
    var position = 0;
    if (fileHeaderLength > 0) {
      data.b[position++] = 66;
      data.b[position++] = 77;
      data.setInt32(position, data.length);
      position += 4;
      data.setUInt16(position, 0);
      position += 2;
      data.setUInt16(position, 0);
      position += 2;
      data.setInt32(position, fileHeaderLength + infoHeaderLength);
      position += 4;
    }
    data.setInt32(position, infoHeaderLength);
    position += 4;
    data.setInt32(position, image.width);
    position += 4;
    data.setInt32(
      position,
      type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height
    );
    position += 4;
    data.setUInt16(position, 1);
    position += 2;
    data.setUInt16(
      position,
      type == lime_graphics_format_BMPType.RGB ? 24 : 32
    );
    position += 2;
    data.setInt32(
      position,
      type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0
    );
    position += 4;
    data.setInt32(position, pixelValuesLength);
    position += 4;
    data.setInt32(position, 11824);
    position += 4;
    data.setInt32(position, 11824);
    position += 4;
    data.setInt32(position, 0);
    position += 4;
    data.setInt32(position, 0);
    position += 4;
    if (type == lime_graphics_format_BMPType.BITFIELD) {
      data.setInt32(position, 16711680);
      position += 4;
      data.setInt32(position, 65280);
      position += 4;
      data.setInt32(position, 255);
      position += 4;
      data.setInt32(position, -16777216);
      position += 4;
      data.b[position++] = 32;
      data.b[position++] = 110;
      data.b[position++] = 105;
      data.b[position++] = 87;
      var _g = 0;
      while (_g < 48) {
        var i = _g++;
        data.b[position++] = 0;
      }
    }
    var pixels = image.getPixels(
      new lime_math_Rectangle(0, 0, image.width, image.height),
      1
    );
    var readPosition = 0;
    var a;
    var r;
    var g;
    var b;
    if (type != null) {
      switch (type[1]) {
        case 0:
          var _g1 = 0;
          var _g2 = image.height;
          while (_g1 < _g2) {
            var y = _g1++;
            readPosition = (image.height - 1 - y) * 4 * image.width;
            var _g3 = 0;
            var _g21 = image.width;
            while (_g3 < _g21) {
              var x = _g3++;
              a = pixels.b[readPosition++];
              r = pixels.b[readPosition++];
              g = pixels.b[readPosition++];
              b = pixels.b[readPosition++];
              data.b[position++] = b & 255;
              data.b[position++] = g & 255;
              data.b[position++] = r & 255;
            }
            var _g31 = 0;
            var _g22 = (image.width * 3) % 4;
            while (_g31 < _g22) {
              var i1 = _g31++;
              data.b[position++] = 0;
            }
          }
          break;
        case 1:
          var _g11 = 0;
          var _g4 = image.height;
          while (_g11 < _g4) {
            var y1 = _g11++;
            readPosition = (image.height - 1 - y1) * 4 * image.width;
            var _g32 = 0;
            var _g23 = image.width;
            while (_g32 < _g23) {
              var x1 = _g32++;
              a = pixels.b[readPosition++];
              r = pixels.b[readPosition++];
              g = pixels.b[readPosition++];
              b = pixels.b[readPosition++];
              data.b[position++] = b & 255;
              data.b[position++] = g & 255;
              data.b[position++] = r & 255;
              data.b[position++] = a & 255;
            }
          }
          break;
        case 2:
          var andMask = new haxe_io_Bytes(
            new ArrayBuffer(image.width * image.height)
          );
          var maskPosition = 0;
          var _g12 = 0;
          var _g5 = image.height;
          while (_g12 < _g5) {
            var y2 = _g12++;
            readPosition = (image.height - 1 - y2) * 4 * image.width;
            var _g33 = 0;
            var _g24 = image.width;
            while (_g33 < _g24) {
              var x2 = _g33++;
              a = pixels.b[readPosition++];
              r = pixels.b[readPosition++];
              g = pixels.b[readPosition++];
              b = pixels.b[readPosition++];
              data.b[position++] = b & 255;
              data.b[position++] = g & 255;
              data.b[position++] = r & 255;
              data.b[position++] = a & 255;
              andMask.b[maskPosition++] = 0;
            }
          }
          data.blit(position, andMask, 0, image.width * image.height);
          break;
      }
    }
    return data;
  };
  var lime_graphics_format_BMPType = ($hxClasses[
    "lime.graphics.format.BMPType"
  ] = {
    __ename__: ["lime", "graphics", "format", "BMPType"],
    __constructs__: ["RGB", "BITFIELD", "ICO"],
  });
  lime_graphics_format_BMPType.RGB = ["RGB", 0];
  lime_graphics_format_BMPType.RGB.toString = $estr;
  lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
  lime_graphics_format_BMPType.BITFIELD = ["BITFIELD", 1];
  lime_graphics_format_BMPType.BITFIELD.toString = $estr;
  lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
  lime_graphics_format_BMPType.ICO = ["ICO", 2];
  lime_graphics_format_BMPType.ICO.toString = $estr;
  lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
  var lime_graphics_format_JPEG = function () {};
  $hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
  lime_graphics_format_JPEG.__name__ = ["lime", "graphics", "format", "JPEG"];
  lime_graphics_format_JPEG.decodeBytes = function (bytes, decodeData) {
    if (decodeData == null) {
      decodeData = true;
    }
    return null;
  };
  lime_graphics_format_JPEG.decodeFile = function (path, decodeData) {
    if (decodeData == null) {
      decodeData = true;
    }
    return null;
  };
  lime_graphics_format_JPEG.encode = function (image, quality) {
    if (image.get_premultiplied() || image.get_format() != 0) {
      image = image.clone();
      image.set_premultiplied(false);
      image.set_format(0);
    }
    lime_graphics_utils_ImageCanvasUtil.sync(image, false);
    if (image.buffer.__srcCanvas != null) {
      var data = image.buffer.__srcCanvas.toDataURL(
        "image/jpeg",
        quality / 100
      );
      var buffer = window.atob(data.split(";base64,")[1]);
      var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
      var _g1 = 0;
      var _g = buffer.length;
      while (_g1 < _g) {
        var i = _g1++;
        var v = HxOverrides.cca(buffer, i);
        bytes.b[i] = v & 255;
      }
      return bytes;
    }
    return null;
  };
  var lime_graphics_format_PNG = function () {};
  $hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
  lime_graphics_format_PNG.__name__ = ["lime", "graphics", "format", "PNG"];
  lime_graphics_format_PNG.decodeBytes = function (bytes, decodeData) {
    if (decodeData == null) {
      decodeData = true;
    }
    return null;
  };
  lime_graphics_format_PNG.decodeFile = function (path, decodeData) {
    if (decodeData == null) {
      decodeData = true;
    }
    return null;
  };
  lime_graphics_format_PNG.encode = function (image) {
    if (image.get_premultiplied() || image.get_format() != 0) {
      image = image.clone();
      image.set_premultiplied(false);
      image.set_format(0);
    }
    lime_graphics_utils_ImageCanvasUtil.sync(image, false);
    if (image.buffer.__srcCanvas != null) {
      var data = image.buffer.__srcCanvas.toDataURL("image/png");
      var buffer = window.atob(data.split(";base64,")[1]);
      var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
      var _g1 = 0;
      var _g = buffer.length;
      while (_g1 < _g) {
        var i = _g1++;
        var v = HxOverrides.cca(buffer, i);
        bytes.b[i] = v & 255;
      }
      return bytes;
    }
    return null;
  };
  var lime_graphics_opengl_GL = function () {};
  $hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
  lime_graphics_opengl_GL.__name__ = ["lime", "graphics", "opengl", "GL"];
  lime_graphics_opengl_GL.__properties__ = {
    get_version: "get_version",
    get_type: "get_type",
  };
  lime_graphics_opengl_GL.activeTexture = function (texture) {
    lime_graphics_opengl_GL.context.__context.activeTexture(texture);
  };
  lime_graphics_opengl_GL.attachShader = function (program, shader) {
    lime_graphics_opengl_GL.context.__context.attachShader(program, shader);
  };
  lime_graphics_opengl_GL.beginQuery = function (target, query) {
    lime_graphics_opengl_GL.context.__context.beginQuery(target, query);
  };
  lime_graphics_opengl_GL.beginTransformFeedback = function (primitiveNode) {
    lime_graphics_opengl_GL.context.__context.beginTransformFeedback(
      primitiveNode
    );
  };
  lime_graphics_opengl_GL.bindAttribLocation = function (program, index, name) {
    lime_graphics_opengl_GL.context.__context.bindAttribLocation(
      program,
      index,
      name
    );
  };
  lime_graphics_opengl_GL.bindBuffer = function (target, buffer) {
    lime_graphics_opengl_GL.context.__context.bindBuffer(target, buffer);
  };
  lime_graphics_opengl_GL.bindBufferBase = function (target, index, buffer) {
    lime_graphics_opengl_GL.context.__context.bindBufferBase(
      target,
      index,
      buffer
    );
  };
  lime_graphics_opengl_GL.bindBufferRange = function (
    target,
    index,
    buffer,
    offset,
    size
  ) {
    lime_graphics_opengl_GL.context.__context.bindBufferRange(
      target,
      index,
      buffer,
      offset,
      lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size)
    );
  };
  lime_graphics_opengl_GL.bindFramebuffer = function (target, framebuffer) {
    lime_graphics_opengl_GL.context.__context.bindFramebuffer(
      target,
      framebuffer
    );
  };
  lime_graphics_opengl_GL.bindRenderbuffer = function (target, renderbuffer) {
    lime_graphics_opengl_GL.context.__context.bindRenderbuffer(
      target,
      renderbuffer
    );
  };
  lime_graphics_opengl_GL.bindSampler = function (unit, sampler) {
    lime_graphics_opengl_GL.context.__context.bindSampler(unit, sampler);
  };
  lime_graphics_opengl_GL.bindTexture = function (target, texture) {
    lime_graphics_opengl_GL.context.__context.bindTexture(target, texture);
  };
  lime_graphics_opengl_GL.bindTransformFeedback = function (
    target,
    transformFeedback
  ) {
    lime_graphics_opengl_GL.context.__context.bindTransformFeedback(
      target,
      transformFeedback
    );
  };
  lime_graphics_opengl_GL.bindVertexArray = function (vertexArray) {
    lime_graphics_opengl_GL.context.__context.bindVertexArray(vertexArray);
  };
  lime_graphics_opengl_GL.blitFramebuffer = function (
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter
  ) {
    lime_graphics_opengl_GL.context.__context.blitFramebuffer(
      srcX0,
      srcY0,
      srcX1,
      srcY1,
      dstX0,
      dstY0,
      dstX1,
      dstY1,
      mask,
      filter
    );
  };
  lime_graphics_opengl_GL.blendColor = function (red, green, blue, alpha) {
    lime_graphics_opengl_GL.context.__context.blendColor(
      red,
      green,
      blue,
      alpha
    );
  };
  lime_graphics_opengl_GL.blendEquation = function (mode) {
    lime_graphics_opengl_GL.context.__context.blendEquation(mode);
  };
  lime_graphics_opengl_GL.blendEquationSeparate = function (
    modeRGB,
    modeAlpha
  ) {
    lime_graphics_opengl_GL.context.__context.blendEquationSeparate(
      modeRGB,
      modeAlpha
    );
  };
  lime_graphics_opengl_GL.blendFunc = function (sfactor, dfactor) {
    lime_graphics_opengl_GL.context.__context.blendFunc(sfactor, dfactor);
  };
  lime_graphics_opengl_GL.blendFuncSeparate = function (
    srcRGB,
    dstRGB,
    srcAlpha,
    dstAlpha
  ) {
    lime_graphics_opengl_GL.context.__context.blendFuncSeparate(
      srcRGB,
      dstRGB,
      srcAlpha,
      dstAlpha
    );
  };
  lime_graphics_opengl_GL.bufferData = function (
    target,
    size,
    srcData,
    usage,
    srcOffset,
    length
  ) {
    lime_graphics_opengl_GL.context.bufferData(
      target,
      size,
      srcData,
      usage,
      srcOffset,
      length
    );
  };
  lime_graphics_opengl_GL.bufferSubData = function (
    target,
    dstByteOffset,
    size,
    srcData,
    srcOffset,
    length
  ) {
    lime_graphics_opengl_GL.context.bufferSubData(
      target,
      dstByteOffset,
      size,
      srcData,
      srcOffset,
      length
    );
  };
  lime_graphics_opengl_GL.checkFramebufferStatus = function (target) {
    return lime_graphics_opengl_GL.context.__context.checkFramebufferStatus(
      target
    );
  };
  lime_graphics_opengl_GL.clear = function (mask) {
    lime_graphics_opengl_GL.context.__context.clear(mask);
  };
  lime_graphics_opengl_GL.clearBufferfi = function (
    buffer,
    drawbuffer,
    depth,
    stencil
  ) {
    lime_graphics_opengl_GL.context.__context.clearBufferfi(
      buffer,
      drawbuffer,
      depth,
      stencil
    );
  };
  lime_graphics_opengl_GL.clearBufferfv = function (
    buffer,
    drawbuffer,
    values,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.__context.clearBufferfv(
      buffer,
      drawbuffer,
      values,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.clearBufferiv = function (
    buffer,
    drawbuffer,
    values,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.__context.clearBufferiv(
      buffer,
      drawbuffer,
      values,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.clearBufferuiv = function (
    buffer,
    drawbuffer,
    values,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.__context.clearBufferuiv(
      buffer,
      drawbuffer,
      values,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.clearColor = function (red, green, blue, alpha) {
    lime_graphics_opengl_GL.context.__context.clearColor(
      red,
      green,
      blue,
      alpha
    );
  };
  lime_graphics_opengl_GL.clearDepth = function (depth) {
    lime_graphics_opengl_GL.context.__context.clearDepth(depth);
  };
  lime_graphics_opengl_GL.clearDepthf = function (depth) {
    lime_graphics_opengl_GL.context.__context.clearDepth(depth);
  };
  lime_graphics_opengl_GL.clearStencil = function (s) {
    lime_graphics_opengl_GL.context.__context.clearStencil(s);
  };
  lime_graphics_opengl_GL.clientWaitSync = function (sync, flags, timeout) {
    return lime_graphics_opengl_GL.context.__context.clientWaitSync(
      sync,
      flags,
      timeout
    );
  };
  lime_graphics_opengl_GL.colorMask = function (red, green, blue, alpha) {
    lime_graphics_opengl_GL.context.__context.colorMask(
      red,
      green,
      blue,
      alpha
    );
  };
  lime_graphics_opengl_GL.compileShader = function (shader) {
    lime_graphics_opengl_GL.context.__context.compileShader(shader);
  };
  lime_graphics_opengl_GL.compressedTexImage2D = function (
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    srcData,
    srcOffset,
    srcLengthOverride
  ) {
    lime_graphics_opengl_GL.context.compressedTexImage2D(
      target,
      level,
      internalformat,
      width,
      height,
      border,
      imageSize,
      srcData,
      srcOffset,
      srcLengthOverride
    );
  };
  lime_graphics_opengl_GL.compressedTexImage3D = function (
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    srcData,
    srcOffset,
    srcLengthOverride
  ) {
    lime_graphics_opengl_GL.context.__context.compressedTexImage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      srcData,
      srcOffset,
      srcLengthOverride
    );
  };
  lime_graphics_opengl_GL.compressedTexSubImage2D = function (
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    srcData,
    srcOffset,
    srcLengthOverride
  ) {
    lime_graphics_opengl_GL.context.compressedTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      srcData,
      srcOffset,
      srcLengthOverride
    );
  };
  lime_graphics_opengl_GL.compressedTexSubImage3D = function (
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    srcData,
    srcOffset,
    srcLengthOverride
  ) {
    lime_graphics_opengl_GL.context.__context.compressedTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      srcData,
      srcOffset,
      srcLengthOverride
    );
  };
  lime_graphics_opengl_GL.copyBufferSubData = function (
    readTarget,
    writeTarget,
    readOffset,
    writeOffset,
    size
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.copyTexImage2D = function (
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border
  ) {
    lime_graphics_opengl_GL.context.__context.copyTexImage2D(
      target,
      level,
      internalformat,
      x,
      y,
      width,
      height,
      border
    );
  };
  lime_graphics_opengl_GL.copyTexSubImage2D = function (
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.copyTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      x,
      y,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.copyTexSubImage3D = function (
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.copyTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      x,
      y,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.createBuffer = function () {
    return lime_graphics_opengl_GL.context.__context.createBuffer();
  };
  lime_graphics_opengl_GL.createFramebuffer = function () {
    return lime_graphics_opengl_GL.context.__context.createFramebuffer();
  };
  lime_graphics_opengl_GL.createProgram = function () {
    return lime_graphics_opengl_GL.context.__context.createProgram();
  };
  lime_graphics_opengl_GL.createQuery = function () {
    return lime_graphics_opengl_GL.context.__context.createQuery();
  };
  lime_graphics_opengl_GL.createRenderbuffer = function () {
    return lime_graphics_opengl_GL.context.__context.createRenderbuffer();
  };
  lime_graphics_opengl_GL.createSampler = function () {
    return lime_graphics_opengl_GL.context.__context.createSampler();
  };
  lime_graphics_opengl_GL.createShader = function (type) {
    return lime_graphics_opengl_GL.context.__context.createShader(type);
  };
  lime_graphics_opengl_GL.createTexture = function () {
    return lime_graphics_opengl_GL.context.__context.createTexture();
  };
  lime_graphics_opengl_GL.createTransformFeedback = function () {
    return lime_graphics_opengl_GL.context.__context.createTransformFeedback();
  };
  lime_graphics_opengl_GL.createVertexArray = function () {
    return lime_graphics_opengl_GL.context.__context.createVertexArray();
  };
  lime_graphics_opengl_GL.cullFace = function (mode) {
    lime_graphics_opengl_GL.context.__context.cullFace(mode);
  };
  lime_graphics_opengl_GL.deleteBuffer = function (buffer) {
    lime_graphics_opengl_GL.context.__context.deleteBuffer(buffer);
  };
  lime_graphics_opengl_GL.deleteFramebuffer = function (framebuffer) {
    lime_graphics_opengl_GL.context.__context.deleteFramebuffer(framebuffer);
  };
  lime_graphics_opengl_GL.deleteProgram = function (program) {
    lime_graphics_opengl_GL.context.__context.deleteProgram(program);
  };
  lime_graphics_opengl_GL.deleteQuery = function (query) {
    lime_graphics_opengl_GL.context.__context.deleteQuery(query);
  };
  lime_graphics_opengl_GL.deleteRenderbuffer = function (renderbuffer) {
    lime_graphics_opengl_GL.context.__context.deleteRenderbuffer(renderbuffer);
  };
  lime_graphics_opengl_GL.deleteSampler = function (sampler) {
    lime_graphics_opengl_GL.context.__context.deleteSampler(sampler);
  };
  lime_graphics_opengl_GL.deleteShader = function (shader) {
    lime_graphics_opengl_GL.context.__context.deleteShader(shader);
  };
  lime_graphics_opengl_GL.deleteSync = function (sync) {
    lime_graphics_opengl_GL.context.__context.deleteSync(sync);
  };
  lime_graphics_opengl_GL.deleteTexture = function (texture) {
    lime_graphics_opengl_GL.context.__context.deleteTexture(texture);
  };
  lime_graphics_opengl_GL.deleteTransformFeedback = function (
    transformFeedback
  ) {
    lime_graphics_opengl_GL.context.__context.deleteTransformFeedback(
      transformFeedback
    );
  };
  lime_graphics_opengl_GL.deleteVertexArray = function (vertexArray) {
    lime_graphics_opengl_GL.context.__context.deleteVertexArray(vertexArray);
  };
  lime_graphics_opengl_GL.depthFunc = function (func) {
    lime_graphics_opengl_GL.context.__context.depthFunc(func);
  };
  lime_graphics_opengl_GL.depthMask = function (flag) {
    lime_graphics_opengl_GL.context.__context.depthMask(flag);
  };
  lime_graphics_opengl_GL.depthRange = function (zNear, zFar) {
    lime_graphics_opengl_GL.context.__context.depthRange(zNear, zFar);
  };
  lime_graphics_opengl_GL.depthRangef = function (zNear, zFar) {
    lime_graphics_opengl_GL.context.__context.depthRange(zNear, zFar);
  };
  lime_graphics_opengl_GL.detachShader = function (program, shader) {
    lime_graphics_opengl_GL.context.__context.detachShader(program, shader);
  };
  lime_graphics_opengl_GL.disable = function (cap) {
    lime_graphics_opengl_GL.context.__context.disable(cap);
  };
  lime_graphics_opengl_GL.disableVertexAttribArray = function (index) {
    lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(index);
  };
  lime_graphics_opengl_GL.drawArrays = function (mode, first, count) {
    lime_graphics_opengl_GL.context.__context.drawArrays(mode, first, count);
  };
  lime_graphics_opengl_GL.drawArraysInstanced = function (
    mode,
    first,
    count,
    instanceCount
  ) {
    lime_graphics_opengl_GL.context.__context.drawArraysInstanced(
      mode,
      first,
      count,
      instanceCount
    );
  };
  lime_graphics_opengl_GL.drawBuffers = function (buffers) {
    lime_graphics_opengl_GL.context.__context.drawBuffers(buffers);
  };
  lime_graphics_opengl_GL.drawElements = function (mode, count, type, offset) {
    var _this = lime_graphics_opengl_GL.context;
    var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
    _this.__context.drawElements(mode, count, type, offset1);
  };
  lime_graphics_opengl_GL.drawElementsInstanced = function (
    mode,
    count,
    type,
    offset,
    instanceCount
  ) {
    lime_graphics_opengl_GL.context.__context.drawElementsInstanced(
      mode,
      count,
      type,
      offset,
      instanceCount
    );
  };
  lime_graphics_opengl_GL.drawRangeElements = function (
    mode,
    start,
    end,
    count,
    type,
    offset
  ) {
    lime_graphics_opengl_GL.context.__context.drawRangeElements(
      mode,
      start,
      end,
      count,
      type,
      offset
    );
  };
  lime_graphics_opengl_GL.enable = function (cap) {
    lime_graphics_opengl_GL.context.__context.enable(cap);
  };
  lime_graphics_opengl_GL.enableVertexAttribArray = function (index) {
    lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(index);
  };
  lime_graphics_opengl_GL.endQuery = function (target) {
    lime_graphics_opengl_GL.context.__context.endQuery(target);
  };
  lime_graphics_opengl_GL.endTransformFeedback = function () {
    lime_graphics_opengl_GL.context.__context.endTransformFeedback();
  };
  lime_graphics_opengl_GL.fenceSync = function (condition, flags) {
    return lime_graphics_opengl_GL.context.__context.fenceSync(
      condition,
      flags
    );
  };
  lime_graphics_opengl_GL.finish = function () {
    lime_graphics_opengl_GL.context.__context.finish();
  };
  lime_graphics_opengl_GL.flush = function () {
    lime_graphics_opengl_GL.context.__context.flush();
  };
  lime_graphics_opengl_GL.framebufferRenderbuffer = function (
    target,
    attachment,
    renderbuffertarget,
    renderbuffer
  ) {
    lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(
      target,
      attachment,
      renderbuffertarget,
      renderbuffer
    );
  };
  lime_graphics_opengl_GL.framebufferTexture2D = function (
    target,
    attachment,
    textarget,
    texture,
    level
  ) {
    lime_graphics_opengl_GL.context.__context.framebufferTexture2D(
      target,
      attachment,
      textarget,
      texture,
      level
    );
  };
  lime_graphics_opengl_GL.framebufferTextureLayer = function (
    target,
    attachment,
    texture,
    level,
    layer
  ) {
    lime_graphics_opengl_GL.context.__context.framebufferTextureLayer(
      target,
      attachment,
      texture,
      level,
      layer
    );
  };
  lime_graphics_opengl_GL.frontFace = function (mode) {
    lime_graphics_opengl_GL.context.__context.frontFace(mode);
  };
  lime_graphics_opengl_GL.generateMipmap = function (target) {
    lime_graphics_opengl_GL.context.__context.generateMipmap(target);
  };
  lime_graphics_opengl_GL.getActiveAttrib = function (program, index) {
    return lime_graphics_opengl_GL.context.__context.getActiveAttrib(
      program,
      index
    );
  };
  lime_graphics_opengl_GL.getActiveUniform = function (program, index) {
    return lime_graphics_opengl_GL.context.__context.getActiveUniform(
      program,
      index
    );
  };
  lime_graphics_opengl_GL.getActiveUniformBlocki = function (
    program,
    uniformBlockIndex,
    pname
  ) {
    return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(
      program,
      uniformBlockIndex,
      pname
    );
  };
  lime_graphics_opengl_GL.getActiveUniformBlockiv = function (
    program,
    uniformBlockIndex,
    pname,
    params
  ) {
    var _this = lime_graphics_opengl_GL.context;
    var buffer = params;
    var this1;
    if (buffer != null) {
      this1 = new Int32Array(buffer, 0);
    } else {
      this1 = null;
    }
    var view = this1;
    view[0] = _this.__context.getActiveUniformBlockParameter(
      program,
      uniformBlockIndex,
      pname
    );
  };
  lime_graphics_opengl_GL.getActiveUniformBlockName = function (
    program,
    uniformBlockIndex
  ) {
    return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockName(
      program,
      uniformBlockIndex
    );
  };
  lime_graphics_opengl_GL.getActiveUniformBlockParameter = function (
    program,
    uniformBlockIndex,
    pname
  ) {
    return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(
      program,
      uniformBlockIndex,
      pname
    );
  };
  lime_graphics_opengl_GL.getActiveUniforms = function (
    program,
    uniformIndices,
    pname
  ) {
    return lime_graphics_opengl_GL.context.__context.getActiveUniforms(
      program,
      uniformIndices,
      pname
    );
  };
  lime_graphics_opengl_GL.getActiveUniformsiv = function (
    program,
    uniformIndices,
    pname,
    params
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.getAttachedShaders = function (program) {
    return lime_graphics_opengl_GL.context.__context.getAttachedShaders(
      program
    );
  };
  lime_graphics_opengl_GL.getAttribLocation = function (program, name) {
    return lime_graphics_opengl_GL.context.__context.getAttribLocation(
      program,
      name
    );
  };
  lime_graphics_opengl_GL.getBoolean = function (pname) {
    return lime_graphics_opengl_GL.context.__context.getParameter(pname);
  };
  lime_graphics_opengl_GL.getBooleanv = function (pname, params) {
    var _this = lime_graphics_opengl_GL.context;
    var buffer = params;
    var this1;
    if (params != null) {
      this1 = new Uint8Array(params);
    } else {
      this1 = null;
    }
    var view = this1;
    var result = _this.__context.getParameter(pname);
    if (result instanceof Array && result.__enum__ == null) {
      var data = result;
      var _g1 = 0;
      var _g = data.length;
      while (_g1 < _g) {
        var i = _g1++;
        view[i] = data[i] ? 1 : 0;
      }
    } else {
      view[0] = js_Boot.__cast(result, Bool) ? 1 : 0;
    }
  };
  lime_graphics_opengl_GL.getBufferParameter = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getBufferParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getBufferParameteri = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getBufferParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getBufferParameteri64v = function (
    target,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getBufferParameteri64v(
      target,
      pname,
      params
    );
    return;
  };
  lime_graphics_opengl_GL.getBufferParameteriv = function (
    target,
    pname,
    data
  ) {
    var _this = lime_graphics_opengl_GL.context;
    var buffer = data;
    var this1;
    if (buffer != null) {
      this1 = new Int32Array(buffer, 0);
    } else {
      this1 = null;
    }
    var view = this1;
    view[0] = _this.__context.getBufferParameter(target, pname);
    return;
  };
  lime_graphics_opengl_GL.getBufferPointerv = function (target, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
  };
  lime_graphics_opengl_GL.getBufferSubData = function (
    target,
    srcByteOffset,
    dstData,
    srcOffset,
    length
  ) {
    lime_graphics_opengl_GL.context.getBufferSubData(
      target,
      srcByteOffset,
      dstData,
      srcOffset,
      length
    );
  };
  lime_graphics_opengl_GL.getContextAttributes = function () {
    return lime_graphics_opengl_GL.context.__context.getContextAttributes();
  };
  lime_graphics_opengl_GL.getError = function () {
    return lime_graphics_opengl_GL.context.__context.getError();
  };
  lime_graphics_opengl_GL.getExtension = function (name) {
    return lime_graphics_opengl_GL.context.__context.getExtension(name);
  };
  lime_graphics_opengl_GL.getFloat = function (pname) {
    return lime_graphics_opengl_GL.context.__context.getParameter(pname);
  };
  lime_graphics_opengl_GL.getFloatv = function (pname, params) {
    lime_graphics_opengl_GL.context.getFloatv(pname, params);
  };
  lime_graphics_opengl_GL.getFragDataLocation = function (program, name) {
    return lime_graphics_opengl_GL.context.__context.getFragDataLocation(
      program,
      name
    );
  };
  lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function (
    target,
    attachment,
    pname
  ) {
    return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(
      target,
      attachment,
      pname
    );
  };
  lime_graphics_opengl_GL.getFramebufferAttachmentParameteri = function (
    target,
    attachment,
    pname
  ) {
    return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameteri(
      target,
      attachment,
      pname
    );
  };
  lime_graphics_opengl_GL.getFramebufferAttachmentParameteriv = function (
    target,
    attachment,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getFramebufferAttachmentParameteriv(
      target,
      attachment,
      pname,
      params
    );
  };
  lime_graphics_opengl_GL.getIndexedParameter = function (target, index) {
    return lime_graphics_opengl_GL.context.__context.getIndexedParameter(
      target,
      index
    );
  };
  lime_graphics_opengl_GL.getInteger = function (pname) {
    return lime_graphics_opengl_GL.context.__context.getParameter(pname);
  };
  lime_graphics_opengl_GL.getInteger64 = function (pname) {
    var _this = lime_graphics_opengl_GL.context;
    var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
    return this1;
  };
  lime_graphics_opengl_GL.getInteger64i = function (pname) {
    var _this = lime_graphics_opengl_GL.context;
    var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
    return this1;
  };
  lime_graphics_opengl_GL.getInteger64i_v = function (pname, params) {
    var _this = lime_graphics_opengl_GL.context;
    return;
  };
  lime_graphics_opengl_GL.getInteger64v = function (pname, params) {
    lime_graphics_opengl_GL.context.getInteger64v(pname, params);
    return;
  };
  lime_graphics_opengl_GL.getIntegeri = function (pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getIntegeri_v = function (pname, params) {
    var _this = lime_graphics_opengl_GL.context;
    return;
  };
  lime_graphics_opengl_GL.getIntegerv = function (pname, params) {
    lime_graphics_opengl_GL.context.getIntegerv(pname, params);
  };
  lime_graphics_opengl_GL.getInternalformati = function (
    target,
    internalformat,
    pname
  ) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getInternalformativ = function (
    target,
    internalformat,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getInternalformativ(
      target,
      internalformat,
      pname,
      params
    );
  };
  lime_graphics_opengl_GL.getInternalformatParameter = function (
    target,
    internalformat,
    pname
  ) {
    return lime_graphics_opengl_GL.context.__context.getInternalformatParameter(
      target,
      internalformat,
      pname
    );
  };
  lime_graphics_opengl_GL.getParameter = function (pname) {
    return lime_graphics_opengl_GL.context.__context.getParameter(pname);
  };
  lime_graphics_opengl_GL.getProgrami = function (program, pname) {
    return lime_graphics_opengl_GL.context.__context.getProgramParameter(
      program,
      pname
    );
  };
  lime_graphics_opengl_GL.getProgramiv = function (program, pname, params) {
    lime_graphics_opengl_GL.context.getProgramiv(program, pname, params);
  };
  lime_graphics_opengl_GL.getProgramBinary = function (program, binaryFormat) {
    var _this = lime_graphics_opengl_GL.context;
    return null;
  };
  lime_graphics_opengl_GL.getProgramInfoLog = function (program) {
    return lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
  };
  lime_graphics_opengl_GL.getProgramParameter = function (program, pname) {
    return lime_graphics_opengl_GL.context.__context.getProgramParameter(
      program,
      pname
    );
  };
  lime_graphics_opengl_GL.getQuery = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getQuery(target, pname);
  };
  lime_graphics_opengl_GL.getQueryi = function (target, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getQueryiv = function (target, pname, params) {
    lime_graphics_opengl_GL.context.getQueryiv(target, pname, params);
  };
  lime_graphics_opengl_GL.getQueryObjectui = function (query, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getQueryObjectuiv = function (query, pname, params) {
    lime_graphics_opengl_GL.context.getQueryObjectuiv(query, pname, params);
  };
  lime_graphics_opengl_GL.getQueryParameter = function (query, pname) {
    return lime_graphics_opengl_GL.context.__context.getQueryParameter(
      query,
      pname
    );
  };
  lime_graphics_opengl_GL.getRenderbufferParameter = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getRenderbufferParameteri = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getRenderbufferParameteriv = function (
    target,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getRenderbufferParameteriv(
      target,
      pname,
      params
    );
  };
  lime_graphics_opengl_GL.getSamplerParameter = function (sampler, pname) {
    return lime_graphics_opengl_GL.context.__context.getSamplerParameter(
      sampler,
      pname
    );
  };
  lime_graphics_opengl_GL.getSamplerParameterf = function (sampler, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getSamplerParameterfv = function (
    sampler,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getSamplerParameterfv(
      sampler,
      pname,
      params
    );
  };
  lime_graphics_opengl_GL.getSamplerParameteri = function (sampler, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getSamplerParameteriv = function (
    sampler,
    pname,
    params
  ) {
    lime_graphics_opengl_GL.context.getSamplerParameteriv(
      sampler,
      pname,
      params
    );
  };
  lime_graphics_opengl_GL.getShaderi = function (shader, pname) {
    return lime_graphics_opengl_GL.context.__context.getShaderParameter(
      shader,
      pname
    );
  };
  lime_graphics_opengl_GL.getShaderiv = function (shader, pname, params) {
    lime_graphics_opengl_GL.context.getShaderiv(shader, pname, params);
  };
  lime_graphics_opengl_GL.getShaderInfoLog = function (shader) {
    return lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
  };
  lime_graphics_opengl_GL.getShaderParameter = function (shader, pname) {
    return lime_graphics_opengl_GL.context.__context.getShaderParameter(
      shader,
      pname
    );
  };
  lime_graphics_opengl_GL.getShaderPrecisionFormat = function (
    shadertype,
    precisiontype
  ) {
    return lime_graphics_opengl_GL.context.__context.getShaderPrecisionFormat(
      shadertype,
      precisiontype
    );
  };
  lime_graphics_opengl_GL.getShaderSource = function (shader) {
    return lime_graphics_opengl_GL.context.__context.getShaderSource(shader);
  };
  lime_graphics_opengl_GL.getString = function (pname) {
    return lime_graphics_opengl_GL.context.getString(pname);
  };
  lime_graphics_opengl_GL.getStringi = function (name, index) {
    var _this = lime_graphics_opengl_GL.context;
    return null;
  };
  lime_graphics_opengl_GL.getSupportedExtensions = function () {
    return lime_graphics_opengl_GL.context.__context.getSupportedExtensions();
  };
  lime_graphics_opengl_GL.getSyncParameter = function (sync, pname) {
    return lime_graphics_opengl_GL.context.__context.getSyncParameter(
      sync,
      pname
    );
  };
  lime_graphics_opengl_GL.getSyncParameteri = function (sync, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getSyncParameteriv = function (sync, pname, params) {
    lime_graphics_opengl_GL.context.getSyncParameteriv(sync, pname, params);
  };
  lime_graphics_opengl_GL.getTexParameter = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getTexParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getTexParameterf = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getTexParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getTexParameterfv = function (target, pname, params) {
    lime_graphics_opengl_GL.context.getTexParameterfv(target, pname, params);
  };
  lime_graphics_opengl_GL.getTexParameteri = function (target, pname) {
    return lime_graphics_opengl_GL.context.__context.getTexParameter(
      target,
      pname
    );
  };
  lime_graphics_opengl_GL.getTexParameteriv = function (target, pname, params) {
    lime_graphics_opengl_GL.context.getTexParameteriv(target, pname, params);
  };
  lime_graphics_opengl_GL.getTransformFeedbackVarying = function (
    program,
    index
  ) {
    return lime_graphics_opengl_GL.context.__context.getTransformFeedbackVarying(
      program,
      index
    );
  };
  lime_graphics_opengl_GL.getUniform = function (program, location) {
    return lime_graphics_opengl_GL.context.__context.getUniform(
      program,
      location
    );
  };
  lime_graphics_opengl_GL.getUniformf = function (program, location) {
    return lime_graphics_opengl_GL.context.__context.getUniform(
      program,
      location
    );
  };
  lime_graphics_opengl_GL.getUniformfv = function (program, location, params) {
    lime_graphics_opengl_GL.context.getUniformfv(program, location, params);
  };
  lime_graphics_opengl_GL.getUniformi = function (program, location) {
    return lime_graphics_opengl_GL.context.getUniformi(program, location);
  };
  lime_graphics_opengl_GL.getUniformiv = function (program, location, params) {
    lime_graphics_opengl_GL.context.getUniformiv(program, location, params);
  };
  lime_graphics_opengl_GL.getUniformui = function (program, location) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getUniformuiv = function (program, location, params) {
    lime_graphics_opengl_GL.context.getUniformuiv(program, location, params);
  };
  lime_graphics_opengl_GL.getUniformBlockIndex = function (
    program,
    uniformBlockName
  ) {
    return lime_graphics_opengl_GL.context.__context.getUniformBlockIndex(
      program,
      uniformBlockName
    );
  };
  lime_graphics_opengl_GL.getUniformIndices = function (program, uniformNames) {
    return lime_graphics_opengl_GL.context.__context.getUniformIndices(
      program,
      uniformNames
    );
  };
  lime_graphics_opengl_GL.getUniformLocation = function (program, name) {
    return lime_graphics_opengl_GL.context.__context.getUniformLocation(
      program,
      name
    );
  };
  lime_graphics_opengl_GL.getVertexAttrib = function (index, pname) {
    return lime_graphics_opengl_GL.context.__context.getVertexAttrib(
      index,
      pname
    );
  };
  lime_graphics_opengl_GL.getVertexAttribf = function (index, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getVertexAttribfv = function (index, pname, params) {
    lime_graphics_opengl_GL.context.getVertexAttribfv(index, pname, params);
  };
  lime_graphics_opengl_GL.getVertexAttribi = function (index, pname) {
    return lime_graphics_opengl_GL.context.getVertexAttribi(index, pname);
  };
  lime_graphics_opengl_GL.getVertexAttribIi = function (index, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getVertexAttribIiv = function (index, pname, params) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.getVertexAttribIui = function (index, pname) {
    var _this = lime_graphics_opengl_GL.context;
    return 0;
  };
  lime_graphics_opengl_GL.getVertexAttribIuiv = function (
    index,
    pname,
    params
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.getVertexAttribiv = function (index, pname, params) {
    lime_graphics_opengl_GL.context.getVertexAttribiv(index, pname, params);
  };
  lime_graphics_opengl_GL.getVertexAttribOffset = function (index, pname) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(
      lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(
        index,
        pname
      )
    );
  };
  lime_graphics_opengl_GL.getVertexAttribPointerv = function (index, pname) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(
      lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(
        index,
        pname
      )
    );
  };
  lime_graphics_opengl_GL.hint = function (target, mode) {
    lime_graphics_opengl_GL.context.__context.hint(target, mode);
  };
  lime_graphics_opengl_GL.invalidateFramebuffer = function (
    target,
    attachments
  ) {
    lime_graphics_opengl_GL.context.__context.invalidateFramebuffer(
      target,
      attachments
    );
  };
  lime_graphics_opengl_GL.invalidateSubFramebuffer = function (
    target,
    attachments,
    x,
    y,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.invalidateSubFramebuffer(
      target,
      attachments,
      x,
      y,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.isBuffer = function (buffer) {
    return lime_graphics_opengl_GL.context.__context.isBuffer(buffer);
  };
  lime_graphics_opengl_GL.isContextLost = function () {
    var _this = lime_graphics_opengl_GL.context;
    if (!_this.__contextLost) {
      return _this.__context.isContextLost();
    } else {
      return true;
    }
  };
  lime_graphics_opengl_GL.isEnabled = function (cap) {
    return lime_graphics_opengl_GL.context.__context.isEnabled(cap);
  };
  lime_graphics_opengl_GL.isFramebuffer = function (framebuffer) {
    return lime_graphics_opengl_GL.context.__context.isFramebuffer(framebuffer);
  };
  lime_graphics_opengl_GL.isProgram = function (program) {
    return lime_graphics_opengl_GL.context.__context.isProgram(program);
  };
  lime_graphics_opengl_GL.isQuery = function (query) {
    return lime_graphics_opengl_GL.context.__context.isQuery(query);
  };
  lime_graphics_opengl_GL.isRenderbuffer = function (renderbuffer) {
    return lime_graphics_opengl_GL.context.__context.isRenderbuffer(
      renderbuffer
    );
  };
  lime_graphics_opengl_GL.isSampler = function (sampler) {
    return lime_graphics_opengl_GL.context.__context.isSampler(sampler);
  };
  lime_graphics_opengl_GL.isShader = function (shader) {
    return lime_graphics_opengl_GL.context.__context.isShader(shader);
  };
  lime_graphics_opengl_GL.isSync = function (sync) {
    return lime_graphics_opengl_GL.context.__context.isSync(sync);
  };
  lime_graphics_opengl_GL.isTexture = function (texture) {
    return lime_graphics_opengl_GL.context.__context.isTexture(texture);
  };
  lime_graphics_opengl_GL.isTransformFeedback = function (transformFeedback) {
    return lime_graphics_opengl_GL.context.__context.isTransformFeedback(
      transformFeedback
    );
  };
  lime_graphics_opengl_GL.isVertexArray = function (vertexArray) {
    return lime_graphics_opengl_GL.context.__context.isVertexArray(vertexArray);
  };
  lime_graphics_opengl_GL.lineWidth = function (width) {
    lime_graphics_opengl_GL.context.__context.lineWidth(width);
  };
  lime_graphics_opengl_GL.linkProgram = function (program) {
    lime_graphics_opengl_GL.context.__context.linkProgram(program);
  };
  lime_graphics_opengl_GL.mapBufferRange = function (
    target,
    offset,
    length,
    access
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.pauseTransformFeedback = function () {
    lime_graphics_opengl_GL.context.__context.pauseTransformFeedback();
  };
  lime_graphics_opengl_GL.pixelStorei = function (pname, param) {
    lime_graphics_opengl_GL.context.__context.pixelStorei(pname, param);
  };
  lime_graphics_opengl_GL.polygonOffset = function (factor, units) {
    lime_graphics_opengl_GL.context.__context.polygonOffset(factor, units);
  };
  lime_graphics_opengl_GL.programBinary = function (
    program,
    binaryFormat,
    binary,
    length
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.programParameteri = function (program, pname, value) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.readBuffer = function (src) {
    lime_graphics_opengl_GL.context.__context.readBuffer(src);
  };
  lime_graphics_opengl_GL.readPixels = function (
    x,
    y,
    width,
    height,
    format,
    type,
    pixels,
    dstOffset
  ) {
    lime_graphics_opengl_GL.context.readPixels(
      x,
      y,
      width,
      height,
      format,
      type,
      pixels,
      dstOffset
    );
  };
  lime_graphics_opengl_GL.releaseShaderCompiler = function () {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.renderbufferStorage = function (
    target,
    internalformat,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.renderbufferStorage(
      target,
      internalformat,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.renderbufferStorageMultisample = function (
    target,
    samples,
    internalFormat,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.renderbufferStorageMultisample(
      target,
      samples,
      internalFormat,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.resumeTransformFeedback = function () {
    lime_graphics_opengl_GL.context.__context.resumeTransformFeedback();
  };
  lime_graphics_opengl_GL.sampleCoverage = function (value, invert) {
    lime_graphics_opengl_GL.context.__context.sampleCoverage(value, invert);
  };
  lime_graphics_opengl_GL.samplerParameterf = function (sampler, pname, param) {
    lime_graphics_opengl_GL.context.__context.samplerParameterf(
      sampler,
      pname,
      param
    );
  };
  lime_graphics_opengl_GL.samplerParameteri = function (sampler, pname, param) {
    lime_graphics_opengl_GL.context.__context.samplerParameteri(
      sampler,
      pname,
      param
    );
  };
  lime_graphics_opengl_GL.scissor = function (x, y, width, height) {
    lime_graphics_opengl_GL.context.__context.scissor(x, y, width, height);
  };
  lime_graphics_opengl_GL.shaderBinary = function (
    shaders,
    binaryformat,
    binary,
    length
  ) {
    var _this = lime_graphics_opengl_GL.context;
  };
  lime_graphics_opengl_GL.shaderSource = function (shader, source) {
    lime_graphics_opengl_GL.context.__context.shaderSource(shader, source);
  };
  lime_graphics_opengl_GL.stencilFunc = function (func, ref, mask) {
    lime_graphics_opengl_GL.context.__context.stencilFunc(func, ref, mask);
  };
  lime_graphics_opengl_GL.stencilFuncSeparate = function (
    face,
    func,
    ref,
    mask
  ) {
    lime_graphics_opengl_GL.context.__context.stencilFuncSeparate(
      face,
      func,
      ref,
      mask
    );
  };
  lime_graphics_opengl_GL.stencilMask = function (mask) {
    lime_graphics_opengl_GL.context.__context.stencilMask(mask);
  };
  lime_graphics_opengl_GL.stencilMaskSeparate = function (face, mask) {
    lime_graphics_opengl_GL.context.__context.stencilMaskSeparate(face, mask);
  };
  lime_graphics_opengl_GL.stencilOp = function (fail, zfail, zpass) {
    lime_graphics_opengl_GL.context.__context.stencilOp(fail, zfail, zpass);
  };
  lime_graphics_opengl_GL.stencilOpSeparate = function (
    face,
    fail,
    zfail,
    zpass
  ) {
    lime_graphics_opengl_GL.context.__context.stencilOpSeparate(
      face,
      fail,
      zfail,
      zpass
    );
  };
  lime_graphics_opengl_GL.texImage2D = function (
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    srcData,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.texImage2D(
      target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      srcData,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.texImage3D = function (
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    srcData,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.__context.texImage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      srcData,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.texStorage2D = function (
    target,
    level,
    internalformat,
    width,
    height
  ) {
    lime_graphics_opengl_GL.context.__context.texStorage2D(
      target,
      level,
      internalformat,
      width,
      height
    );
  };
  lime_graphics_opengl_GL.texStorage3D = function (
    target,
    level,
    internalformat,
    width,
    height,
    depth
  ) {
    lime_graphics_opengl_GL.context.__context.texStorage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth
    );
  };
  lime_graphics_opengl_GL.texParameterf = function (target, pname, param) {
    lime_graphics_opengl_GL.context.__context.texParameterf(
      target,
      pname,
      param
    );
  };
  lime_graphics_opengl_GL.texParameteri = function (target, pname, param) {
    lime_graphics_opengl_GL.context.__context.texParameteri(
      target,
      pname,
      param
    );
  };
  lime_graphics_opengl_GL.texSubImage2D = function (
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    srcData,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.texSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      srcData,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.texSubImage3D = function (
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    source,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.texSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      source,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.transformFeedbackVaryings = function (
    program,
    varyings,
    bufferMode
  ) {
    lime_graphics_opengl_GL.context.__context.transformFeedbackVaryings(
      program,
      varyings,
      bufferMode
    );
  };
  lime_graphics_opengl_GL.uniform1f = function (location, v0) {
    lime_graphics_opengl_GL.context.__context.uniform1f(location, v0);
  };
  lime_graphics_opengl_GL.uniform1fv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform1fv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform1i = function (location, v0) {
    lime_graphics_opengl_GL.context.__context.uniform1i(location, v0);
  };
  lime_graphics_opengl_GL.uniform1iv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform1iv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform1ui = function (location, v0) {
    lime_graphics_opengl_GL.context.__context.uniform1ui(location, v0);
  };
  lime_graphics_opengl_GL.uniform1uiv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform1uiv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform2f = function (location, v0, v1) {
    lime_graphics_opengl_GL.context.__context.uniform2f(location, v0, v1);
  };
  lime_graphics_opengl_GL.uniform2fv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform2fv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform2i = function (location, x, y) {
    lime_graphics_opengl_GL.context.__context.uniform2i(location, x, y);
  };
  lime_graphics_opengl_GL.uniform2iv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform2iv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform2ui = function (location, x, y) {
    lime_graphics_opengl_GL.context.__context.uniform2ui(location, x, y);
  };
  lime_graphics_opengl_GL.uniform2uiv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform2uiv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform3f = function (location, v0, v1, v2) {
    lime_graphics_opengl_GL.context.__context.uniform3f(location, v0, v1, v2);
  };
  lime_graphics_opengl_GL.uniform3fv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform3fv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform3i = function (location, v0, v1, v2) {
    lime_graphics_opengl_GL.context.__context.uniform3i(location, v0, v1, v2);
  };
  lime_graphics_opengl_GL.uniform3iv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform3iv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform3ui = function (location, v0, v1, v2) {
    lime_graphics_opengl_GL.context.__context.uniform3ui(location, v0, v1, v2);
  };
  lime_graphics_opengl_GL.uniform3uiv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform3uiv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform4f = function (location, v0, v1, v2, v3) {
    lime_graphics_opengl_GL.context.__context.uniform4f(
      location,
      v0,
      v1,
      v2,
      v3
    );
  };
  lime_graphics_opengl_GL.uniform4fv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform4fv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform4i = function (location, v0, v1, v2, v3) {
    lime_graphics_opengl_GL.context.__context.uniform4i(
      location,
      v0,
      v1,
      v2,
      v3
    );
  };
  lime_graphics_opengl_GL.uniform4iv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform4iv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniform4ui = function (location, v0, v1, v2, v3) {
    lime_graphics_opengl_GL.context.__context.uniform4ui(
      location,
      v0,
      v1,
      v2,
      v3
    );
  };
  lime_graphics_opengl_GL.uniform4uiv = function (
    location,
    count,
    data,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniform4uiv(
      location,
      count,
      data,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformBlockBinding = function (
    program,
    uniformBlockIndex,
    uniformBlockBinding
  ) {
    lime_graphics_opengl_GL.context.__context.uniformBlockBinding(
      program,
      uniformBlockIndex,
      uniformBlockBinding
    );
  };
  lime_graphics_opengl_GL.uniformMatrix2fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix2fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix2x3fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix2x3fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix2x4fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix2x4fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix3fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix3fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix3x2fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix3x2fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix3x4fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix3x4fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix4fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix4fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix4x2fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix4x2fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.uniformMatrix4x3fv = function (
    location,
    count,
    transpose,
    v,
    srcOffset
  ) {
    lime_graphics_opengl_GL.context.uniformMatrix4x3fv(
      location,
      count,
      transpose,
      v,
      srcOffset
    );
  };
  lime_graphics_opengl_GL.unmapBuffer = function (target) {
    var _this = lime_graphics_opengl_GL.context;
    return false;
  };
  lime_graphics_opengl_GL.useProgram = function (program) {
    lime_graphics_opengl_GL.__currentProgram = program;
    lime_graphics_opengl_GL.context.__context.useProgram(program);
  };
  lime_graphics_opengl_GL.validateProgram = function (program) {
    lime_graphics_opengl_GL.context.__context.validateProgram(program);
  };
  lime_graphics_opengl_GL.vertexAttrib1f = function (indx, x) {
    lime_graphics_opengl_GL.context.__context.vertexAttrib1f(indx, x);
  };
  lime_graphics_opengl_GL.vertexAttrib1fv = function (indx, values) {
    lime_graphics_opengl_GL.context.vertexAttrib1fv(indx, values);
  };
  lime_graphics_opengl_GL.vertexAttrib2f = function (indx, x, y) {
    lime_graphics_opengl_GL.context.__context.vertexAttrib2f(indx, x, y);
  };
  lime_graphics_opengl_GL.vertexAttrib2fv = function (indx, values) {
    lime_graphics_opengl_GL.context.vertexAttrib2fv(indx, values);
  };
  lime_graphics_opengl_GL.vertexAttrib3f = function (indx, x, y, z) {
    lime_graphics_opengl_GL.context.__context.vertexAttrib3f(indx, x, y, z);
  };
  lime_graphics_opengl_GL.vertexAttrib3fv = function (indx, values) {
    lime_graphics_opengl_GL.context.vertexAttrib3fv(indx, values);
  };
  lime_graphics_opengl_GL.vertexAttrib4f = function (indx, x, y, z, w) {
    lime_graphics_opengl_GL.context.__context.vertexAttrib4f(indx, x, y, z, w);
  };
  lime_graphics_opengl_GL.vertexAttrib4fv = function (indx, values) {
    lime_graphics_opengl_GL.context.vertexAttrib4fv(indx, values);
  };
  lime_graphics_opengl_GL.vertexAttribDivisor = function (index, divisor) {
    lime_graphics_opengl_GL.context.__context.vertexAttribDivisor(
      index,
      divisor
    );
  };
  lime_graphics_opengl_GL.vertexAttribI4i = function (index, v0, v1, v2, v3) {
    lime_graphics_opengl_GL.context.__context.vertexAttribI4i(
      index,
      v0,
      v1,
      v2,
      v3
    );
  };
  lime_graphics_opengl_GL.vertexAttribI4iv = function (index, value) {
    lime_graphics_opengl_GL.context.vertexAttribI4iv(index, value);
  };
  lime_graphics_opengl_GL.vertexAttribI4ui = function (index, v0, v1, v2, v3) {
    lime_graphics_opengl_GL.context.__context.vertexAttribI4ui(
      index,
      v0,
      v1,
      v2,
      v3
    );
  };
  lime_graphics_opengl_GL.vertexAttribI4uiv = function (index, value) {
    lime_graphics_opengl_GL.context.vertexAttribI4uiv(index, value);
  };
  lime_graphics_opengl_GL.vertexAttribIPointer = function (
    index,
    size,
    type,
    stride,
    offset
  ) {
    lime_graphics_opengl_GL.context.__context.vertexAttribIPointer(
      index,
      size,
      type,
      stride,
      offset
    );
  };
  lime_graphics_opengl_GL.vertexAttribPointer = function (
    index,
    size,
    type,
    normalized,
    stride,
    offset
  ) {
    lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
      index,
      size,
      type,
      normalized,
      stride,
      offset
    );
  };
  lime_graphics_opengl_GL.viewport = function (x, y, width, height) {
    lime_graphics_opengl_GL.context.__context.viewport(x, y, width, height);
  };
  lime_graphics_opengl_GL.waitSync = function (sync, flags, timeout) {
    lime_graphics_opengl_GL.context.__context.waitSync(sync, flags, timeout);
  };
  lime_graphics_opengl_GL.get_type = function () {
    return lime_graphics_opengl_GL.context.type;
  };
  lime_graphics_opengl_GL.get_version = function () {
    return lime_graphics_opengl_GL.context.version;
  };
  lime_graphics_opengl_GL.__getObjectID = function (object) {
    if (object == null) {
      return 0;
    } else {
      return object.id;
    }
  };
  var lime_graphics_opengl_GLContextType = ($hxClasses[
    "lime.graphics.opengl.GLContextType"
  ] = {
    __ename__: ["lime", "graphics", "opengl", "GLContextType"],
    __constructs__: ["OPENGL", "GLES", "WEBGL"],
  });
  lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL", 0];
  lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
  lime_graphics_opengl_GLContextType.OPENGL.__enum__ =
    lime_graphics_opengl_GLContextType;
  lime_graphics_opengl_GLContextType.GLES = ["GLES", 1];
  lime_graphics_opengl_GLContextType.GLES.toString = $estr;
  lime_graphics_opengl_GLContextType.GLES.__enum__ =
    lime_graphics_opengl_GLContextType;
  lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL", 2];
  lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
  lime_graphics_opengl_GLContextType.WEBGL.__enum__ =
    lime_graphics_opengl_GLContextType;
  var lime_graphics_utils_ImageCanvasUtil = function () {};
  $hxClasses["lime.graphics.utils.ImageCanvasUtil"] =
    lime_graphics_utils_ImageCanvasUtil;
  lime_graphics_utils_ImageCanvasUtil.__name__ = [
    "lime",
    "graphics",
    "utils",
    "ImageCanvasUtil",
  ];
  lime_graphics_utils_ImageCanvasUtil.colorTransform = function (
    image,
    rect,
    colorMatrix
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.colorTransform(image, rect, colorMatrix);
  };
  lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function (
    image,
    clear
  ) {
    if (clear == null) {
      clear = false;
    }
    var buffer = image.buffer;
    if (buffer.__srcImage != null) {
      if (buffer.__srcCanvas == null) {
        lime_graphics_utils_ImageCanvasUtil.createCanvas(
          image,
          buffer.__srcImage.width,
          buffer.__srcImage.height
        );
        buffer.__srcContext.drawImage(buffer.__srcImage, 0, 0);
      }
      buffer.__srcImage = null;
    } else if (buffer.__srcCanvas == null && buffer.data != null) {
      image.set_transparent(true);
      lime_graphics_utils_ImageCanvasUtil.createCanvas(
        image,
        buffer.width,
        buffer.height
      );
      lime_graphics_utils_ImageCanvasUtil.createImageData(image);
      buffer.__srcContext.putImageData(buffer.__srcImageData, 0, 0);
    } else if (
      image.type == lime_graphics_ImageType.DATA &&
      buffer.__srcImageData != null &&
      image.dirty
    ) {
      buffer.__srcContext.putImageData(buffer.__srcImageData, 0, 0);
      image.dirty = false;
    }
    if (clear) {
      buffer.data = null;
      buffer.__srcImageData = null;
    } else if (buffer.data == null && buffer.__srcImageData != null) {
      buffer.data = buffer.__srcImageData.data;
    }
    image.type = lime_graphics_ImageType.CANVAS;
  };
  lime_graphics_utils_ImageCanvasUtil.convertToData = function (image, clear) {
    if (clear == null) {
      clear = false;
    }
    var buffer = image.buffer;
    if (buffer.__srcImage != null) {
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
    }
    if (buffer.__srcCanvas != null && buffer.data == null) {
      lime_graphics_utils_ImageCanvasUtil.createImageData(image);
      if (image.type == lime_graphics_ImageType.CANVAS) {
        image.dirty = false;
      }
    } else if (
      image.type == lime_graphics_ImageType.CANVAS &&
      buffer.__srcCanvas != null &&
      image.dirty
    ) {
      if (buffer.__srcImageData == null) {
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
      } else {
        buffer.__srcImageData = buffer.__srcContext.getImageData(
          0,
          0,
          buffer.width,
          buffer.height
        );
        var elements = buffer.__srcImageData.data.buffer;
        var this1;
        if (elements != null) {
          this1 = new Uint8Array(elements);
        } else {
          this1 = null;
        }
        buffer.data = this1;
      }
      image.dirty = false;
    }
    if (clear) {
      image.buffer.__srcCanvas = null;
      image.buffer.__srcContext = null;
    }
    image.type = lime_graphics_ImageType.DATA;
  };
  lime_graphics_utils_ImageCanvasUtil.copyChannel = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    sourceChannel,
    destChannel
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.copyChannel(
      image,
      sourceImage,
      sourceRect,
      destPoint,
      sourceChannel,
      destChannel
    );
  };
  lime_graphics_utils_ImageCanvasUtil.copyPixels = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    alphaImage,
    alphaPoint,
    mergeAlpha
  ) {
    if (mergeAlpha == null) {
      mergeAlpha = false;
    }
    if (
      destPoint == null ||
      destPoint.x >= image.width ||
      destPoint.y >= image.height ||
      sourceRect == null ||
      sourceRect.width < 1 ||
      sourceRect.height < 1
    ) {
      return;
    }
    if (alphaImage != null && alphaImage.get_transparent()) {
      if (alphaPoint == null) {
        alphaPoint = new lime_math_Vector2();
      }
      var tempData = image.clone();
      tempData.copyChannel(
        alphaImage,
        new lime_math_Rectangle(
          alphaPoint.x,
          alphaPoint.y,
          sourceRect.width,
          sourceRect.height
        ),
        new lime_math_Vector2(sourceRect.x, sourceRect.y),
        lime_graphics_ImageChannel.ALPHA,
        lime_graphics_ImageChannel.ALPHA
      );
      sourceImage = tempData;
    }
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
    if (!mergeAlpha) {
      if (image.get_transparent() && sourceImage.get_transparent()) {
        image.buffer.__srcContext.clearRect(
          destPoint.x + image.offsetX,
          destPoint.y + image.offsetY,
          sourceRect.width + image.offsetX,
          sourceRect.height + image.offsetY
        );
      }
    }
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
    if (sourceImage.buffer.get_src() != null) {
      image.buffer.__srcContext.drawImage(
        sourceImage.buffer.get_src(),
        (sourceRect.x + sourceImage.offsetX) | 0,
        (sourceRect.y + sourceImage.offsetY) | 0,
        sourceRect.width | 0,
        sourceRect.height | 0,
        (destPoint.x + image.offsetX) | 0,
        (destPoint.y + image.offsetY) | 0,
        sourceRect.width | 0,
        sourceRect.height | 0
      );
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageCanvasUtil.createCanvas = function (
    image,
    width,
    height
  ) {
    var buffer = image.buffer;
    if (buffer.__srcCanvas == null) {
      buffer.__srcCanvas = window.document.createElement("canvas");
      buffer.__srcCanvas.width = width;
      buffer.__srcCanvas.height = height;
      if (!image.get_transparent()) {
        if (!image.get_transparent()) {
          buffer.__srcCanvas.setAttribute("moz-opaque", "true");
        }
        buffer.__srcContext = buffer.__srcCanvas.getContext("2d", {
          alpha: false,
        });
      } else {
        buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
      }
      buffer.__srcContext.mozImageSmoothingEnabled = false;
      buffer.__srcContext.msImageSmoothingEnabled = false;
      buffer.__srcContext.imageSmoothingEnabled = false;
    }
  };
  lime_graphics_utils_ImageCanvasUtil.createImageData = function (image) {
    var buffer = image.buffer;
    if (buffer.__srcImageData == null) {
      if (buffer.data == null) {
        buffer.__srcImageData = buffer.__srcContext.getImageData(
          0,
          0,
          buffer.width,
          buffer.height
        );
      } else {
        buffer.__srcImageData = buffer.__srcContext.createImageData(
          buffer.width,
          buffer.height
        );
        buffer.__srcImageData.data.set(buffer.data);
      }
      var elements = buffer.__srcImageData.data.buffer;
      var this1;
      if (elements != null) {
        this1 = new Uint8Array(elements);
      } else {
        this1 = null;
      }
      buffer.data = this1;
    }
  };
  lime_graphics_utils_ImageCanvasUtil.fillRect = function (
    image,
    rect,
    color,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
    var r;
    var g;
    var b;
    var a;
    if (format == 1) {
      r = (color >> 16) & 255;
      g = (color >> 8) & 255;
      b = color & 255;
      if (image.get_transparent()) {
        a = (color >> 24) & 255;
      } else {
        a = 255;
      }
    } else {
      r = (color >> 24) & 255;
      g = (color >> 16) & 255;
      b = (color >> 8) & 255;
      if (image.get_transparent()) {
        a = color & 255;
      } else {
        a = 255;
      }
    }
    if (
      rect.x == 0 &&
      rect.y == 0 &&
      rect.width == image.width &&
      rect.height == image.height
    ) {
      if (image.get_transparent() && a == 0) {
        image.buffer.__srcCanvas.width = image.buffer.width;
        return;
      }
    }
    image.buffer.__srcContext.fillStyle =
      "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
    image.buffer.__srcContext.fillRect(
      rect.x + image.offsetX,
      rect.y + image.offsetY,
      rect.width + image.offsetX,
      rect.height + image.offsetY
    );
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageCanvasUtil.floodFill = function (
    image,
    x,
    y,
    color,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.floodFill(image, x, y, color, format);
  };
  lime_graphics_utils_ImageCanvasUtil.getPixel = function (
    image,
    x,
    y,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    return lime_graphics_utils_ImageDataUtil.getPixel(image, x, y, format);
  };
  lime_graphics_utils_ImageCanvasUtil.getPixel32 = function (
    image,
    x,
    y,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    return lime_graphics_utils_ImageDataUtil.getPixel32(image, x, y, format);
  };
  lime_graphics_utils_ImageCanvasUtil.getPixels = function (
    image,
    rect,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    return lime_graphics_utils_ImageDataUtil.getPixels(image, rect, format);
  };
  lime_graphics_utils_ImageCanvasUtil.merge = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    redMultiplier,
    greenMultiplier,
    blueMultiplier,
    alphaMultiplier
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.merge(
      image,
      sourceImage,
      sourceRect,
      destPoint,
      redMultiplier,
      greenMultiplier,
      blueMultiplier,
      alphaMultiplier
    );
  };
  lime_graphics_utils_ImageCanvasUtil.resize = function (
    image,
    newWidth,
    newHeight
  ) {
    var buffer = image.buffer;
    if (buffer.__srcCanvas == null) {
      lime_graphics_utils_ImageCanvasUtil.createCanvas(
        image,
        newWidth,
        newHeight
      );
      buffer.__srcContext.drawImage(
        buffer.get_src(),
        0,
        0,
        newWidth,
        newHeight
      );
    } else {
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
      var sourceCanvas = buffer.__srcCanvas;
      buffer.__srcCanvas = null;
      lime_graphics_utils_ImageCanvasUtil.createCanvas(
        image,
        newWidth,
        newHeight
      );
      buffer.__srcContext.drawImage(sourceCanvas, 0, 0, newWidth, newHeight);
    }
    buffer.__srcImageData = null;
    buffer.data = null;
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageCanvasUtil.scroll = function (image, x, y) {
    if (x % image.width == 0 && y % image.height == 0) {
      return;
    }
    var copy = image.clone();
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
    image.buffer.__srcContext.clearRect(x, y, image.width, image.height);
    image.buffer.__srcContext.drawImage(copy.get_src(), x, y);
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageCanvasUtil.setPixel = function (
    image,
    x,
    y,
    color,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.setPixel(image, x, y, color, format);
  };
  lime_graphics_utils_ImageCanvasUtil.setPixel32 = function (
    image,
    x,
    y,
    color,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.setPixel32(image, x, y, color, format);
  };
  lime_graphics_utils_ImageCanvasUtil.setPixels = function (
    image,
    rect,
    bytes,
    format
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToData(image);
    lime_graphics_utils_ImageDataUtil.setPixels(image, rect, bytes, format);
  };
  lime_graphics_utils_ImageCanvasUtil.sync = function (image, clear) {
    if (image == null) {
      return;
    }
    if (image.type == lime_graphics_ImageType.CANVAS) {
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, clear);
    } else {
      lime_graphics_utils_ImageCanvasUtil.convertToData(image, clear);
    }
  };
  var lime_graphics_utils_ImageDataUtil = function () {};
  $hxClasses["lime.graphics.utils.ImageDataUtil"] =
    lime_graphics_utils_ImageDataUtil;
  lime_graphics_utils_ImageDataUtil.__name__ = [
    "lime",
    "graphics",
    "utils",
    "ImageDataUtil",
  ];
  lime_graphics_utils_ImageDataUtil.colorTransform = function (
    image,
    rect,
    colorMatrix
  ) {
    var data = image.buffer.data;
    if (data == null) {
      return;
    }
    var format = image.buffer.format;
    var premultiplied = image.buffer.premultiplied;
    var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      rect
    );
    var alphaTable =
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
    var redTable =
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
    var greenTable =
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
    var blueTable =
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
    var row;
    var offset;
    var pixel;
    var _g1 = 0;
    var _g = dataView.height;
    while (_g1 < _g) {
      var y = _g1++;
      row = dataView.offset + dataView.stride * y;
      var _g3 = 0;
      var _g2 = dataView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        offset = row + x * 4;
        switch (format) {
          case 0:
            pixel =
              ((data[offset] & 255) << 24) |
              ((data[offset + 1] & 255) << 16) |
              ((data[offset + 2] & 255) << 8) |
              (data[offset + 3] & 255);
            break;
          case 1:
            pixel =
              ((data[offset + 1] & 255) << 24) |
              ((data[offset + 2] & 255) << 16) |
              ((data[offset + 3] & 255) << 8) |
              (data[offset] & 255);
            break;
          case 2:
            pixel =
              ((data[offset + 2] & 255) << 24) |
              ((data[offset + 1] & 255) << 16) |
              ((data[offset] & 255) << 8) |
              (data[offset + 3] & 255);
            break;
        }
        if (premultiplied) {
          if ((pixel & 255) != 0 && (pixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
            pixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (pixel & 255 & 255);
          }
        }
        pixel =
          ((redTable[(pixel >>> 24) & 255] & 255) << 24) |
          ((greenTable[(pixel >>> 16) & 255] & 255) << 16) |
          ((blueTable[(pixel >>> 8) & 255] & 255) << 8) |
          (alphaTable[pixel & 255] & 255);
        if (premultiplied) {
          if ((pixel & 255) == 0) {
            if (pixel != 0) {
              pixel = 0;
            }
          } else if ((pixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
              lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
            pixel =
              ((((((pixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                24) |
              ((((((pixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                16) |
              ((((((pixel >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                8) |
              (pixel & 255 & 255);
          }
        }
        switch (format) {
          case 0:
            data[offset] = (pixel >>> 24) & 255;
            data[offset + 1] = (pixel >>> 16) & 255;
            data[offset + 2] = (pixel >>> 8) & 255;
            data[offset + 3] = pixel & 255;
            break;
          case 1:
            data[offset] = pixel & 255;
            data[offset + 1] = (pixel >>> 24) & 255;
            data[offset + 2] = (pixel >>> 16) & 255;
            data[offset + 3] = (pixel >>> 8) & 255;
            break;
          case 2:
            data[offset] = (pixel >>> 8) & 255;
            data[offset + 1] = (pixel >>> 16) & 255;
            data[offset + 2] = (pixel >>> 24) & 255;
            data[offset + 3] = pixel & 255;
            break;
        }
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.copyChannel = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    sourceChannel,
    destChannel
  ) {
    var destIdx;
    switch (destChannel[1]) {
      case 0:
        destIdx = 0;
        break;
      case 1:
        destIdx = 1;
        break;
      case 2:
        destIdx = 2;
        break;
      case 3:
        destIdx = 3;
        break;
    }
    var srcIdx;
    switch (sourceChannel[1]) {
      case 0:
        srcIdx = 0;
        break;
      case 1:
        srcIdx = 1;
        break;
      case 2:
        srcIdx = 2;
        break;
      case 3:
        srcIdx = 3;
        break;
    }
    var srcData = sourceImage.buffer.data;
    var destData = image.buffer.data;
    if (srcData == null || destData == null) {
      return;
    }
    var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      sourceImage,
      sourceRect
    );
    var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      new lime_math_Rectangle(
        destPoint.x,
        destPoint.y,
        srcView.width,
        srcView.height
      )
    );
    var srcFormat = sourceImage.buffer.format;
    var destFormat = image.buffer.format;
    var srcPremultiplied = sourceImage.buffer.premultiplied;
    var destPremultiplied = image.buffer.premultiplied;
    var srcPosition;
    var destPosition;
    var srcPixel;
    var destPixel;
    var value = 0;
    var _g1 = 0;
    var _g = destView.height;
    while (_g1 < _g) {
      var y = _g1++;
      srcPosition = srcView.offset + srcView.stride * y;
      destPosition = destView.offset + destView.stride * y;
      var _g3 = 0;
      var _g2 = destView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        switch (srcFormat) {
          case 0:
            srcPixel =
              ((srcData[srcPosition] & 255) << 24) |
              ((srcData[srcPosition + 1] & 255) << 16) |
              ((srcData[srcPosition + 2] & 255) << 8) |
              (srcData[srcPosition + 3] & 255);
            break;
          case 1:
            srcPixel =
              ((srcData[srcPosition + 1] & 255) << 24) |
              ((srcData[srcPosition + 2] & 255) << 16) |
              ((srcData[srcPosition + 3] & 255) << 8) |
              (srcData[srcPosition] & 255);
            break;
          case 2:
            srcPixel =
              ((srcData[srcPosition + 2] & 255) << 24) |
              ((srcData[srcPosition + 1] & 255) << 16) |
              ((srcData[srcPosition] & 255) << 8) |
              (srcData[srcPosition + 3] & 255);
            break;
        }
        if (srcPremultiplied) {
          if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (srcPixel & 255);
            srcPixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (srcPixel & 255 & 255);
          }
        }
        switch (destFormat) {
          case 0:
            destPixel =
              ((destData[destPosition] & 255) << 24) |
              ((destData[destPosition + 1] & 255) << 16) |
              ((destData[destPosition + 2] & 255) << 8) |
              (destData[destPosition + 3] & 255);
            break;
          case 1:
            destPixel =
              ((destData[destPosition + 1] & 255) << 24) |
              ((destData[destPosition + 2] & 255) << 16) |
              ((destData[destPosition + 3] & 255) << 8) |
              (destData[destPosition] & 255);
            break;
          case 2:
            destPixel =
              ((destData[destPosition + 2] & 255) << 24) |
              ((destData[destPosition + 1] & 255) << 16) |
              ((destData[destPosition] & 255) << 8) |
              (destData[destPosition + 3] & 255);
            break;
        }
        if (destPremultiplied) {
          if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (destPixel & 255);
            destPixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (destPixel & 255 & 255);
          }
        }
        switch (srcIdx) {
          case 0:
            value = (srcPixel >>> 24) & 255;
            break;
          case 1:
            value = (srcPixel >>> 16) & 255;
            break;
          case 2:
            value = (srcPixel >>> 8) & 255;
            break;
          case 3:
            value = srcPixel & 255;
            break;
        }
        switch (destIdx) {
          case 0:
            destPixel =
              ((value & 255) << 24) |
              (((destPixel >>> 16) & 255 & 255) << 16) |
              (((destPixel >>> 8) & 255 & 255) << 8) |
              (destPixel & 255 & 255);
            break;
          case 1:
            destPixel =
              (((destPixel >>> 24) & 255 & 255) << 24) |
              ((value & 255) << 16) |
              (((destPixel >>> 8) & 255 & 255) << 8) |
              (destPixel & 255 & 255);
            break;
          case 2:
            destPixel =
              (((destPixel >>> 24) & 255 & 255) << 24) |
              (((destPixel >>> 16) & 255 & 255) << 16) |
              ((value & 255) << 8) |
              (destPixel & 255 & 255);
            break;
          case 3:
            destPixel =
              (((destPixel >>> 24) & 255 & 255) << 24) |
              (((destPixel >>> 16) & 255 & 255) << 16) |
              (((destPixel >>> 8) & 255 & 255) << 8) |
              (value & 255);
            break;
        }
        if (destPremultiplied) {
          if ((destPixel & 255) == 0) {
            if (destPixel != 0) {
              destPixel = 0;
            }
          } else if ((destPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
              lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
            destPixel =
              ((((((destPixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                24) |
              ((((((destPixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                16) |
              ((((((destPixel >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                8) |
              (destPixel & 255 & 255);
          }
        }
        switch (destFormat) {
          case 0:
            destData[destPosition] = (destPixel >>> 24) & 255;
            destData[destPosition + 1] = (destPixel >>> 16) & 255;
            destData[destPosition + 2] = (destPixel >>> 8) & 255;
            destData[destPosition + 3] = destPixel & 255;
            break;
          case 1:
            destData[destPosition] = destPixel & 255;
            destData[destPosition + 1] = (destPixel >>> 24) & 255;
            destData[destPosition + 2] = (destPixel >>> 16) & 255;
            destData[destPosition + 3] = (destPixel >>> 8) & 255;
            break;
          case 2:
            destData[destPosition] = (destPixel >>> 8) & 255;
            destData[destPosition + 1] = (destPixel >>> 16) & 255;
            destData[destPosition + 2] = (destPixel >>> 24) & 255;
            destData[destPosition + 3] = destPixel & 255;
            break;
        }
        srcPosition += 4;
        destPosition += 4;
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.copyPixels = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    alphaImage,
    alphaPoint,
    mergeAlpha
  ) {
    if (mergeAlpha == null) {
      mergeAlpha = false;
    }
    var sourceData = sourceImage.buffer.data;
    var destData = image.buffer.data;
    if (sourceData == null || destData == null) {
      return;
    }
    var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      sourceImage,
      sourceRect
    );
    var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      new lime_math_Rectangle(
        destPoint.x,
        destPoint.y,
        sourceView.width,
        sourceView.height
      )
    );
    var sourceFormat = sourceImage.buffer.format;
    var destFormat = image.buffer.format;
    var sourcePremultiplied = sourceImage.buffer.premultiplied;
    var destPremultiplied = image.buffer.premultiplied;
    var sourcePosition;
    var destPosition;
    var sourcePixel;
    if (!mergeAlpha || !sourceImage.get_transparent()) {
      var _g1 = 0;
      var _g = destView.height;
      while (_g1 < _g) {
        var y = _g1++;
        sourcePosition = sourceView.offset + sourceView.stride * y;
        destPosition = destView.offset + destView.stride * y;
        var _g3 = 0;
        var _g2 = destView.width;
        while (_g3 < _g2) {
          var x = _g3++;
          switch (sourceFormat) {
            case 0:
              sourcePixel =
                ((sourceData[sourcePosition] & 255) << 24) |
                ((sourceData[sourcePosition + 1] & 255) << 16) |
                ((sourceData[sourcePosition + 2] & 255) << 8) |
                (sourceData[sourcePosition + 3] & 255);
              break;
            case 1:
              sourcePixel =
                ((sourceData[sourcePosition + 1] & 255) << 24) |
                ((sourceData[sourcePosition + 2] & 255) << 16) |
                ((sourceData[sourcePosition + 3] & 255) << 8) |
                (sourceData[sourcePosition] & 255);
              break;
            case 2:
              sourcePixel =
                ((sourceData[sourcePosition + 2] & 255) << 24) |
                ((sourceData[sourcePosition + 1] & 255) << 16) |
                ((sourceData[sourcePosition] & 255) << 8) |
                (sourceData[sourcePosition + 3] & 255);
              break;
          }
          if (sourcePremultiplied) {
            if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
              lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                255.0 / (sourcePixel & 255);
              sourcePixel =
                ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    ((sourcePixel >>> 24) & 255) *
                      lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                  )
                ] &
                  255) <<
                  24) |
                ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    ((sourcePixel >>> 16) & 255) *
                      lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                  )
                ] &
                  255) <<
                  16) |
                ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    ((sourcePixel >>> 8) & 255) *
                      lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                  )
                ] &
                  255) <<
                  8) |
                (sourcePixel & 255 & 255);
            }
          }
          if (destPremultiplied) {
            if ((sourcePixel & 255) == 0) {
              if (sourcePixel != 0) {
                sourcePixel = 0;
              }
            } else if ((sourcePixel & 255) != 255) {
              lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[
                  sourcePixel & 255
                ];
              sourcePixel =
                ((((((sourcePixel >>> 24) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  24) |
                ((((((sourcePixel >>> 16) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  16) |
                ((((((sourcePixel >>> 8) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  8) |
                (sourcePixel & 255 & 255);
            }
          }
          switch (destFormat) {
            case 0:
              destData[destPosition] = (sourcePixel >>> 24) & 255;
              destData[destPosition + 1] = (sourcePixel >>> 16) & 255;
              destData[destPosition + 2] = (sourcePixel >>> 8) & 255;
              destData[destPosition + 3] = sourcePixel & 255;
              break;
            case 1:
              destData[destPosition] = sourcePixel & 255;
              destData[destPosition + 1] = (sourcePixel >>> 24) & 255;
              destData[destPosition + 2] = (sourcePixel >>> 16) & 255;
              destData[destPosition + 3] = (sourcePixel >>> 8) & 255;
              break;
            case 2:
              destData[destPosition] = (sourcePixel >>> 8) & 255;
              destData[destPosition + 1] = (sourcePixel >>> 16) & 255;
              destData[destPosition + 2] = (sourcePixel >>> 24) & 255;
              destData[destPosition + 3] = sourcePixel & 255;
              break;
          }
          sourcePosition += 4;
          destPosition += 4;
        }
      }
    } else {
      var sourceAlpha;
      var destAlpha;
      var oneMinusSourceAlpha;
      var blendAlpha;
      var destPixel;
      if (alphaImage == null) {
        var _g11 = 0;
        var _g4 = destView.height;
        while (_g11 < _g4) {
          var y1 = _g11++;
          sourcePosition = sourceView.offset + sourceView.stride * y1;
          destPosition = destView.offset + destView.stride * y1;
          var _g31 = 0;
          var _g21 = destView.width;
          while (_g31 < _g21) {
            var x1 = _g31++;
            switch (sourceFormat) {
              case 0:
                sourcePixel =
                  ((sourceData[sourcePosition] & 255) << 24) |
                  ((sourceData[sourcePosition + 1] & 255) << 16) |
                  ((sourceData[sourcePosition + 2] & 255) << 8) |
                  (sourceData[sourcePosition + 3] & 255);
                break;
              case 1:
                sourcePixel =
                  ((sourceData[sourcePosition + 1] & 255) << 24) |
                  ((sourceData[sourcePosition + 2] & 255) << 16) |
                  ((sourceData[sourcePosition + 3] & 255) << 8) |
                  (sourceData[sourcePosition] & 255);
                break;
              case 2:
                sourcePixel =
                  ((sourceData[sourcePosition + 2] & 255) << 24) |
                  ((sourceData[sourcePosition + 1] & 255) << 16) |
                  ((sourceData[sourcePosition] & 255) << 8) |
                  (sourceData[sourcePosition + 3] & 255);
                break;
            }
            if (sourcePremultiplied) {
              if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                  255.0 / (sourcePixel & 255);
                sourcePixel =
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 24) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    24) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 16) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    16) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 8) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    8) |
                  (sourcePixel & 255 & 255);
              }
            }
            switch (destFormat) {
              case 0:
                destPixel =
                  ((destData[destPosition] & 255) << 24) |
                  ((destData[destPosition + 1] & 255) << 16) |
                  ((destData[destPosition + 2] & 255) << 8) |
                  (destData[destPosition + 3] & 255);
                break;
              case 1:
                destPixel =
                  ((destData[destPosition + 1] & 255) << 24) |
                  ((destData[destPosition + 2] & 255) << 16) |
                  ((destData[destPosition + 3] & 255) << 8) |
                  (destData[destPosition] & 255);
                break;
              case 2:
                destPixel =
                  ((destData[destPosition + 2] & 255) << 24) |
                  ((destData[destPosition + 1] & 255) << 16) |
                  ((destData[destPosition] & 255) << 8) |
                  (destData[destPosition + 3] & 255);
                break;
            }
            if (destPremultiplied) {
              if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                  255.0 / (destPixel & 255);
                destPixel =
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 24) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    24) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 16) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    16) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 8) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    8) |
                  (destPixel & 255 & 255);
              }
            }
            sourceAlpha = (sourcePixel & 255) / 255.0;
            destAlpha = (destPixel & 255) / 255.0;
            oneMinusSourceAlpha = 1 - sourceAlpha;
            blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
            if (blendAlpha == 0) {
              destPixel = 0;
            } else {
              var value =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 24) & 255) * sourceAlpha +
                      ((destPixel >>> 24) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                ((value & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (destPixel & 255 & 255);
              var value1 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 16) & 255) * sourceAlpha +
                      ((destPixel >>> 16) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                ((value1 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (destPixel & 255 & 255);
              var value2 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 8) & 255) * sourceAlpha +
                      ((destPixel >>> 8) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                ((value2 & 255) << 8) |
                (destPixel & 255 & 255);
              var value3 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(blendAlpha * 255.0)
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (value3 & 255);
            }
            if (destPremultiplied) {
              if ((destPixel & 255) == 0) {
                if (destPixel != 0) {
                  destPixel = 0;
                }
              } else if ((destPixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
                  lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[
                    destPixel & 255
                  ];
                destPixel =
                  ((((((destPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    24) |
                  ((((((destPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    16) |
                  ((((((destPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    8) |
                  (destPixel & 255 & 255);
              }
            }
            switch (destFormat) {
              case 0:
                destData[destPosition] = (destPixel >>> 24) & 255;
                destData[destPosition + 1] = (destPixel >>> 16) & 255;
                destData[destPosition + 2] = (destPixel >>> 8) & 255;
                destData[destPosition + 3] = destPixel & 255;
                break;
              case 1:
                destData[destPosition] = destPixel & 255;
                destData[destPosition + 1] = (destPixel >>> 24) & 255;
                destData[destPosition + 2] = (destPixel >>> 16) & 255;
                destData[destPosition + 3] = (destPixel >>> 8) & 255;
                break;
              case 2:
                destData[destPosition] = (destPixel >>> 8) & 255;
                destData[destPosition + 1] = (destPixel >>> 16) & 255;
                destData[destPosition + 2] = (destPixel >>> 24) & 255;
                destData[destPosition + 3] = destPixel & 255;
                break;
            }
            sourcePosition += 4;
            destPosition += 4;
          }
        }
      } else {
        if (alphaPoint == null) {
          alphaPoint = new lime_math_Vector2();
        }
        var alphaData = alphaImage.buffer.data;
        var alphaFormat = alphaImage.buffer.format;
        var alphaPremultiplied = alphaImage.buffer.premultiplied;
        var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
          alphaImage,
          new lime_math_Rectangle(
            alphaPoint.x,
            alphaPoint.y,
            destView.width,
            destView.height
          )
        );
        var alphaPosition;
        var alphaPixel;
        var _g12 = 0;
        var _g5 = alphaView.height;
        while (_g12 < _g5) {
          var y2 = _g12++;
          sourcePosition = sourceView.offset + sourceView.stride * y2;
          destPosition = destView.offset + destView.stride * y2;
          alphaPosition = alphaView.offset + alphaView.stride * y2;
          var _g32 = 0;
          var _g22 = alphaView.width;
          while (_g32 < _g22) {
            var x2 = _g32++;
            switch (sourceFormat) {
              case 0:
                sourcePixel =
                  ((sourceData[sourcePosition] & 255) << 24) |
                  ((sourceData[sourcePosition + 1] & 255) << 16) |
                  ((sourceData[sourcePosition + 2] & 255) << 8) |
                  (sourceData[sourcePosition + 3] & 255);
                break;
              case 1:
                sourcePixel =
                  ((sourceData[sourcePosition + 1] & 255) << 24) |
                  ((sourceData[sourcePosition + 2] & 255) << 16) |
                  ((sourceData[sourcePosition + 3] & 255) << 8) |
                  (sourceData[sourcePosition] & 255);
                break;
              case 2:
                sourcePixel =
                  ((sourceData[sourcePosition + 2] & 255) << 24) |
                  ((sourceData[sourcePosition + 1] & 255) << 16) |
                  ((sourceData[sourcePosition] & 255) << 8) |
                  (sourceData[sourcePosition + 3] & 255);
                break;
            }
            if (sourcePremultiplied) {
              if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                  255.0 / (sourcePixel & 255);
                sourcePixel =
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 24) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    24) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 16) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    16) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((sourcePixel >>> 8) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    8) |
                  (sourcePixel & 255 & 255);
              }
            }
            switch (destFormat) {
              case 0:
                destPixel =
                  ((destData[destPosition] & 255) << 24) |
                  ((destData[destPosition + 1] & 255) << 16) |
                  ((destData[destPosition + 2] & 255) << 8) |
                  (destData[destPosition + 3] & 255);
                break;
              case 1:
                destPixel =
                  ((destData[destPosition + 1] & 255) << 24) |
                  ((destData[destPosition + 2] & 255) << 16) |
                  ((destData[destPosition + 3] & 255) << 8) |
                  (destData[destPosition] & 255);
                break;
              case 2:
                destPixel =
                  ((destData[destPosition + 2] & 255) << 24) |
                  ((destData[destPosition + 1] & 255) << 16) |
                  ((destData[destPosition] & 255) << 8) |
                  (destData[destPosition + 3] & 255);
                break;
            }
            if (destPremultiplied) {
              if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                  255.0 / (destPixel & 255);
                destPixel =
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 24) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    24) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 16) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    16) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((destPixel >>> 8) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    8) |
                  (destPixel & 255 & 255);
              }
            }
            switch (alphaFormat) {
              case 0:
                alphaPixel =
                  ((alphaData[alphaPosition] & 255) << 24) |
                  ((alphaData[alphaPosition + 1] & 255) << 16) |
                  ((alphaData[alphaPosition + 2] & 255) << 8) |
                  (alphaData[alphaPosition + 3] & 255);
                break;
              case 1:
                alphaPixel =
                  ((alphaData[alphaPosition + 1] & 255) << 24) |
                  ((alphaData[alphaPosition + 2] & 255) << 16) |
                  ((alphaData[alphaPosition + 3] & 255) << 8) |
                  (alphaData[alphaPosition] & 255);
                break;
              case 2:
                alphaPixel =
                  ((alphaData[alphaPosition + 2] & 255) << 24) |
                  ((alphaData[alphaPosition + 1] & 255) << 16) |
                  ((alphaData[alphaPosition] & 255) << 8) |
                  (alphaData[alphaPosition + 3] & 255);
                break;
            }
            if (alphaPremultiplied) {
              if ((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
                  255.0 / (alphaPixel & 255);
                alphaPixel =
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((alphaPixel >>> 24) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    24) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((alphaPixel >>> 16) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    16) |
                  ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                    Math.round(
                      ((alphaPixel >>> 8) & 255) *
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                    )
                  ] &
                    255) <<
                    8) |
                  (alphaPixel & 255 & 255);
              }
            }
            sourceAlpha = (alphaPixel & 255) / 255;
            destAlpha = (destPixel & 255) / 255;
            oneMinusSourceAlpha = 1 - sourceAlpha;
            blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
            if (blendAlpha == 0) {
              destPixel = 0;
            } else {
              var value4 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 24) & 255) * sourceAlpha +
                      ((destPixel >>> 24) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                ((value4 & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (destPixel & 255 & 255);
              var value5 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 16) & 255) * sourceAlpha +
                      ((destPixel >>> 16) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                ((value5 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (destPixel & 255 & 255);
              var value6 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(
                    (((sourcePixel >>> 8) & 255) * sourceAlpha +
                      ((destPixel >>> 8) & 255) *
                        destAlpha *
                        oneMinusSourceAlpha) /
                      blendAlpha
                  )
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                ((value6 & 255) << 8) |
                (destPixel & 255 & 255);
              var value7 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                  Math.round(blendAlpha * 255.0)
                ];
              destPixel =
                (((destPixel >>> 24) & 255 & 255) << 24) |
                (((destPixel >>> 16) & 255 & 255) << 16) |
                (((destPixel >>> 8) & 255 & 255) << 8) |
                (value7 & 255);
            }
            if (destPremultiplied) {
              if ((destPixel & 255) == 0) {
                if (destPixel != 0) {
                  destPixel = 0;
                }
              } else if ((destPixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
                  lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[
                    destPixel & 255
                  ];
                destPixel =
                  ((((((destPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    24) |
                  ((((((destPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    16) |
                  ((((((destPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                    16) &
                    255) <<
                    8) |
                  (destPixel & 255 & 255);
              }
            }
            switch (destFormat) {
              case 0:
                destData[destPosition] = (destPixel >>> 24) & 255;
                destData[destPosition + 1] = (destPixel >>> 16) & 255;
                destData[destPosition + 2] = (destPixel >>> 8) & 255;
                destData[destPosition + 3] = destPixel & 255;
                break;
              case 1:
                destData[destPosition] = destPixel & 255;
                destData[destPosition + 1] = (destPixel >>> 24) & 255;
                destData[destPosition + 2] = (destPixel >>> 16) & 255;
                destData[destPosition + 3] = (destPixel >>> 8) & 255;
                break;
              case 2:
                destData[destPosition] = (destPixel >>> 8) & 255;
                destData[destPosition + 1] = (destPixel >>> 16) & 255;
                destData[destPosition + 2] = (destPixel >>> 24) & 255;
                destData[destPosition + 3] = destPixel & 255;
                break;
            }
            sourcePosition += 4;
            destPosition += 4;
          }
        }
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.fillRect = function (
    image,
    rect,
    color,
    format
  ) {
    var fillColor;
    switch (format) {
      case 1:
        var argb = color;
        var this1 = 0;
        var rgba = this1;
        rgba =
          (((argb >>> 16) & 255 & 255) << 24) |
          (((argb >>> 8) & 255 & 255) << 16) |
          ((argb & 255 & 255) << 8) |
          ((argb >>> 24) & 255 & 255);
        fillColor = rgba;
        break;
      case 2:
        var bgra = color;
        var this2 = 0;
        var rgba1 = this2;
        rgba1 =
          (((bgra >>> 8) & 255 & 255) << 24) |
          (((bgra >>> 16) & 255 & 255) << 16) |
          (((bgra >>> 24) & 255 & 255) << 8) |
          (bgra & 255 & 255);
        fillColor = rgba1;
        break;
      default:
        fillColor = color;
    }
    if (!image.get_transparent()) {
      fillColor =
        (((fillColor >>> 24) & 255 & 255) << 24) |
        (((fillColor >>> 16) & 255 & 255) << 16) |
        (((fillColor >>> 8) & 255 & 255) << 8) |
        255;
    }
    var data = image.buffer.data;
    if (data == null) {
      return;
    }
    var format1 = image.buffer.format;
    var premultiplied = image.buffer.premultiplied;
    if (premultiplied) {
      if ((fillColor & 255) == 0) {
        if (fillColor != 0) {
          fillColor = 0;
        }
      } else if ((fillColor & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
        fillColor =
          ((((((fillColor >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((fillColor >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((fillColor >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (fillColor & 255 & 255);
      }
    }
    var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      rect
    );
    var row;
    var _g1 = 0;
    var _g = dataView.height;
    while (_g1 < _g) {
      var y = _g1++;
      row = dataView.offset + dataView.stride * y;
      var _g3 = 0;
      var _g2 = dataView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        var offset = row + x * 4;
        switch (format1) {
          case 0:
            data[offset] = (fillColor >>> 24) & 255;
            data[offset + 1] = (fillColor >>> 16) & 255;
            data[offset + 2] = (fillColor >>> 8) & 255;
            data[offset + 3] = fillColor & 255;
            break;
          case 1:
            data[offset] = fillColor & 255;
            data[offset + 1] = (fillColor >>> 24) & 255;
            data[offset + 2] = (fillColor >>> 16) & 255;
            data[offset + 3] = (fillColor >>> 8) & 255;
            break;
          case 2:
            data[offset] = (fillColor >>> 8) & 255;
            data[offset + 1] = (fillColor >>> 16) & 255;
            data[offset + 2] = (fillColor >>> 24) & 255;
            data[offset + 3] = fillColor & 255;
            break;
        }
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.floodFill = function (
    image,
    x,
    y,
    color,
    format
  ) {
    var data = image.buffer.data;
    if (data == null) {
      return;
    }
    if (format == 1) {
      color = ((color & 16777215) << 8) | ((color >> 24) & 255);
    }
    var format1 = image.buffer.format;
    var premultiplied = image.buffer.premultiplied;
    var fillColor = color;
    var hitColor;
    var offset =
      (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
    switch (format1) {
      case 0:
        hitColor =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        hitColor =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        hitColor =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((hitColor & 255) != 0 && (hitColor & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
        hitColor =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((hitColor >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((hitColor >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((hitColor >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (hitColor & 255 & 255);
      }
    }
    if (!image.get_transparent()) {
      fillColor =
        (((fillColor >>> 24) & 255 & 255) << 24) |
        (((fillColor >>> 16) & 255 & 255) << 16) |
        (((fillColor >>> 8) & 255 & 255) << 8) |
        255;
      hitColor =
        (((hitColor >>> 24) & 255 & 255) << 24) |
        (((hitColor >>> 16) & 255 & 255) << 16) |
        (((hitColor >>> 8) & 255 & 255) << 8) |
        255;
    }
    if (fillColor == hitColor) {
      return;
    }
    if (premultiplied) {
      if ((fillColor & 255) == 0) {
        if (fillColor != 0) {
          fillColor = 0;
        }
      } else if ((fillColor & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
        fillColor =
          ((((((fillColor >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((fillColor >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((fillColor >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (fillColor & 255 & 255);
      }
    }
    var dx = [0, -1, 1, 0];
    var dy = [-1, 0, 0, 1];
    var minX = -image.offsetX;
    var minY = -image.offsetY;
    var maxX = minX + image.width;
    var maxY = minY + image.height;
    var queue = [];
    queue.push(x);
    queue.push(y);
    var curPointX;
    var curPointY;
    var nextPointX;
    var nextPointY;
    var nextPointOffset;
    var readColor;
    while (queue.length > 0) {
      curPointY = queue.pop();
      curPointX = queue.pop();
      var _g = 0;
      while (_g < 4) {
        var i = _g++;
        nextPointX = curPointX + dx[i];
        nextPointY = curPointY + dy[i];
        if (
          nextPointX < minX ||
          nextPointY < minY ||
          nextPointX >= maxX ||
          nextPointY >= maxY
        ) {
          continue;
        }
        nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
        switch (format1) {
          case 0:
            readColor =
              ((data[nextPointOffset] & 255) << 24) |
              ((data[nextPointOffset + 1] & 255) << 16) |
              ((data[nextPointOffset + 2] & 255) << 8) |
              (data[nextPointOffset + 3] & 255);
            break;
          case 1:
            readColor =
              ((data[nextPointOffset + 1] & 255) << 24) |
              ((data[nextPointOffset + 2] & 255) << 16) |
              ((data[nextPointOffset + 3] & 255) << 8) |
              (data[nextPointOffset] & 255);
            break;
          case 2:
            readColor =
              ((data[nextPointOffset + 2] & 255) << 24) |
              ((data[nextPointOffset + 1] & 255) << 16) |
              ((data[nextPointOffset] & 255) << 8) |
              (data[nextPointOffset + 3] & 255);
            break;
        }
        if (premultiplied) {
          if ((readColor & 255) != 0 && (readColor & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (readColor & 255);
            readColor =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((readColor >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((readColor >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((readColor >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (readColor & 255 & 255);
          }
        }
        if (readColor == hitColor) {
          switch (format1) {
            case 0:
              data[nextPointOffset] = (fillColor >>> 24) & 255;
              data[nextPointOffset + 1] = (fillColor >>> 16) & 255;
              data[nextPointOffset + 2] = (fillColor >>> 8) & 255;
              data[nextPointOffset + 3] = fillColor & 255;
              break;
            case 1:
              data[nextPointOffset] = fillColor & 255;
              data[nextPointOffset + 1] = (fillColor >>> 24) & 255;
              data[nextPointOffset + 2] = (fillColor >>> 16) & 255;
              data[nextPointOffset + 3] = (fillColor >>> 8) & 255;
              break;
            case 2:
              data[nextPointOffset] = (fillColor >>> 8) & 255;
              data[nextPointOffset + 1] = (fillColor >>> 16) & 255;
              data[nextPointOffset + 2] = (fillColor >>> 24) & 255;
              data[nextPointOffset + 3] = fillColor & 255;
              break;
          }
          queue.push(nextPointX);
          queue.push(nextPointY);
        }
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function (
    image,
    mask,
    color,
    findColor,
    format
  ) {
    if (findColor == null) {
      findColor = true;
    }
    var left = image.width + 1;
    var right = 0;
    var top = image.height + 1;
    var bottom = 0;
    var _color;
    var _mask;
    switch (format) {
      case 1:
        var argb = color;
        var this1 = 0;
        var rgba = this1;
        rgba =
          (((argb >>> 16) & 255 & 255) << 24) |
          (((argb >>> 8) & 255 & 255) << 16) |
          ((argb & 255 & 255) << 8) |
          ((argb >>> 24) & 255 & 255);
        _color = rgba;
        var argb1 = mask;
        var this2 = 0;
        var rgba1 = this2;
        rgba1 =
          (((argb1 >>> 16) & 255 & 255) << 24) |
          (((argb1 >>> 8) & 255 & 255) << 16) |
          ((argb1 & 255 & 255) << 8) |
          ((argb1 >>> 24) & 255 & 255);
        _mask = rgba1;
        break;
      case 2:
        var bgra = color;
        var this3 = 0;
        var rgba2 = this3;
        rgba2 =
          (((bgra >>> 8) & 255 & 255) << 24) |
          (((bgra >>> 16) & 255 & 255) << 16) |
          (((bgra >>> 24) & 255 & 255) << 8) |
          (bgra & 255 & 255);
        _color = rgba2;
        var bgra1 = mask;
        var this4 = 0;
        var rgba3 = this4;
        rgba3 =
          (((bgra1 >>> 8) & 255 & 255) << 24) |
          (((bgra1 >>> 16) & 255 & 255) << 16) |
          (((bgra1 >>> 24) & 255 & 255) << 8) |
          (bgra1 & 255 & 255);
        _mask = rgba3;
        break;
      default:
        _color = color;
        _mask = mask;
    }
    if (!image.get_transparent()) {
      _color =
        (((_color >>> 24) & 255 & 255) << 24) |
        (((_color >>> 16) & 255 & 255) << 16) |
        (((_color >>> 8) & 255 & 255) << 8) |
        255;
      _mask =
        (((_mask >>> 24) & 255 & 255) << 24) |
        (((_mask >>> 16) & 255 & 255) << 16) |
        (((_mask >>> 8) & 255 & 255) << 8) |
        255;
    }
    var pixel;
    var hit;
    var _g1 = 0;
    var _g = image.width;
    while (_g1 < _g) {
      var x = _g1++;
      hit = false;
      var _g3 = 0;
      var _g2 = image.height;
      while (_g3 < _g2) {
        var y = _g3++;
        pixel = image.getPixel32(x, y, 0);
        if (findColor) {
          hit = (pixel & _mask) == _color;
        } else {
          hit = (pixel & _mask) != _color;
        }
        if (hit) {
          if (x < left) {
            left = x;
          }
          break;
        }
      }
      if (hit) {
        break;
      }
    }
    var ix;
    var _g11 = 0;
    var _g4 = image.width;
    while (_g11 < _g4) {
      var x1 = _g11++;
      ix = image.width - 1 - x1;
      hit = false;
      var _g31 = 0;
      var _g21 = image.height;
      while (_g31 < _g21) {
        var y1 = _g31++;
        pixel = image.getPixel32(ix, y1, 0);
        if (findColor) {
          hit = (pixel & _mask) == _color;
        } else {
          hit = (pixel & _mask) != _color;
        }
        if (hit) {
          if (ix > right) {
            right = ix;
          }
          break;
        }
      }
      if (hit) {
        break;
      }
    }
    var _g12 = 0;
    var _g5 = image.height;
    while (_g12 < _g5) {
      var y2 = _g12++;
      hit = false;
      var _g32 = 0;
      var _g22 = image.width;
      while (_g32 < _g22) {
        var x2 = _g32++;
        pixel = image.getPixel32(x2, y2, 0);
        if (findColor) {
          hit = (pixel & _mask) == _color;
        } else {
          hit = (pixel & _mask) != _color;
        }
        if (hit) {
          if (y2 < top) {
            top = y2;
          }
          break;
        }
      }
      if (hit) {
        break;
      }
    }
    var iy;
    var _g13 = 0;
    var _g6 = image.height;
    while (_g13 < _g6) {
      var y3 = _g13++;
      iy = image.height - 1 - y3;
      hit = false;
      var _g33 = 0;
      var _g23 = image.width;
      while (_g33 < _g23) {
        var x3 = _g33++;
        pixel = image.getPixel32(x3, iy, 0);
        if (findColor) {
          hit = (pixel & _mask) == _color;
        } else {
          hit = (pixel & _mask) != _color;
        }
        if (hit) {
          if (iy > bottom) {
            bottom = iy;
          }
          break;
        }
      }
      if (hit) {
        break;
      }
    }
    var w = right - left;
    var h = bottom - top;
    if (w > 0) {
      ++w;
    }
    if (h > 0) {
      ++h;
    }
    if (w < 0) {
      w = 0;
    }
    if (h < 0) {
      h = 0;
    }
    if (left == right) {
      w = 1;
    }
    if (top == bottom) {
      h = 1;
    }
    if (left > image.width) {
      left = 0;
    }
    if (top > image.height) {
      top = 0;
    }
    return new lime_math_Rectangle(left, top, w, h);
  };
  lime_graphics_utils_ImageDataUtil.getPixel = function (image, x, y, format) {
    var pixel;
    var data = image.buffer.data;
    var offset =
      4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
    var premultiplied = image.buffer.premultiplied;
    switch (image.buffer.format) {
      case 0:
        pixel =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        pixel =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        pixel =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((pixel & 255) != 0 && (pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
        pixel =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
    }
    pixel =
      (((pixel >>> 24) & 255 & 255) << 24) |
      (((pixel >>> 16) & 255 & 255) << 16) |
      (((pixel >>> 8) & 255 & 255) << 8) |
      0;
    switch (format) {
      case 1:
        var this1 = 0;
        var argb = this1;
        argb =
          ((pixel & 255 & 255) << 24) |
          (((pixel >>> 24) & 255 & 255) << 16) |
          (((pixel >>> 16) & 255 & 255) << 8) |
          ((pixel >>> 8) & 255 & 255);
        return argb;
      case 2:
        var this2 = 0;
        var bgra = this2;
        bgra =
          (((pixel >>> 8) & 255 & 255) << 24) |
          (((pixel >>> 16) & 255 & 255) << 16) |
          (((pixel >>> 24) & 255 & 255) << 8) |
          (pixel & 255 & 255);
        return bgra;
      default:
        return pixel;
    }
  };
  lime_graphics_utils_ImageDataUtil.getPixel32 = function (
    image,
    x,
    y,
    format
  ) {
    var pixel;
    var data = image.buffer.data;
    var offset =
      4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
    var premultiplied = image.buffer.premultiplied;
    switch (image.buffer.format) {
      case 0:
        pixel =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        pixel =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        pixel =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((pixel & 255) != 0 && (pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
        pixel =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
    }
    switch (format) {
      case 1:
        var this1 = 0;
        var argb = this1;
        argb =
          ((pixel & 255 & 255) << 24) |
          (((pixel >>> 24) & 255 & 255) << 16) |
          (((pixel >>> 16) & 255 & 255) << 8) |
          ((pixel >>> 8) & 255 & 255);
        return argb;
      case 2:
        var this2 = 0;
        var bgra = this2;
        bgra =
          (((pixel >>> 8) & 255 & 255) << 24) |
          (((pixel >>> 16) & 255 & 255) << 16) |
          (((pixel >>> 24) & 255 & 255) << 8) |
          (pixel & 255 & 255);
        return bgra;
      default:
        return pixel;
    }
  };
  lime_graphics_utils_ImageDataUtil.getPixels = function (image, rect, format) {
    if (image.buffer.data == null) {
      return null;
    }
    var length = (rect.width * rect.height) | 0;
    var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
    var data = image.buffer.data;
    var sourceFormat = image.buffer.format;
    var premultiplied = image.buffer.premultiplied;
    var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      rect
    );
    var position;
    var argb;
    var bgra;
    var pixel;
    var destPosition = 0;
    var _g1 = 0;
    var _g = dataView.height;
    while (_g1 < _g) {
      var y = _g1++;
      position = dataView.offset + dataView.stride * y;
      var _g3 = 0;
      var _g2 = dataView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        switch (sourceFormat) {
          case 0:
            pixel =
              ((data[position] & 255) << 24) |
              ((data[position + 1] & 255) << 16) |
              ((data[position + 2] & 255) << 8) |
              (data[position + 3] & 255);
            break;
          case 1:
            pixel =
              ((data[position + 1] & 255) << 24) |
              ((data[position + 2] & 255) << 16) |
              ((data[position + 3] & 255) << 8) |
              (data[position] & 255);
            break;
          case 2:
            pixel =
              ((data[position + 2] & 255) << 24) |
              ((data[position + 1] & 255) << 16) |
              ((data[position] & 255) << 8) |
              (data[position + 3] & 255);
            break;
        }
        if (premultiplied) {
          if ((pixel & 255) != 0 && (pixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
            pixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((pixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (pixel & 255 & 255);
          }
        }
        switch (format) {
          case 1:
            var this1 = 0;
            var argb1 = this1;
            argb1 =
              ((pixel & 255 & 255) << 24) |
              (((pixel >>> 24) & 255 & 255) << 16) |
              (((pixel >>> 16) & 255 & 255) << 8) |
              ((pixel >>> 8) & 255 & 255);
            argb = argb1;
            pixel = argb;
            break;
          case 2:
            var this2 = 0;
            var bgra1 = this2;
            bgra1 =
              (((pixel >>> 8) & 255 & 255) << 24) |
              (((pixel >>> 16) & 255 & 255) << 16) |
              (((pixel >>> 24) & 255 & 255) << 8) |
              (pixel & 255 & 255);
            bgra = bgra1;
            pixel = bgra;
            break;
          default:
        }
        bytes.b[destPosition++] = (pixel >>> 24) & 255 & 255;
        bytes.b[destPosition++] = (pixel >>> 16) & 255 & 255;
        bytes.b[destPosition++] = (pixel >>> 8) & 255 & 255;
        bytes.b[destPosition++] = pixel & 255 & 255;
        position += 4;
      }
    }
    return bytes;
  };
  lime_graphics_utils_ImageDataUtil.merge = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    redMultiplier,
    greenMultiplier,
    blueMultiplier,
    alphaMultiplier
  ) {
    if (image.buffer.data == null || sourceImage.buffer.data == null) {
      return;
    }
    var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      sourceImage,
      sourceRect
    );
    var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      new lime_math_Rectangle(
        destPoint.x,
        destPoint.y,
        sourceView.width,
        sourceView.height
      )
    );
    var sourceData = sourceImage.buffer.data;
    var destData = image.buffer.data;
    var sourceFormat = sourceImage.buffer.format;
    var destFormat = image.buffer.format;
    var sourcePremultiplied = sourceImage.buffer.premultiplied;
    var destPremultiplied = image.buffer.premultiplied;
    var sourcePosition;
    var destPosition;
    var sourcePixel;
    var destPixel;
    var _g1 = 0;
    var _g = destView.height;
    while (_g1 < _g) {
      var y = _g1++;
      sourcePosition = sourceView.offset + sourceView.stride * y;
      destPosition = destView.offset + destView.stride * y;
      var _g3 = 0;
      var _g2 = destView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        switch (sourceFormat) {
          case 0:
            sourcePixel =
              ((sourceData[sourcePosition] & 255) << 24) |
              ((sourceData[sourcePosition + 1] & 255) << 16) |
              ((sourceData[sourcePosition + 2] & 255) << 8) |
              (sourceData[sourcePosition + 3] & 255);
            break;
          case 1:
            sourcePixel =
              ((sourceData[sourcePosition + 1] & 255) << 24) |
              ((sourceData[sourcePosition + 2] & 255) << 16) |
              ((sourceData[sourcePosition + 3] & 255) << 8) |
              (sourceData[sourcePosition] & 255);
            break;
          case 2:
            sourcePixel =
              ((sourceData[sourcePosition + 2] & 255) << 24) |
              ((sourceData[sourcePosition + 1] & 255) << 16) |
              ((sourceData[sourcePosition] & 255) << 8) |
              (sourceData[sourcePosition + 3] & 255);
            break;
        }
        if (sourcePremultiplied) {
          if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (sourcePixel & 255);
            sourcePixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((sourcePixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((sourcePixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((sourcePixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (sourcePixel & 255 & 255);
          }
        }
        switch (destFormat) {
          case 0:
            destPixel =
              ((destData[destPosition] & 255) << 24) |
              ((destData[destPosition + 1] & 255) << 16) |
              ((destData[destPosition + 2] & 255) << 8) |
              (destData[destPosition + 3] & 255);
            break;
          case 1:
            destPixel =
              ((destData[destPosition + 1] & 255) << 24) |
              ((destData[destPosition + 2] & 255) << 16) |
              ((destData[destPosition + 3] & 255) << 8) |
              (destData[destPosition] & 255);
            break;
          case 2:
            destPixel =
              ((destData[destPosition + 2] & 255) << 24) |
              ((destData[destPosition + 1] & 255) << 16) |
              ((destData[destPosition] & 255) << 8) |
              (destData[destPosition + 3] & 255);
            break;
        }
        if (destPremultiplied) {
          if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (destPixel & 255);
            destPixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((destPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (destPixel & 255 & 255);
          }
        }
        var value =
          ((((sourcePixel >>> 24) & 255) * redMultiplier +
            ((destPixel >>> 24) & 255) * (256 - redMultiplier)) /
            256) |
          0;
        destPixel =
          ((value & 255) << 24) |
          (((destPixel >>> 16) & 255 & 255) << 16) |
          (((destPixel >>> 8) & 255 & 255) << 8) |
          (destPixel & 255 & 255);
        var value1 =
          ((((sourcePixel >>> 16) & 255) * greenMultiplier +
            ((destPixel >>> 16) & 255) * (256 - greenMultiplier)) /
            256) |
          0;
        destPixel =
          (((destPixel >>> 24) & 255 & 255) << 24) |
          ((value1 & 255) << 16) |
          (((destPixel >>> 8) & 255 & 255) << 8) |
          (destPixel & 255 & 255);
        var value2 =
          ((((sourcePixel >>> 8) & 255) * blueMultiplier +
            ((destPixel >>> 8) & 255) * (256 - blueMultiplier)) /
            256) |
          0;
        destPixel =
          (((destPixel >>> 24) & 255 & 255) << 24) |
          (((destPixel >>> 16) & 255 & 255) << 16) |
          ((value2 & 255) << 8) |
          (destPixel & 255 & 255);
        var value3 =
          (((sourcePixel & 255) * alphaMultiplier +
            (destPixel & 255) * (256 - alphaMultiplier)) /
            256) |
          0;
        destPixel =
          (((destPixel >>> 24) & 255 & 255) << 24) |
          (((destPixel >>> 16) & 255 & 255) << 16) |
          (((destPixel >>> 8) & 255 & 255) << 8) |
          (value3 & 255);
        if (destPremultiplied) {
          if ((destPixel & 255) == 0) {
            if (destPixel != 0) {
              destPixel = 0;
            }
          } else if ((destPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
              lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
            destPixel =
              ((((((destPixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                24) |
              ((((((destPixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                16) |
              ((((((destPixel >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                8) |
              (destPixel & 255 & 255);
          }
        }
        switch (destFormat) {
          case 0:
            destData[destPosition] = (destPixel >>> 24) & 255;
            destData[destPosition + 1] = (destPixel >>> 16) & 255;
            destData[destPosition + 2] = (destPixel >>> 8) & 255;
            destData[destPosition + 3] = destPixel & 255;
            break;
          case 1:
            destData[destPosition] = destPixel & 255;
            destData[destPosition + 1] = (destPixel >>> 24) & 255;
            destData[destPosition + 2] = (destPixel >>> 16) & 255;
            destData[destPosition + 3] = (destPixel >>> 8) & 255;
            break;
          case 2:
            destData[destPosition] = (destPixel >>> 8) & 255;
            destData[destPosition + 1] = (destPixel >>> 16) & 255;
            destData[destPosition + 2] = (destPixel >>> 24) & 255;
            destData[destPosition + 3] = destPixel & 255;
            break;
        }
        sourcePosition += 4;
        destPosition += 4;
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.multiplyAlpha = function (image) {
    var data = image.buffer.data;
    if (data == null || !image.buffer.transparent) {
      return;
    }
    var format = image.buffer.format;
    var length = (data.length / 4) | 0;
    var pixel;
    var _g1 = 0;
    var _g = length;
    while (_g1 < _g) {
      var i = _g1++;
      var offset = i * 4;
      switch (format) {
        case 0:
          pixel =
            ((data[offset] & 255) << 24) |
            ((data[offset + 1] & 255) << 16) |
            ((data[offset + 2] & 255) << 8) |
            (data[offset + 3] & 255);
          break;
        case 1:
          pixel =
            ((data[offset + 1] & 255) << 24) |
            ((data[offset + 2] & 255) << 16) |
            ((data[offset + 3] & 255) << 8) |
            (data[offset] & 255);
          break;
        case 2:
          pixel =
            ((data[offset + 2] & 255) << 24) |
            ((data[offset + 1] & 255) << 16) |
            ((data[offset] & 255) << 8) |
            (data[offset + 3] & 255);
          break;
      }
      var offset1 = i * 4;
      if ((pixel & 255) == 0) {
        if (pixel != 0) {
          pixel = 0;
        }
      } else if ((pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
        pixel =
          ((((((pixel >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((pixel >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((pixel >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
      switch (format) {
        case 0:
          data[offset1] = (pixel >>> 24) & 255;
          data[offset1 + 1] = (pixel >>> 16) & 255;
          data[offset1 + 2] = (pixel >>> 8) & 255;
          data[offset1 + 3] = pixel & 255;
          break;
        case 1:
          data[offset1] = pixel & 255;
          data[offset1 + 1] = (pixel >>> 24) & 255;
          data[offset1 + 2] = (pixel >>> 16) & 255;
          data[offset1 + 3] = (pixel >>> 8) & 255;
          break;
        case 2:
          data[offset1] = (pixel >>> 8) & 255;
          data[offset1 + 1] = (pixel >>> 16) & 255;
          data[offset1 + 2] = (pixel >>> 24) & 255;
          data[offset1 + 3] = pixel & 255;
          break;
      }
    }
    image.buffer.premultiplied = true;
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.resize = function (
    image,
    newWidth,
    newHeight
  ) {
    var buffer = image.buffer;
    if (buffer.width == newWidth && buffer.height == newHeight) {
      return;
    }
    var elements = newWidth * newHeight * 4;
    var this1;
    if (elements != null) {
      this1 = new Uint8Array(elements);
    } else {
      this1 = null;
    }
    var newBuffer = new lime_graphics_ImageBuffer(this1, newWidth, newHeight);
    var imageWidth = image.width;
    var imageHeight = image.height;
    var data = image.get_data();
    var newData = newBuffer.data;
    var sourceIndex;
    var sourceIndexX;
    var sourceIndexY;
    var sourceIndexXY;
    var index;
    var sourceX;
    var sourceY;
    var u;
    var v;
    var uRatio;
    var vRatio;
    var uOpposite;
    var vOpposite;
    var _g1 = 0;
    var _g = newHeight;
    while (_g1 < _g) {
      var y = _g1++;
      var _g3 = 0;
      var _g2 = newWidth;
      while (_g3 < _g2) {
        var x = _g3++;
        u = ((x + 0.5) / newWidth) * imageWidth - 0.5;
        v = ((y + 0.5) / newHeight) * imageHeight - 0.5;
        sourceX = u | 0;
        sourceY = v | 0;
        sourceIndex = (sourceY * imageWidth + sourceX) * 4;
        if (sourceX < imageWidth - 1) {
          sourceIndexX = sourceIndex + 4;
        } else {
          sourceIndexX = sourceIndex;
        }
        if (sourceY < imageHeight - 1) {
          sourceIndexY = sourceIndex + imageWidth * 4;
        } else {
          sourceIndexY = sourceIndex;
        }
        if (sourceIndexX != sourceIndex) {
          sourceIndexXY = sourceIndexY + 4;
        } else {
          sourceIndexXY = sourceIndexY;
        }
        index = (y * newWidth + x) * 4;
        uRatio = u - sourceX;
        vRatio = v - sourceY;
        uOpposite = 1 - uRatio;
        vOpposite = 1 - vRatio;
        newData[index] =
          ((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite +
            _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) *
            vOpposite +
            (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite +
              _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) *
              vRatio) |
          0;
        newData[index + 1] =
          ((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite +
            _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) *
            vOpposite +
            (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite +
              _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) *
              vRatio) |
          0;
        newData[index + 2] =
          ((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite +
            _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) *
            vOpposite +
            (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite +
              _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) *
              vRatio) |
          0;
        if (
          data[sourceIndexX + 3] == 0 ||
          data[sourceIndexY + 3] == 0 ||
          data[sourceIndexXY + 3] == 0
        ) {
          newData[index + 3] = 0;
        } else {
          newData[index + 3] = data[sourceIndex + 3];
        }
      }
    }
    buffer.data = newBuffer.data;
    buffer.width = newWidth;
    buffer.height = newHeight;
    buffer.__srcImage = null;
    buffer.__srcImageData = null;
    buffer.__srcCanvas = null;
    buffer.__srcContext = null;
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.resizeBuffer = function (
    image,
    newWidth,
    newHeight
  ) {
    var buffer = image.buffer;
    var data = image.get_data();
    var elements = newWidth * newHeight * 4;
    var this1;
    if (elements != null) {
      this1 = new Uint8Array(elements);
    } else {
      this1 = null;
    }
    var newData = this1;
    var sourceIndex;
    var index;
    var _g1 = 0;
    var _g = buffer.height;
    while (_g1 < _g) {
      var y = _g1++;
      var _g3 = 0;
      var _g2 = buffer.width;
      while (_g3 < _g2) {
        var x = _g3++;
        sourceIndex = (y * buffer.width + x) * 4;
        index = (y * newWidth + x) * 4;
        newData[index] = data[sourceIndex];
        newData[index + 1] = data[sourceIndex + 1];
        newData[index + 2] = data[sourceIndex + 2];
        newData[index + 3] = data[sourceIndex + 3];
      }
    }
    buffer.data = newData;
    buffer.width = newWidth;
    buffer.height = newHeight;
  };
  lime_graphics_utils_ImageDataUtil.setFormat = function (image, format) {
    var data = image.buffer.data;
    if (data == null) {
      return;
    }
    var index;
    var a16;
    var length = (data.length / 4) | 0;
    var r1;
    var g1;
    var b1;
    var a1;
    var r2;
    var g2;
    var b2;
    var a2;
    var r;
    var g;
    var b;
    var a;
    var _g = image.get_format();
    switch (_g) {
      case 0:
        r1 = 0;
        g1 = 1;
        b1 = 2;
        a1 = 3;
        break;
      case 1:
        r1 = 1;
        g1 = 2;
        b1 = 3;
        a1 = 0;
        break;
      case 2:
        r1 = 2;
        g1 = 1;
        b1 = 0;
        a1 = 3;
        break;
    }
    switch (format) {
      case 0:
        r2 = 0;
        g2 = 1;
        b2 = 2;
        a2 = 3;
        break;
      case 1:
        r2 = 1;
        g2 = 2;
        b2 = 3;
        a2 = 0;
        break;
      case 2:
        r2 = 2;
        g2 = 1;
        b2 = 0;
        a2 = 3;
        break;
    }
    var _g2 = 0;
    var _g1 = length;
    while (_g2 < _g1) {
      var i = _g2++;
      index = i * 4;
      r = data[index + r1];
      g = data[index + g1];
      b = data[index + b1];
      a = data[index + a1];
      data[index + r2] = r;
      data[index + g2] = g;
      data[index + b2] = b;
      data[index + a2] = a;
    }
    image.buffer.format = format;
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.setPixel = function (
    image,
    x,
    y,
    color,
    format
  ) {
    var pixel;
    switch (format) {
      case 1:
        var argb = color;
        var this1 = 0;
        var rgba = this1;
        rgba =
          (((argb >>> 16) & 255 & 255) << 24) |
          (((argb >>> 8) & 255 & 255) << 16) |
          ((argb & 255 & 255) << 8) |
          ((argb >>> 24) & 255 & 255);
        pixel = rgba;
        break;
      case 2:
        var bgra = color;
        var this2 = 0;
        var rgba1 = this2;
        rgba1 =
          (((bgra >>> 8) & 255 & 255) << 24) |
          (((bgra >>> 16) & 255 & 255) << 16) |
          (((bgra >>> 24) & 255 & 255) << 8) |
          (bgra & 255 & 255);
        pixel = rgba1;
        break;
      default:
        pixel = color;
    }
    var this3 = 0;
    var source = this3;
    var data = image.buffer.data;
    var offset =
      4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
    var premultiplied = image.buffer.premultiplied;
    switch (image.buffer.format) {
      case 0:
        source =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        source =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        source =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((source & 255) != 0 && (source & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
        source =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((source >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((source >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((source >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (source & 255 & 255);
      }
    }
    var value = source & 255;
    pixel =
      (((pixel >>> 24) & 255 & 255) << 24) |
      (((pixel >>> 16) & 255 & 255) << 16) |
      (((pixel >>> 8) & 255 & 255) << 8) |
      (value & 255);
    var data1 = image.buffer.data;
    var offset1 =
      4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
    if (image.buffer.premultiplied) {
      if ((pixel & 255) == 0) {
        if (pixel != 0) {
          pixel = 0;
        }
      } else if ((pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
        pixel =
          ((((((pixel >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((pixel >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((pixel >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
    }
    switch (image.buffer.format) {
      case 0:
        data1[offset1] = (pixel >>> 24) & 255;
        data1[offset1 + 1] = (pixel >>> 16) & 255;
        data1[offset1 + 2] = (pixel >>> 8) & 255;
        data1[offset1 + 3] = pixel & 255;
        break;
      case 1:
        data1[offset1] = pixel & 255;
        data1[offset1 + 1] = (pixel >>> 24) & 255;
        data1[offset1 + 2] = (pixel >>> 16) & 255;
        data1[offset1 + 3] = (pixel >>> 8) & 255;
        break;
      case 2:
        data1[offset1] = (pixel >>> 8) & 255;
        data1[offset1 + 1] = (pixel >>> 16) & 255;
        data1[offset1 + 2] = (pixel >>> 24) & 255;
        data1[offset1 + 3] = pixel & 255;
        break;
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.setPixel32 = function (
    image,
    x,
    y,
    color,
    format
  ) {
    var pixel;
    switch (format) {
      case 1:
        var argb = color;
        var this1 = 0;
        var rgba = this1;
        rgba =
          (((argb >>> 16) & 255 & 255) << 24) |
          (((argb >>> 8) & 255 & 255) << 16) |
          ((argb & 255 & 255) << 8) |
          ((argb >>> 24) & 255 & 255);
        pixel = rgba;
        break;
      case 2:
        var bgra = color;
        var this2 = 0;
        var rgba1 = this2;
        rgba1 =
          (((bgra >>> 8) & 255 & 255) << 24) |
          (((bgra >>> 16) & 255 & 255) << 16) |
          (((bgra >>> 24) & 255 & 255) << 8) |
          (bgra & 255 & 255);
        pixel = rgba1;
        break;
      default:
        pixel = color;
    }
    if (!image.get_transparent()) {
      pixel =
        (((pixel >>> 24) & 255 & 255) << 24) |
        (((pixel >>> 16) & 255 & 255) << 16) |
        (((pixel >>> 8) & 255 & 255) << 8) |
        255;
    }
    var data = image.buffer.data;
    var offset =
      4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
    if (image.buffer.premultiplied) {
      if ((pixel & 255) == 0) {
        if (pixel != 0) {
          pixel = 0;
        }
      } else if ((pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
        pixel =
          ((((((pixel >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((pixel >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((pixel >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
    }
    switch (image.buffer.format) {
      case 0:
        data[offset] = (pixel >>> 24) & 255;
        data[offset + 1] = (pixel >>> 16) & 255;
        data[offset + 2] = (pixel >>> 8) & 255;
        data[offset + 3] = pixel & 255;
        break;
      case 1:
        data[offset] = pixel & 255;
        data[offset + 1] = (pixel >>> 24) & 255;
        data[offset + 2] = (pixel >>> 16) & 255;
        data[offset + 3] = (pixel >>> 8) & 255;
        break;
      case 2:
        data[offset] = (pixel >>> 8) & 255;
        data[offset + 1] = (pixel >>> 16) & 255;
        data[offset + 2] = (pixel >>> 24) & 255;
        data[offset + 3] = pixel & 255;
        break;
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.setPixels = function (
    image,
    rect,
    bytes,
    format
  ) {
    if (image.buffer.data == null) {
      return;
    }
    var data = image.buffer.data;
    var sourceFormat = image.buffer.format;
    var premultiplied = image.buffer.premultiplied;
    var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      rect
    );
    var row;
    var color;
    var pixel;
    var transparent = image.get_transparent();
    var dataPosition = 0;
    var _g1 = 0;
    var _g = dataView.height;
    while (_g1 < _g) {
      var y = _g1++;
      row = dataView.offset + dataView.stride * y;
      var _g3 = 0;
      var _g2 = dataView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        color =
          bytes.b[dataPosition + 3] |
          (bytes.b[dataPosition + 2] << 8) |
          (bytes.b[dataPosition + 1] << 16) |
          (bytes.b[dataPosition] << 24);
        dataPosition += 4;
        switch (format) {
          case 1:
            var argb = color;
            var this1 = 0;
            var rgba = this1;
            rgba =
              (((argb >>> 16) & 255 & 255) << 24) |
              (((argb >>> 8) & 255 & 255) << 16) |
              ((argb & 255 & 255) << 8) |
              ((argb >>> 24) & 255 & 255);
            pixel = rgba;
            break;
          case 2:
            var bgra = color;
            var this2 = 0;
            var rgba1 = this2;
            rgba1 =
              (((bgra >>> 8) & 255 & 255) << 24) |
              (((bgra >>> 16) & 255 & 255) << 16) |
              (((bgra >>> 24) & 255 & 255) << 8) |
              (bgra & 255 & 255);
            pixel = rgba1;
            break;
          default:
            pixel = color;
        }
        if (!transparent) {
          pixel =
            (((pixel >>> 24) & 255 & 255) << 24) |
            (((pixel >>> 16) & 255 & 255) << 16) |
            (((pixel >>> 8) & 255 & 255) << 8) |
            255;
        }
        var offset = row + x * 4;
        if (premultiplied) {
          if ((pixel & 255) == 0) {
            if (pixel != 0) {
              pixel = 0;
            }
          } else if ((pixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
              lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
            pixel =
              ((((((pixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                24) |
              ((((((pixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                16) |
              ((((((pixel >>> 8) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                16) &
                255) <<
                8) |
              (pixel & 255 & 255);
          }
        }
        switch (sourceFormat) {
          case 0:
            data[offset] = (pixel >>> 24) & 255;
            data[offset + 1] = (pixel >>> 16) & 255;
            data[offset + 2] = (pixel >>> 8) & 255;
            data[offset + 3] = pixel & 255;
            break;
          case 1:
            data[offset] = pixel & 255;
            data[offset + 1] = (pixel >>> 24) & 255;
            data[offset + 2] = (pixel >>> 16) & 255;
            data[offset + 3] = (pixel >>> 8) & 255;
            break;
          case 2:
            data[offset] = (pixel >>> 8) & 255;
            data[offset + 1] = (pixel >>> 16) & 255;
            data[offset + 2] = (pixel >>> 24) & 255;
            data[offset + 3] = pixel & 255;
            break;
        }
      }
    }
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.threshold = function (
    image,
    sourceImage,
    sourceRect,
    destPoint,
    operation,
    threshold,
    color,
    mask,
    copySource,
    format
  ) {
    var _color;
    var _mask;
    var _threshold;
    switch (format) {
      case 1:
        var argb = color;
        var this1 = 0;
        var rgba = this1;
        rgba =
          (((argb >>> 16) & 255 & 255) << 24) |
          (((argb >>> 8) & 255 & 255) << 16) |
          ((argb & 255 & 255) << 8) |
          ((argb >>> 24) & 255 & 255);
        _color = rgba;
        var argb1 = mask;
        var this2 = 0;
        var rgba1 = this2;
        rgba1 =
          (((argb1 >>> 16) & 255 & 255) << 24) |
          (((argb1 >>> 8) & 255 & 255) << 16) |
          ((argb1 & 255 & 255) << 8) |
          ((argb1 >>> 24) & 255 & 255);
        _mask = rgba1;
        var argb2 = threshold;
        var this3 = 0;
        var rgba2 = this3;
        rgba2 =
          (((argb2 >>> 16) & 255 & 255) << 24) |
          (((argb2 >>> 8) & 255 & 255) << 16) |
          ((argb2 & 255 & 255) << 8) |
          ((argb2 >>> 24) & 255 & 255);
        _threshold = rgba2;
        break;
      case 2:
        var bgra = color;
        var this4 = 0;
        var rgba3 = this4;
        rgba3 =
          (((bgra >>> 8) & 255 & 255) << 24) |
          (((bgra >>> 16) & 255 & 255) << 16) |
          (((bgra >>> 24) & 255 & 255) << 8) |
          (bgra & 255 & 255);
        _color = rgba3;
        var bgra1 = mask;
        var this5 = 0;
        var rgba4 = this5;
        rgba4 =
          (((bgra1 >>> 8) & 255 & 255) << 24) |
          (((bgra1 >>> 16) & 255 & 255) << 16) |
          (((bgra1 >>> 24) & 255 & 255) << 8) |
          (bgra1 & 255 & 255);
        _mask = rgba4;
        var bgra2 = threshold;
        var this6 = 0;
        var rgba5 = this6;
        rgba5 =
          (((bgra2 >>> 8) & 255 & 255) << 24) |
          (((bgra2 >>> 16) & 255 & 255) << 16) |
          (((bgra2 >>> 24) & 255 & 255) << 8) |
          (bgra2 & 255 & 255);
        _threshold = rgba5;
        break;
      default:
        _color = color;
        _mask = mask;
        _threshold = threshold;
    }
    var _operation;
    switch (operation) {
      case "!=":
        _operation = 0;
        break;
      case "<":
        _operation = 2;
        break;
      case "<=":
        _operation = 3;
        break;
      case "==":
        _operation = 1;
        break;
      case ">":
        _operation = 4;
        break;
      case ">=":
        _operation = 5;
        break;
      default:
        _operation = -1;
    }
    if (_operation == -1) {
      return 0;
    }
    var srcData = sourceImage.buffer.data;
    var destData = image.buffer.data;
    if (srcData == null || destData == null) {
      return 0;
    }
    var hits = 0;
    var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      sourceImage,
      sourceRect
    );
    var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(
      image,
      new lime_math_Rectangle(
        destPoint.x,
        destPoint.y,
        srcView.width,
        srcView.height
      )
    );
    var srcFormat = sourceImage.buffer.format;
    var destFormat = image.buffer.format;
    var srcPremultiplied = sourceImage.buffer.premultiplied;
    var destPremultiplied = image.buffer.premultiplied;
    var srcPosition;
    var destPosition;
    var srcPixel;
    var destPixel;
    var pixelMask;
    var test;
    var value;
    var _g1 = 0;
    var _g = destView.height;
    while (_g1 < _g) {
      var y = _g1++;
      srcPosition = srcView.offset + srcView.stride * y;
      destPosition = destView.offset + destView.stride * y;
      var _g3 = 0;
      var _g2 = destView.width;
      while (_g3 < _g2) {
        var x = _g3++;
        switch (srcFormat) {
          case 0:
            srcPixel =
              ((srcData[srcPosition] & 255) << 24) |
              ((srcData[srcPosition + 1] & 255) << 16) |
              ((srcData[srcPosition + 2] & 255) << 8) |
              (srcData[srcPosition + 3] & 255);
            break;
          case 1:
            srcPixel =
              ((srcData[srcPosition + 1] & 255) << 24) |
              ((srcData[srcPosition + 2] & 255) << 16) |
              ((srcData[srcPosition + 3] & 255) << 8) |
              (srcData[srcPosition] & 255);
            break;
          case 2:
            srcPixel =
              ((srcData[srcPosition + 2] & 255) << 24) |
              ((srcData[srcPosition + 1] & 255) << 16) |
              ((srcData[srcPosition] & 255) << 8) |
              (srcData[srcPosition + 3] & 255);
            break;
        }
        if (srcPremultiplied) {
          if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult =
              255.0 / (srcPixel & 255);
            srcPixel =
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 24) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                24) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 16) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                16) |
              ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
                Math.round(
                  ((srcPixel >>> 8) & 255) *
                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult
                )
              ] &
                255) <<
                8) |
              (srcPixel & 255 & 255);
          }
        }
        pixelMask = srcPixel & _mask;
        var tmp1;
        var tmp2;
        tmp1 = (pixelMask >>> 24) & 255;
        tmp2 = (_threshold >>> 24) & 255;
        if (tmp1 != tmp2) {
          if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
            value = 1;
          } else {
            value = -1;
          }
        } else {
          tmp1 = (pixelMask >>> 16) & 255;
          tmp2 = (_threshold >>> 16) & 255;
          if (tmp1 != tmp2) {
            if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
              value = 1;
            } else {
              value = -1;
            }
          } else {
            tmp1 = (pixelMask >>> 8) & 255;
            tmp2 = (_threshold >>> 8) & 255;
            if (tmp1 != tmp2) {
              if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                value = 1;
              } else {
                value = -1;
              }
            } else {
              tmp1 = pixelMask & 255;
              tmp2 = _threshold & 255;
              if (tmp1 != tmp2) {
                if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                  value = 1;
                } else {
                  value = -1;
                }
              } else {
                value = 0;
              }
            }
          }
        }
        switch (_operation) {
          case 0:
            test = value != 0;
            break;
          case 1:
            test = value == 0;
            break;
          case 2:
            test = value == -1;
            break;
          case 3:
            if (value != 0) {
              test = value == -1;
            } else {
              test = true;
            }
            break;
          case 4:
            test = value == 1;
            break;
          case 5:
            if (value != 0) {
              test = value == 1;
            } else {
              test = true;
            }
            break;
          default:
            test = false;
        }
        if (test) {
          if (destPremultiplied) {
            if ((_color & 255) == 0) {
              if (_color != 0) {
                _color = 0;
              }
            } else if ((_color & 255) != 255) {
              lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
              _color =
                ((((((_color >>> 24) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  24) |
                ((((((_color >>> 16) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  16) |
                ((((((_color >>> 8) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  8) |
                (_color & 255 & 255);
            }
          }
          switch (destFormat) {
            case 0:
              destData[destPosition] = (_color >>> 24) & 255;
              destData[destPosition + 1] = (_color >>> 16) & 255;
              destData[destPosition + 2] = (_color >>> 8) & 255;
              destData[destPosition + 3] = _color & 255;
              break;
            case 1:
              destData[destPosition] = _color & 255;
              destData[destPosition + 1] = (_color >>> 24) & 255;
              destData[destPosition + 2] = (_color >>> 16) & 255;
              destData[destPosition + 3] = (_color >>> 8) & 255;
              break;
            case 2:
              destData[destPosition] = (_color >>> 8) & 255;
              destData[destPosition + 1] = (_color >>> 16) & 255;
              destData[destPosition + 2] = (_color >>> 24) & 255;
              destData[destPosition + 3] = _color & 255;
              break;
          }
          ++hits;
        } else if (copySource) {
          if (destPremultiplied) {
            if ((srcPixel & 255) == 0) {
              if (srcPixel != 0) {
                srcPixel = 0;
              }
            } else if ((srcPixel & 255) != 255) {
              lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
                lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
              srcPixel =
                ((((((srcPixel >>> 24) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  24) |
                ((((((srcPixel >>> 16) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  16) |
                ((((((srcPixel >>> 8) & 255) *
                  lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
                  16) &
                  255) <<
                  8) |
                (srcPixel & 255 & 255);
            }
          }
          switch (destFormat) {
            case 0:
              destData[destPosition] = (srcPixel >>> 24) & 255;
              destData[destPosition + 1] = (srcPixel >>> 16) & 255;
              destData[destPosition + 2] = (srcPixel >>> 8) & 255;
              destData[destPosition + 3] = srcPixel & 255;
              break;
            case 1:
              destData[destPosition] = srcPixel & 255;
              destData[destPosition + 1] = (srcPixel >>> 24) & 255;
              destData[destPosition + 2] = (srcPixel >>> 16) & 255;
              destData[destPosition + 3] = (srcPixel >>> 8) & 255;
              break;
            case 2:
              destData[destPosition] = (srcPixel >>> 8) & 255;
              destData[destPosition + 1] = (srcPixel >>> 16) & 255;
              destData[destPosition + 2] = (srcPixel >>> 24) & 255;
              destData[destPosition + 3] = srcPixel & 255;
              break;
          }
        }
        srcPosition += 4;
        destPosition += 4;
      }
    }
    if (hits > 0) {
      image.dirty = true;
      image.version++;
    }
    return hits;
  };
  lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function (image) {
    var data = image.buffer.data;
    if (data == null) {
      return;
    }
    var format = image.buffer.format;
    var length = (data.length / 4) | 0;
    var pixel;
    var _g1 = 0;
    var _g = length;
    while (_g1 < _g) {
      var i = _g1++;
      var offset = i * 4;
      switch (format) {
        case 0:
          pixel =
            ((data[offset] & 255) << 24) |
            ((data[offset + 1] & 255) << 16) |
            ((data[offset + 2] & 255) << 8) |
            (data[offset + 3] & 255);
          break;
        case 1:
          pixel =
            ((data[offset + 1] & 255) << 24) |
            ((data[offset + 2] & 255) << 16) |
            ((data[offset + 3] & 255) << 8) |
            (data[offset] & 255);
          break;
        case 2:
          pixel =
            ((data[offset + 2] & 255) << 24) |
            ((data[offset + 1] & 255) << 16) |
            ((data[offset] & 255) << 8) |
            (data[offset + 3] & 255);
          break;
      }
      if ((pixel & 255) != 0 && (pixel & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
        pixel =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((pixel >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (pixel & 255 & 255);
      }
      var offset1 = i * 4;
      switch (format) {
        case 0:
          data[offset1] = (pixel >>> 24) & 255;
          data[offset1 + 1] = (pixel >>> 16) & 255;
          data[offset1 + 2] = (pixel >>> 8) & 255;
          data[offset1 + 3] = pixel & 255;
          break;
        case 1:
          data[offset1] = pixel & 255;
          data[offset1 + 1] = (pixel >>> 24) & 255;
          data[offset1 + 2] = (pixel >>> 16) & 255;
          data[offset1 + 3] = (pixel >>> 8) & 255;
          break;
        case 2:
          data[offset1] = (pixel >>> 8) & 255;
          data[offset1 + 1] = (pixel >>> 16) & 255;
          data[offset1 + 2] = (pixel >>> 24) & 255;
          data[offset1 + 3] = pixel & 255;
          break;
      }
    }
    image.buffer.premultiplied = false;
    image.dirty = true;
    image.version++;
  };
  lime_graphics_utils_ImageDataUtil.__pixelCompare = function (n1, n2) {
    var tmp1;
    var tmp2;
    tmp1 = (n1 >>> 24) & 255;
    tmp2 = (n2 >>> 24) & 255;
    if (tmp1 != tmp2) {
      if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
        return 1;
      } else {
        return -1;
      }
    } else {
      tmp1 = (n1 >>> 16) & 255;
      tmp2 = (n2 >>> 16) & 255;
      if (tmp1 != tmp2) {
        if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
          return 1;
        } else {
          return -1;
        }
      } else {
        tmp1 = (n1 >>> 8) & 255;
        tmp2 = (n2 >>> 8) & 255;
        if (tmp1 != tmp2) {
          if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
            return 1;
          } else {
            return -1;
          }
        } else {
          tmp1 = n1 & 255;
          tmp2 = n2 & 255;
          if (tmp1 != tmp2) {
            if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
              return 1;
            } else {
              return -1;
            }
          } else {
            return 0;
          }
        }
      }
    }
  };
  var lime_graphics_utils__$ImageDataUtil_ImageDataView = function (
    image,
    rect
  ) {
    this.image = image;
    if (rect == null) {
      this.rect = image.get_rect();
    } else {
      if (rect.x < 0) {
        rect.x = 0;
      }
      if (rect.y < 0) {
        rect.y = 0;
      }
      if (rect.x + rect.width > image.width) {
        rect.width = image.width - rect.x;
      }
      if (rect.y + rect.height > image.height) {
        rect.height = image.height - rect.y;
      }
      if (rect.width < 0) {
        rect.width = 0;
      }
      if (rect.height < 0) {
        rect.height = 0;
      }
      this.rect = rect;
    }
    this.stride = image.buffer.get_stride();
    this.x = Math.ceil(this.rect.x);
    this.y = Math.ceil(this.rect.y);
    this.width = Math.floor(this.rect.width);
    this.height = Math.floor(this.rect.height);
    this.offset =
      this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
  };
  $hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] =
    lime_graphics_utils__$ImageDataUtil_ImageDataView;
  lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = [
    "lime",
    "graphics",
    "utils",
    "_ImageDataUtil",
    "ImageDataView",
  ];
  lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
    x: null,
    y: null,
    height: null,
    width: null,
    image: null,
    offset: null,
    rect: null,
    stride: null,
    clip: function (x, y, width, height) {
      this.rect.__contract(x, y, width, height);
      this.x = Math.ceil(this.rect.x);
      this.y = Math.ceil(this.rect.y);
      this.width = Math.floor(this.rect.width);
      this.height = Math.floor(this.rect.height);
      this.offset =
        this.stride * (this.y + this.image.offsetY) +
        (this.x + this.image.offsetX) * 4;
    },
    row: function (y) {
      return this.offset + this.stride * y;
    },
    __class__: lime_graphics_utils__$ImageDataUtil_ImageDataView,
  };
  var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
  $hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] =
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = [
    "lime",
    "math",
    "_ColorMatrix",
    "ColorMatrix_Impl_",
  ];
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {
    set_redOffset: "set_redOffset",
    get_redOffset: "get_redOffset",
    set_redMultiplier: "set_redMultiplier",
    get_redMultiplier: "get_redMultiplier",
    set_greenOffset: "set_greenOffset",
    get_greenOffset: "get_greenOffset",
    set_greenMultiplier: "set_greenMultiplier",
    get_greenMultiplier: "get_greenMultiplier",
    set_color: "set_color",
    get_color: "get_color",
    set_blueOffset: "set_blueOffset",
    get_blueOffset: "get_blueOffset",
    set_blueMultiplier: "set_blueMultiplier",
    get_blueMultiplier: "get_blueMultiplier",
    set_alphaOffset: "set_alphaOffset",
    get_alphaOffset: "get_alphaOffset",
    set_alphaMultiplier: "set_alphaMultiplier",
    get_alphaMultiplier: "get_alphaMultiplier",
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function (data) {
    var this1;
    if (data != null && data.length == 20) {
      this1 = data;
    } else {
      var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
      var this2;
      if (array != null) {
        this2 = new Float32Array(array);
      } else {
        this2 = null;
      }
      this1 = this2;
    }
    return this1;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function (this1) {
    var this2;
    if (this1 != null) {
      this2 = new Float32Array(this1);
    } else {
      this2 = null;
    }
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function (
    this1,
    second
  ) {
    var _g = this1;
    _g[0] += second[0];
    var _g1 = this1;
    _g1[6] += second[6];
    var _g2 = this1;
    _g2[12] += second[12];
    var _g3 = this1;
    _g3[18] += second[18];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function (
    this1,
    other
  ) {
    this1.set(other);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function (this1) {
    this1[0] = 1;
    this1[1] = 0;
    this1[2] = 0;
    this1[3] = 0;
    this1[4] = 0;
    this1[5] = 0;
    this1[6] = 1;
    this1[7] = 0;
    this1[8] = 0;
    this1[9] = 0;
    this1[10] = 0;
    this1[11] = 0;
    this1[12] = 1;
    this1[13] = 0;
    this1[14] = 0;
    this1[15] = 0;
    this1[16] = 0;
    this1[17] = 0;
    this1[18] = 1;
    this1[19] = 0;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function (this1) {
    if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
      var this2 = new Uint8Array(256);
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
    }
    var value;
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
    var _g = 1;
    while (_g < 256) {
      var i = _g++;
      value = Math.floor(i * this1[18] + this1[19] * 255);
      if (value > 255) {
        value = 255;
      }
      if (value < 0) {
        value = 0;
      }
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
    }
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function (this1) {
    if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
      var this2 = new Uint8Array(256);
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
    }
    var value;
    var _g = 0;
    while (_g < 256) {
      var i = _g++;
      value = Math.floor(i * this1[12] + this1[14] * 255);
      if (value > 255) {
        value = 255;
      }
      if (value < 0) {
        value = 0;
      }
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
    }
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function (this1) {
    if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
      var this2 = new Uint8Array(256);
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
    }
    var value;
    var _g = 0;
    while (_g < 256) {
      var i = _g++;
      value = Math.floor(i * this1[6] + this1[9] * 255);
      if (value > 255) {
        value = 255;
      }
      if (value < 0) {
        value = 0;
      }
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
    }
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function (this1) {
    if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
      var this2 = new Uint8Array(256);
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
    }
    var value;
    var _g = 0;
    while (_g < 256) {
      var i = _g++;
      value = Math.floor(i * this1[0] + this1[4] * 255);
      if (value > 255) {
        value = 255;
      }
      if (value < 0) {
        value = 0;
      }
      lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
    }
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform =
    function (this1) {
      return null;
    };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function (
    this1
  ) {
    return this1[18];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function (
    this1,
    value
  ) {
    return (this1[18] = value);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function (
    this1
  ) {
    return this1[19] * 255;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function (
    this1,
    value
  ) {
    return (this1[19] = value / 255);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function (
    this1
  ) {
    return this1[12];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function (
    this1,
    value
  ) {
    return (this1[12] = value);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function (
    this1
  ) {
    return this1[14] * 255;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function (
    this1,
    value
  ) {
    return (this1[14] = value / 255);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function (this1) {
    return (
      (((this1[4] * 255) | 0) << 16) |
      (((this1[9] * 255) | 0) << 8) |
      ((this1[14] * 255) | 0)
    );
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function (
    this1,
    value
  ) {
    this1[4] = ((value >> 16) & 255) / 255;
    this1[9] = ((value >> 8) & 255) / 255;
    this1[14] = (value & 255) / 255;
    this1[0] = 0;
    this1[6] = 0;
    this1[12] = 0;
    return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function (
    this1
  ) {
    return this1[6];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function (
    this1,
    value
  ) {
    return (this1[6] = value);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function (
    this1
  ) {
    return this1[9] * 255;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function (
    this1,
    value
  ) {
    return (this1[9] = value / 255);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function (
    this1
  ) {
    return this1[0];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function (
    this1,
    value
  ) {
    return (this1[0] = value);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function (this1) {
    return this1[4] * 255;
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function (
    this1,
    value
  ) {
    return (this1[4] = value / 255);
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function (this1, index) {
    return this1[index];
  };
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function (
    this1,
    index,
    value
  ) {
    return (this1[index] = value);
  };
  var lime_math_Matrix3 = function (a, b, c, d, tx, ty) {
    if (ty == null) {
      ty = 0;
    }
    if (tx == null) {
      tx = 0;
    }
    if (d == null) {
      d = 1;
    }
    if (c == null) {
      c = 0;
    }
    if (b == null) {
      b = 0;
    }
    if (a == null) {
      a = 1;
    }
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.tx = tx;
    this.ty = ty;
  };
  $hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
  lime_math_Matrix3.__name__ = ["lime", "math", "Matrix3"];
  lime_math_Matrix3.prototype = {
    a: null,
    b: null,
    c: null,
    d: null,
    tx: null,
    ty: null,
    clone: function () {
      return new lime_math_Matrix3(
        this.a,
        this.b,
        this.c,
        this.d,
        this.tx,
        this.ty
      );
    },
    concat: function (m) {
      var a1 = this.a * m.a + this.b * m.c;
      this.b = this.a * m.b + this.b * m.d;
      this.a = a1;
      var c1 = this.c * m.a + this.d * m.c;
      this.d = this.c * m.b + this.d * m.d;
      this.c = c1;
      var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
      this.ty = this.tx * m.b + this.ty * m.d + m.ty;
      this.tx = tx1;
    },
    copyColumnFrom: function (column, vector4) {
      if (column > 2) {
        throw new js__$Boot_HaxeError(
          "Column " + column + " out of bounds (2)"
        );
      } else if (column == 0) {
        this.a = vector4.x;
        this.c = vector4.y;
      } else if (column == 1) {
        this.b = vector4.x;
        this.d = vector4.y;
      } else {
        this.tx = vector4.x;
        this.ty = vector4.y;
      }
    },
    copyColumnTo: function (column, vector4) {
      if (column > 2) {
        throw new js__$Boot_HaxeError(
          "Column " + column + " out of bounds (2)"
        );
      } else if (column == 0) {
        vector4.x = this.a;
        vector4.y = this.c;
        vector4.z = 0;
      } else if (column == 1) {
        vector4.x = this.b;
        vector4.y = this.d;
        vector4.z = 0;
      } else {
        vector4.x = this.tx;
        vector4.y = this.ty;
        vector4.z = 1;
      }
    },
    copyFrom: function (sourceMatrix3) {
      this.a = sourceMatrix3.a;
      this.b = sourceMatrix3.b;
      this.c = sourceMatrix3.c;
      this.d = sourceMatrix3.d;
      this.tx = sourceMatrix3.tx;
      this.ty = sourceMatrix3.ty;
    },
    copyRowFrom: function (row, vector4) {
      if (row > 2) {
        throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
      } else if (row == 0) {
        this.a = vector4.x;
        this.c = vector4.y;
      } else if (row == 1) {
        this.b = vector4.x;
        this.d = vector4.y;
      } else {
        this.tx = vector4.x;
        this.ty = vector4.y;
      }
    },
    copyRowTo: function (row, vector4) {
      if (row > 2) {
        throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
      } else if (row == 0) {
        vector4.x = this.a;
        vector4.y = this.b;
        vector4.z = this.tx;
      } else if (row == 1) {
        vector4.x = this.c;
        vector4.y = this.d;
        vector4.z = this.ty;
      } else {
        vector4.x = 0;
        vector4.y = 0;
        vector4.z = 1;
      }
    },
    createBox: function (scaleX, scaleY, rotation, tx, ty) {
      if (ty == null) {
        ty = 0;
      }
      if (tx == null) {
        tx = 0;
      }
      if (rotation == null) {
        rotation = 0;
      }
      this.a = scaleX;
      this.d = scaleY;
      this.b = rotation;
      this.tx = tx;
      this.ty = ty;
    },
    createGradientBox: function (width, height, rotation, tx, ty) {
      if (ty == null) {
        ty = 0;
      }
      if (tx == null) {
        tx = 0;
      }
      if (rotation == null) {
        rotation = 0;
      }
      this.a = width / 1638.4;
      this.d = height / 1638.4;
      if (rotation != 0) {
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        this.b = sin * this.d;
        this.c = -sin * this.a;
        this.a *= cos;
        this.d *= cos;
      } else {
        this.b = 0;
        this.c = 0;
      }
      this.tx = tx + width / 2;
      this.ty = ty + height / 2;
    },
    equals: function (Matrix3) {
      if (
        Matrix3 != null &&
        this.tx == Matrix3.tx &&
        this.ty == Matrix3.ty &&
        this.a == Matrix3.a &&
        this.b == Matrix3.b &&
        this.c == Matrix3.c
      ) {
        return this.d == Matrix3.d;
      } else {
        return false;
      }
    },
    deltaTransformVector2: function (Vector2) {
      return new lime_math_Vector2(
        Vector2.x * this.a + Vector2.y * this.c,
        Vector2.x * this.b + Vector2.y * this.d
      );
    },
    identity: function () {
      this.a = 1;
      this.b = 0;
      this.c = 0;
      this.d = 1;
      this.tx = 0;
      this.ty = 0;
    },
    invert: function () {
      var norm = this.a * this.d - this.b * this.c;
      if (norm == 0) {
        this.a = this.b = this.c = this.d = 0;
        this.tx = -this.tx;
        this.ty = -this.ty;
      } else {
        norm = 1.0 / norm;
        var a1 = this.d * norm;
        this.d = this.a * norm;
        this.a = a1;
        this.b *= -norm;
        this.c *= -norm;
        var tx1 = -this.a * this.tx - this.c * this.ty;
        this.ty = -this.b * this.tx - this.d * this.ty;
        this.tx = tx1;
      }
      return this;
    },
    mult: function (m) {
      var result = new lime_math_Matrix3(
        this.a,
        this.b,
        this.c,
        this.d,
        this.tx,
        this.ty
      );
      result.concat(m);
      return result;
    },
    rotate: function (theta) {
      var cos = Math.cos(theta);
      var sin = Math.sin(theta);
      var a1 = this.a * cos - this.b * sin;
      this.b = this.a * sin + this.b * cos;
      this.a = a1;
      var c1 = this.c * cos - this.d * sin;
      this.d = this.c * sin + this.d * cos;
      this.c = c1;
      var tx1 = this.tx * cos - this.ty * sin;
      this.ty = this.tx * sin + this.ty * cos;
      this.tx = tx1;
    },
    scale: function (sx, sy) {
      this.a *= sx;
      this.b *= sy;
      this.c *= sx;
      this.d *= sy;
      this.tx *= sx;
      this.ty *= sy;
    },
    setRotation: function (theta, scale) {
      if (scale == null) {
        scale = 1;
      }
      this.a = Math.cos(theta) * scale;
      this.c = Math.sin(theta) * scale;
      this.b = -this.c;
      this.d = this.a;
    },
    setTo: function (a, b, c, d, tx, ty) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    },
    to3DString: function (roundPixels) {
      if (roundPixels == null) {
        roundPixels = false;
      }
      if (roundPixels) {
        return (
          "Matrix33d(" +
          this.a +
          ", " +
          this.b +
          ", " +
          "0, 0, " +
          this.c +
          ", " +
          this.d +
          ", " +
          "0, 0, 0, 0, 1, 0, " +
          (this.tx | 0) +
          ", " +
          (this.ty | 0) +
          ", 0, 1)"
        );
      } else {
        return (
          "Matrix33d(" +
          this.a +
          ", " +
          this.b +
          ", " +
          "0, 0, " +
          this.c +
          ", " +
          this.d +
          ", " +
          "0, 0, 0, 0, 1, 0, " +
          this.tx +
          ", " +
          this.ty +
          ", 0, 1)"
        );
      }
    },
    toMozString: function () {
      return (
        "Matrix3(" +
        this.a +
        ", " +
        this.b +
        ", " +
        this.c +
        ", " +
        this.d +
        ", " +
        this.tx +
        "px, " +
        this.ty +
        "px)"
      );
    },
    toString: function () {
      return (
        "Matrix3(" +
        this.a +
        ", " +
        this.b +
        ", " +
        this.c +
        ", " +
        this.d +
        ", " +
        this.tx +
        ", " +
        this.ty +
        ")"
      );
    },
    transformVector2: function (pos) {
      return new lime_math_Vector2(
        pos.x * this.a + pos.y * this.c + this.tx,
        pos.x * this.b + pos.y * this.d + this.ty
      );
    },
    translate: function (dx, dy) {
      this.tx += dx;
      this.ty += dy;
    },
    __cleanValues: function () {
      this.a = Math.round(this.a * 1000) / 1000;
      this.b = Math.round(this.b * 1000) / 1000;
      this.c = Math.round(this.c * 1000) / 1000;
      this.d = Math.round(this.d * 1000) / 1000;
      this.tx = Math.round(this.tx * 10) / 10;
      this.ty = Math.round(this.ty * 10) / 10;
    },
    __transformX: function (pos) {
      return pos.x * this.a + pos.y * this.c + this.tx;
    },
    __transformY: function (pos) {
      return pos.x * this.b + pos.y * this.d + this.ty;
    },
    __translateTransformed: function (pos) {
      this.tx = pos.x * this.a + pos.y * this.c + this.tx;
      this.ty = pos.x * this.b + pos.y * this.d + this.ty;
    },
    __class__: lime_math_Matrix3,
  };
  var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
  $hxClasses["lime.math._Matrix4.Matrix4_Impl_"] =
    lime_math__$Matrix4_Matrix4_$Impl_$;
  lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = [
    "lime",
    "math",
    "_Matrix4",
    "Matrix4_Impl_",
  ];
  lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {
    set_position: "set_position",
    get_position: "get_position",
    get_determinant: "get_determinant",
  };
  lime_math__$Matrix4_Matrix4_$Impl_$._new = function (data) {
    var this1;
    if (data != null && data.length == 16) {
      this1 = data;
    } else {
      var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
      var this2;
      if (array != null) {
        this2 = new Float32Array(array);
      } else {
        this2 = null;
      }
      this1 = this2;
    }
    return this1;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.append = function (this1, lhs) {
    var m111 = this1[0];
    var m121 = this1[4];
    var m131 = this1[8];
    var m141 = this1[12];
    var m112 = this1[1];
    var m122 = this1[5];
    var m132 = this1[9];
    var m142 = this1[13];
    var m113 = this1[2];
    var m123 = this1[6];
    var m133 = this1[10];
    var m143 = this1[14];
    var m114 = this1[3];
    var m124 = this1[7];
    var m134 = this1[11];
    var m144 = this1[15];
    var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 0);
    var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 4);
    var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 8);
    var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 12);
    var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 1);
    var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 5);
    var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 9);
    var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 13);
    var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 2);
    var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 6);
    var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 10);
    var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 14);
    var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 3);
    var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 7);
    var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 11);
    var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 15);
    this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
    this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
    this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
    this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
    this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
    this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
    this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
    this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
    this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
    this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
    this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
    this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
    this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
    this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
    this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
    this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function (
    this1,
    degrees,
    axis,
    pivotPoint
  ) {
    var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(
      axis.x,
      axis.y,
      axis.z,
      degrees
    );
    if (pivotPoint != null) {
      var p = pivotPoint;
      lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
    }
    lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, m);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function (
    this1,
    xScale,
    yScale,
    zScale
  ) {
    var array = [
      xScale,
      0.0,
      0.0,
      0.0,
      0.0,
      yScale,
      0.0,
      0.0,
      0.0,
      0.0,
      zScale,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
    ];
    var this2;
    if (array != null) {
      this2 = new Float32Array(array);
    } else {
      this2 = null;
    }
    lime_math__$Matrix4_Matrix4_$Impl_$.append(
      this1,
      lime_math__$Matrix4_Matrix4_$Impl_$._new(this2)
    );
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function (
    this1,
    x,
    y,
    z
  ) {
    this1[12] += x;
    this1[13] += y;
    this1[14] += z;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.clone = function (this1) {
    var this2;
    if (this1 != null) {
      this2 = new Float32Array(this1);
    } else {
      this2 = null;
    }
    return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function (
    this1,
    column,
    vector
  ) {
    switch (column) {
      case 0:
        this1[0] = vector.x;
        this1[1] = vector.y;
        this1[2] = vector.z;
        this1[3] = vector.w;
        break;
      case 1:
        this1[4] = vector.x;
        this1[5] = vector.y;
        this1[6] = vector.z;
        this1[7] = vector.w;
        break;
      case 2:
        this1[8] = vector.x;
        this1[9] = vector.y;
        this1[10] = vector.z;
        this1[11] = vector.w;
        break;
      case 3:
        this1[12] = vector.x;
        this1[13] = vector.y;
        this1[14] = vector.z;
        this1[15] = vector.w;
        break;
      default:
        throw new js__$Boot_HaxeError(
          "Error, Column " + column + " out of bounds [0, ..., 3]"
        );
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function (
    this1,
    column,
    vector
  ) {
    switch (column) {
      case 0:
        vector.x = this1[0];
        vector.y = this1[1];
        vector.z = this1[2];
        vector.w = this1[3];
        break;
      case 1:
        vector.x = this1[4];
        vector.y = this1[5];
        vector.z = this1[6];
        vector.w = this1[7];
        break;
      case 2:
        vector.x = this1[8];
        vector.y = this1[9];
        vector.z = this1[10];
        vector.w = this1[11];
        break;
      case 3:
        vector.x = this1[12];
        vector.y = this1[13];
        vector.z = this1[14];
        vector.w = this1[15];
        break;
      default:
        throw new js__$Boot_HaxeError(
          "Error, Column " + column + " out of bounds [0, ..., 3]"
        );
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function (this1, other) {
    this1.set(other);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function (
    this1,
    array,
    index,
    transposeValues
  ) {
    if (transposeValues == null) {
      transposeValues = false;
    }
    if (index == null) {
      index = 0;
    }
    if (transposeValues) {
      lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    }
    var l = array.length - index;
    var _g1 = 0;
    var _g = l;
    while (_g1 < _g) {
      var c = _g1++;
      this1[c] = array[c + index];
    }
    if (transposeValues) {
      lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function (
    this1,
    array,
    index,
    transposeValues
  ) {
    if (transposeValues == null) {
      transposeValues = false;
    }
    if (index == null) {
      index = 0;
    }
    if (transposeValues) {
      lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    }
    var l = this1.length;
    var _g1 = 0;
    var _g = l;
    while (_g1 < _g) {
      var c = _g1++;
      array[c + index] = this1[c];
    }
    if (transposeValues) {
      lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function (
    this1,
    row,
    vector
  ) {
    switch (row) {
      case 0:
        this1[0] = vector.x;
        this1[4] = vector.y;
        this1[8] = vector.z;
        this1[12] = vector.w;
        break;
      case 1:
        this1[1] = vector.x;
        this1[5] = vector.y;
        this1[9] = vector.z;
        this1[13] = vector.w;
        break;
      case 2:
        this1[2] = vector.x;
        this1[6] = vector.y;
        this1[10] = vector.z;
        this1[14] = vector.w;
        break;
      case 3:
        this1[3] = vector.x;
        this1[7] = vector.y;
        this1[11] = vector.z;
        this1[15] = vector.w;
        break;
      default:
        throw new js__$Boot_HaxeError(
          "Error, Row " + row + " out of bounds [0, ..., 3]"
        );
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function (
    x,
    y,
    scale,
    rotation
  ) {
    if (rotation == null) {
      rotation = 0;
    }
    if (scale == null) {
      scale = 1;
    }
    var theta = (rotation * Math.PI) / 180.0;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var array = [
      c * scale,
      -s * scale,
      0,
      0,
      s * scale,
      c * scale,
      0,
      0,
      0,
      0,
      1,
      0,
      x,
      y,
      0,
      1,
    ];
    var this1;
    if (array != null) {
      this1 = new Float32Array(array);
    } else {
      this1 = null;
    }
    return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function (
    a,
    b,
    c,
    d,
    tx,
    ty
  ) {
    var array = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
    var this1;
    if (array != null) {
      this1 = new Float32Array(array);
    } else {
      this1 = null;
    }
    return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function (
    x0,
    x1,
    y0,
    y1,
    zNear,
    zFar
  ) {
    var sx = 1.0 / (x1 - x0);
    var sy = 1.0 / (y1 - y0);
    var sz = 1.0 / (zFar - zNear);
    var array = [
      2.0 * sx,
      0,
      0,
      0,
      0,
      2.0 * sy,
      0,
      0,
      0,
      0,
      -2.0 * sz,
      0,
      -(x0 + x1) * sx,
      -(y0 + y1) * sy,
      -(zNear + zFar) * sz,
      1,
    ];
    var this1;
    if (array != null) {
      this1 = new Float32Array(array);
    } else {
      this1 = null;
    }
    return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function (
    this1,
    row,
    vector
  ) {
    switch (row) {
      case 0:
        vector.x = this1[0];
        vector.y = this1[4];
        vector.z = this1[8];
        vector.w = this1[12];
        break;
      case 1:
        vector.x = this1[1];
        vector.y = this1[5];
        vector.z = this1[9];
        vector.w = this1[13];
        break;
      case 2:
        vector.x = this1[2];
        vector.y = this1[6];
        vector.z = this1[10];
        vector.w = this1[14];
        break;
      case 3:
        vector.x = this1[3];
        vector.y = this1[7];
        vector.z = this1[11];
        vector.w = this1[15];
        break;
      default:
        throw new js__$Boot_HaxeError(
          "Error, Row " + row + " out of bounds [0, ..., 3]"
        );
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function (this1, other) {
    js_Boot.__cast(other, Float32Array).set(this1);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function (
    this1,
    v
  ) {
    var x = v.x;
    var y = v.y;
    var z = v.z;
    return new lime_math_Vector4(
      x * this1[0] + y * this1[4] + z * this1[8] + this1[3],
      x * this1[1] + y * this1[5] + z * this1[9] + this1[7],
      x * this1[2] + y * this1[6] + z * this1[10] + this1[11],
      0
    );
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.identity = function (this1) {
    this1[0] = 1;
    this1[1] = 0;
    this1[2] = 0;
    this1[3] = 0;
    this1[4] = 0;
    this1[5] = 1;
    this1[6] = 0;
    this1[7] = 0;
    this1[8] = 0;
    this1[9] = 0;
    this1[10] = 1;
    this1[11] = 0;
    this1[12] = 0;
    this1[13] = 0;
    this1[14] = 0;
    this1[15] = 1;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function (
    thisMat,
    toMat,
    percent
  ) {
    var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
    var _g = 0;
    while (_g < 16) {
      var i = _g++;
      lime_math__$Matrix4_Matrix4_$Impl_$.set(
        m,
        i,
        lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i) +
          (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) -
            lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i)) *
            percent
      );
    }
    return m;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function (
    this1,
    toMat,
    percent
  ) {
    var _g = 0;
    while (_g < 16) {
      var i = _g++;
      this1[i] +=
        (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - this1[i]) *
        percent;
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.invert = function (this1) {
    var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
    var invertable = Math.abs(d) > 0.00000000001;
    if (invertable) {
      d = 1 / d;
      var m11 = this1[0];
      var m21 = this1[4];
      var m31 = this1[8];
      var m41 = this1[12];
      var m12 = this1[1];
      var m22 = this1[5];
      var m32 = this1[9];
      var m42 = this1[13];
      var m13 = this1[2];
      var m23 = this1[6];
      var m33 = this1[10];
      var m43 = this1[14];
      var m14 = this1[3];
      var m24 = this1[7];
      var m34 = this1[11];
      var m44 = this1[15];
      this1[0] =
        d *
        (m22 * (m33 * m44 - m43 * m34) -
          m32 * (m23 * m44 - m43 * m24) +
          m42 * (m23 * m34 - m33 * m24));
      this1[1] =
        -d *
        (m12 * (m33 * m44 - m43 * m34) -
          m32 * (m13 * m44 - m43 * m14) +
          m42 * (m13 * m34 - m33 * m14));
      this1[2] =
        d *
        (m12 * (m23 * m44 - m43 * m24) -
          m22 * (m13 * m44 - m43 * m14) +
          m42 * (m13 * m24 - m23 * m14));
      this1[3] =
        -d *
        (m12 * (m23 * m34 - m33 * m24) -
          m22 * (m13 * m34 - m33 * m14) +
          m32 * (m13 * m24 - m23 * m14));
      this1[4] =
        -d *
        (m21 * (m33 * m44 - m43 * m34) -
          m31 * (m23 * m44 - m43 * m24) +
          m41 * (m23 * m34 - m33 * m24));
      this1[5] =
        d *
        (m11 * (m33 * m44 - m43 * m34) -
          m31 * (m13 * m44 - m43 * m14) +
          m41 * (m13 * m34 - m33 * m14));
      this1[6] =
        -d *
        (m11 * (m23 * m44 - m43 * m24) -
          m21 * (m13 * m44 - m43 * m14) +
          m41 * (m13 * m24 - m23 * m14));
      this1[7] =
        d *
        (m11 * (m23 * m34 - m33 * m24) -
          m21 * (m13 * m34 - m33 * m14) +
          m31 * (m13 * m24 - m23 * m14));
      this1[8] =
        d *
        (m21 * (m32 * m44 - m42 * m34) -
          m31 * (m22 * m44 - m42 * m24) +
          m41 * (m22 * m34 - m32 * m24));
      this1[9] =
        -d *
        (m11 * (m32 * m44 - m42 * m34) -
          m31 * (m12 * m44 - m42 * m14) +
          m41 * (m12 * m34 - m32 * m14));
      this1[10] =
        d *
        (m11 * (m22 * m44 - m42 * m24) -
          m21 * (m12 * m44 - m42 * m14) +
          m41 * (m12 * m24 - m22 * m14));
      this1[11] =
        -d *
        (m11 * (m22 * m34 - m32 * m24) -
          m21 * (m12 * m34 - m32 * m14) +
          m31 * (m12 * m24 - m22 * m14));
      this1[12] =
        -d *
        (m21 * (m32 * m43 - m42 * m33) -
          m31 * (m22 * m43 - m42 * m23) +
          m41 * (m22 * m33 - m32 * m23));
      this1[13] =
        d *
        (m11 * (m32 * m43 - m42 * m33) -
          m31 * (m12 * m43 - m42 * m13) +
          m41 * (m12 * m33 - m32 * m13));
      this1[14] =
        -d *
        (m11 * (m22 * m43 - m42 * m23) -
          m21 * (m12 * m43 - m42 * m13) +
          m41 * (m12 * m23 - m22 * m13));
      this1[15] =
        d *
        (m11 * (m22 * m33 - m32 * m23) -
          m21 * (m12 * m33 - m32 * m13) +
          m31 * (m12 * m23 - m22 * m13));
    }
    return invertable;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function (this1, pos, at, up) {
    if (at == null) {
      at = new lime_math_Vector4(0, 0, -1);
    }
    if (up == null) {
      up = new lime_math_Vector4(0, -1, 0);
    }
    var dir = new lime_math_Vector4(at.x - pos.x, at.y - pos.y, at.z - pos.z);
    var vup = new lime_math_Vector4(up.x, up.y, up.z, up.w);
    var right;
    var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
    if (l != 0) {
      dir.x /= l;
      dir.y /= l;
      dir.z /= l;
    }
    var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
    if (l1 != 0) {
      vup.x /= l1;
      vup.y /= l1;
      vup.z /= l1;
    }
    var dir2 = new lime_math_Vector4(dir.x, dir.y, dir.z, dir.w);
    var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
    dir2.x *= s;
    dir2.y *= s;
    dir2.z *= s;
    vup = new lime_math_Vector4(vup.x - dir2.x, vup.y - dir2.y, vup.z - dir2.z);
    if (Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
      var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
      if (l2 != 0) {
        vup.x /= l2;
        vup.y /= l2;
        vup.z /= l2;
      }
    } else if (dir.x != 0) {
      vup = new lime_math_Vector4(-dir.y, dir.x, 0);
    } else {
      vup = new lime_math_Vector4(1, 0, 0);
    }
    right = new lime_math_Vector4(
      vup.y * dir.z - vup.z * dir.y,
      vup.z * dir.x - vup.x * dir.z,
      vup.x * dir.y - vup.y * dir.x,
      1
    );
    var l3 = Math.sqrt(
      right.x * right.x + right.y * right.y + right.z * right.z
    );
    if (l3 != 0) {
      right.x /= l3;
      right.y /= l3;
      right.z /= l3;
    }
    this1[0] = right.x;
    this1[4] = right.y;
    this1[8] = right.z;
    this1[12] = 0.0;
    this1[1] = vup.x;
    this1[5] = vup.y;
    this1[9] = vup.z;
    this1[13] = 0.0;
    this1[2] = dir.x;
    this1[6] = dir.y;
    this1[10] = dir.z;
    this1[14] = 0.0;
    this1[3] = pos.x;
    this1[7] = pos.y;
    this1[11] = pos.z;
    this1[15] = 1.0;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function (this1, rhs) {
    var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 0);
    var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 4);
    var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 8);
    var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 12);
    var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 1);
    var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 5);
    var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 9);
    var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 13);
    var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 2);
    var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 6);
    var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 10);
    var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 14);
    var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 3);
    var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 7);
    var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 11);
    var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 15);
    var m211 = this1[0];
    var m221 = this1[4];
    var m231 = this1[8];
    var m241 = this1[12];
    var m212 = this1[1];
    var m222 = this1[5];
    var m232 = this1[9];
    var m242 = this1[13];
    var m213 = this1[2];
    var m223 = this1[6];
    var m233 = this1[10];
    var m243 = this1[14];
    var m214 = this1[3];
    var m224 = this1[7];
    var m234 = this1[11];
    var m244 = this1[15];
    this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
    this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
    this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
    this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
    this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
    this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
    this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
    this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
    this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
    this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
    this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
    this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
    this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
    this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
    this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
    this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function (
    this1,
    degrees,
    axis,
    pivotPoint
  ) {
    var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(
      axis.x,
      axis.y,
      axis.z,
      degrees
    );
    if (pivotPoint != null) {
      var p = pivotPoint;
      lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
    }
    lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function (
    this1,
    xScale,
    yScale,
    zScale
  ) {
    var array = [
      xScale,
      0.0,
      0.0,
      0.0,
      0.0,
      yScale,
      0.0,
      0.0,
      0.0,
      0.0,
      zScale,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
    ];
    var this2;
    if (array != null) {
      this2 = new Float32Array(array);
    } else {
      this2 = null;
    }
    lime_math__$Matrix4_Matrix4_$Impl_$.prepend(
      this1,
      lime_math__$Matrix4_Matrix4_$Impl_$._new(this2)
    );
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function (
    this1,
    x,
    y,
    z
  ) {
    var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
    lime_math__$Matrix4_Matrix4_$Impl_$.set_position(
      m,
      new lime_math_Vector4(x, y, z)
    );
    lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function (this1, v) {
    var x = v.x;
    var y = v.y;
    var z = v.z;
    return new lime_math_Vector4(
      x * this1[0] + y * this1[4] + z * this1[8] + this1[12],
      x * this1[1] + y * this1[5] + z * this1[9] + this1[13],
      x * this1[2] + y * this1[6] + z * this1[10] + this1[14],
      x * this1[3] + y * this1[7] + z * this1[11] + this1[15]
    );
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function (
    this1,
    ain,
    aout
  ) {
    var i = 0;
    while (i + 3 <= ain.length) {
      var x = ain[i];
      var y = ain[i + 1];
      var z = ain[i + 2];
      aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
      aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
      aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
      i += 3;
    }
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function (this1) {
    var this2;
    if (this1 != null) {
      this2 = new Float32Array(this1);
    } else {
      this2 = null;
    }
    var othis = this2;
    this1[1] = othis[4];
    this1[2] = othis[8];
    this1[3] = othis[12];
    this1[4] = othis[1];
    this1[6] = othis[9];
    this1[7] = othis[13];
    this1[8] = othis[2];
    this1[9] = othis[6];
    this1[11] = othis[14];
    this1[12] = othis[3];
    this1[13] = othis[7];
    this1[14] = othis[11];
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function (
    x,
    y,
    z,
    degrees
  ) {
    var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
    var a1 = new lime_math_Vector4(x, y, z);
    var rad = -degrees * (Math.PI / 180);
    var c = Math.cos(rad);
    var s = Math.sin(rad);
    var t = 1.0 - c;
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 0, c + a1.x * a1.x * t);
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 5, c + a1.y * a1.y * t);
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 10, c + a1.z * a1.z * t);
    var tmp1 = a1.x * a1.y * t;
    var tmp2 = a1.z * s;
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 4, tmp1 + tmp2);
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 1, tmp1 - tmp2);
    tmp1 = a1.x * a1.z * t;
    tmp2 = a1.y * s;
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 8, tmp1 - tmp2);
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 2, tmp1 + tmp2);
    tmp1 = a1.y * a1.z * t;
    tmp2 = a1.x * s;
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 9, tmp1 + tmp2);
    lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 6, tmp1 - tmp2);
    return m;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function (this1) {
    return (
      (this1[0] * this1[5] - this1[4] * this1[1]) *
        (this1[10] * this1[15] - this1[14] * this1[11]) -
      (this1[0] * this1[9] - this1[8] * this1[1]) *
        (this1[6] * this1[15] - this1[14] * this1[7]) +
      (this1[0] * this1[13] - this1[12] * this1[1]) *
        (this1[6] * this1[11] - this1[10] * this1[7]) +
      (this1[4] * this1[9] - this1[8] * this1[5]) *
        (this1[2] * this1[15] - this1[14] * this1[3]) -
      (this1[4] * this1[13] - this1[12] * this1[5]) *
        (this1[2] * this1[11] - this1[10] * this1[3]) +
      (this1[8] * this1[13] - this1[12] * this1[9]) *
        (this1[2] * this1[7] - this1[6] * this1[3])
    );
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function (this1) {
    return new lime_math_Vector4(this1[12], this1[13], this1[14]);
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function (this1, val) {
    this1[12] = val.x;
    this1[13] = val.y;
    this1[14] = val.z;
    return val;
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.get = function (this1, index) {
    return this1[index];
  };
  lime_math__$Matrix4_Matrix4_$Impl_$.set = function (this1, index, value) {
    this1[index] = value;
    return value;
  };
  var lime_math_Rectangle = function (x, y, width, height) {
    if (height == null) {
      height = 0;
    }
    if (width == null) {
      width = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  };
  $hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
  lime_math_Rectangle.__name__ = ["lime", "math", "Rectangle"];
  lime_math_Rectangle.prototype = {
    height: null,
    width: null,
    x: null,
    y: null,
    clone: function () {
      return new lime_math_Rectangle(this.x, this.y, this.width, this.height);
    },
    contains: function (x, y) {
      if (x >= this.x && y >= this.y && x < this.get_right()) {
        return y < this.get_bottom();
      } else {
        return false;
      }
    },
    containsPoint: function (point) {
      return this.contains(point.x, point.y);
    },
    containsRect: function (rect) {
      if (rect.width <= 0 || rect.height <= 0) {
        if (
          rect.x > this.x &&
          rect.y > this.y &&
          rect.get_right() < this.get_right()
        ) {
          return rect.get_bottom() < this.get_bottom();
        } else {
          return false;
        }
      } else if (
        rect.x >= this.x &&
        rect.y >= this.y &&
        rect.get_right() <= this.get_right()
      ) {
        return rect.get_bottom() <= this.get_bottom();
      } else {
        return false;
      }
    },
    copyFrom: function (sourceRect) {
      this.x = sourceRect.x;
      this.y = sourceRect.y;
      this.width = sourceRect.width;
      this.height = sourceRect.height;
    },
    equals: function (toCompare) {
      if (
        toCompare != null &&
        this.x == toCompare.x &&
        this.y == toCompare.y &&
        this.width == toCompare.width
      ) {
        return this.height == toCompare.height;
      } else {
        return false;
      }
    },
    inflate: function (dx, dy) {
      this.x -= dx;
      this.width += dx * 2;
      this.y -= dy;
      this.height += dy * 2;
    },
    inflatePoint: function (point) {
      this.inflate(point.x, point.y);
    },
    intersection: function (toIntersect) {
      var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
      var x1 =
        this.get_right() > toIntersect.get_right()
          ? toIntersect.get_right()
          : this.get_right();
      if (x1 <= x0) {
        return new lime_math_Rectangle();
      }
      var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
      var y1 =
        this.get_bottom() > toIntersect.get_bottom()
          ? toIntersect.get_bottom()
          : this.get_bottom();
      if (y1 <= y0) {
        return new lime_math_Rectangle();
      }
      return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
    },
    intersects: function (toIntersect) {
      var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
      var x1 =
        this.get_right() > toIntersect.get_right()
          ? toIntersect.get_right()
          : this.get_right();
      if (x1 <= x0) {
        return false;
      }
      var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
      var y1 =
        this.get_bottom() > toIntersect.get_bottom()
          ? toIntersect.get_bottom()
          : this.get_bottom();
      return y1 > y0;
    },
    isEmpty: function () {
      if (!(this.width <= 0)) {
        return this.height <= 0;
      } else {
        return true;
      }
    },
    offset: function (dx, dy) {
      this.x += dx;
      this.y += dy;
    },
    offsetPoint: function (point) {
      this.x += point.x;
      this.y += point.y;
    },
    setEmpty: function () {
      this.x = this.y = this.width = this.height = 0;
    },
    setTo: function (xa, ya, widtha, heighta) {
      this.x = xa;
      this.y = ya;
      this.width = widtha;
      this.height = heighta;
    },
    transform: function (m) {
      var tx0 = m.a * this.x + m.c * this.y;
      var tx1 = tx0;
      var ty0 = m.b * this.x + m.d * this.y;
      var ty1 = ty0;
      var tx = m.a * (this.x + this.width) + m.c * this.y;
      var ty = m.b * (this.x + this.width) + m.d * this.y;
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
      ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      tx = m.a * this.x + m.c * (this.y + this.height);
      ty = m.b * this.x + m.d * (this.y + this.height);
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      return new lime_math_Rectangle(
        tx0 + m.tx,
        ty0 + m.ty,
        tx1 - tx0,
        ty1 - ty0
      );
    },
    union: function (toUnion) {
      if (this.width == 0 || this.height == 0) {
        return toUnion.clone();
      } else if (toUnion.width == 0 || toUnion.height == 0) {
        return this.clone();
      }
      var x0 = this.x > toUnion.x ? toUnion.x : this.x;
      var x1 =
        this.get_right() < toUnion.get_right()
          ? toUnion.get_right()
          : this.get_right();
      var y0 = this.y > toUnion.y ? toUnion.y : this.y;
      var y1 =
        this.get_bottom() < toUnion.get_bottom()
          ? toUnion.get_bottom()
          : this.get_bottom();
      return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
    },
    __contract: function (x, y, width, height) {
      if (this.width == 0 && this.height == 0) {
        return;
      }
      if (this.x < x) {
        this.x = x;
      }
      if (this.y < y) {
        this.y = y;
      }
      if (this.get_right() > x + width) {
        this.width = x + width - this.x;
      }
      if (this.get_bottom() > y + height) {
        this.height = y + height - this.y;
      }
    },
    __expand: function (x, y, width, height) {
      if (this.width == 0 && this.height == 0) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        return;
      }
      var cacheRight = this.get_right();
      var cacheBottom = this.get_bottom();
      if (this.x > x) {
        this.x = x;
      }
      if (this.y > y) {
        this.y = y;
      }
      if (cacheRight < x + width) {
        this.width = x + width - this.x;
      }
      if (cacheBottom < y + height) {
        this.height = y + height - this.y;
      }
    },
    __toFlashRectangle: function () {
      return null;
    },
    get_bottom: function () {
      return this.y + this.height;
    },
    set_bottom: function (b) {
      this.height = b - this.y;
      return b;
    },
    get_bottomRight: function () {
      return new lime_math_Vector2(this.x + this.width, this.y + this.height);
    },
    set_bottomRight: function (p) {
      this.width = p.x - this.x;
      this.height = p.y - this.y;
      return p.clone();
    },
    get_left: function () {
      return this.x;
    },
    set_left: function (l) {
      this.width -= l - this.x;
      this.x = l;
      return l;
    },
    get_right: function () {
      return this.x + this.width;
    },
    set_right: function (r) {
      this.width = r - this.x;
      return r;
    },
    get_size: function () {
      return new lime_math_Vector2(this.width, this.height);
    },
    set_size: function (p) {
      this.width = p.x;
      this.height = p.y;
      return p.clone();
    },
    get_top: function () {
      return this.y;
    },
    set_top: function (t) {
      this.height -= t - this.y;
      this.y = t;
      return t;
    },
    get_topLeft: function () {
      return new lime_math_Vector2(this.x, this.y);
    },
    set_topLeft: function (p) {
      this.x = p.x;
      this.y = p.y;
      return p.clone();
    },
    __class__: lime_math_Rectangle,
    __properties__: {
      set_topLeft: "set_topLeft",
      get_topLeft: "get_topLeft",
      set_top: "set_top",
      get_top: "get_top",
      set_size: "set_size",
      get_size: "get_size",
      set_right: "set_right",
      get_right: "get_right",
      set_left: "set_left",
      get_left: "get_left",
      set_bottomRight: "set_bottomRight",
      get_bottomRight: "get_bottomRight",
      set_bottom: "set_bottom",
      get_bottom: "get_bottom",
    },
  };
  var lime_math_Vector2 = function (x, y) {
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.x = x;
    this.y = y;
  };
  $hxClasses["lime.math.Vector2"] = lime_math_Vector2;
  lime_math_Vector2.__name__ = ["lime", "math", "Vector2"];
  lime_math_Vector2.distance = function (pt1, pt2) {
    var dx = pt1.x - pt2.x;
    var dy = pt1.y - pt2.y;
    return Math.sqrt(dx * dx + dy * dy);
  };
  lime_math_Vector2.interpolate = function (pt1, pt2, f) {
    return new lime_math_Vector2(
      pt2.x + f * (pt1.x - pt2.x),
      pt2.y + f * (pt1.y - pt2.y)
    );
  };
  lime_math_Vector2.polar = function (len, angle) {
    return new lime_math_Vector2(len * Math.cos(angle), len * Math.sin(angle));
  };
  lime_math_Vector2.prototype = {
    length: null,
    x: null,
    y: null,
    add: function (v) {
      return new lime_math_Vector2(v.x + this.x, v.y + this.y);
    },
    clone: function () {
      return new lime_math_Vector2(this.x, this.y);
    },
    equals: function (toCompare) {
      if (toCompare != null && toCompare.x == this.x) {
        return toCompare.y == this.y;
      } else {
        return false;
      }
    },
    normalize: function (thickness) {
      if (this.x == 0 && this.y == 0) {
        return;
      } else {
        var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
        this.x *= norm;
        this.y *= norm;
      }
    },
    offset: function (dx, dy) {
      this.x += dx;
      this.y += dy;
    },
    setTo: function (xa, ya) {
      this.x = xa;
      this.y = ya;
    },
    subtract: function (v) {
      return new lime_math_Vector2(this.x - v.x, this.y - v.y);
    },
    __toFlashPoint: function () {
      return null;
    },
    get_length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    __class__: lime_math_Vector2,
    __properties__: { get_length: "get_length" },
  };
  var lime_math_Vector4 = function (x, y, z, w) {
    if (w == null) {
      w = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.w = w;
    this.x = x;
    this.y = y;
    this.z = z;
  };
  $hxClasses["lime.math.Vector4"] = lime_math_Vector4;
  lime_math_Vector4.__name__ = ["lime", "math", "Vector4"];
  lime_math_Vector4.__properties__ = {
    get_Z_AXIS: "get_Z_AXIS",
    get_Y_AXIS: "get_Y_AXIS",
    get_X_AXIS: "get_X_AXIS",
  };
  lime_math_Vector4.angleBetween = function (a, b) {
    var a0 = new lime_math_Vector4(a.x, a.y, a.z, a.w);
    var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
    if (l != 0) {
      a0.x /= l;
      a0.y /= l;
      a0.z /= l;
    }
    var b0 = new lime_math_Vector4(b.x, b.y, b.z, b.w);
    var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
    if (l1 != 0) {
      b0.x /= l1;
      b0.y /= l1;
      b0.z /= l1;
    }
    return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
  };
  lime_math_Vector4.distance = function (pt1, pt2) {
    var x = pt2.x - pt1.x;
    var y = pt2.y - pt1.y;
    var z = pt2.z - pt1.z;
    return Math.sqrt(x * x + y * y + z * z);
  };
  lime_math_Vector4.get_X_AXIS = function () {
    return new lime_math_Vector4(1, 0, 0);
  };
  lime_math_Vector4.get_Y_AXIS = function () {
    return new lime_math_Vector4(0, 1, 0);
  };
  lime_math_Vector4.get_Z_AXIS = function () {
    return new lime_math_Vector4(0, 0, 1);
  };
  lime_math_Vector4.prototype = {
    length: null,
    lengthSquared: null,
    w: null,
    x: null,
    y: null,
    z: null,
    add: function (a) {
      return new lime_math_Vector4(this.x + a.x, this.y + a.y, this.z + a.z);
    },
    clone: function () {
      return new lime_math_Vector4(this.x, this.y, this.z, this.w);
    },
    copyFrom: function (sourceVector4) {
      this.x = sourceVector4.x;
      this.y = sourceVector4.y;
      this.z = sourceVector4.z;
    },
    crossProduct: function (a) {
      return new lime_math_Vector4(
        this.y * a.z - this.z * a.y,
        this.z * a.x - this.x * a.z,
        this.x * a.y - this.y * a.x,
        1
      );
    },
    decrementBy: function (a) {
      this.x -= a.x;
      this.y -= a.y;
      this.z -= a.z;
    },
    dotProduct: function (a) {
      return this.x * a.x + this.y * a.y + this.z * a.z;
    },
    equals: function (toCompare, allFour) {
      if (allFour == null) {
        allFour = false;
      }
      if (
        this.x == toCompare.x &&
        this.y == toCompare.y &&
        this.z == toCompare.z
      ) {
        if (!!allFour) {
          return this.w == toCompare.w;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    incrementBy: function (a) {
      this.x += a.x;
      this.y += a.y;
      this.z += a.z;
    },
    nearEquals: function (toCompare, tolerance, allFour) {
      if (allFour == null) {
        allFour = false;
      }
      if (
        Math.abs(this.x - toCompare.x) < tolerance &&
        Math.abs(this.y - toCompare.y) < tolerance &&
        Math.abs(this.z - toCompare.z) < tolerance
      ) {
        if (!!allFour) {
          return Math.abs(this.w - toCompare.w) < tolerance;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    negate: function () {
      this.x *= -1;
      this.y *= -1;
      this.z *= -1;
    },
    normalize: function () {
      var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      if (l != 0) {
        this.x /= l;
        this.y /= l;
        this.z /= l;
      }
      return l;
    },
    project: function () {
      this.x /= this.w;
      this.y /= this.w;
      this.z /= this.w;
    },
    scaleBy: function (s) {
      this.x *= s;
      this.y *= s;
      this.z *= s;
    },
    setTo: function (xa, ya, za) {
      this.x = xa;
      this.y = ya;
      this.z = za;
    },
    subtract: function (a) {
      return new lime_math_Vector4(this.x - a.x, this.y - a.y, this.z - a.z);
    },
    toString: function () {
      return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
    },
    get_length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    get_lengthSquared: function () {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    __class__: lime_math_Vector4,
    __properties__: {
      get_lengthSquared: "get_lengthSquared",
      get_length: "get_length",
    },
  };
  var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
  $hxClasses["lime.math.color._ARGB.ARGB_Impl_"] =
    lime_math_color__$ARGB_ARGB_$Impl_$;
  lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = [
    "lime",
    "math",
    "color",
    "_ARGB",
    "ARGB_Impl_",
  ];
  lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {
    set_r: "set_r",
    get_r: "get_r",
    set_g: "set_g",
    get_g: "get_g",
    set_b: "set_b",
    get_b: "get_b",
    set_a: "set_a",
    get_a: "get_a",
  };
  lime_math_color__$ARGB_ARGB_$Impl_$._new = function (argb) {
    if (argb == null) {
      argb = 0;
    }
    var this1 = argb;
    return this1;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.create = function (a, r, g, b) {
    var this1 = 0;
    var argb = this1;
    argb = ((a & 255) << 24) | ((r & 255) << 16) | ((g & 255) << 8) | (b & 255);
    return argb;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function (this1) {
    if (((this1 >>> 24) & 255) == 0) {
      this1 = 0;
    } else if (((this1 >>> 24) & 255) != 255) {
      lime_math_color__$ARGB_ARGB_$Impl_$.a16 =
        lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[(this1 >>> 24) & 255];
      this1 =
        (((this1 >>> 24) & 255 & 255) << 24) |
        ((((((this1 >>> 16) & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16) >>
          16) &
          255) <<
          16) |
        ((((((this1 >>> 8) & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16) >>
          16) &
          255) <<
          8) |
        ((((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16) >> 16) &
          255);
    }
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    switch (format) {
      case 0:
        this1 =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 1:
        this1 =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 3] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 1] & 255);
        break;
      case 2:
        this1 =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset + 2] & 255);
        break;
    }
    if (premultiplied) {
      if (((this1 >>> 24) & 255) != 0 && ((this1 >>> 24) & 255) != 255) {
        lime_math_color__$ARGB_ARGB_$Impl_$.unmult =
          255.0 / ((this1 >>> 24) & 255);
        this1 =
          (((this1 >>> 24) & 255 & 255) << 24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              ((this1 >>> 16) & 255) *
                lime_math_color__$ARGB_ARGB_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              ((this1 >>> 8) & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult
            )
          ] &
            255);
      }
    }
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.set = function (this1, a, r, g, b) {
    this1 =
      ((a & 255) << 24) | ((r & 255) << 16) | ((g & 255) << 8) | (b & 255);
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function (this1) {
    if (((this1 >>> 24) & 255) != 0 && ((this1 >>> 24) & 255) != 255) {
      lime_math_color__$ARGB_ARGB_$Impl_$.unmult =
        255.0 / ((this1 >>> 24) & 255);
      this1 =
        (((this1 >>> 24) & 255 & 255) << 24) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor(
            ((this1 >>> 16) & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult
          )
        ] &
          255) <<
          16) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor(
            ((this1 >>> 8) & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult
          )
        ] &
          255) <<
          8) |
        (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)
        ] &
          255);
    }
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    if (premultiplied) {
      if (((this1 >>> 24) & 255) == 0) {
        this1 = 0;
      } else if (((this1 >>> 24) & 255) != 255) {
        lime_math_color__$ARGB_ARGB_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[(this1 >>> 24) & 255];
        this1 =
          (((this1 >>> 24) & 255 & 255) << 24) |
          ((((((this1 >>> 16) & 255) *
            lime_math_color__$ARGB_ARGB_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((this1 >>> 8) & 255) *
            lime_math_color__$ARGB_ARGB_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          ((((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16) >> 16) &
            255);
      }
    }
    switch (format) {
      case 0:
        data[offset] = (this1 >>> 16) & 255;
        data[offset + 1] = (this1 >>> 8) & 255;
        data[offset + 2] = this1 & 255;
        data[offset + 3] = (this1 >>> 24) & 255;
        break;
      case 1:
        data[offset] = (this1 >>> 24) & 255;
        data[offset + 1] = (this1 >>> 16) & 255;
        data[offset + 2] = (this1 >>> 8) & 255;
        data[offset + 3] = this1 & 255;
        break;
      case 2:
        data[offset] = this1 & 255;
        data[offset + 1] = (this1 >>> 8) & 255;
        data[offset + 2] = (this1 >>> 16) & 255;
        data[offset + 3] = (this1 >>> 24) & 255;
        break;
    }
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function (bgra) {
    var this1 = 0;
    var argb = this1;
    argb =
      ((bgra & 255 & 255) << 24) |
      (((bgra >>> 8) & 255 & 255) << 16) |
      (((bgra >>> 16) & 255 & 255) << 8) |
      ((bgra >>> 24) & 255 & 255);
    return argb;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function (rgba) {
    var this1 = 0;
    var argb = this1;
    argb =
      ((rgba & 255 & 255) << 24) |
      (((rgba >>> 24) & 255 & 255) << 16) |
      (((rgba >>> 16) & 255 & 255) << 8) |
      ((rgba >>> 8) & 255 & 255);
    return argb;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function (this1) {
    return (this1 >>> 24) & 255;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function (this1, value) {
    this1 =
      ((value & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function (this1) {
    return this1 & 255;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (value & 255);
    return value;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function (this1) {
    return (this1 >>> 8) & 255;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      ((value & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function (this1) {
    return (this1 >>> 16) & 255;
  };
  lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      ((value & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
  $hxClasses["lime.math.color._BGRA.BGRA_Impl_"] =
    lime_math_color__$BGRA_BGRA_$Impl_$;
  lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = [
    "lime",
    "math",
    "color",
    "_BGRA",
    "BGRA_Impl_",
  ];
  lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {
    set_r: "set_r",
    get_r: "get_r",
    set_g: "set_g",
    get_g: "get_g",
    set_b: "set_b",
    get_b: "get_b",
    set_a: "set_a",
    get_a: "get_a",
  };
  lime_math_color__$BGRA_BGRA_$Impl_$._new = function (bgra) {
    if (bgra == null) {
      bgra = 0;
    }
    var this1 = bgra;
    return this1;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.create = function (b, g, r, a) {
    var this1 = 0;
    var bgra = this1;
    bgra = ((b & 255) << 24) | ((g & 255) << 16) | ((r & 255) << 8) | (a & 255);
    return bgra;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function (this1) {
    if ((this1 & 255) == 0) {
      this1 = 0;
    } else if ((this1 & 255) != 255) {
      lime_math_color__$BGRA_BGRA_$Impl_$.a16 =
        lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
      this1 =
        ((((((this1 >>> 24) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
          16) &
          255) <<
          24) |
        ((((((this1 >>> 16) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
          16) &
          255) <<
          16) |
        ((((((this1 >>> 8) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
          16) &
          255) <<
          8) |
        (this1 & 255 & 255);
    }
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    switch (format) {
      case 0:
        this1 =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        this1 =
          ((data[offset + 3] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 1] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        this1 =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((this1 & 255) != 0 && (this1 & 255) != 255) {
        lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
        this1 =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              ((this1 >>> 24) & 255) *
                lime_math_color__$BGRA_BGRA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              ((this1 >>> 16) & 255) *
                lime_math_color__$BGRA_BGRA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.floor(
              ((this1 >>> 8) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (this1 & 255 & 255);
      }
    }
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.set = function (this1, b, g, r, a) {
    this1 =
      ((b & 255) << 24) | ((g & 255) << 16) | ((r & 255) << 8) | (a & 255);
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function (this1) {
    if ((this1 & 255) != 0 && (this1 & 255) != 255) {
      lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
      this1 =
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor(
            ((this1 >>> 24) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult
          )
        ] &
          255) <<
          24) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor(
            ((this1 >>> 16) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult
          )
        ] &
          255) <<
          16) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.floor(
            ((this1 >>> 8) & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult
          )
        ] &
          255) <<
          8) |
        (this1 & 255 & 255);
    }
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    if (premultiplied) {
      if ((this1 & 255) == 0) {
        this1 = 0;
      } else if ((this1 & 255) != 255) {
        lime_math_color__$BGRA_BGRA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
        this1 =
          ((((((this1 >>> 24) & 255) *
            lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((this1 >>> 16) & 255) *
            lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((this1 >>> 8) & 255) *
            lime_math_color__$BGRA_BGRA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (this1 & 255 & 255);
      }
    }
    switch (format) {
      case 0:
        data[offset] = (this1 >>> 8) & 255;
        data[offset + 1] = (this1 >>> 16) & 255;
        data[offset + 2] = (this1 >>> 24) & 255;
        data[offset + 3] = this1 & 255;
        break;
      case 1:
        data[offset] = this1 & 255;
        data[offset + 1] = (this1 >>> 8) & 255;
        data[offset + 2] = (this1 >>> 16) & 255;
        data[offset + 3] = (this1 >>> 24) & 255;
        break;
      case 2:
        data[offset] = (this1 >>> 24) & 255;
        data[offset + 1] = (this1 >>> 16) & 255;
        data[offset + 2] = (this1 >>> 8) & 255;
        data[offset + 3] = this1 & 255;
        break;
    }
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function (argb) {
    var this1 = 0;
    var bgra = this1;
    bgra =
      ((argb & 255 & 255) << 24) |
      (((argb >>> 8) & 255 & 255) << 16) |
      (((argb >>> 16) & 255 & 255) << 8) |
      ((argb >>> 24) & 255 & 255);
    return bgra;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function (rgba) {
    var this1 = 0;
    var bgra = this1;
    bgra =
      (((rgba >>> 8) & 255 & 255) << 24) |
      (((rgba >>> 16) & 255 & 255) << 16) |
      (((rgba >>> 24) & 255 & 255) << 8) |
      (rgba & 255 & 255);
    return bgra;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function (this1) {
    return this1 & 255;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (value & 255);
    return value;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function (this1) {
    return (this1 >>> 24) & 255;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function (this1, value) {
    this1 =
      ((value & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function (this1) {
    return (this1 >>> 16) & 255;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      ((value & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function (this1) {
    return (this1 >>> 8) & 255;
  };
  lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      ((value & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
  $hxClasses["lime.math.color._RGBA.RGBA_Impl_"] =
    lime_math_color__$RGBA_RGBA_$Impl_$;
  lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = [
    "lime",
    "math",
    "color",
    "_RGBA",
    "RGBA_Impl_",
  ];
  lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {
    set_r: "set_r",
    get_r: "get_r",
    set_g: "set_g",
    get_g: "get_g",
    set_b: "set_b",
    get_b: "get_b",
    set_a: "set_a",
    get_a: "get_a",
  };
  lime_math_color__$RGBA_RGBA_$Impl_$._new = function (rgba) {
    if (rgba == null) {
      rgba = 0;
    }
    var this1 = rgba;
    return this1;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.create = function (r, g, b, a) {
    var this1 = 0;
    var rgba = this1;
    rgba = ((r & 255) << 24) | ((g & 255) << 16) | ((b & 255) << 8) | (a & 255);
    return rgba;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function (this1) {
    if ((this1 & 255) == 0) {
      if (this1 != 0) {
        this1 = 0;
      }
    } else if ((this1 & 255) != 255) {
      lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
        lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
      this1 =
        ((((((this1 >>> 24) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
          16) &
          255) <<
          24) |
        ((((((this1 >>> 16) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
          16) &
          255) <<
          16) |
        ((((((this1 >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
          16) &
          255) <<
          8) |
        (this1 & 255 & 255);
    }
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    switch (format) {
      case 0:
        this1 =
          ((data[offset] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset + 2] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
      case 1:
        this1 =
          ((data[offset + 1] & 255) << 24) |
          ((data[offset + 2] & 255) << 16) |
          ((data[offset + 3] & 255) << 8) |
          (data[offset] & 255);
        break;
      case 2:
        this1 =
          ((data[offset + 2] & 255) << 24) |
          ((data[offset + 1] & 255) << 16) |
          ((data[offset] & 255) << 8) |
          (data[offset + 3] & 255);
        break;
    }
    if (premultiplied) {
      if ((this1 & 255) != 0 && (this1 & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
        this1 =
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((this1 >>> 24) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            24) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((this1 >>> 16) & 255) *
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            16) |
          ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
            Math.round(
              ((this1 >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
            )
          ] &
            255) <<
            8) |
          (this1 & 255 & 255);
      }
    }
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.set = function (this1, r, g, b, a) {
    this1 =
      ((r & 255) << 24) | ((g & 255) << 16) | ((b & 255) << 8) | (a & 255);
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function (this1) {
    if ((this1 & 255) != 0 && (this1 & 255) != 255) {
      lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
      this1 =
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.round(
            ((this1 >>> 24) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
          )
        ] &
          255) <<
          24) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.round(
            ((this1 >>> 16) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
          )
        ] &
          255) <<
          16) |
        ((lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[
          Math.round(
            ((this1 >>> 8) & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult
          )
        ] &
          255) <<
          8) |
        (this1 & 255 & 255);
    }
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function (
    this1,
    data,
    offset,
    format,
    premultiplied
  ) {
    if (premultiplied == null) {
      premultiplied = false;
    }
    if (format == null) {
      format = 0;
    }
    if (premultiplied) {
      if ((this1 & 255) == 0) {
        if (this1 != 0) {
          this1 = 0;
        }
      } else if ((this1 & 255) != 255) {
        lime_math_color__$RGBA_RGBA_$Impl_$.a16 =
          lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
        this1 =
          ((((((this1 >>> 24) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            24) |
          ((((((this1 >>> 16) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            16) |
          ((((((this1 >>> 8) & 255) *
            lime_math_color__$RGBA_RGBA_$Impl_$.a16) >>
            16) &
            255) <<
            8) |
          (this1 & 255 & 255);
      }
    }
    switch (format) {
      case 0:
        data[offset] = (this1 >>> 24) & 255;
        data[offset + 1] = (this1 >>> 16) & 255;
        data[offset + 2] = (this1 >>> 8) & 255;
        data[offset + 3] = this1 & 255;
        break;
      case 1:
        data[offset] = this1 & 255;
        data[offset + 1] = (this1 >>> 24) & 255;
        data[offset + 2] = (this1 >>> 16) & 255;
        data[offset + 3] = (this1 >>> 8) & 255;
        break;
      case 2:
        data[offset] = (this1 >>> 8) & 255;
        data[offset + 1] = (this1 >>> 16) & 255;
        data[offset + 2] = (this1 >>> 24) & 255;
        data[offset + 3] = this1 & 255;
        break;
    }
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function (argb) {
    var this1 = 0;
    var rgba = this1;
    rgba =
      (((argb >>> 16) & 255 & 255) << 24) |
      (((argb >>> 8) & 255 & 255) << 16) |
      ((argb & 255 & 255) << 8) |
      ((argb >>> 24) & 255 & 255);
    return rgba;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function (bgra) {
    var this1 = 0;
    var rgba = this1;
    rgba =
      (((bgra >>> 8) & 255 & 255) << 24) |
      (((bgra >>> 16) & 255 & 255) << 16) |
      (((bgra >>> 24) & 255 & 255) << 8) |
      (bgra & 255 & 255);
    return rgba;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function (this1) {
    return this1 & 255;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (value & 255);
    return value;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function (this1) {
    return (this1 >>> 8) & 255;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      ((value & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function (this1) {
    return (this1 >>> 16) & 255;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function (this1, value) {
    this1 =
      (((this1 >>> 24) & 255 & 255) << 24) |
      ((value & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function (this1) {
    return (this1 >>> 24) & 255;
  };
  lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function (this1, value) {
    this1 =
      ((value & 255) << 24) |
      (((this1 >>> 16) & 255 & 255) << 16) |
      (((this1 >>> 8) & 255 & 255) << 8) |
      (this1 & 255 & 255);
    return value;
  };
  var lime_media_ALAudioContext = function () {
    this.EXPONENT_DISTANCE_CLAMPED = 53254;
    this.EXPONENT_DISTANCE = 53253;
    this.LINEAR_DISTANCE_CLAMPED = 53252;
    this.LINEAR_DISTANCE = 53251;
    this.INVERSE_DISTANCE_CLAMPED = 53250;
    this.INVERSE_DISTANCE = 53249;
    this.DISTANCE_MODEL = 53248;
    this.DOPPLER_VELOCITY = 49153;
    this.SPEED_OF_SOUND = 49155;
    this.DOPPLER_FACTOR = 49152;
    this.EXTENSIONS = 45060;
    this.RENDERER = 45059;
    this.VERSION = 45058;
    this.VENDOR = 45057;
    this.OUT_OF_MEMORY = 40965;
    this.INVALID_OPERATION = 40964;
    this.INVALID_VALUE = 40963;
    this.INVALID_ENUM = 40962;
    this.INVALID_NAME = 40961;
    this.NO_ERROR = 0;
    this.SIZE = 8196;
    this.CHANNELS = 8195;
    this.BITS = 8194;
    this.FREQUENCY = 8193;
    this.FORMAT_STEREO16 = 4355;
    this.FORMAT_STEREO8 = 4354;
    this.FORMAT_MONO16 = 4353;
    this.FORMAT_MONO8 = 4352;
    this.UNDETERMINED = 4144;
    this.STREAMING = 4137;
    this.STATIC = 4136;
    this.SOURCE_TYPE = 4135;
    this.BYTE_OFFSET = 4134;
    this.SAMPLE_OFFSET = 4133;
    this.SEC_OFFSET = 4132;
    this.MAX_DISTANCE = 4131;
    this.CONE_OUTER_GAIN = 4130;
    this.ROLLOFF_FACTOR = 4129;
    this.REFERENCE_DISTANCE = 4128;
    this.BUFFERS_PROCESSED = 4118;
    this.BUFFERS_QUEUED = 4117;
    this.STOPPED = 4116;
    this.PAUSED = 4115;
    this.PLAYING = 4114;
    this.INITIAL = 4113;
    this.SOURCE_STATE = 4112;
    this.ORIENTATION = 4111;
    this.MAX_GAIN = 4110;
    this.MIN_GAIN = 4109;
    this.GAIN = 4106;
    this.BUFFER = 4105;
    this.LOOPING = 4103;
    this.VELOCITY = 4102;
    this.DIRECTION = 4101;
    this.POSITION = 4100;
    this.PITCH = 4099;
    this.CONE_OUTER_ANGLE = 4098;
    this.CONE_INNER_ANGLE = 4097;
    this.SOURCE_RELATIVE = 514;
    this.TRUE = 1;
    this.FALSE = 0;
    this.NONE = 0;
  };
  $hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
  lime_media_ALAudioContext.__name__ = ["lime", "media", "ALAudioContext"];
  lime_media_ALAudioContext.prototype = {
    NONE: null,
    FALSE: null,
    TRUE: null,
    SOURCE_RELATIVE: null,
    CONE_INNER_ANGLE: null,
    CONE_OUTER_ANGLE: null,
    PITCH: null,
    POSITION: null,
    DIRECTION: null,
    VELOCITY: null,
    LOOPING: null,
    BUFFER: null,
    GAIN: null,
    MIN_GAIN: null,
    MAX_GAIN: null,
    ORIENTATION: null,
    SOURCE_STATE: null,
    INITIAL: null,
    PLAYING: null,
    PAUSED: null,
    STOPPED: null,
    BUFFERS_QUEUED: null,
    BUFFERS_PROCESSED: null,
    REFERENCE_DISTANCE: null,
    ROLLOFF_FACTOR: null,
    CONE_OUTER_GAIN: null,
    MAX_DISTANCE: null,
    SEC_OFFSET: null,
    SAMPLE_OFFSET: null,
    BYTE_OFFSET: null,
    SOURCE_TYPE: null,
    STATIC: null,
    STREAMING: null,
    UNDETERMINED: null,
    FORMAT_MONO8: null,
    FORMAT_MONO16: null,
    FORMAT_STEREO8: null,
    FORMAT_STEREO16: null,
    FREQUENCY: null,
    BITS: null,
    CHANNELS: null,
    SIZE: null,
    NO_ERROR: null,
    INVALID_NAME: null,
    INVALID_ENUM: null,
    INVALID_VALUE: null,
    INVALID_OPERATION: null,
    OUT_OF_MEMORY: null,
    VENDOR: null,
    VERSION: null,
    RENDERER: null,
    EXTENSIONS: null,
    DOPPLER_FACTOR: null,
    SPEED_OF_SOUND: null,
    DOPPLER_VELOCITY: null,
    DISTANCE_MODEL: null,
    INVERSE_DISTANCE: null,
    INVERSE_DISTANCE_CLAMPED: null,
    LINEAR_DISTANCE: null,
    LINEAR_DISTANCE_CLAMPED: null,
    EXPONENT_DISTANCE: null,
    EXPONENT_DISTANCE_CLAMPED: null,
    bufferData: function (buffer, format, data, size, freq) {
      lime_media_openal_AL.bufferData(buffer, format, data, size, freq);
    },
    buffer3f: function (buffer, param, value1, value2, value3) {
      lime_media_openal_AL.buffer3f(buffer, param, value1, value2, value3);
    },
    buffer3i: function (buffer, param, value1, value2, value3) {
      lime_media_openal_AL.buffer3i(buffer, param, value1, value2, value3);
    },
    bufferf: function (buffer, param, value) {
      lime_media_openal_AL.bufferf(buffer, param, value);
    },
    bufferfv: function (buffer, param, values) {
      lime_media_openal_AL.bufferfv(buffer, param, values);
    },
    bufferi: function (buffer, param, value) {
      lime_media_openal_AL.bufferi(buffer, param, value);
    },
    bufferiv: function (buffer, param, values) {
      lime_media_openal_AL.bufferiv(buffer, param, values);
    },
    createSource: function () {
      return lime_media_openal_AL.createSource();
    },
    createBuffer: function () {
      return lime_media_openal_AL.createBuffer();
    },
    deleteBuffer: function (buffer) {
      lime_media_openal_AL.deleteBuffer(buffer);
    },
    deleteBuffers: function (buffers) {
      lime_media_openal_AL.deleteBuffers(buffers);
    },
    deleteSource: function (source) {
      lime_media_openal_AL.deleteSource(source);
    },
    deleteSources: function (sources) {
      lime_media_openal_AL.deleteSources(sources);
    },
    disable: function (capability) {
      lime_media_openal_AL.disable(capability);
    },
    distanceModel: function (distanceModel) {
      lime_media_openal_AL.distanceModel(distanceModel);
    },
    dopplerFactor: function (value) {
      lime_media_openal_AL.dopplerFactor(value);
    },
    dopplerVelocity: function (value) {
      lime_media_openal_AL.dopplerVelocity(value);
    },
    enable: function (capability) {
      lime_media_openal_AL.enable(capability);
    },
    genSource: function () {
      return this.createSource();
    },
    genSources: function (n) {
      return lime_media_openal_AL.genSources(n);
    },
    genBuffer: function () {
      return this.createBuffer();
    },
    genBuffers: function (n) {
      return lime_media_openal_AL.genBuffers(n);
    },
    getBoolean: function (param) {
      return lime_media_openal_AL.getBoolean(param);
    },
    getBooleanv: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getBooleanv(param, count);
    },
    getBuffer3f: function (buffer, param) {
      return lime_media_openal_AL.getBuffer3f(buffer, param);
    },
    getBuffer3i: function (buffer, param) {
      return lime_media_openal_AL.getBuffer3i(buffer, param);
    },
    getBufferf: function (buffer, param) {
      return lime_media_openal_AL.getBufferf(buffer, param);
    },
    getBufferfv: function (buffer, param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getBufferfv(buffer, param, count);
    },
    getBufferi: function (buffer, param) {
      return lime_media_openal_AL.getBufferi(buffer, param);
    },
    getBufferiv: function (buffer, param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getBufferiv(buffer, param, count);
    },
    getDouble: function (param) {
      return lime_media_openal_AL.getDouble(param);
    },
    getDoublev: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getDoublev(param, count);
    },
    getEnumValue: function (ename) {
      return lime_media_openal_AL.getEnumValue(ename);
    },
    getError: function () {
      return lime_media_openal_AL.getError();
    },
    getErrorString: function () {
      return lime_media_openal_AL.getErrorString();
    },
    getFloat: function (param) {
      return lime_media_openal_AL.getFloat(param);
    },
    getFloatv: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getFloatv(param, count);
    },
    getInteger: function (param) {
      return lime_media_openal_AL.getInteger(param);
    },
    getIntegerv: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getIntegerv(param, count);
    },
    getListener3f: function (param) {
      return lime_media_openal_AL.getListener3f(param);
    },
    getListener3i: function (param) {
      return lime_media_openal_AL.getListener3i(param);
    },
    getListenerf: function (param) {
      return lime_media_openal_AL.getListenerf(param);
    },
    getListenerfv: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getListenerfv(param, count);
    },
    getListeneri: function (param) {
      return lime_media_openal_AL.getListeneri(param);
    },
    getListeneriv: function (param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getListeneriv(param, count);
    },
    getProcAddress: function (fname) {
      return lime_media_openal_AL.getProcAddress(fname);
    },
    getSource3f: function (source, param) {
      return lime_media_openal_AL.getSource3f(source, param);
    },
    getSourcef: function (source, param) {
      return lime_media_openal_AL.getSourcef(source, param);
    },
    getSource3i: function (source, param) {
      return lime_media_openal_AL.getSource3i(source, param);
    },
    getSourcefv: function (source, param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getSourcefv(source, param);
    },
    getSourcei: function (source, param) {
      return lime_media_openal_AL.getSourcei(source, param);
    },
    getSourceiv: function (source, param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_AL.getSourceiv(source, param, count);
    },
    getString: function (param) {
      return lime_media_openal_AL.getString(param);
    },
    isBuffer: function (buffer) {
      return lime_media_openal_AL.isBuffer(buffer);
    },
    isEnabled: function (capability) {
      return lime_media_openal_AL.isEnabled(capability);
    },
    isExtensionPresent: function (extname) {
      return lime_media_openal_AL.isExtensionPresent(extname);
    },
    isSource: function (source) {
      return lime_media_openal_AL.isSource(source);
    },
    listener3f: function (param, value1, value2, value3) {
      lime_media_openal_AL.listener3f(param, value1, value2, value3);
    },
    listener3i: function (param, value1, value2, value3) {
      lime_media_openal_AL.listener3i(param, value1, value2, value3);
    },
    listenerf: function (param, value) {
      lime_media_openal_AL.listenerf(param, value);
    },
    listenerfv: function (param, values) {
      lime_media_openal_AL.listenerfv(param, values);
    },
    listeneri: function (param, value) {
      lime_media_openal_AL.listeneri(param, value);
    },
    listeneriv: function (param, values) {
      lime_media_openal_AL.listeneriv(param, values);
    },
    source3f: function (source, param, value1, value2, value3) {
      lime_media_openal_AL.source3f(source, param, value1, value2, value3);
    },
    source3i: function (source, param, value1, value2, value3) {
      lime_media_openal_AL.source3i(source, param, value1, value2, value3);
    },
    sourcef: function (source, param, value) {
      lime_media_openal_AL.sourcef(source, param, value);
    },
    sourcefv: function (source, param, values) {
      lime_media_openal_AL.sourcefv(source, param, values);
    },
    sourcei: function (source, param, value) {
      lime_media_openal_AL.sourcei(source, param, value);
    },
    sourceiv: function (source, param, values) {
      lime_media_openal_AL.sourceiv(source, param, values);
    },
    sourcePlay: function (source) {
      lime_media_openal_AL.sourcePlay(source);
    },
    sourcePlayv: function (sources) {
      lime_media_openal_AL.sourcePlayv(sources);
    },
    sourceStop: function (source) {
      lime_media_openal_AL.sourceStop(source);
    },
    sourceStopv: function (sources) {
      lime_media_openal_AL.sourceStopv(sources);
    },
    sourceRewind: function (source) {
      lime_media_openal_AL.sourceRewind(source);
    },
    sourceRewindv: function (sources) {
      lime_media_openal_AL.sourceRewindv(sources);
    },
    sourcePause: function (source) {
      lime_media_openal_AL.sourcePause(source);
    },
    sourcePausev: function (sources) {
      lime_media_openal_AL.sourcePausev(sources);
    },
    sourceQueueBuffer: function (source, buffer) {
      lime_media_openal_AL.sourceQueueBuffer(source, buffer);
    },
    sourceQueueBuffers: function (source, nb, buffers) {
      lime_media_openal_AL.sourceQueueBuffers(source, nb, buffers);
    },
    sourceUnqueueBuffer: function (source) {
      return lime_media_openal_AL.sourceUnqueueBuffer(source);
    },
    sourceUnqueueBuffers: function (source, nb) {
      return lime_media_openal_AL.sourceUnqueueBuffers(source, nb);
    },
    speedOfSound: function (value) {
      lime_media_openal_AL.speedOfSound(value);
    },
    __class__: lime_media_ALAudioContext,
  };
  var lime_media_ALCAudioContext = function () {
    this.ALL_DEVICES_SPECIFIER = 4115;
    this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
    this.ENUMERATE_ALL_EXT = 1;
    this.EXTENSIONS = 4102;
    this.DEVICE_SPECIFIER = 4101;
    this.DEFAULT_DEVICE_SPECIFIER = 4100;
    this.ALL_ATTRIBUTES = 4099;
    this.ATTRIBUTES_SIZE = 4098;
    this.OUT_OF_MEMORY = 40965;
    this.INVALID_VALUE = 40964;
    this.INVALID_ENUM = 40963;
    this.INVALID_CONTEXT = 40962;
    this.INVALID_DEVICE = 40961;
    this.NO_ERROR = 0;
    this.STEREO_SOURCES = 4113;
    this.MONO_SOURCES = 4112;
    this.SYNC = 4105;
    this.REFRESH = 4104;
    this.FREQUENCY = 4103;
    this.TRUE = 1;
    this.FALSE = 0;
  };
  $hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
  lime_media_ALCAudioContext.__name__ = ["lime", "media", "ALCAudioContext"];
  lime_media_ALCAudioContext.prototype = {
    FALSE: null,
    TRUE: null,
    FREQUENCY: null,
    REFRESH: null,
    SYNC: null,
    MONO_SOURCES: null,
    STEREO_SOURCES: null,
    NO_ERROR: null,
    INVALID_DEVICE: null,
    INVALID_CONTEXT: null,
    INVALID_ENUM: null,
    INVALID_VALUE: null,
    OUT_OF_MEMORY: null,
    ATTRIBUTES_SIZE: null,
    ALL_ATTRIBUTES: null,
    DEFAULT_DEVICE_SPECIFIER: null,
    DEVICE_SPECIFIER: null,
    EXTENSIONS: null,
    ENUMERATE_ALL_EXT: null,
    DEFAULT_ALL_DEVICES_SPECIFIER: null,
    ALL_DEVICES_SPECIFIER: null,
    closeDevice: function (device) {
      return lime_media_openal_ALC.closeDevice(device);
    },
    createContext: function (device, attrlist) {
      return lime_media_openal_ALC.createContext(device, attrlist);
    },
    destroyContext: function (context) {
      lime_media_openal_ALC.destroyContext(context);
    },
    getContextsDevice: function (context) {
      return lime_media_openal_ALC.getContextsDevice(context);
    },
    getCurrentContext: function () {
      return lime_media_openal_ALC.getCurrentContext();
    },
    getError: function (device) {
      return lime_media_openal_ALC.getError(device);
    },
    getErrorString: function (device) {
      return lime_media_openal_ALC.getErrorString(device);
    },
    getIntegerv: function (device, param, count) {
      if (count == null) {
        count = 1;
      }
      return lime_media_openal_ALC.getIntegerv(device, param, count);
    },
    getString: function (device, param) {
      return lime_media_openal_ALC.getString(device, param);
    },
    makeContextCurrent: function (context) {
      return lime_media_openal_ALC.makeContextCurrent(context);
    },
    openDevice: function (deviceName) {
      return lime_media_openal_ALC.openDevice(deviceName);
    },
    pauseDevice: function (device) {
      lime_media_openal_ALC.pauseDevice(device);
    },
    processContext: function (context) {
      lime_media_openal_ALC.processContext(context);
    },
    resumeDevice: function (device) {
      lime_media_openal_ALC.resumeDevice(device);
    },
    suspendContext: function (context) {
      lime_media_openal_ALC.suspendContext(context);
    },
    __class__: lime_media_ALCAudioContext,
  };
  var lime_media_AudioBuffer = function () {};
  $hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
  lime_media_AudioBuffer.__name__ = ["lime", "media", "AudioBuffer"];
  lime_media_AudioBuffer.fromBytes = function (bytes) {
    if (bytes == null) {
      return null;
    }
    return null;
  };
  lime_media_AudioBuffer.fromFile = function (path) {
    if (path == null) {
      return null;
    }
    var audioBuffer = new lime_media_AudioBuffer();
    audioBuffer.__srcHowl = new Howl({ src: [path] });
    return audioBuffer;
  };
  lime_media_AudioBuffer.fromFiles = function (paths) {
    var audioBuffer = new lime_media_AudioBuffer();
    audioBuffer.__srcHowl = new Howl({ src: paths });
    return audioBuffer;
  };
  lime_media_AudioBuffer.fromVorbisFile = function (vorbisFile) {
    return null;
  };
  lime_media_AudioBuffer.loadFromFile = function (path) {
    var promise = new lime_app_Promise();
    var audioBuffer = lime_media_AudioBuffer.fromFile(path);
    if (audioBuffer != null) {
      if (audioBuffer != null) {
        audioBuffer.__srcHowl.on("load", function () {
          promise.complete(audioBuffer);
        });
        audioBuffer.__srcHowl.on("loaderror", function () {
          promise.error(null);
        });
        audioBuffer.__srcHowl.load();
      }
    } else {
      promise.error(null);
    }
    return promise.future;
  };
  lime_media_AudioBuffer.loadFromFiles = function (paths) {
    var promise = new lime_app_Promise();
    var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
    if (audioBuffer != null) {
      audioBuffer.__srcHowl.on("load", function () {
        promise.complete(audioBuffer);
      });
      audioBuffer.__srcHowl.on("loaderror", function () {
        promise.error(null);
      });
      audioBuffer.__srcHowl.load();
    } else {
      promise.error(null);
    }
    return promise.future;
  };
  lime_media_AudioBuffer.prototype = {
    bitsPerSample: null,
    channels: null,
    data: null,
    sampleRate: null,
    __srcAudio: null,
    __srcBuffer: null,
    __srcCustom: null,
    __srcFMODSound: null,
    __srcHowl: null,
    __srcSound: null,
    __srcVorbisFile: null,
    dispose: function () {
      this.__srcHowl.unload();
    },
    get_src: function () {
      return this.__srcHowl;
    },
    set_src: function (value) {
      return (this.__srcHowl = value);
    },
    __class__: lime_media_AudioBuffer,
    __properties__: { set_src: "set_src", get_src: "get_src" },
  };
  var lime_media_AudioContext = ($hxClasses["lime.media.AudioContext"] = {
    __ename__: ["lime", "media", "AudioContext"],
    __constructs__: ["OPENAL", "HTML5", "WEB", "FLASH", "CUSTOM"],
  });
  lime_media_AudioContext.OPENAL = function (alc, al) {
    var $x = ["OPENAL", 0, alc, al];
    $x.__enum__ = lime_media_AudioContext;
    $x.toString = $estr;
    return $x;
  };
  lime_media_AudioContext.HTML5 = function (context) {
    var $x = ["HTML5", 1, context];
    $x.__enum__ = lime_media_AudioContext;
    $x.toString = $estr;
    return $x;
  };
  lime_media_AudioContext.WEB = function (context) {
    var $x = ["WEB", 2, context];
    $x.__enum__ = lime_media_AudioContext;
    $x.toString = $estr;
    return $x;
  };
  lime_media_AudioContext.FLASH = function (context) {
    var $x = ["FLASH", 3, context];
    $x.__enum__ = lime_media_AudioContext;
    $x.toString = $estr;
    return $x;
  };
  lime_media_AudioContext.CUSTOM = function (data) {
    var $x = ["CUSTOM", 4, data];
    $x.__enum__ = lime_media_AudioContext;
    $x.toString = $estr;
    return $x;
  };
  var lime_media_AudioManager = function () {};
  $hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
  lime_media_AudioManager.__name__ = ["lime", "media", "AudioManager"];
  lime_media_AudioManager.init = function (context) {
    if (lime_media_AudioManager.context == null) {
      if (context == null) {
        try {
          window.AudioContext =
            window.AudioContext || window.webkitAudioContext;
          lime_media_AudioManager.context = lime_media_AudioContext.WEB(
            new AudioContext()
          );
        } catch (e) {
          haxe_CallStack.lastException = e;
          lime_media_AudioManager.context = lime_media_AudioContext.HTML5(
            new lime_media_HTML5AudioContext()
          );
        }
      } else {
        lime_media_AudioManager.context = context;
      }
    }
  };
  lime_media_AudioManager.resume = function () {
    if (lime_media_AudioManager.context != null) {
      var _g = lime_media_AudioManager.context;
      if (_g[1] == 0) {
        var al = _g[3];
        var alc = _g[2];
        var currentContext = alc.getCurrentContext();
        if (currentContext != null) {
          var device = alc.getContextsDevice(currentContext);
          alc.resumeDevice(device);
          alc.processContext(currentContext);
        }
      }
    }
  };
  lime_media_AudioManager.shutdown = function () {
    if (lime_media_AudioManager.context != null) {
      var _g = lime_media_AudioManager.context;
      if (_g[1] == 0) {
        var al = _g[3];
        var alc = _g[2];
        var currentContext = alc.getCurrentContext();
        if (currentContext != null) {
          var device = alc.getContextsDevice(currentContext);
          alc.makeContextCurrent(null);
          alc.destroyContext(currentContext);
          alc.closeDevice(device);
        }
      }
    }
  };
  lime_media_AudioManager.suspend = function () {
    if (lime_media_AudioManager.context != null) {
      var _g = lime_media_AudioManager.context;
      if (_g[1] == 0) {
        var al = _g[3];
        var alc = _g[2];
        var currentContext = alc.getCurrentContext();
        if (currentContext != null) {
          alc.suspendContext(currentContext);
          var device = alc.getContextsDevice(currentContext);
          alc.pauseDevice(device);
        }
      }
    }
  };
  var lime_media_AudioSource = function (buffer, offset, length, loops) {
    if (loops == null) {
      loops = 0;
    }
    if (offset == null) {
      offset = 0;
    }
    this.onComplete = new lime_app__$Event_$Void_$Void();
    this.buffer = buffer;
    this.offset = offset;
    this.backend = new lime__$backend_html5_HTML5AudioSource(this);
    if (length != null && length != 0) {
      this.set_length(length);
    }
    this.set_loops(loops);
    if (buffer != null) {
      this.init();
    }
  };
  $hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
  lime_media_AudioSource.__name__ = ["lime", "media", "AudioSource"];
  lime_media_AudioSource.prototype = {
    onComplete: null,
    buffer: null,
    offset: null,
    backend: null,
    dispose: function () {
      this.backend.dispose();
    },
    init: function () {
      this.backend.init();
    },
    play: function () {
      this.backend.play();
    },
    pause: function () {
      this.backend.pause();
    },
    stop: function () {
      this.backend.stop();
    },
    get_currentTime: function () {
      return this.backend.getCurrentTime();
    },
    set_currentTime: function (value) {
      return this.backend.setCurrentTime(value);
    },
    get_gain: function () {
      return this.backend.getGain();
    },
    set_gain: function (value) {
      return this.backend.setGain(value);
    },
    get_length: function () {
      return this.backend.getLength();
    },
    set_length: function (value) {
      return this.backend.setLength(value);
    },
    get_loops: function () {
      return this.backend.getLoops();
    },
    set_loops: function (value) {
      return this.backend.setLoops(value);
    },
    get_position: function () {
      return this.backend.getPosition();
    },
    set_position: function (value) {
      return this.backend.setPosition(value);
    },
    __class__: lime_media_AudioSource,
    __properties__: {
      set_position: "set_position",
      get_position: "get_position",
      set_loops: "set_loops",
      get_loops: "get_loops",
      set_length: "set_length",
      get_length: "get_length",
      set_gain: "set_gain",
      get_gain: "get_gain",
      set_currentTime: "set_currentTime",
      get_currentTime: "get_currentTime",
    },
  };
  var lime_media_FlashAudioContext = function () {};
  $hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
  lime_media_FlashAudioContext.__name__ = [
    "lime",
    "media",
    "FlashAudioContext",
  ];
  lime_media_FlashAudioContext.prototype = {
    createBuffer: function (stream, context) {
      return null;
    },
    getBytesLoaded: function (buffer) {
      return 0;
    },
    getBytesTotal: function (buffer) {
      return 0;
    },
    getID3: function (buffer) {
      return null;
    },
    getIsBuffering: function (buffer) {
      return false;
    },
    getIsURLInaccessible: function (buffer) {
      return false;
    },
    getLength: function (buffer) {
      return 0;
    },
    getURL: function (buffer) {
      return null;
    },
    close: function (buffer) {},
    extract: function (buffer, target, length, startPosition) {
      if (startPosition == null) {
        startPosition = -1;
      }
      return 0;
    },
    load: function (buffer, stream, context) {},
    loadCompressedDataFromByteArray: function (buffer, bytes, bytesLength) {},
    loadPCMFromByteArray: function (
      buffer,
      bytes,
      samples,
      format,
      stereo,
      sampleRate
    ) {
      if (sampleRate == null) {
        sampleRate = 44100;
      }
      if (stereo == null) {
        stereo = true;
      }
    },
    play: function (buffer, startTime, loops, sndTransform) {
      if (loops == null) {
        loops = 0;
      }
      if (startTime == null) {
        startTime = 0;
      }
      return null;
    },
    __class__: lime_media_FlashAudioContext,
  };
  var lime_media_HTML5AudioContext = function () {
    this.NETWORK_NO_SOURCE = 3;
    this.NETWORK_LOADING = 2;
    this.NETWORK_IDLE = 1;
    this.NETWORK_EMPTY = 0;
    this.HAVE_NOTHING = 0;
    this.HAVE_METADATA = 1;
    this.HAVE_FUTURE_DATA = 3;
    this.HAVE_ENOUGH_DATA = 4;
    this.HAVE_CURRENT_DATA = 2;
  };
  $hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
  lime_media_HTML5AudioContext.__name__ = [
    "lime",
    "media",
    "HTML5AudioContext",
  ];
  lime_media_HTML5AudioContext.prototype = {
    HAVE_CURRENT_DATA: null,
    HAVE_ENOUGH_DATA: null,
    HAVE_FUTURE_DATA: null,
    HAVE_METADATA: null,
    HAVE_NOTHING: null,
    NETWORK_EMPTY: null,
    NETWORK_IDLE: null,
    NETWORK_LOADING: null,
    NETWORK_NO_SOURCE: null,
    canPlayType: function (buffer, type) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.canPlayType(type);
      }
      return null;
    },
    createBuffer: function (urlString) {
      var buffer = new lime_media_AudioBuffer();
      buffer.__srcAudio = new Audio();
      buffer.__srcAudio.src = urlString;
      return buffer;
    },
    getAutoplay: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.autoplay;
      }
      return false;
    },
    getBuffered: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.buffered;
      }
      return null;
    },
    getCurrentSrc: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.currentSrc;
      }
      return null;
    },
    getCurrentTime: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.currentTime;
      }
      return 0;
    },
    getDefaultPlaybackRate: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.defaultPlaybackRate;
      }
      return 1;
    },
    getDuration: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.duration;
      }
      return 0;
    },
    getEnded: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.ended;
      }
      return false;
    },
    getError: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.error;
      }
      return null;
    },
    getLoop: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.loop;
      }
      return false;
    },
    getMuted: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.muted;
      }
      return false;
    },
    getNetworkState: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.networkState;
      }
      return 0;
    },
    getPaused: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.paused;
      }
      return false;
    },
    getPlaybackRate: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.playbackRate;
      }
      return 1;
    },
    getPlayed: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.played;
      }
      return null;
    },
    getPreload: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.preload;
      }
      return null;
    },
    getReadyState: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.readyState;
      }
      return 0;
    },
    getSeekable: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.seekable;
      }
      return null;
    },
    getSeeking: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.seeking;
      }
      return false;
    },
    getSrc: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.src;
      }
      return null;
    },
    getStartTime: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.playbackRate;
      }
      return 0;
    },
    getVolume: function (buffer) {
      if (buffer.__srcAudio != null) {
        return buffer.__srcAudio.volume;
      }
      return 1;
    },
    load: function (buffer) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.load();
        return;
      }
    },
    pause: function (buffer) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.pause();
        return;
      }
    },
    play: function (buffer) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.play();
        return;
      }
    },
    setAutoplay: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.autoplay = value;
      }
    },
    setCurrentTime: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.currentTime = value;
      }
    },
    setDefaultPlaybackRate: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.defaultPlaybackRate = value;
      }
    },
    setLoop: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.loop = value;
      }
    },
    setMuted: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.muted = value;
      }
    },
    setPlaybackRate: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.playbackRate = value;
      }
    },
    setPreload: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.preload = value;
      }
    },
    setSrc: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.src = value;
      }
    },
    setVolume: function (buffer, value) {
      if (buffer.__srcAudio != null) {
        buffer.__srcAudio.volume = value;
      }
    },
    __class__: lime_media_HTML5AudioContext,
  };
  var lime_media_codecs_vorbis_VorbisComment = function () {};
  $hxClasses["lime.media.codecs.vorbis.VorbisComment"] =
    lime_media_codecs_vorbis_VorbisComment;
  lime_media_codecs_vorbis_VorbisComment.__name__ = [
    "lime",
    "media",
    "codecs",
    "vorbis",
    "VorbisComment",
  ];
  lime_media_codecs_vorbis_VorbisComment.prototype = {
    userComments: null,
    vendor: null,
    __class__: lime_media_codecs_vorbis_VorbisComment,
  };
  var lime_media_codecs_vorbis_VorbisFile = function (handle) {
    this.handle = handle;
  };
  $hxClasses["lime.media.codecs.vorbis.VorbisFile"] =
    lime_media_codecs_vorbis_VorbisFile;
  lime_media_codecs_vorbis_VorbisFile.__name__ = [
    "lime",
    "media",
    "codecs",
    "vorbis",
    "VorbisFile",
  ];
  lime_media_codecs_vorbis_VorbisFile.fromBytes = function (bytes) {
    return null;
  };
  lime_media_codecs_vorbis_VorbisFile.fromFile = function (path) {
    return null;
  };
  lime_media_codecs_vorbis_VorbisFile.prototype = {
    bitstream: null,
    handle: null,
    bitrate: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      return 0;
    },
    bitrateInstant: function () {
      return 0;
    },
    clear: function () {},
    comment: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      return null;
    },
    crosslap: function (other) {
      return 0;
    },
    info: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      return null;
    },
    pcmSeek: function (pos) {
      return 0;
    },
    pcmSeekLap: function (pos) {
      return 0;
    },
    pcmSeekPage: function (pos) {
      return 0;
    },
    pcmSeekPageLap: function (pos) {
      return 0;
    },
    pcmTell: function () {
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    pcmTotal: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    rawSeek: function (pos) {
      return 0;
    },
    rawSeekLap: function (pos) {
      return 0;
    },
    rawTell: function () {
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    rawTotal: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
      return this1;
    },
    read: function (
      buffer,
      position,
      length,
      bigEndianPacking,
      wordSize,
      signed
    ) {
      if (signed == null) {
        signed = true;
      }
      if (wordSize == null) {
        wordSize = 2;
      }
      if (bigEndianPacking == null) {
        bigEndianPacking = false;
      }
      if (length == null) {
        length = 4096;
      }
      return 0;
    },
    readFloat: function (pcmChannels, samples) {
      return 0;
    },
    seekable: function () {
      return false;
    },
    serialNumber: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      return 0;
    },
    streams: function () {
      return 0;
    },
    timeSeek: function (s) {
      return 0;
    },
    timeSeekLap: function (s) {
      return 0;
    },
    timeSeekPage: function (s) {
      return 0;
    },
    timeSeekPageLap: function (s) {
      return 0;
    },
    timeTell: function () {
      return 0;
    },
    timeTotal: function (bitstream) {
      if (bitstream == null) {
        bitstream = -1;
      }
      return 0;
    },
    __class__: lime_media_codecs_vorbis_VorbisFile,
  };
  var lime_media_codecs_vorbis_VorbisInfo = function () {};
  $hxClasses["lime.media.codecs.vorbis.VorbisInfo"] =
    lime_media_codecs_vorbis_VorbisInfo;
  lime_media_codecs_vorbis_VorbisInfo.__name__ = [
    "lime",
    "media",
    "codecs",
    "vorbis",
    "VorbisInfo",
  ];
  lime_media_codecs_vorbis_VorbisInfo.prototype = {
    bitrateLower: null,
    bitrateNominal: null,
    bitrateUpper: null,
    channels: null,
    rate: null,
    version: null,
    __class__: lime_media_codecs_vorbis_VorbisInfo,
  };
  var lime_media_openal_AL = function () {};
  $hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
  lime_media_openal_AL.__name__ = ["lime", "media", "openal", "AL"];
  lime_media_openal_AL.bufferData = function (
    buffer,
    format,
    data,
    size,
    freq
  ) {};
  lime_media_openal_AL.buffer3f = function (
    buffer,
    param,
    value1,
    value2,
    value3
  ) {};
  lime_media_openal_AL.buffer3i = function (
    buffer,
    param,
    value1,
    value2,
    value3
  ) {};
  lime_media_openal_AL.bufferf = function (buffer, param, value) {};
  lime_media_openal_AL.bufferfv = function (buffer, param, values) {};
  lime_media_openal_AL.bufferi = function (buffer, param, value) {};
  lime_media_openal_AL.bufferiv = function (buffer, param, values) {};
  lime_media_openal_AL.createBuffer = function () {
    return null;
  };
  lime_media_openal_AL.createSource = function () {
    return null;
  };
  lime_media_openal_AL.deleteBuffer = function (buffer) {};
  lime_media_openal_AL.deleteBuffers = function (buffers) {};
  lime_media_openal_AL.deleteSource = function (source) {};
  lime_media_openal_AL.deleteSources = function (sources) {};
  lime_media_openal_AL.disable = function (capability) {};
  lime_media_openal_AL.distanceModel = function (distanceModel) {};
  lime_media_openal_AL.dopplerFactor = function (value) {};
  lime_media_openal_AL.dopplerVelocity = function (value) {};
  lime_media_openal_AL.enable = function (capability) {};
  lime_media_openal_AL.genSource = function () {
    return null;
  };
  lime_media_openal_AL.genSources = function (n) {
    return null;
  };
  lime_media_openal_AL.genBuffer = function () {
    return null;
  };
  lime_media_openal_AL.genBuffers = function (n) {
    return null;
  };
  lime_media_openal_AL.getBoolean = function (param) {
    return false;
  };
  lime_media_openal_AL.getBooleanv = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getBuffer3f = function (buffer, param) {
    return null;
  };
  lime_media_openal_AL.getBuffer3i = function (buffer, param) {
    return null;
  };
  lime_media_openal_AL.getBufferf = function (buffer, param) {
    return 0;
  };
  lime_media_openal_AL.getBufferfv = function (buffer, param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getBufferi = function (buffer, param) {
    return 0;
  };
  lime_media_openal_AL.getBufferiv = function (buffer, param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getDouble = function (param) {
    return 0;
  };
  lime_media_openal_AL.getDoublev = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getEnumValue = function (ename) {
    return 0;
  };
  lime_media_openal_AL.getError = function () {
    return 0;
  };
  lime_media_openal_AL.getErrorString = function () {
    var _g = lime_media_openal_AL.getError();
    switch (_g) {
      case 40961:
        return "INVALID_NAME: Invalid parameter name";
      case 40962:
        return "INVALID_ENUM: Invalid enum value";
      case 40963:
        return "INVALID_VALUE: Invalid parameter value";
      case 40964:
        return "INVALID_OPERATION: Illegal operation or call";
      case 40965:
        return "OUT_OF_MEMORY: OpenAL has run out of memory";
      default:
        return "";
    }
  };
  lime_media_openal_AL.getFloat = function (param) {
    return 0;
  };
  lime_media_openal_AL.getFloatv = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getInteger = function (param) {
    return 0;
  };
  lime_media_openal_AL.getIntegerv = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getListener3f = function (param) {
    return null;
  };
  lime_media_openal_AL.getListener3i = function (param) {
    return null;
  };
  lime_media_openal_AL.getListenerf = function (param) {
    return 0;
  };
  lime_media_openal_AL.getListenerfv = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getListeneri = function (param) {
    return 0;
  };
  lime_media_openal_AL.getListeneriv = function (param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getParameter = function (param) {
    return null;
  };
  lime_media_openal_AL.getProcAddress = function (fname) {
    return null;
  };
  lime_media_openal_AL.getSource3f = function (source, param) {
    return null;
  };
  lime_media_openal_AL.getSourcef = function (source, param) {
    return 0;
  };
  lime_media_openal_AL.getSource3i = function (source, param) {
    return null;
  };
  lime_media_openal_AL.getSourcefv = function (source, param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getSourcei = function (source, param) {
    return 0;
  };
  lime_media_openal_AL.getSourceiv = function (source, param, count) {
    if (count == null) {
      count = 1;
    }
    return null;
  };
  lime_media_openal_AL.getString = function (param) {
    return null;
  };
  lime_media_openal_AL.isBuffer = function (buffer) {
    return false;
  };
  lime_media_openal_AL.isEnabled = function (capability) {
    return false;
  };
  lime_media_openal_AL.isExtensionPresent = function (extname) {
    return false;
  };
  lime_media_openal_AL.isSource = function (source) {
    return false;
  };
  lime_media_openal_AL.listener3f = function (param, value1, value2, value3) {};
  lime_media_openal_AL.listener3i = function (param, value1, value2, value3) {};
  lime_media_openal_AL.listenerf = function (param, value) {};
  lime_media_openal_AL.listenerfv = function (param, values) {};
  lime_media_openal_AL.listeneri = function (param, value) {};
  lime_media_openal_AL.listeneriv = function (param, values) {};
  lime_media_openal_AL.source3f = function (
    source,
    param,
    value1,
    value2,
    value3
  ) {};
  lime_media_openal_AL.source3i = function (
    source,
    param,
    value1,
    value2,
    value3
  ) {};
  lime_media_openal_AL.sourcef = function (source, param, value) {};
  lime_media_openal_AL.sourcefv = function (source, param, values) {};
  lime_media_openal_AL.sourcei = function (source, param, value) {};
  lime_media_openal_AL.sourceiv = function (source, param, values) {};
  lime_media_openal_AL.sourcePlay = function (source) {};
  lime_media_openal_AL.sourcePlayv = function (sources) {};
  lime_media_openal_AL.sourceStop = function (source) {};
  lime_media_openal_AL.sourceStopv = function (sources) {};
  lime_media_openal_AL.sourceRewind = function (source) {};
  lime_media_openal_AL.sourceRewindv = function (sources) {};
  lime_media_openal_AL.sourcePause = function (source) {};
  lime_media_openal_AL.sourcePausev = function (sources) {};
  lime_media_openal_AL.sourceQueueBuffer = function (source, buffer) {};
  lime_media_openal_AL.sourceQueueBuffers = function (source, nb, buffers) {};
  lime_media_openal_AL.sourceUnqueueBuffer = function (source) {
    return 0;
  };
  lime_media_openal_AL.sourceUnqueueBuffers = function (source, nb) {
    return null;
  };
  lime_media_openal_AL.speedOfSound = function (value) {};
  var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
  $hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] =
    lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
  lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = [
    "lime",
    "media",
    "openal",
    "_ALBuffer",
    "ALBuffer_Impl_",
  ];
  lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function (handle) {
    var this1 = handle;
    return this1;
  };
  var lime_media_openal_ALC = function () {};
  $hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
  lime_media_openal_ALC.__name__ = ["lime", "media", "openal", "ALC"];
  lime_media_openal_ALC.closeDevice = function (device) {
    return false;
  };
  lime_media_openal_ALC.createContext = function (device, attrlist) {
    return null;
  };
  lime_media_openal_ALC.destroyContext = function (context) {};
  lime_media_openal_ALC.getContextsDevice = function (context) {
    return null;
  };
  lime_media_openal_ALC.getCurrentContext = function () {
    return null;
  };
  lime_media_openal_ALC.getError = function (device) {
    return 0;
  };
  lime_media_openal_ALC.getErrorString = function (device) {
    var _g = lime_media_openal_ALC.getError(device);
    switch (_g) {
      case 40961:
        return "INVALID_DEVICE: Invalid device (or no device?)";
      case 40962:
        return "INVALID_CONTEXT: Invalid context (or no context?)";
      case 40963:
        return "INVALID_ENUM: Invalid enum value";
      case 40964:
        return "INVALID_VALUE: Invalid param value";
      case 40965:
        return "OUT_OF_MEMORY: OpenAL has run out of memory";
      default:
        return "";
    }
  };
  lime_media_openal_ALC.getIntegerv = function (device, param, size) {
    return null;
  };
  lime_media_openal_ALC.getString = function (device, param) {
    return null;
  };
  lime_media_openal_ALC.makeContextCurrent = function (context) {
    return false;
  };
  lime_media_openal_ALC.openDevice = function (deviceName) {
    return null;
  };
  lime_media_openal_ALC.pauseDevice = function (device) {};
  lime_media_openal_ALC.processContext = function (context) {};
  lime_media_openal_ALC.resumeDevice = function (device) {};
  lime_media_openal_ALC.suspendContext = function (context) {};
  var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
  $hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] =
    lime_media_openal__$ALContext_ALContext_$Impl_$;
  lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = [
    "lime",
    "media",
    "openal",
    "_ALContext",
    "ALContext_Impl_",
  ];
  lime_media_openal__$ALContext_ALContext_$Impl_$._new = function (handle) {
    var this1 = handle;
    return this1;
  };
  var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
  $hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] =
    lime_media_openal__$ALDevice_ALDevice_$Impl_$;
  lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = [
    "lime",
    "media",
    "openal",
    "_ALDevice",
    "ALDevice_Impl_",
  ];
  lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function (handle) {
    var this1 = handle;
    return this1;
  };
  var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
  $hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] =
    lime_media_openal__$ALSource_ALSource_$Impl_$;
  lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = [
    "lime",
    "media",
    "openal",
    "_ALSource",
    "ALSource_Impl_",
  ];
  lime_media_openal__$ALSource_ALSource_$Impl_$._new = function (handle) {
    var this1 = handle;
    return this1;
  };
  var lime_net__$IHTTPRequest = function () {};
  $hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
  lime_net__$IHTTPRequest.__name__ = ["lime", "net", "_IHTTPRequest"];
  lime_net__$IHTTPRequest.prototype = {
    contentType: null,
    data: null,
    enableResponseHeaders: null,
    followRedirects: null,
    formData: null,
    headers: null,
    method: null,
    responseHeaders: null,
    responseStatus: null,
    timeout: null,
    uri: null,
    userAgent: null,
    cancel: null,
    __class__: lime_net__$IHTTPRequest,
  };
  var lime_net__$HTTPRequest_AbstractHTTPRequest = function (uri) {
    this.uri = uri;
    this.contentType = "application/x-www-form-urlencoded";
    this.followRedirects = true;
    this.formData = new haxe_ds_StringMap();
    this.headers = [];
    this.method = "GET";
    this.timeout = 30000;
    this.backend = new lime__$backend_html5_HTML5HTTPRequest();
    this.backend.init(this);
  };
  $hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] =
    lime_net__$HTTPRequest_AbstractHTTPRequest;
  lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = [
    "lime",
    "net",
    "_HTTPRequest",
    "AbstractHTTPRequest",
  ];
  lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [
    lime_net__$IHTTPRequest,
  ];
  lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
    contentType: null,
    data: null,
    enableResponseHeaders: null,
    followRedirects: null,
    formData: null,
    headers: null,
    method: null,
    responseData: null,
    responseHeaders: null,
    responseStatus: null,
    timeout: null,
    uri: null,
    userAgent: null,
    backend: null,
    cancel: function () {
      this.backend.cancel();
    },
    load: function (uri) {
      return null;
    },
    __class__: lime_net__$HTTPRequest_AbstractHTTPRequest,
  };
  var lime_net_HTTPRequest = function (uri) {
    lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri);
  };
  $hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
  lime_net_HTTPRequest.__name__ = ["lime", "net", "HTTPRequest"];
  lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
  lime_net_HTTPRequest.prototype = $extend(
    lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,
    {
      __class__: lime_net_HTTPRequest,
    }
  );
  var lime_net__$HTTPRequest_$Bytes = function (uri) {
    lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri);
  };
  $hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
  lime_net__$HTTPRequest_$Bytes.__name__ = [
    "lime",
    "net",
    "_HTTPRequest_Bytes",
  ];
  lime_net__$HTTPRequest_$Bytes.__super__ =
    lime_net__$HTTPRequest_AbstractHTTPRequest;
  lime_net__$HTTPRequest_$Bytes.prototype = $extend(
    lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,
    {
      fromBytes: function (bytes) {
        return bytes;
      },
      load: function (uri) {
        var _gthis = this;
        if (uri != null) {
          this.uri = uri;
        }
        var promise = new lime_app_Promise();
        var future = this.backend.loadData(this.uri);
        future.onProgress($bind(promise, promise.progress));
        future.onError($bind(promise, promise.error));
        future.onComplete(function (bytes) {
          _gthis.responseData = _gthis.fromBytes(bytes);
          promise.complete(_gthis.responseData);
        });
        return promise.future;
      },
      __class__: lime_net__$HTTPRequest_$Bytes,
    }
  );
  var lime_net__$HTTPRequest_$String = function (uri) {
    lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri);
  };
  $hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
  lime_net__$HTTPRequest_$String.__name__ = [
    "lime",
    "net",
    "_HTTPRequest_String",
  ];
  lime_net__$HTTPRequest_$String.__super__ =
    lime_net__$HTTPRequest_AbstractHTTPRequest;
  lime_net__$HTTPRequest_$String.prototype = $extend(
    lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,
    {
      load: function (uri) {
        var _gthis = this;
        if (uri != null) {
          this.uri = uri;
        }
        var promise = new lime_app_Promise();
        var future = this.backend.loadText(this.uri);
        future.onProgress($bind(promise, promise.progress));
        future.onError($bind(promise, promise.error));
        future.onComplete(function (text) {
          _gthis.responseData = text;
          promise.complete(_gthis.responseData);
        });
        return promise.future;
      },
      __class__: lime_net__$HTTPRequest_$String,
    }
  );
  var lime_net_HTTPRequestHeader = function (name, value) {
    if (value == null) {
      value = "";
    }
    this.name = name;
    this.value = value;
  };
  $hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
  lime_net_HTTPRequestHeader.__name__ = ["lime", "net", "HTTPRequestHeader"];
  lime_net_HTTPRequestHeader.prototype = {
    name: null,
    value: null,
    __class__: lime_net_HTTPRequestHeader,
  };
  var lime_net__$HTTPRequest_$lime_$text_$Font = function (uri) {
    lime_net__$HTTPRequest_$Bytes.call(this, uri);
  };
  $hxClasses["lime.net._HTTPRequest_lime_text_Font"] =
    lime_net__$HTTPRequest_$lime_$text_$Font;
  lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = [
    "lime",
    "net",
    "_HTTPRequest_lime_text_Font",
  ];
  lime_net__$HTTPRequest_$lime_$text_$Font.__super__ =
    lime_net__$HTTPRequest_$Bytes;
  lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(
    lime_net__$HTTPRequest_$Bytes.prototype,
    {
      fromBytes: function (bytes) {
        return lime_text_Font.fromBytes(bytes);
      },
      __class__: lime_net__$HTTPRequest_$lime_$text_$Font,
    }
  );
  var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function (uri) {
    lime_net__$HTTPRequest_$Bytes.call(this, uri);
  };
  $hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] =
    lime_net__$HTTPRequest_$lime_$utils_$Bytes;
  lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = [
    "lime",
    "net",
    "_HTTPRequest_lime_utils_Bytes",
  ];
  lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ =
    lime_net__$HTTPRequest_$Bytes;
  lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(
    lime_net__$HTTPRequest_$Bytes.prototype,
    {
      fromBytes: function (bytes) {
        return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
      },
      __class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes,
    }
  );
  var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function (uri) {
    lime_net__$HTTPRequest_$Bytes.call(this, uri);
  };
  $hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] =
    lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
  lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = [
    "lime",
    "net",
    "_HTTPRequest_openfl_utils_ByteArray",
  ];
  lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ =
    lime_net__$HTTPRequest_$Bytes;
  lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(
    lime_net__$HTTPRequest_$Bytes.prototype,
    {
      fromBytes: function (bytes) {
        return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
      },
      __class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray,
    }
  );
  var lime_system_CFFI = function () {};
  $hxClasses["lime.system.CFFI"] = lime_system_CFFI;
  lime_system_CFFI.__name__ = ["lime", "system", "CFFI"];
  lime_system_CFFI.load = function (library, method, args, lazy) {
    if (lazy == null) {
      lazy = false;
    }
    if (args == null) {
      args = 0;
    }
    if (!lime_system_CFFI.enabled) {
      return Reflect.makeVarArgs(function (__) {
        return {};
      });
    }
    var result = null;
    return result;
  };
  lime_system_CFFI.__findHaxelib = function (library) {
    return "";
  };
  lime_system_CFFI.__loaderTrace = function (message) {};
  lime_system_CFFI.__sysName = function () {
    return null;
  };
  lime_system_CFFI.__tryLoad = function (name, library, func, args) {
    return null;
  };
  var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
  $hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] =
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = [
    "lime",
    "system",
    "_CFFIPointer",
    "CFFIPointer_Impl_",
  ];
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function (handle) {
    var this1 = handle;
    return this1;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function (this1) {
    var tmp = this1 != null;
    return 0;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function (a, b) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) ==
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function (a, b) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function (
    a,
    b
  ) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer =
    function (a, b) {
      return (
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >=
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
      );
    };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function (a, b) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function (
    a,
    b
  ) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer =
    function (a, b) {
      return (
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <=
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
      );
    };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function (a, b) {
    return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
  };
  lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) !=
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  var lime_system_Clipboard = function () {};
  $hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
  lime_system_Clipboard.__name__ = ["lime", "system", "Clipboard"];
  lime_system_Clipboard.__properties__ = {
    set_text: "set_text",
    get_text: "get_text",
  };
  lime_system_Clipboard.get_text = function () {
    return lime_system_Clipboard._text;
  };
  lime_system_Clipboard.set_text = function (value) {
    lime_system_Clipboard._text = value;
    var $window = lime_app_Application.current.__windows[0];
    if ($window != null) {
      $window.backend.setClipboard(value);
    }
    return value;
  };
  var lime_system_Display = function () {};
  $hxClasses["lime.system.Display"] = lime_system_Display;
  lime_system_Display.__name__ = ["lime", "system", "Display"];
  lime_system_Display.prototype = {
    bounds: null,
    currentMode: null,
    id: null,
    dpi: null,
    name: null,
    supportedModes: null,
    __class__: lime_system_Display,
  };
  var lime_system_DisplayMode = function (
    width,
    height,
    refreshRate,
    pixelFormat
  ) {
    this.width = width;
    this.height = height;
    this.refreshRate = refreshRate;
    this.pixelFormat = pixelFormat;
  };
  $hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
  lime_system_DisplayMode.__name__ = ["lime", "system", "DisplayMode"];
  lime_system_DisplayMode.prototype = {
    height: null,
    pixelFormat: null,
    refreshRate: null,
    width: null,
    __class__: lime_system_DisplayMode,
  };
  var lime_system_Endian = ($hxClasses["lime.system.Endian"] = {
    __ename__: ["lime", "system", "Endian"],
    __constructs__: ["LITTLE_ENDIAN", "BIG_ENDIAN"],
  });
  lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN", 0];
  lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
  lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
  lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN", 1];
  lime_system_Endian.BIG_ENDIAN.toString = $estr;
  lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
  var lime_system_System = function () {};
  $hxClasses["lime.system.System"] = lime_system_System;
  lime_system_System.__name__ = ["lime", "system", "System"];
  lime_system_System.__properties__ = {
    get_userDirectory: "get_userDirectory",
    get_numDisplays: "get_numDisplays",
    get_fontsDirectory: "get_fontsDirectory",
    get_endianness: "get_endianness",
    get_documentsDirectory: "get_documentsDirectory",
    get_desktopDirectory: "get_desktopDirectory",
    get_applicationStorageDirectory: "get_applicationStorageDirectory",
    get_applicationDirectory: "get_applicationDirectory",
    set_allowScreenTimeout: "set_allowScreenTimeout",
    get_allowScreenTimeout: "get_allowScreenTimeout",
  };
  lime_system_System.embed = $hx_exports["lime"]["embed"] = function (
    projectName,
    element,
    width,
    height,
    windowConfig
  ) {
    if (
      lime_system_System.__applicationEntryPoint == null ||
      lime_system_System.__applicationConfig == null
    ) {
      return;
    }
    var _this = lime_system_System.__applicationEntryPoint;
    if (
      __map_reserved[projectName] != null
        ? _this.existsReserved(projectName)
        : _this.h.hasOwnProperty(projectName)
    ) {
      var htmlElement = null;
      if (typeof element == "string") {
        htmlElement = window.document.getElementById(element);
      } else if (element == null) {
        htmlElement = window.document.createElement("div");
      } else {
        htmlElement = element;
      }
      if (htmlElement == null) {
        window.console.log(
          "[lime.embed] ERROR: Cannot find target element: " +
            Std.string(element)
        );
        return;
      }
      if (width == null) {
        width = 0;
      }
      if (height == null) {
        height = 0;
      }
      var _this1 = lime_system_System.__applicationConfig;
      var defaultConfig =
        __map_reserved[projectName] != null
          ? _this1.getReserved(projectName)
          : _this1.h[projectName];
      var config = {};
      lime_system_System.__copyMissingFields(config, defaultConfig);
      if (windowConfig != null) {
        config.windows = [];
        if (windowConfig instanceof Array && windowConfig.__enum__ == null) {
          config.windows = windowConfig;
        } else {
          config.windows[0] = windowConfig;
        }
        var _g1 = 0;
        var _g = config.windows.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (i < defaultConfig.windows.length) {
            lime_system_System.__copyMissingFields(
              config.windows[i],
              defaultConfig.windows[i]
            );
          }
          lime_system_System.__copyMissingFields(
            config.windows[i].parameters,
            defaultConfig.windows[i].parameters
          );
          if (typeof windowConfig.background == "string") {
            var background = StringTools.replace(
              Std.string(windowConfig.background),
              "#",
              ""
            );
            if (background.indexOf("0x") > -1) {
              windowConfig.background = Std.parseInt(background);
            } else {
              windowConfig.background = Std.parseInt("0x" + background);
            }
          }
        }
      }
      if (Reflect.field(config.windows[0], "rootPath")) {
        config.rootPath = Reflect.field(config.windows[0], "rootPath");
        config["assetsPrefix"] = config.rootPath;
        Reflect.deleteField(config.windows[0], "rootPath");
      }
      if (Reflect.field(config.windows[0], "assetsPrefix")) {
        config.rootPath = Reflect.field(config.windows[0], "assetsPrefix");
        config["assetsPrefix"] = config.rootPath;
        Reflect.deleteField(config.windows[0], "assetsPrefix");
      }
      config.windows[0].element = htmlElement;
      config.windows[0].width = width;
      config.windows[0].height = height;
      var _this2 = lime_system_System.__applicationEntryPoint;
      (__map_reserved[projectName] != null
        ? _this2.getReserved(projectName)
        : _this2.h[projectName])(config);
    }
  };
  lime_system_System.exit = function (code) {};
  lime_system_System.getDisplay = function (id) {
    if (id == 0) {
      var display = new lime_system_Display();
      display.id = 0;
      display.name = "Generic Display";
      display.dpi = 96 * window.devicePixelRatio;
      display.currentMode = new lime_system_DisplayMode(
        window.screen.width,
        window.screen.height,
        60,
        1
      );
      display.supportedModes = [display.currentMode];
      display.bounds = new lime_math_Rectangle(
        0,
        0,
        display.currentMode.width,
        display.currentMode.height
      );
      return display;
    }
    return null;
  };
  lime_system_System.getTimer = function () {
    return new Date().getTime();
  };
  lime_system_System.load = function (library, method, args, lazy) {
    if (lazy == null) {
      lazy = false;
    }
    if (args == null) {
      args = 0;
    }
    return lime_system_CFFI.load(library, method, args, lazy);
  };
  lime_system_System.openFile = function (path) {
    if (path != null) {
      window.open(path, "_blank");
    }
  };
  lime_system_System.openURL = function (url, target) {
    if (target == null) {
      target = "_blank";
    }
    if (url != null) {
      window.open(url, target);
    }
  };
  lime_system_System.__copyMissingFields = function (target, source) {
    if (source == null || target == null) {
      return;
    }
    var _g = 0;
    var _g1 = Reflect.fields(source);
    while (_g < _g1.length) {
      var field = _g1[_g];
      ++_g;
      if (!Object.prototype.hasOwnProperty.call(target, field)) {
        target[field] = Reflect.field(source, field);
      }
    }
  };
  lime_system_System.__getDirectory = function (type) {
    return null;
  };
  lime_system_System.__registerEntryPoint = function (
    projectName,
    entryPoint,
    config
  ) {
    if (lime_system_System.__applicationConfig == null) {
      lime_system_System.__applicationConfig = new haxe_ds_StringMap();
    }
    if (lime_system_System.__applicationEntryPoint == null) {
      lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
    }
    var _this = lime_system_System.__applicationEntryPoint;
    if (__map_reserved[projectName] != null) {
      _this.setReserved(projectName, entryPoint);
    } else {
      _this.h[projectName] = entryPoint;
    }
    var _this1 = lime_system_System.__applicationConfig;
    if (__map_reserved[projectName] != null) {
      _this1.setReserved(projectName, config);
    } else {
      _this1.h[projectName] = config;
    }
  };
  lime_system_System.get_allowScreenTimeout = function () {
    return true;
  };
  lime_system_System.set_allowScreenTimeout = function (value) {
    return true;
  };
  lime_system_System.get_applicationDirectory = function () {
    return lime_system_System.__getDirectory(0);
  };
  lime_system_System.get_applicationStorageDirectory = function () {
    return lime_system_System.__getDirectory(1);
  };
  lime_system_System.get_desktopDirectory = function () {
    return lime_system_System.__getDirectory(2);
  };
  lime_system_System.get_documentsDirectory = function () {
    return lime_system_System.__getDirectory(3);
  };
  lime_system_System.get_fontsDirectory = function () {
    return lime_system_System.__getDirectory(4);
  };
  lime_system_System.get_numDisplays = function () {
    return 1;
  };
  lime_system_System.get_userDirectory = function () {
    return lime_system_System.__getDirectory(5);
  };
  lime_system_System.get_endianness = function () {
    return lime_system_Endian.LITTLE_ENDIAN;
  };
  var lime_system_ThreadPool = function (minThreads, maxThreads) {
    if (maxThreads == null) {
      maxThreads = 1;
    }
    if (minThreads == null) {
      minThreads = 0;
    }
    this.onProgress = new lime_app__$Event_$Dynamic_$Void();
    this.onError = new lime_app__$Event_$Dynamic_$Void();
    this.onComplete = new lime_app__$Event_$Dynamic_$Void();
    this.doWork = new lime_app__$Event_$Dynamic_$Void();
    this.minThreads = minThreads;
    this.maxThreads = maxThreads;
    this.currentThreads = 0;
  };
  $hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
  lime_system_ThreadPool.__name__ = ["lime", "system", "ThreadPool"];
  lime_system_ThreadPool.prototype = {
    currentThreads: null,
    doWork: null,
    maxThreads: null,
    minThreads: null,
    onComplete: null,
    onError: null,
    onProgress: null,
    queue: function (state) {
      this.doWork.dispatch(state);
    },
    sendComplete: function (state) {
      this.onComplete.dispatch(state);
    },
    sendError: function (state) {
      this.onError.dispatch(state);
    },
    sendProgress: function (state) {
      this.onProgress.dispatch(state);
    },
    __class__: lime_system_ThreadPool,
  };
  var lime_system__$ThreadPool_ThreadPoolMessageType = ($hxClasses[
    "lime.system._ThreadPool.ThreadPoolMessageType"
  ] = {
    __ename__: ["lime", "system", "_ThreadPool", "ThreadPoolMessageType"],
    __constructs__: ["COMPLETE", "ERROR", "EXIT", "PROGRESS", "WORK"],
  });
  lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE", 0];
  lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
  lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ =
    lime_system__$ThreadPool_ThreadPoolMessageType;
  lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR", 1];
  lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
  lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ =
    lime_system__$ThreadPool_ThreadPoolMessageType;
  lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT", 2];
  lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
  lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ =
    lime_system__$ThreadPool_ThreadPoolMessageType;
  lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS", 3];
  lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
  lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ =
    lime_system__$ThreadPool_ThreadPoolMessageType;
  lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK", 4];
  lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
  lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ =
    lime_system__$ThreadPool_ThreadPoolMessageType;
  var lime_system__$ThreadPool_ThreadPoolMessage = function (type, state) {
    this.type = type;
    this.state = state;
  };
  $hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] =
    lime_system__$ThreadPool_ThreadPoolMessage;
  lime_system__$ThreadPool_ThreadPoolMessage.__name__ = [
    "lime",
    "system",
    "_ThreadPool",
    "ThreadPoolMessage",
  ];
  lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
    state: null,
    type: null,
    __class__: lime_system__$ThreadPool_ThreadPoolMessage,
  };
  var lime_text__$Glyph_Glyph_$Impl_$ = {};
  $hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
  lime_text__$Glyph_Glyph_$Impl_$.__name__ = [
    "lime",
    "text",
    "_Glyph",
    "Glyph_Impl_",
  ];
  lime_text__$Glyph_Glyph_$Impl_$._new = function (i) {
    var this1 = i;
    return this1;
  };
  var lime_text_GlyphMetrics = function () {};
  $hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
  lime_text_GlyphMetrics.__name__ = ["lime", "text", "GlyphMetrics"];
  lime_text_GlyphMetrics.prototype = {
    advance: null,
    height: null,
    horizontalBearing: null,
    verticalBearing: null,
    __class__: lime_text_GlyphMetrics,
  };
  var lime_text_GlyphPosition = function (glyph, advance, offset) {
    this.glyph = glyph;
    this.advance = advance;
    if (offset != null) {
      this.offset = offset;
    } else {
      this.offset = new lime_math_Vector2();
    }
  };
  $hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
  lime_text_GlyphPosition.__name__ = ["lime", "text", "GlyphPosition"];
  lime_text_GlyphPosition.prototype = {
    advance: null,
    glyph: null,
    offset: null,
    __class__: lime_text_GlyphPosition,
  };
  var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
  $hxClasses["lime.text._TextDirection.TextDirection_Impl_"] =
    lime_text__$TextDirection_TextDirection_$Impl_$;
  lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = [
    "lime",
    "text",
    "_TextDirection",
    "TextDirection_Impl_",
  ];
  lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {
    get_vertical: "get_vertical",
    get_horizontal: "get_horizontal",
    get_forward: "get_forward",
    get_backward: "get_backward",
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function (this1) {
    this1 ^= 1;
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.toString = function (this1) {
    switch (this1) {
      case 4:
        return "leftToRight";
      case 5:
        return "rightToLeft";
      case 6:
        return "topToBottom";
      case 7:
        return "bottomToTop";
      default:
        return "";
    }
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function (
    this1
  ) {
    return (this1 & -3) == 5;
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function (
    this1
  ) {
    return (this1 & -3) == 4;
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function (
    this1
  ) {
    return (this1 & -2) == 4;
  };
  lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function (
    this1
  ) {
    return (this1 & -2) == 6;
  };
  var lime_text_TextLayout = function (
    text,
    font,
    size,
    direction,
    script,
    language
  ) {
    if (language == null) {
      language = "en";
    }
    if (script == null) {
      script = "Zyyy";
    }
    if (direction == null) {
      direction = 4;
    }
    if (size == null) {
      size = 12;
    }
    if (text == null) {
      text = "";
    }
    this.set_text(text);
    this.set_font(font);
    this.set_size(size);
    this.__direction = direction;
    this.__script = script;
    this.__language = language;
    this.positions = [];
    this.__dirty = true;
  };
  $hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
  lime_text_TextLayout.__name__ = ["lime", "text", "TextLayout"];
  lime_text_TextLayout.prototype = {
    font: null,
    glyphs: null,
    positions: null,
    size: null,
    text: null,
    __dirty: null,
    __buffer: null,
    __direction: null,
    __handle: null,
    __language: null,
    __script: null,
    __position: function () {
      this.positions = [];
    },
    get_positions: function () {
      if (this.__dirty) {
        this.__dirty = false;
        this.__position();
      }
      return this.positions;
    },
    get_direction: function () {
      return this.__direction;
    },
    set_direction: function (value) {
      if (value == this.__direction) {
        return value;
      }
      this.__direction = value;
      this.__dirty = true;
      return value;
    },
    set_font: function (value) {
      if (value == this.font) {
        return value;
      }
      this.font = value;
      this.__dirty = true;
      return value;
    },
    get_glyphs: function () {
      var glyphs = [];
      var _g = 0;
      var _g1 = this.get_positions();
      while (_g < _g1.length) {
        var position = _g1[_g];
        ++_g;
        glyphs.push(position.glyph);
      }
      return glyphs;
    },
    get_language: function () {
      return this.__language;
    },
    set_language: function (value) {
      if (value == this.__language) {
        return value;
      }
      this.__language = value;
      this.__dirty = true;
      return value;
    },
    get_script: function () {
      return this.__script;
    },
    set_script: function (value) {
      if (value == this.__script) {
        return value;
      }
      this.__script = value;
      this.__dirty = true;
      return value;
    },
    set_size: function (value) {
      if (value == this.size) {
        return value;
      }
      this.size = value;
      this.__dirty = true;
      return value;
    },
    set_text: function (value) {
      if (value == this.text) {
        return value;
      }
      this.text = value;
      this.__dirty = true;
      return value;
    },
    __class__: lime_text_TextLayout,
    __properties__: {
      set_text: "set_text",
      set_size: "set_size",
      set_script: "set_script",
      get_script: "get_script",
      get_positions: "get_positions",
      set_language: "set_language",
      get_language: "get_language",
      get_glyphs: "get_glyphs",
      set_font: "set_font",
      set_direction: "set_direction",
      get_direction: "get_direction",
    },
  };
  var lime_text__$TextScript_TextScript_$Impl_$ = {};
  $hxClasses["lime.text._TextScript.TextScript_Impl_"] =
    lime_text__$TextScript_TextScript_$Impl_$;
  lime_text__$TextScript_TextScript_$Impl_$.__name__ = [
    "lime",
    "text",
    "_TextScript",
    "TextScript_Impl_",
  ];
  lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {
    get_rightToLeft: "get_rightToLeft",
  };
  lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function (this1) {
    switch (this1) {
      case "Arab":
      case "Armi":
      case "Avst":
      case "Cprt":
      case "Hebr":
      case "Khar":
      case "Lydi":
      case "Mand":
      case "Nkoo":
      case "Orkh":
      case "Phli":
      case "Phlp":
      case "Phnx":
      case "Samr":
      case "Sarb":
      case "Syrc":
      case "Thaa":
        return true;
      default:
        return false;
    }
  };
  var lime_ui_Gamepad = function (id) {
    this.onDisconnect = new lime_app__$Event_$Void_$Void();
    this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
    this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
    this.onAxisMove =
      new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
    this.id = id;
    this.connected = true;
  };
  $hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
  lime_ui_Gamepad.__name__ = ["lime", "ui", "Gamepad"];
  lime_ui_Gamepad.addMappings = function (mappings) {};
  lime_ui_Gamepad.__connect = function (id) {
    if (!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
      var gamepad = new lime_ui_Gamepad(id);
      lime_ui_Gamepad.devices.h[id] = gamepad;
      lime_ui_Gamepad.onConnect.dispatch(gamepad);
    }
  };
  lime_ui_Gamepad.__disconnect = function (id) {
    var gamepad = lime_ui_Gamepad.devices.h[id];
    if (gamepad != null) {
      gamepad.connected = false;
    }
    lime_ui_Gamepad.devices.remove(id);
    if (gamepad != null) {
      gamepad.onDisconnect.dispatch();
    }
  };
  lime_ui_Gamepad.prototype = {
    connected: null,
    id: null,
    onAxisMove: null,
    onButtonDown: null,
    onButtonUp: null,
    onDisconnect: null,
    get_guid: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].id;
    },
    get_name: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].id;
    },
    __class__: lime_ui_Gamepad,
    __properties__: { get_name: "get_name", get_guid: "get_guid" },
  };
  var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
  $hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] =
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_GamepadAxis",
    "GamepadAxis_Impl_",
  ];
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function (this1) {
    switch (this1) {
      case 0:
        return "LEFT_X";
      case 1:
        return "LEFT_Y";
      case 2:
        return "RIGHT_X";
      case 3:
        return "RIGHT_Y";
      case 4:
        return "TRIGGER_LEFT";
      case 5:
        return "TRIGGER_RIGHT";
      default:
        return "UNKNOWN (" + this1 + ")";
    }
  };
  var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
  $hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] =
    lime_ui__$GamepadButton_GamepadButton_$Impl_$;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_GamepadButton",
    "GamepadButton_Impl_",
  ];
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function (this1) {
    switch (this1) {
      case 0:
        return "A";
      case 1:
        return "B";
      case 2:
        return "X";
      case 3:
        return "Y";
      case 4:
        return "BACK";
      case 5:
        return "GUIDE";
      case 6:
        return "START";
      case 7:
        return "LEFT_STICK";
      case 8:
        return "RIGHT_STICK";
      case 9:
        return "LEFT_SHOULDER";
      case 10:
        return "RIGHT_SHOULDER";
      case 11:
        return "DPAD_UP";
      case 12:
        return "DPAD_DOWN";
      case 13:
        return "DPAD_LEFT";
      case 14:
        return "DPAD_RIGHT";
      default:
        return "UNKNOWN (" + this1 + ")";
    }
  };
  var lime_ui_Joystick = function (id) {
    this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Void();
    this.onHatMove =
      new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
    this.onDisconnect = new lime_app__$Event_$Void_$Void();
    this.onButtonUp = new lime_app__$Event_$Int_$Void();
    this.onButtonDown = new lime_app__$Event_$Int_$Void();
    this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
    this.id = id;
    this.connected = true;
  };
  $hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
  lime_ui_Joystick.__name__ = ["lime", "ui", "Joystick"];
  lime_ui_Joystick.__connect = function (id) {
    if (!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
      var joystick = new lime_ui_Joystick(id);
      lime_ui_Joystick.devices.h[id] = joystick;
      lime_ui_Joystick.onConnect.dispatch(joystick);
    }
  };
  lime_ui_Joystick.__disconnect = function (id) {
    var joystick = lime_ui_Joystick.devices.h[id];
    if (joystick != null) {
      joystick.connected = false;
    }
    lime_ui_Joystick.devices.remove(id);
    if (joystick != null) {
      joystick.onDisconnect.dispatch();
    }
  };
  lime_ui_Joystick.__getDeviceData = function () {
    if (navigator.getGamepads) {
      return navigator.getGamepads();
    } else if (navigator.webkitGetGamepads) {
      return navigator.webkitGetGamepads();
    } else {
      return null;
    }
  };
  lime_ui_Joystick.prototype = {
    connected: null,
    id: null,
    onAxisMove: null,
    onButtonDown: null,
    onButtonUp: null,
    onDisconnect: null,
    onHatMove: null,
    onTrackballMove: null,
    get_guid: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].id;
    },
    get_name: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].id;
    },
    get_numAxes: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].axes.length;
    },
    get_numButtons: function () {
      var devices = lime_ui_Joystick.__getDeviceData();
      return devices[this.id].buttons.length;
    },
    get_numHats: function () {
      return 0;
    },
    get_numTrackballs: function () {
      return 0;
    },
    __class__: lime_ui_Joystick,
    __properties__: {
      get_numTrackballs: "get_numTrackballs",
      get_numHats: "get_numHats",
      get_numButtons: "get_numButtons",
      get_numAxes: "get_numAxes",
      get_name: "get_name",
      get_guid: "get_guid",
    },
  };
  var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
  $hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] =
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_JoystickHatPosition",
    "JoystickHatPosition_Impl_",
  ];
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {
    set_up: "set_up",
    get_up: "get_up",
    set_right: "set_right",
    get_right: "get_right",
    set_left: "set_left",
    get_left: "get_left",
    set_down: "set_down",
    get_down: "get_down",
    set_center: "set_center",
    get_center: "get_center",
  };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function (
    value
  ) {
    var this1 = value;
    return this1;
  };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center =
    function (this1) {
      return this1 == 0;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center =
    function (this1, value) {
      if (value) {
        this1 = 0;
      }
      return value;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down =
    function (this1) {
      return (this1 & 4) > 0;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down =
    function (this1, value) {
      if (value) {
        this1 |= 4;
      } else {
        this1 &= 268435455 - 4;
      }
      return value;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left =
    function (this1) {
      return (this1 & 8) > 0;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left =
    function (this1, value) {
      if (value) {
        this1 |= 8;
      } else {
        this1 &= 268435455 - 8;
      }
      return value;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right =
    function (this1) {
      return (this1 & 2) > 0;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right =
    function (this1, value) {
      if (value) {
        this1 |= 2;
      } else {
        this1 &= 268435455 - 2;
      }
      return value;
    };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function (
    this1
  ) {
    return (this1 & 1) > 0;
  };
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 1;
    } else {
      this1 &= 268435455 - 1;
    }
    return value;
  };
  var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
  $hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] =
    lime_ui__$KeyCode_KeyCode_$Impl_$;
  lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_KeyCode",
    "KeyCode_Impl_",
  ];
  lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function (scanCode) {
    return 0;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function (keyCode) {
    return 0;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function (a, b) {
    return a > b;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function (a, b) {
    return a >= b;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function (a, b) {
    return a < b;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function (a, b) {
    return a <= b;
  };
  lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function (a, b) {
    return a + b;
  };
  var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
  $hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] =
    lime_ui__$KeyModifier_KeyModifier_$Impl_$;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_KeyModifier",
    "KeyModifier_Impl_",
  ];
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {
    set_shiftKey: "set_shiftKey",
    get_shiftKey: "get_shiftKey",
    set_numLock: "set_numLock",
    get_numLock: "get_numLock",
    set_metaKey: "set_metaKey",
    get_metaKey: "get_metaKey",
    set_ctrlKey: "set_ctrlKey",
    get_ctrlKey: "get_ctrlKey",
    set_capsLock: "set_capsLock",
    get_capsLock: "get_capsLock",
    set_altKey: "set_altKey",
    get_altKey: "get_altKey",
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function (this1) {
    if ((this1 & 256) <= 0) {
      return (this1 & 512) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 768;
    } else {
      this1 &= 268435455 - 768;
    }
    return value;
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function (this1) {
    if ((this1 & 8192) <= 0) {
      return (this1 & 8192) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 8192;
    } else {
      this1 &= 268435455 - 8192;
    }
    return value;
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function (this1) {
    if ((this1 & 64) <= 0) {
      return (this1 & 128) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 192;
    } else {
      this1 &= 268435455 - 192;
    }
    return value;
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function (this1) {
    if ((this1 & 1024) <= 0) {
      return (this1 & 2048) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 3072;
    } else {
      this1 &= 268435455 - 3072;
    }
    return value;
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function (this1) {
    if ((this1 & 4096) <= 0) {
      return (this1 & 4096) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 4096;
    } else {
      this1 &= 268435455 - 4096;
    }
    return value;
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function (this1) {
    if ((this1 & 1) <= 0) {
      return (this1 & 2) > 0;
    } else {
      return true;
    }
  };
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function (
    this1,
    value
  ) {
    if (value) {
      this1 |= 3;
    } else {
      this1 &= 268435455 - 3;
    }
    return value;
  };
  var lime_ui_Mouse = function () {};
  $hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
  lime_ui_Mouse.__name__ = ["lime", "ui", "Mouse"];
  lime_ui_Mouse.__properties__ = {
    set_lock: "set_lock",
    get_lock: "get_lock",
    set_cursor: "set_cursor",
    get_cursor: "get_cursor",
  };
  lime_ui_Mouse.hide = function () {
    lime__$backend_html5_HTML5Mouse.hide();
  };
  lime_ui_Mouse.show = function () {
    lime__$backend_html5_HTML5Mouse.show();
  };
  lime_ui_Mouse.warp = function (x, y, window) {
    lime__$backend_html5_HTML5Mouse.warp(x, y, window);
  };
  lime_ui_Mouse.get_cursor = function () {
    return lime__$backend_html5_HTML5Mouse.get_cursor();
  };
  lime_ui_Mouse.set_cursor = function (value) {
    return lime__$backend_html5_HTML5Mouse.set_cursor(value);
  };
  lime_ui_Mouse.get_lock = function () {
    return lime__$backend_html5_HTML5Mouse.get_lock();
  };
  lime_ui_Mouse.set_lock = function (value) {
    return lime__$backend_html5_HTML5Mouse.set_lock(value);
  };
  var lime_ui_MouseCursor = ($hxClasses["lime.ui.MouseCursor"] = {
    __ename__: ["lime", "ui", "MouseCursor"],
    __constructs__: [
      "ARROW",
      "CROSSHAIR",
      "DEFAULT",
      "MOVE",
      "POINTER",
      "RESIZE_NESW",
      "RESIZE_NS",
      "RESIZE_NWSE",
      "RESIZE_WE",
      "TEXT",
      "WAIT",
      "WAIT_ARROW",
      "CUSTOM",
    ],
  });
  lime_ui_MouseCursor.ARROW = ["ARROW", 0];
  lime_ui_MouseCursor.ARROW.toString = $estr;
  lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR", 1];
  lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
  lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.DEFAULT = ["DEFAULT", 2];
  lime_ui_MouseCursor.DEFAULT.toString = $estr;
  lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.MOVE = ["MOVE", 3];
  lime_ui_MouseCursor.MOVE.toString = $estr;
  lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.POINTER = ["POINTER", 4];
  lime_ui_MouseCursor.POINTER.toString = $estr;
  lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW", 5];
  lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
  lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS", 6];
  lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
  lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE", 7];
  lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
  lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE", 8];
  lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
  lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.TEXT = ["TEXT", 9];
  lime_ui_MouseCursor.TEXT.toString = $estr;
  lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.WAIT = ["WAIT", 10];
  lime_ui_MouseCursor.WAIT.toString = $estr;
  lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW", 11];
  lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
  lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
  lime_ui_MouseCursor.CUSTOM = ["CUSTOM", 12];
  lime_ui_MouseCursor.CUSTOM.toString = $estr;
  lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
  var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
  $hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] =
    lime_ui__$ScanCode_ScanCode_$Impl_$;
  lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = [
    "lime",
    "ui",
    "_ScanCode",
    "ScanCode_Impl_",
  ];
  lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function (keyCode) {
    return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function (scanCode) {
    return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function (a, b) {
    return a > b;
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function (a, b) {
    return a >= b;
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function (a, b) {
    return a < b;
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function (a, b) {
    return a <= b;
  };
  lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function (a, b) {
    return a + b;
  };
  var lime_ui_Touch = function (x, y, id, dx, dy, pressure, device) {
    this.x = x;
    this.y = y;
    this.id = id;
    this.dx = dx;
    this.dy = dy;
    this.pressure = pressure;
    this.device = device;
  };
  $hxClasses["lime.ui.Touch"] = lime_ui_Touch;
  lime_ui_Touch.__name__ = ["lime", "ui", "Touch"];
  lime_ui_Touch.prototype = {
    device: null,
    dx: null,
    dy: null,
    id: null,
    pressure: null,
    x: null,
    y: null,
    __class__: lime_ui_Touch,
  };
  var lime_ui_Window = function (config) {
    this.onTextInput = new lime_app__$Event_$String_$Void();
    this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
    this.onRestore = new lime_app__$Event_$Void_$Void();
    this.onResize = new lime_app__$Event_$Int_$Int_$Void();
    this.onMove = new lime_app__$Event_$Float_$Float_$Void();
    this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
    this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
    this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
    this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
    this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
    this.onMinimize = new lime_app__$Event_$Void_$Void();
    this.onLeave = new lime_app__$Event_$Void_$Void();
    this.onKeyUp =
      new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
    this.onKeyDown =
      new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
    this.onFullscreen = new lime_app__$Event_$Void_$Void();
    this.onFocusOut = new lime_app__$Event_$Void_$Void();
    this.onFocusIn = new lime_app__$Event_$Void_$Void();
    this.onEnter = new lime_app__$Event_$Void_$Void();
    this.onDropFile = new lime_app__$Event_$String_$Void();
    this.onDeactivate = new lime_app__$Event_$Void_$Void();
    this.onCreate = new lime_app__$Event_$Void_$Void();
    this.onClose = new lime_app__$Event_$Void_$Void();
    this.onActivate = new lime_app__$Event_$Void_$Void();
    this.config = config;
    this.__width = 0;
    this.__height = 0;
    this.__fullscreen = false;
    this.__scale = 1;
    this.__x = 0;
    this.__y = 0;
    this.__title = "";
    this.id = -1;
    if (config != null) {
      if (Object.prototype.hasOwnProperty.call(config, "width")) {
        this.__width = config.width;
      }
      if (Object.prototype.hasOwnProperty.call(config, "height")) {
        this.__height = config.height;
      }
      if (Object.prototype.hasOwnProperty.call(config, "x")) {
        this.__x = config.x;
      }
      if (Object.prototype.hasOwnProperty.call(config, "y")) {
        this.__y = config.y;
      }
      if (Object.prototype.hasOwnProperty.call(config, "fullscreen")) {
        this.__fullscreen = config.fullscreen;
      }
      if (Object.prototype.hasOwnProperty.call(config, "borderless")) {
        this.__borderless = config.borderless;
      }
      if (Object.prototype.hasOwnProperty.call(config, "resizable")) {
        this.__resizable = config.resizable;
      }
      if (Object.prototype.hasOwnProperty.call(config, "title")) {
        this.__title = config.title;
      }
    }
    this.backend = new lime__$backend_html5_HTML5Window(this);
  };
  $hxClasses["lime.ui.Window"] = lime_ui_Window;
  lime_ui_Window.__name__ = ["lime", "ui", "Window"];
  lime_ui_Window.prototype = {
    application: null,
    config: null,
    display: null,
    id: null,
    onActivate: null,
    onClose: null,
    onCreate: null,
    onDeactivate: null,
    onDropFile: null,
    onEnter: null,
    onFocusIn: null,
    onFocusOut: null,
    onFullscreen: null,
    onKeyDown: null,
    onKeyUp: null,
    onLeave: null,
    onMinimize: null,
    onMouseDown: null,
    onMouseMove: null,
    onMouseMoveRelative: null,
    onMouseUp: null,
    onMouseWheel: null,
    onMove: null,
    onResize: null,
    onRestore: null,
    onTextEdit: null,
    onTextInput: null,
    renderer: null,
    scale: null,
    stage: null,
    backend: null,
    __borderless: null,
    __fullscreen: null,
    __height: null,
    __maximized: null,
    __minimized: null,
    __resizable: null,
    __scale: null,
    __title: null,
    __width: null,
    __x: null,
    __y: null,
    alert: function (message, title) {
      this.backend.alert(message, title);
    },
    close: function () {
      this.backend.close();
    },
    create: function (application) {
      this.application = application;
      this.backend.create(application);
      if (this.renderer != null) {
        this.renderer.create();
      }
    },
    focus: function () {
      this.backend.focus();
    },
    move: function (x, y) {
      this.backend.move(x, y);
      this.__x = x;
      this.__y = y;
    },
    resize: function (width, height) {
      this.backend.resize(width, height);
      this.__width = width;
      this.__height = height;
    },
    setIcon: function (image) {
      if (image == null) {
        return;
      }
      this.backend.setIcon(image);
    },
    toString: function () {
      return "[object Window]";
    },
    get_display: function () {
      return this.backend.getDisplay();
    },
    get_displayMode: function () {
      return this.backend.getDisplayMode();
    },
    set_displayMode: function (value) {
      return this.backend.setDisplayMode(value);
    },
    get_borderless: function () {
      return this.__borderless;
    },
    set_borderless: function (value) {
      return (this.__borderless = this.backend.setBorderless(value));
    },
    get_enableTextEvents: function () {
      return this.backend.getEnableTextEvents();
    },
    set_enableTextEvents: function (value) {
      return this.backend.setEnableTextEvents(value);
    },
    get_fullscreen: function () {
      return this.__fullscreen;
    },
    set_fullscreen: function (value) {
      return (this.__fullscreen = this.backend.setFullscreen(value));
    },
    get_height: function () {
      return this.__height;
    },
    set_height: function (value) {
      this.resize(this.__width, value);
      return this.__height;
    },
    get_maximized: function () {
      return this.__maximized;
    },
    set_maximized: function (value) {
      this.__minimized = false;
      return (this.__maximized = this.backend.setMaximized(value));
    },
    get_minimized: function () {
      return this.__minimized;
    },
    set_minimized: function (value) {
      this.__maximized = false;
      return (this.__minimized = this.backend.setMinimized(value));
    },
    get_resizable: function () {
      return this.__resizable;
    },
    set_resizable: function (value) {
      this.__resizable = this.backend.setResizable(value);
      return this.__resizable;
    },
    get_scale: function () {
      return this.__scale;
    },
    get_title: function () {
      return this.__title;
    },
    set_title: function (value) {
      return (this.__title = this.backend.setTitle(value));
    },
    get_width: function () {
      return this.__width;
    },
    set_width: function (value) {
      this.resize(value, this.__height);
      return this.__width;
    },
    get_x: function () {
      return this.__x;
    },
    set_x: function (value) {
      this.move(value, this.__y);
      return this.__x;
    },
    get_y: function () {
      return this.__y;
    },
    set_y: function (value) {
      this.move(this.__x, value);
      return this.__y;
    },
    __class__: lime_ui_Window,
    __properties__: {
      set_y: "set_y",
      get_y: "get_y",
      set_x: "set_x",
      get_x: "get_x",
      set_width: "set_width",
      get_width: "get_width",
      set_title: "set_title",
      get_title: "get_title",
      get_scale: "get_scale",
      set_resizable: "set_resizable",
      get_resizable: "get_resizable",
      set_minimized: "set_minimized",
      get_minimized: "get_minimized",
      set_maximized: "set_maximized",
      get_maximized: "get_maximized",
      set_height: "set_height",
      get_height: "get_height",
      set_fullscreen: "set_fullscreen",
      get_fullscreen: "get_fullscreen",
      set_enableTextEvents: "set_enableTextEvents",
      get_enableTextEvents: "get_enableTextEvents",
      set_displayMode: "set_displayMode",
      get_displayMode: "get_displayMode",
      get_display: "get_display",
      set_borderless: "set_borderless",
      get_borderless: "get_borderless",
    },
  };
  var lime_utils_TAError = ($hxClasses["lime.utils.TAError"] = {
    __ename__: ["lime", "utils", "TAError"],
    __constructs__: ["RangeError"],
  });
  lime_utils_TAError.RangeError = ["RangeError", 0];
  lime_utils_TAError.RangeError.toString = $estr;
  lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
  var lime_utils_AssetCache = function () {
    this.enabled = true;
    this.audio = new haxe_ds_StringMap();
    this.font = new haxe_ds_StringMap();
    this.image = new haxe_ds_StringMap();
    this.version = 564019;
  };
  $hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
  lime_utils_AssetCache.__name__ = ["lime", "utils", "AssetCache"];
  lime_utils_AssetCache.prototype = {
    audio: null,
    enabled: null,
    image: null,
    font: null,
    version: null,
    exists: function (id, type) {
      if (type == "IMAGE" || type == null) {
        var _this = this.image;
        if (
          __map_reserved[id] != null
            ? _this.existsReserved(id)
            : _this.h.hasOwnProperty(id)
        ) {
          return true;
        }
      }
      if (type == "FONT" || type == null) {
        var _this1 = this.font;
        if (
          __map_reserved[id] != null
            ? _this1.existsReserved(id)
            : _this1.h.hasOwnProperty(id)
        ) {
          return true;
        }
      }
      if (type == "SOUND" || type == "MUSIC" || type == null) {
        var _this2 = this.audio;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          return true;
        }
      }
      return false;
    },
    set: function (id, type, asset) {
      switch (type) {
        case "FONT":
          this.font.set(id, asset);
          break;
        case "IMAGE":
          if (!js_Boot.__instanceof(asset, lime_graphics_Image)) {
            throw new js__$Boot_HaxeError(
              "Cannot cache non-Image asset: " + Std.string(asset) + " as Image"
            );
          }
          this.image.set(id, asset);
          break;
        case "MUSIC":
        case "SOUND":
          if (!js_Boot.__instanceof(asset, lime_media_AudioBuffer)) {
            throw new js__$Boot_HaxeError(
              "Cannot cache non-AudioBuffer asset: " +
                Std.string(asset) +
                " as AudioBuffer"
            );
          }
          this.audio.set(id, asset);
          break;
        default:
          throw new js__$Boot_HaxeError(type + " assets are not cachable");
      }
    },
    clear: function (prefix) {
      if (prefix == null) {
        this.audio = new haxe_ds_StringMap();
        this.font = new haxe_ds_StringMap();
        this.image = new haxe_ds_StringMap();
      } else {
        var keys = this.audio.keys();
        var key = keys;
        while (key.hasNext()) {
          var key1 = key.next();
          if (StringTools.startsWith(key1, prefix)) {
            this.audio.remove(key1);
          }
        }
        var keys1 = this.font.keys();
        var key2 = keys1;
        while (key2.hasNext()) {
          var key3 = key2.next();
          if (StringTools.startsWith(key3, prefix)) {
            this.font.remove(key3);
          }
        }
        var keys2 = this.image.keys();
        var key4 = keys2;
        while (key4.hasNext()) {
          var key5 = key4.next();
          if (StringTools.startsWith(key5, prefix)) {
            this.image.remove(key5);
          }
        }
      }
    },
    __class__: lime_utils_AssetCache,
  };
  var lime_utils_AssetLibrary = function () {
    this.types = new haxe_ds_StringMap();
    this.sizes = new haxe_ds_StringMap();
    this.preload = new haxe_ds_StringMap();
    this.paths = new haxe_ds_StringMap();
    this.pathGroups = new haxe_ds_StringMap();
    this.classTypes = new haxe_ds_StringMap();
    this.cachedText = new haxe_ds_StringMap();
    this.cachedImages = new haxe_ds_StringMap();
    this.cachedFonts = new haxe_ds_StringMap();
    this.cachedBytes = new haxe_ds_StringMap();
    this.cachedAudioBuffers = new haxe_ds_StringMap();
    this.onChange = new lime_app__$Event_$Void_$Void();
    this.bytesLoaded = 0;
    this.bytesTotal = 0;
  };
  $hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
  lime_utils_AssetLibrary.__name__ = ["lime", "utils", "AssetLibrary"];
  lime_utils_AssetLibrary.fromBytes = function (bytes, rootPath) {
    return lime_utils_AssetLibrary.fromManifest(
      lime_utils_AssetManifest.fromBytes(bytes, rootPath)
    );
  };
  lime_utils_AssetLibrary.fromFile = function (path, rootPath) {
    return lime_utils_AssetLibrary.fromManifest(
      lime_utils_AssetManifest.fromFile(path, rootPath)
    );
  };
  lime_utils_AssetLibrary.fromManifest = function (manifest) {
    if (manifest == null) {
      return null;
    }
    var library = null;
    if (manifest.libraryType == null) {
      library = new lime_utils_AssetLibrary();
    } else {
      var libraryClass = Type.resolveClass(manifest.libraryType);
      if (libraryClass != null) {
        library = Type.createInstance(libraryClass, manifest.libraryArgs);
      } else {
        lime_utils_Log.warn(
          "Could not find library type: " + manifest.libraryType,
          {
            fileName: "AssetLibrary.hx",
            lineNumber: 138,
            className: "lime.utils.AssetLibrary",
            methodName: "fromManifest",
          }
        );
        return null;
      }
    }
    library.__fromManifest(manifest);
    return library;
  };
  lime_utils_AssetLibrary.loadFromBytes = function (bytes, rootPath) {
    return lime_utils_AssetManifest
      .loadFromBytes(bytes, rootPath)
      .then(function (manifest) {
        return lime_utils_AssetLibrary.loadFromManifest(manifest);
      });
  };
  lime_utils_AssetLibrary.loadFromFile = function (path, rootPath) {
    return lime_utils_AssetManifest
      .loadFromFile(path, rootPath)
      .then(function (manifest) {
        return lime_utils_AssetLibrary.loadFromManifest(manifest);
      });
  };
  lime_utils_AssetLibrary.loadFromManifest = function (manifest) {
    var library = lime_utils_AssetLibrary.fromManifest(manifest);
    if (library != null) {
      return library.load();
    } else {
      return lime_app_Future.withError("Could not load asset manifest");
    }
  };
  lime_utils_AssetLibrary.prototype = {
    onChange: null,
    assetsLoaded: null,
    assetsTotal: null,
    bytesLoaded: null,
    bytesLoadedCache: null,
    bytesTotal: null,
    cachedAudioBuffers: null,
    cachedBytes: null,
    cachedFonts: null,
    cachedImages: null,
    cachedText: null,
    classTypes: null,
    loaded: null,
    pathGroups: null,
    paths: null,
    preload: null,
    promise: null,
    sizes: null,
    types: null,
    exists: function (id, type) {
      var requestedType = type != null ? js_Boot.__cast(type, String) : null;
      var _this = this.types;
      var assetType =
        __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
      if (assetType != null) {
        if (
          assetType == requestedType ||
          ((requestedType == "SOUND" || requestedType == "MUSIC") &&
            (assetType == "MUSIC" || assetType == "SOUND"))
        ) {
          return true;
        }
        if (
          requestedType == "BINARY" ||
          requestedType == null ||
          (assetType == "BINARY" && requestedType == "TEXT")
        ) {
          return true;
        }
      }
      return false;
    },
    getAsset: function (id, type) {
      switch (type) {
        case "BINARY":
          return this.getBytes(id);
        case "FONT":
          return this.getFont(id);
        case "IMAGE":
          return this.getImage(id);
        case "MUSIC":
        case "SOUND":
          return this.getAudioBuffer(id);
        case "TEMPLATE":
          throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
          break;
        case "TEXT":
          return this.getText(id);
        default:
          throw new js__$Boot_HaxeError("Unknown asset type: " + type);
      }
    },
    getAudioBuffer: function (id) {
      var _this = this.cachedAudioBuffers;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedAudioBuffers;
        if (__map_reserved[id] != null) {
          return _this1.getReserved(id);
        } else {
          return _this1.h[id];
        }
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return lime_media_AudioBuffer.fromBytes(
            js_Boot.__cast(
              Type.createInstance(
                __map_reserved[id] != null
                  ? _this3.getReserved(id)
                  : _this3.h[id],
                []
              ),
              haxe_io_Bytes
            )
          );
        } else {
          var _this4 = this.paths;
          return lime_media_AudioBuffer.fromFile(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    getBytes: function (id) {
      var _this = this.cachedBytes;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedBytes;
        if (__map_reserved[id] != null) {
          return _this1.getReserved(id);
        } else {
          return _this1.h[id];
        }
      } else {
        var _this2 = this.cachedText;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.cachedText;
          var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(
            __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]
          );
          var _this4 = this.cachedBytes;
          if (__map_reserved[id] != null) {
            _this4.setReserved(id, bytes);
          } else {
            _this4.h[id] = bytes;
          }
          return bytes;
        } else {
          var _this5 = this.classTypes;
          if (
            __map_reserved[id] != null
              ? _this5.existsReserved(id)
              : _this5.h.hasOwnProperty(id)
          ) {
            var _this6 = this.classTypes;
            return js_Boot.__cast(
              Type.createInstance(
                __map_reserved[id] != null
                  ? _this6.getReserved(id)
                  : _this6.h[id],
                []
              ),
              haxe_io_Bytes
            );
          } else {
            var _this7 = this.paths;
            return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(
              __map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]
            );
          }
        }
      }
    },
    getFont: function (id) {
      var _this = this.cachedFonts;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedFonts;
        if (__map_reserved[id] != null) {
          return _this1.getReserved(id);
        } else {
          return _this1.h[id];
        }
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return js_Boot.__cast(
            Type.createInstance(
              __map_reserved[id] != null
                ? _this3.getReserved(id)
                : _this3.h[id],
              []
            ),
            lime_text_Font
          );
        } else {
          var _this4 = this.paths;
          return lime_text_Font.fromFile(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    getImage: function (id) {
      var _this = this.cachedImages;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedImages;
        if (__map_reserved[id] != null) {
          return _this1.getReserved(id);
        } else {
          return _this1.h[id];
        }
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return js_Boot.__cast(
            Type.createInstance(
              __map_reserved[id] != null
                ? _this3.getReserved(id)
                : _this3.h[id],
              []
            ),
            lime_graphics_Image
          );
        } else {
          var _this4 = this.paths;
          return lime_graphics_Image.fromFile(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    getPath: function (id) {
      var _this = this.paths;
      if (__map_reserved[id] != null) {
        return _this.getReserved(id);
      } else {
        return _this.h[id];
      }
    },
    getText: function (id) {
      var _this = this.cachedText;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedText;
        if (__map_reserved[id] != null) {
          return _this1.getReserved(id);
        } else {
          return _this1.h[id];
        }
      } else {
        var bytes = this.getBytes(id);
        if (bytes == null) {
          return null;
        } else {
          return bytes.getString(0, bytes.length);
        }
      }
    },
    isLocal: function (id, type) {
      var _this = this.classTypes;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        return true;
      }
      var requestedType = type != null ? js_Boot.__cast(type, String) : null;
      switch (requestedType) {
        case "IMAGE":
          return this.cachedImages.exists(id);
        case "MUSIC":
        case "SOUND":
          return this.cachedAudioBuffers.exists(id);
        default:
          if (!this.cachedBytes.exists(id)) {
            return this.cachedText.exists(id);
          } else {
            return true;
          }
      }
    },
    list: function (type) {
      var requestedType = type != null ? js_Boot.__cast(type, String) : null;
      var items = [];
      var id = this.types.keys();
      while (id.hasNext()) {
        var id1 = id.next();
        if (requestedType == null || this.exists(id1, type)) {
          items.push(id1);
        }
      }
      return items;
    },
    loadAsset: function (id, type) {
      switch (type) {
        case "BINARY":
          return this.loadBytes(id);
        case "FONT":
          return this.loadFont(id);
        case "IMAGE":
          return this.loadImage(id);
        case "MUSIC":
        case "SOUND":
          return this.loadAudioBuffer(id);
        case "TEMPLATE":
          throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
          break;
        case "TEXT":
          return this.loadText(id);
        default:
          throw new js__$Boot_HaxeError("Unknown asset type: " + type);
      }
    },
    load: function () {
      if (this.loaded) {
        return lime_app_Future.withValue(this);
      }
      if (this.promise == null) {
        this.promise = new lime_app_Promise();
        this.bytesLoadedCache = new haxe_ds_StringMap();
        this.assetsLoaded = 0;
        this.assetsTotal = 1;
        var id = this.preload.keys();
        while (id.hasNext()) {
          var id1 = id.next();
          var _this = this.preload;
          if (
            !(__map_reserved[id1] != null
              ? _this.getReserved(id1)
              : _this.h[id1])
          ) {
            continue;
          }
          var _this1 = this.types;
          lime_utils_Log.verbose(
            "Preloading asset: " +
              id1 +
              " [" +
              (__map_reserved[id1] != null
                ? _this1.getReserved(id1)
                : _this1.h[id1]) +
              "]",
            {
              fileName: "AssetLibrary.hx",
              lineNumber: 434,
              className: "lime.utils.AssetLibrary",
              methodName: "load",
            }
          );
          var _g = this.types.get(id1);
          if (_g != null) {
            switch (_g) {
              case "BINARY":
                this.assetsTotal++;
                var future = this.loadBytes(id1);
                future.onProgress(
                  (function (id2, f) {
                    return function (a1, a2) {
                      f[0](id2[0], a1, a2);
                    };
                  })([id1], [$bind(this, this.load_onProgress)])
                );
                future.onError(
                  (function (id3, f1) {
                    return function (a11) {
                      f1[0](id3[0], a11);
                    };
                  })([id1], [$bind(this, this.load_onError)])
                );
                future.onComplete(
                  (function (id4, f2) {
                    return function (a12) {
                      f2[0](id4[0], a12);
                    };
                  })([id1], [$bind(this, this.loadBytes_onComplete)])
                );
                break;
              case "FONT":
                this.assetsTotal++;
                var future1 = this.loadFont(id1);
                future1.onProgress(
                  (function (id5, f3) {
                    return function (a13, a21) {
                      f3[0](id5[0], a13, a21);
                    };
                  })([id1], [$bind(this, this.load_onProgress)])
                );
                future1.onError(
                  (function (id6, f4) {
                    return function (a14) {
                      f4[0](id6[0], a14);
                    };
                  })([id1], [$bind(this, this.load_onError)])
                );
                future1.onComplete(
                  (function (id7, f5) {
                    return function (a15) {
                      f5[0](id7[0], a15);
                    };
                  })([id1], [$bind(this, this.loadFont_onComplete)])
                );
                break;
              case "IMAGE":
                this.assetsTotal++;
                var future2 = this.loadImage(id1);
                future2.onProgress(
                  (function (id8, f6) {
                    return function (a16, a22) {
                      f6[0](id8[0], a16, a22);
                    };
                  })([id1], [$bind(this, this.load_onProgress)])
                );
                future2.onError(
                  (function (id9, f7) {
                    return function (a17) {
                      f7[0](id9[0], a17);
                    };
                  })([id1], [$bind(this, this.load_onError)])
                );
                future2.onComplete(
                  (function (id10, f8) {
                    return function (a18) {
                      f8[0](id10[0], a18);
                    };
                  })([id1], [$bind(this, this.loadImage_onComplete)])
                );
                break;
              case "MUSIC":
              case "SOUND":
                this.assetsTotal++;
                var future3 = this.loadAudioBuffer(id1);
                future3.onProgress(
                  (function (id11, f9) {
                    return function (a19, a23) {
                      f9[0](id11[0], a19, a23);
                    };
                  })([id1], [$bind(this, this.load_onProgress)])
                );
                future3.onError(
                  (function (id12, f10) {
                    return function (a110) {
                      f10[0](id12[0], a110);
                    };
                  })([id1], [$bind(this, this.load_onError)])
                );
                future3.onComplete(
                  (function (id13, f11) {
                    return function (a111) {
                      f11[0](id13[0], a111);
                    };
                  })([id1], [$bind(this, this.loadAudioBuffer_onComplete)])
                );
                break;
              case "TEXT":
                this.assetsTotal++;
                var future4 = this.loadText(id1);
                future4.onProgress(
                  (function (id14, f12) {
                    return function (a112, a24) {
                      f12[0](id14[0], a112, a24);
                    };
                  })([id1], [$bind(this, this.load_onProgress)])
                );
                future4.onError(
                  (function (id15, f13) {
                    return function (a113) {
                      f13[0](id15[0], a113);
                    };
                  })([id1], [$bind(this, this.load_onError)])
                );
                future4.onComplete(
                  (function (id16, f14) {
                    return function (a114) {
                      f14[0](id16[0], a114);
                    };
                  })([id1], [$bind(this, this.loadText_onComplete)])
                );
                break;
              default:
            }
          }
        }
        this.__assetLoaded(null);
      }
      return this.promise.future;
    },
    loadAudioBuffer: function (id) {
      var _this = this.cachedAudioBuffers;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedAudioBuffers;
        return lime_app_Future.withValue(
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]
        );
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return lime_app_Future.withValue(
            Type.createInstance(
              __map_reserved[id] != null
                ? _this3.getReserved(id)
                : _this3.h[id],
              []
            )
          );
        } else {
          var _this4 = this.pathGroups;
          if (
            __map_reserved[id] != null
              ? _this4.existsReserved(id)
              : _this4.h.hasOwnProperty(id)
          ) {
            var _this5 = this.pathGroups;
            return lime_media_AudioBuffer.loadFromFiles(
              __map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]
            );
          } else {
            var _this6 = this.paths;
            return lime_media_AudioBuffer.loadFromFile(
              __map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]
            );
          }
        }
      }
    },
    loadBytes: function (id) {
      var _this = this.cachedBytes;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedBytes;
        return lime_app_Future.withValue(
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]
        );
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return lime_app_Future.withValue(
            Type.createInstance(
              __map_reserved[id] != null
                ? _this3.getReserved(id)
                : _this3.h[id],
              []
            )
          );
        } else {
          var _this4 = this.paths;
          return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    loadFont: function (id) {
      var _this = this.cachedFonts;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedFonts;
        return lime_app_Future.withValue(
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]
        );
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          var font = Type.createInstance(
            __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],
            []
          );
          return lime_text_Font.loadFromName(font.name);
        } else {
          var _this4 = this.paths;
          return lime_text_Font.loadFromName(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    loadImage: function (id) {
      var _this = this.cachedImages;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedImages;
        return lime_app_Future.withValue(
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]
        );
      } else {
        var _this2 = this.classTypes;
        if (
          __map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id)
        ) {
          var _this3 = this.classTypes;
          return lime_app_Future.withValue(
            Type.createInstance(
              __map_reserved[id] != null
                ? _this3.getReserved(id)
                : _this3.h[id],
              []
            )
          );
        } else {
          var _this4 = this.paths;
          return lime_graphics_Image.loadFromFile(
            __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]
          );
        }
      }
    },
    loadText: function (id) {
      var _this = this.cachedText;
      if (
        __map_reserved[id] != null
          ? _this.existsReserved(id)
          : _this.h.hasOwnProperty(id)
      ) {
        var _this1 = this.cachedText;
        return lime_app_Future.withValue(
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]
        );
      } else {
        var tmp;
        var _this2 = this.cachedBytes;
        if (
          !(__map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id))
        ) {
          var _this3 = this.classTypes;
          if (__map_reserved[id] != null) {
            tmp = _this3.existsReserved(id);
          } else {
            tmp = _this3.h.hasOwnProperty(id);
          }
        } else {
          tmp = true;
        }
        if (tmp) {
          var bytes = this.getBytes(id);
          if (bytes == null) {
            return lime_app_Future.withValue(null);
          } else {
            var text = bytes.getString(0, bytes.length);
            var _this4 = this.cachedText;
            if (__map_reserved[id] != null) {
              _this4.setReserved(id, text);
            } else {
              _this4.h[id] = text;
            }
            return lime_app_Future.withValue(text);
          }
        } else {
          var request = new lime_net__$HTTPRequest_$String();
          var _this5 = this.paths;
          return request.load(
            __map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]
          );
        }
      }
    },
    unload: function () {},
    __assetLoaded: function (id) {
      this.assetsLoaded++;
      if (id != null) {
        var _this = this.types;
        lime_utils_Log.verbose(
          "Loaded asset: " +
            id +
            " [" +
            (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) +
            "] (" +
            (this.assetsLoaded - 1) +
            "/" +
            (this.assetsTotal - 1) +
            ")",
          {
            fileName: "AssetLibrary.hx",
            lineNumber: 680,
            className: "lime.utils.AssetLibrary",
            methodName: "__assetLoaded",
          }
        );
      }
      if (id != null) {
        var _this1 = this.sizes;
        var size =
          __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
        var _this2 = this.bytesLoadedCache;
        if (
          !(__map_reserved[id] != null
            ? _this2.existsReserved(id)
            : _this2.h.hasOwnProperty(id))
        ) {
          this.bytesLoaded += size;
        } else {
          var _this3 = this.bytesLoadedCache;
          var cache =
            __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
          if (cache < size) {
            this.bytesLoaded += size - cache;
          }
        }
        var _this4 = this.bytesLoadedCache;
        if (__map_reserved[id] != null) {
          _this4.setReserved(id, size);
        } else {
          _this4.h[id] = size;
        }
      }
      if (this.assetsLoaded < this.assetsTotal) {
        this.promise.progress(this.bytesLoaded, this.bytesTotal);
      } else {
        this.loaded = true;
        this.promise.progress(this.bytesTotal, this.bytesTotal);
        this.promise.complete(this);
      }
    },
    __fromManifest: function (manifest) {
      var hasSize = manifest.version >= 2;
      var size;
      var id;
      var pathGroup;
      var basePath = manifest.rootPath;
      if (basePath == null) {
        basePath = "";
      }
      if (basePath != "") {
        basePath += "/";
      }
      var _g = 0;
      var _g1 = manifest.assets;
      while (_g < _g1.length) {
        var asset = _g1[_g];
        ++_g;
        if (hasSize) {
          size = asset.size;
        } else {
          size = 100;
        }
        id = asset.id;
        if (Object.prototype.hasOwnProperty.call(asset, "path")) {
          var this1 = this.paths;
          var value = basePath + Std.string(Reflect.field(asset, "path"));
          var _this = this1;
          if (__map_reserved[id] != null) {
            _this.setReserved(id, value);
          } else {
            _this.h[id] = value;
          }
        }
        if (Object.prototype.hasOwnProperty.call(asset, "pathGroup")) {
          pathGroup = Reflect.field(asset, "pathGroup");
          var _g3 = 0;
          var _g2 = pathGroup.length;
          while (_g3 < _g2) {
            var i = _g3++;
            pathGroup[i] = basePath + pathGroup[i];
          }
          var _this1 = this.pathGroups;
          if (__map_reserved[id] != null) {
            _this1.setReserved(id, pathGroup);
          } else {
            _this1.h[id] = pathGroup;
          }
        }
        var _this2 = this.sizes;
        if (__map_reserved[id] != null) {
          _this2.setReserved(id, size);
        } else {
          _this2.h[id] = size;
        }
        var value1 = asset.type;
        var _this3 = this.types;
        if (__map_reserved[id] != null) {
          _this3.setReserved(id, value1);
        } else {
          _this3.h[id] = value1;
        }
        if (Object.prototype.hasOwnProperty.call(asset, "preload")) {
          var this2 = this.preload;
          var value2 = Reflect.field(asset, "preload");
          var _this4 = this2;
          if (__map_reserved[id] != null) {
            _this4.setReserved(id, value2);
          } else {
            _this4.h[id] = value2;
          }
        }
        if (Object.prototype.hasOwnProperty.call(asset, "className")) {
          var this3 = this.classTypes;
          var value3 = Type.resolveClass(Reflect.field(asset, "className"));
          var _this5 = this3;
          if (__map_reserved[id] != null) {
            _this5.setReserved(id, value3);
          } else {
            _this5.h[id] = value3;
          }
        }
      }
      this.bytesTotal = 0;
      var _g4 = 0;
      var _g11 = manifest.assets;
      while (_g4 < _g11.length) {
        var asset1 = _g11[_g4];
        ++_g4;
        id = asset1.id;
        var tmp;
        var _this6 = this.preload;
        if (
          __map_reserved[id] != null
            ? _this6.existsReserved(id)
            : _this6.h.hasOwnProperty(id)
        ) {
          var _this7 = this.preload;
          if (__map_reserved[id] != null) {
            tmp = _this7.getReserved(id);
          } else {
            tmp = _this7.h[id];
          }
        } else {
          tmp = false;
        }
        if (tmp) {
          var _this8 = this.sizes;
          this.bytesTotal +=
            __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
        }
      }
    },
    loadAudioBuffer_onComplete: function (id, audioBuffer) {
      var _this = this.cachedAudioBuffers;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, audioBuffer);
      } else {
        _this.h[id] = audioBuffer;
      }
      var _this1 = this.pathGroups;
      if (
        __map_reserved[id] != null
          ? _this1.existsReserved(id)
          : _this1.h.hasOwnProperty(id)
      ) {
        var _this2 = this.pathGroups;
        var pathGroup =
          __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
        var otherID = this.pathGroups.keys();
        while (otherID.hasNext()) {
          var otherID1 = otherID.next();
          if (otherID1 == id) {
            continue;
          }
          var _g = 0;
          while (_g < pathGroup.length) {
            var path = pathGroup[_g];
            ++_g;
            var _this3 = this.pathGroups;
            if (
              (__map_reserved[otherID1] != null
                ? _this3.getReserved(otherID1)
                : _this3.h[otherID1]
              ).indexOf(path) > -1
            ) {
              var _this4 = this.cachedAudioBuffers;
              if (__map_reserved[otherID1] != null) {
                _this4.setReserved(otherID1, audioBuffer);
              } else {
                _this4.h[otherID1] = audioBuffer;
              }
              break;
            }
          }
        }
      }
      this.__assetLoaded(id);
    },
    loadBytes_onComplete: function (id, bytes) {
      var _this = this.cachedBytes;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, bytes);
      } else {
        _this.h[id] = bytes;
      }
      this.__assetLoaded(id);
    },
    loadFont_onComplete: function (id, font) {
      var _this = this.cachedFonts;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, font);
      } else {
        _this.h[id] = font;
      }
      this.__assetLoaded(id);
    },
    loadImage_onComplete: function (id, image) {
      var _this = this.cachedImages;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, image);
      } else {
        _this.h[id] = image;
      }
      this.__assetLoaded(id);
    },
    loadText_onComplete: function (id, text) {
      var _this = this.cachedText;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, text);
      } else {
        _this.h[id] = text;
      }
      this.__assetLoaded(id);
    },
    load_onError: function (id, message) {
      if (message != null && message != "") {
        this.promise.error(
          'Error loading asset "' + id + '": ' + Std.string(message)
        );
      } else {
        this.promise.error('Error loading asset "' + id + '"');
      }
    },
    load_onProgress: function (id, bytesLoaded, bytesTotal) {
      if (bytesLoaded > 0) {
        var _this = this.sizes;
        var size =
          __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
        var percent;
        if (bytesTotal > 0) {
          percent = bytesLoaded / bytesTotal;
          if (percent > 1) {
            percent = 1;
          }
          bytesLoaded = Math.floor(percent * size);
        } else if (bytesLoaded > size) {
          bytesLoaded = size;
        }
        var _this1 = this.bytesLoadedCache;
        if (
          __map_reserved[id] != null
            ? _this1.existsReserved(id)
            : _this1.h.hasOwnProperty(id)
        ) {
          var _this2 = this.bytesLoadedCache;
          var cache =
            __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
          if (bytesLoaded != cache) {
            this.bytesLoaded += bytesLoaded - cache;
          }
        } else {
          this.bytesLoaded += bytesLoaded;
        }
        var _this3 = this.bytesLoadedCache;
        if (__map_reserved[id] != null) {
          _this3.setReserved(id, bytesLoaded);
        } else {
          _this3.h[id] = bytesLoaded;
        }
        this.promise.progress(this.bytesLoaded, this.bytesTotal);
      }
    },
    __class__: lime_utils_AssetLibrary,
  };
  var lime_utils_AssetManifest = function () {
    this.assets = [];
    this.libraryArgs = [];
    this.version = 2;
  };
  $hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
  lime_utils_AssetManifest.__name__ = ["lime", "utils", "AssetManifest"];
  lime_utils_AssetManifest.fromBytes = function (bytes, rootPath) {
    if (bytes != null) {
      return lime_utils_AssetManifest.parse(
        bytes.getString(0, bytes.length),
        rootPath
      );
    } else {
      return null;
    }
  };
  lime_utils_AssetManifest.fromFile = function (path, rootPath) {
    path = lime_utils_AssetManifest.__resolvePath(path);
    rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath, path);
    if (path == null) {
      return null;
    }
    return lime_utils_AssetManifest.fromBytes(
      lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),
      rootPath
    );
  };
  lime_utils_AssetManifest.loadFromBytes = function (bytes, rootPath) {
    return lime_app_Future.withValue(
      lime_utils_AssetManifest.fromBytes(bytes, rootPath)
    );
  };
  lime_utils_AssetManifest.loadFromFile = function (path, rootPath) {
    path = lime_utils_AssetManifest.__resolvePath(path);
    rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath, path);
    if (path == null) {
      return null;
    }
    return lime_utils__$Bytes_Bytes_$Impl_$
      .loadFromFile(path)
      .then(function (bytes) {
        return lime_app_Future.withValue(
          lime_utils_AssetManifest.fromBytes(bytes, rootPath)
        );
      });
  };
  lime_utils_AssetManifest.parse = function (data, rootPath) {
    if (data == null || data == "") {
      return null;
    }
    var manifestData = JSON.parse(data);
    var manifest = new lime_utils_AssetManifest();
    manifest.name = manifestData.name;
    manifest.libraryType = manifestData.libraryType;
    manifest.libraryArgs = manifestData.libraryArgs;
    manifest.assets = haxe_Unserializer.run(manifestData.assets);
    if (rootPath != null) {
      manifest.rootPath = rootPath;
    }
    return manifest;
  };
  lime_utils_AssetManifest.__resolvePath = function (path) {
    if (path == null) {
      return null;
    }
    var queryIndex = path.indexOf("?");
    var basePath;
    if (queryIndex > -1) {
      basePath = HxOverrides.substr(path, 0, queryIndex);
    } else {
      basePath = path;
    }
    StringTools.replace(basePath, "\\", "/");
    while (StringTools.endsWith(basePath, "/"))
      basePath = HxOverrides.substr(basePath, 0, basePath.length - 1);
    if (StringTools.endsWith(basePath, ".bundle")) {
      if (queryIndex > -1) {
        return (
          basePath +
          "/library.json" +
          HxOverrides.substr(path, queryIndex, null)
        );
      } else {
        return basePath + "/library.json";
      }
    } else {
      return path;
    }
  };
  lime_utils_AssetManifest.__resolveRootPath = function (rootPath, path) {
    if (rootPath != null) {
      return rootPath;
    }
    var queryIndex = path.indexOf("?");
    if (queryIndex > -1) {
      rootPath = HxOverrides.substr(path, 0, queryIndex);
    } else {
      rootPath = path;
    }
    StringTools.replace(rootPath, "\\", "/");
    while (StringTools.endsWith(rootPath, "/")) {
      if (rootPath == "/") {
        return rootPath;
      }
      rootPath = HxOverrides.substr(rootPath, 0, rootPath.length - 1);
    }
    if (StringTools.endsWith(rootPath, ".bundle")) {
      return rootPath;
    } else {
      return haxe_io_Path.directory(rootPath);
    }
  };
  lime_utils_AssetManifest.prototype = {
    assets: null,
    libraryArgs: null,
    libraryType: null,
    name: null,
    rootPath: null,
    version: null,
    serialize: function () {
      var manifestData = {};
      manifestData.version = this.version;
      manifestData.libraryType = this.libraryType;
      manifestData.libraryArgs = this.libraryArgs;
      manifestData.name = this.name;
      manifestData.assets = haxe_Serializer.run(this.assets);
      return JSON.stringify(manifestData);
    },
    __class__: lime_utils_AssetManifest,
  };
  var lime_utils_Assets = function () {};
  $hxClasses["lime.utils.Assets"] = lime_utils_Assets;
  lime_utils_Assets.__name__ = ["lime", "utils", "Assets"];
  lime_utils_Assets.exists = function (id, type) {
    if (type == null) {
      type = "BINARY";
    }
    var symbol_symbolName;
    var symbol_libraryName;
    var symbol_library;
    var colonIndex = id.indexOf(":");
    symbol_libraryName = id.substring(0, colonIndex);
    symbol_symbolName = id.substring(colonIndex + 1);
    symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
    if (symbol_library != null) {
      return symbol_library.exists(symbol_symbolName, type);
    }
    return false;
  };
  lime_utils_Assets.getAsset = function (id, type, useCache) {
    if (useCache && lime_utils_Assets.cache.enabled) {
      switch (type) {
        case "BINARY":
        case "TEXT":
          useCache = false;
          break;
        case "FONT":
          var font = lime_utils_Assets.cache.font.get(id);
          if (font != null) {
            return font;
          }
          break;
        case "IMAGE":
          var image = lime_utils_Assets.cache.image.get(id);
          if (lime_utils_Assets.isValidImage(image)) {
            return image;
          }
          break;
        case "MUSIC":
        case "SOUND":
          var audio = lime_utils_Assets.cache.audio.get(id);
          if (lime_utils_Assets.isValidAudio(audio)) {
            return audio;
          }
          break;
        case "TEMPLATE":
          throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
          break;
        default:
          return null;
      }
    }
    var symbol_symbolName;
    var symbol_libraryName;
    var symbol_library;
    var colonIndex = id.indexOf(":");
    symbol_libraryName = id.substring(0, colonIndex);
    symbol_symbolName = id.substring(colonIndex + 1);
    symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
    if (symbol_library != null) {
      if (symbol_library.exists(symbol_symbolName, type)) {
        if (symbol_library.isLocal(symbol_symbolName, type)) {
          var asset = symbol_library.getAsset(symbol_symbolName, type);
          if (useCache && lime_utils_Assets.cache.enabled) {
            lime_utils_Assets.cache.set(id, type, asset);
          }
          return asset;
        } else {
          lime_utils_Log.error(
            type + ' asset "' + id + '" exists, but only asynchronously',
            {
              fileName: "Assets.hx",
              lineNumber: 160,
              className: "lime.utils.Assets",
              methodName: "getAsset",
            }
          );
        }
      } else {
        lime_utils_Log.error(
          "There is no " + type + ' asset with an ID of "' + id + '"',
          {
            fileName: "Assets.hx",
            lineNumber: 166,
            className: "lime.utils.Assets",
            methodName: "getAsset",
          }
        );
      }
    } else {
      lime_utils_Log.error(
        lime_utils_Assets.__libraryNotFound(symbol_libraryName),
        {
          fileName: "Assets.hx",
          lineNumber: 172,
          className: "lime.utils.Assets",
          methodName: "getAsset",
        }
      );
    }
    return null;
  };
  lime_utils_Assets.getAudioBuffer = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.getAsset(id, "SOUND", useCache);
  };
  lime_utils_Assets.getBytes = function (id) {
    return lime_utils_Assets.getAsset(id, "BINARY", false);
  };
  lime_utils_Assets.getFont = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.getAsset(id, "FONT", useCache);
  };
  lime_utils_Assets.getImage = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.getAsset(id, "IMAGE", useCache);
  };
  lime_utils_Assets.getLibrary = function (name) {
    if (name == null || name == "") {
      name = "default";
    }
    var _this = lime_utils_Assets.libraries;
    if (__map_reserved[name] != null) {
      return _this.getReserved(name);
    } else {
      return _this.h[name];
    }
  };
  lime_utils_Assets.getPath = function (id) {
    var symbol_symbolName;
    var symbol_libraryName;
    var symbol_library;
    var colonIndex = id.indexOf(":");
    symbol_libraryName = id.substring(0, colonIndex);
    symbol_symbolName = id.substring(colonIndex + 1);
    symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
    if (symbol_library != null) {
      if (symbol_library.exists(symbol_symbolName, null)) {
        return symbol_library.getPath(symbol_symbolName);
      } else {
        lime_utils_Log.error('There is no asset with an ID of "' + id + '"', {
          fileName: "Assets.hx",
          lineNumber: 269,
          className: "lime.utils.Assets",
          methodName: "getPath",
        });
      }
    } else {
      lime_utils_Log.error(
        lime_utils_Assets.__libraryNotFound(symbol_libraryName),
        {
          fileName: "Assets.hx",
          lineNumber: 275,
          className: "lime.utils.Assets",
          methodName: "getPath",
        }
      );
    }
    return null;
  };
  lime_utils_Assets.getText = function (id) {
    return lime_utils_Assets.getAsset(id, "TEXT", false);
  };
  lime_utils_Assets.isLocal = function (id, type, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache && lime_utils_Assets.cache.enabled) {
      if (lime_utils_Assets.cache.exists(id, type)) {
        return true;
      }
    }
    var symbol_symbolName;
    var symbol_libraryName;
    var symbol_library;
    var colonIndex = id.indexOf(":");
    symbol_libraryName = id.substring(0, colonIndex);
    symbol_symbolName = id.substring(colonIndex + 1);
    symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
    if (symbol_library != null) {
      return symbol_library.isLocal(symbol_symbolName, type);
    } else {
      return false;
    }
  };
  lime_utils_Assets.isValidAudio = function (buffer) {
    return buffer != null;
  };
  lime_utils_Assets.isValidImage = function (image) {
    if (image != null) {
      return image.buffer != null;
    } else {
      return false;
    }
  };
  lime_utils_Assets.list = function (type) {
    var items = [];
    var _this = lime_utils_Assets.libraries;
    var library = new haxe_ds__$StringMap_StringMapIterator(
      _this,
      _this.arrayKeys()
    );
    while (library.hasNext()) {
      var library1 = library.next();
      var libraryItems = library1.list(type);
      if (libraryItems != null) {
        items = items.concat(libraryItems);
      }
    }
    return items;
  };
  lime_utils_Assets.loadAsset = function (id, type, useCache) {
    if (useCache && lime_utils_Assets.cache.enabled) {
      switch (type) {
        case "BINARY":
        case "TEXT":
          useCache = false;
          break;
        case "FONT":
          var font = lime_utils_Assets.cache.font.get(id);
          if (font != null) {
            return lime_app_Future.withValue(font);
          }
          break;
        case "IMAGE":
          var image = lime_utils_Assets.cache.image.get(id);
          if (lime_utils_Assets.isValidImage(image)) {
            return lime_app_Future.withValue(image);
          }
          break;
        case "MUSIC":
        case "SOUND":
          var audio = lime_utils_Assets.cache.audio.get(id);
          if (lime_utils_Assets.isValidAudio(audio)) {
            return lime_app_Future.withValue(audio);
          }
          break;
        case "TEMPLATE":
          throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
          break;
        default:
          return null;
      }
    }
    var symbol_symbolName;
    var symbol_libraryName;
    var symbol_library;
    var colonIndex = id.indexOf(":");
    symbol_libraryName = id.substring(0, colonIndex);
    symbol_symbolName = id.substring(colonIndex + 1);
    symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
    if (symbol_library != null) {
      if (symbol_library.exists(symbol_symbolName, type)) {
        var future = symbol_library.loadAsset(symbol_symbolName, type);
        if (useCache && lime_utils_Assets.cache.enabled) {
          future.onComplete(function (asset) {
            lime_utils_Assets.cache.set(id, type, asset);
          });
        }
        return future;
      } else {
        return lime_app_Future.withError(
          "There is no " + type + ' asset with an ID of "' + id + '"'
        );
      }
    } else {
      return lime_app_Future.withError(
        lime_utils_Assets.__libraryNotFound(symbol_libraryName)
      );
    }
  };
  lime_utils_Assets.loadAudioBuffer = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.loadAsset(id, "SOUND", useCache);
  };
  lime_utils_Assets.loadBytes = function (id) {
    return lime_utils_Assets.loadAsset(id, "BINARY", false);
  };
  lime_utils_Assets.loadFont = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.loadAsset(id, "FONT", useCache);
  };
  lime_utils_Assets.loadImage = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return lime_utils_Assets.loadAsset(id, "IMAGE", useCache);
  };
  lime_utils_Assets.loadLibrary = function (id) {
    var promise = new lime_app_Promise();
    var library = lime_utils_Assets.getLibrary(id);
    if (library != null) {
      return library.load();
    }
    var path = id;
    var rootPath = null;
    var _this = lime_utils_Assets.libraryPaths;
    if (
      __map_reserved[id] != null
        ? _this.existsReserved(id)
        : _this.h.hasOwnProperty(id)
    ) {
      var _this1 = lime_utils_Assets.libraryPaths;
      if (__map_reserved[id] != null) {
        path = _this1.getReserved(id);
      } else {
        path = _this1.h[id];
      }
      rootPath = lime_utils_Assets.defaultRootPath;
    } else if (StringTools.endsWith(path, ".bundle")) {
      path += "/library.json";
    }
    lime_utils_AssetManifest
      .loadFromFile(path, rootPath)
      .onComplete(function (manifest) {
        if (manifest == null) {
          promise.error('Cannot parse asset manifest for library "' + id + '"');
          return;
        }
        var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
        if (library1 == null) {
          promise.error('Cannot open library "' + id + '"');
        } else {
          var _this2 = lime_utils_Assets.libraries;
          if (__map_reserved[id] != null) {
            _this2.setReserved(id, library1);
          } else {
            _this2.h[id] = library1;
          }
          library1.onChange.add(
            (($_ = lime_utils_Assets.onChange), $bind($_, $_.dispatch))
          );
          var tmp = library1.load();
          promise.completeWith(tmp);
        }
      })
      .onError(function (_) {
        promise.error('There is no asset library with an ID of "' + id + '"');
      });
    return promise.future;
  };
  lime_utils_Assets.loadText = function (id) {
    return lime_utils_Assets.loadAsset(id, "TEXT", false);
  };
  lime_utils_Assets.registerLibrary = function (name, library) {
    var _this = lime_utils_Assets.libraries;
    if (
      __map_reserved[name] != null
        ? _this.existsReserved(name)
        : _this.h.hasOwnProperty(name)
    ) {
      var _this1 = lime_utils_Assets.libraries;
      if (
        (__map_reserved[name] != null
          ? _this1.getReserved(name)
          : _this1.h[name]) == library
      ) {
        return;
      } else {
        lime_utils_Assets.unloadLibrary(name);
      }
    }
    if (library != null) {
      library.onChange.add(lime_utils_Assets.library_onChange);
    }
    var _this2 = lime_utils_Assets.libraries;
    if (__map_reserved[name] != null) {
      _this2.setReserved(name, library);
    } else {
      _this2.h[name] = library;
    }
  };
  lime_utils_Assets.unloadLibrary = function (name) {
    var _this = lime_utils_Assets.libraries;
    var library =
      __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
    if (library != null) {
      lime_utils_Assets.cache.clear(name + ":");
      library.onChange.remove(lime_utils_Assets.library_onChange);
      library.unload();
    }
    lime_utils_Assets.libraries.remove(name);
  };
  lime_utils_Assets.__libraryNotFound = function (name) {
    if (name == null || name == "") {
      name = "default";
    }
    if (
      lime_app_Application.current != null &&
      lime_app_Application.current.__preloader != null &&
      !lime_app_Application.current.__preloader.complete
    ) {
      return (
        'There is no asset library named "' +
        name +
        '", or it is not yet preloaded'
      );
    } else {
      return 'There is no asset library named "' + name + '"';
    }
  };
  lime_utils_Assets.library_onChange = function () {
    lime_utils_Assets.cache.clear();
    lime_utils_Assets.onChange.dispatch();
  };
  var lime_utils__$Assets_LibrarySymbol = function (id) {
    var colonIndex = id.indexOf(":");
    this.libraryName = id.substring(0, colonIndex);
    this.symbolName = id.substring(colonIndex + 1);
    this.library = lime_utils_Assets.getLibrary(this.libraryName);
  };
  $hxClasses["lime.utils._Assets.LibrarySymbol"] =
    lime_utils__$Assets_LibrarySymbol;
  lime_utils__$Assets_LibrarySymbol.__name__ = [
    "lime",
    "utils",
    "_Assets",
    "LibrarySymbol",
  ];
  lime_utils__$Assets_LibrarySymbol.prototype = {
    library: null,
    libraryName: null,
    symbolName: null,
    isLocal: function (type) {
      return this.library.isLocal(this.symbolName, type);
    },
    exists: function (type) {
      return this.library.exists(this.symbolName, type);
    },
    __class__: lime_utils__$Assets_LibrarySymbol,
  };
  var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
  $hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] =
    lime_utils__$BytePointer_BytePointer_$Impl_$;
  lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_BytePointer",
    "BytePointer_Impl_",
  ];
  lime_utils__$BytePointer_BytePointer_$Impl_$._new = function (bytes, offset) {
    if (offset == null) {
      offset = 0;
    }
    var this1 = new lime_utils_BytePointerData(bytes, offset);
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.set = function (
    this1,
    bytes,
    bufferView,
    buffer,
    offset
  ) {
    if (buffer != null) {
      bytes = haxe_io_Bytes.ofData(buffer);
    }
    if (bytes != null || bufferView == null) {
      this1.bytes = bytes;
      this1.offset = offset != null ? offset : 0;
    } else {
      this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
      this1.offset =
        offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
    }
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function (
    this1,
    index
  ) {
    if (this1.bytes != null) {
      return this1.bytes.b[index + this1.offset];
    } else {
      return 0;
    }
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function (
    this1,
    index,
    value
  ) {
    if (this1.bytes == null) {
      this1.bytes.b[index + this1.offset] = value & 255;
    }
    return value;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function (
    arrayBufferView
  ) {
    if (arrayBufferView == null) {
      return null;
    }
    return new lime_utils_BytePointerData(
      haxe_io_Bytes.ofData(arrayBufferView.buffer),
      arrayBufferView.byteOffset
    );
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function (
    buffer
  ) {
    if (buffer == null) {
      return null;
    }
    return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer), 0);
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function (bytes) {
    return new lime_utils_BytePointerData(bytes, 0);
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function (
    bytesData
  ) {
    if (bytesData == null) {
      return new lime_utils_BytePointerData(null, 0);
    } else {
      return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData), 0);
    }
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function (path) {
    return new lime_utils_BytePointerData(
      lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),
      0
    );
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function (
    bytes
  ) {
    return new lime_utils_BytePointerData(bytes, 0);
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function (
    bytePointer
  ) {
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 8) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Uint8Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 8) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Uint8ClampedArray(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 8) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Int8Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 16) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Uint16Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 16) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Int16Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 32) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Uint32Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 32) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Int32Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 32) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Float32Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function (
    bytePointer
  ) {
    if (bytePointer == null || bytePointer.bytes == null) {
      return null;
    }
    var buffer = bytePointer.bytes.b.bufferValue;
    var byteoffset = (bytePointer.offset / 64) | 0;
    var this1;
    if (buffer != null) {
      this1 = new Float64Array(buffer, byteoffset);
    } else {
      this1 = null;
    }
    return this1;
  };
  var lime_utils_BytePointerData = function (bytes, offset) {
    this.bytes = bytes;
    this.offset = offset;
  };
  $hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
  lime_utils_BytePointerData.__name__ = ["lime", "utils", "BytePointerData"];
  lime_utils_BytePointerData.prototype = {
    bytes: null,
    offset: null,
    __class__: lime_utils_BytePointerData,
  };
  var lime_utils__$Bytes_Bytes_$Impl_$ = {};
  $hxClasses["lime.utils._Bytes.Bytes_Impl_"] =
    lime_utils__$Bytes_Bytes_$Impl_$;
  lime_utils__$Bytes_Bytes_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Bytes",
    "Bytes_Impl_",
  ];
  lime_utils__$Bytes_Bytes_$Impl_$._new = function (length, bytesData) {
    var this1 = new haxe_io_Bytes(bytesData);
    return this1;
  };
  lime_utils__$Bytes_Bytes_$Impl_$.alloc = function (length) {
    var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
    return lime_utils__$Bytes_Bytes_$Impl_$._new(
      bytes.length,
      bytes.b.bufferValue
    );
  };
  lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function (b, pos) {
    return b.bytes[pos];
  };
  lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function (bytes) {
    if (bytes == null) {
      return null;
    }
    return lime_utils__$Bytes_Bytes_$Impl_$._new(
      bytes.length,
      bytes.b.bufferValue
    );
  };
  lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function (path) {
    return null;
  };
  lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function (bytes) {
    return lime_app_Future.withValue(
      lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes)
    );
  };
  lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function (path) {
    var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
    return request.load(path);
  };
  lime_utils__$Bytes_Bytes_$Impl_$.ofData = function (b) {
    var bytes = haxe_io_Bytes.ofData(b);
    return lime_utils__$Bytes_Bytes_$Impl_$._new(
      bytes.length,
      bytes.b.bufferValue
    );
  };
  lime_utils__$Bytes_Bytes_$Impl_$.ofString = function (s) {
    var bytes = haxe_io_Bytes.ofString(s);
    return lime_utils__$Bytes_Bytes_$Impl_$._new(
      bytes.length,
      bytes.b.bufferValue
    );
  };
  var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
  $hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] =
    lime_utils__$DataPointer_DataPointer_$Impl_$;
  lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_DataPointer",
    "DataPointer_Impl_",
  ];
  lime_utils__$DataPointer_DataPointer_$Impl_$._new = function (data) {
    var this1 = data;
    return this1;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function (value) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(value);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function (value) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(value);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function (
    pointer
  ) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(
      pointer.bytes
    );
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function (
    arrayBufferView
  ) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(arrayBufferView);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function (
    buffer
  ) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(buffer);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function (bytes) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(
      bytes.b.bufferValue
    );
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function (
    bytesData
  ) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(
      bytesData
    );
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function (
    bytes
  ) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function (
    pointer
  ) {
    return null;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function (path) {
    return null;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function (a, b) {
    return a == b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function (a, b) {
    return a == b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function (a, b) {
    return a > b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function (
    a,
    b
  ) {
    return a >= b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer =
    function (a, b) {
      return (
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >=
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
      );
    };
  lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function (a, b) {
    return a < b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function (
    a,
    b
  ) {
    return (
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <
      lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    );
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function (
    a,
    b
  ) {
    return a <= b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer =
    function (a, b) {
      return (
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <=
        lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
      );
    };
  lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function (a, b) {
    return a != b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function (
    a,
    b
  ) {
    return a != b;
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function (a, b) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(a + b);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function (a, b) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(a + b);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function (a, b) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(a - b);
  };
  lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function (a, b) {
    return lime_utils__$DataPointer_DataPointer_$Impl_$._new(a - b);
  };
  var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
  $hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] =
    lime_utils__$Float32Array_Float32Array_$Impl_$;
  lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Float32Array",
    "Float32Array_Impl_",
  ];
  lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Float32Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Float32Array(bytes.b.bufferValue, byteOffset);
    }
    return new Float32Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "Float32Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
  $hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] =
    lime_utils__$Float64Array_Float64Array_$Impl_$;
  lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Float64Array",
    "Float64Array_Impl_",
  ];
  lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Float64Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Float64Array(bytes.b.bufferValue, byteOffset);
    }
    return new Float64Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "Float64Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils_GLUtils = function () {};
  $hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
  lime_utils_GLUtils.__name__ = ["lime", "utils", "GLUtils"];
  lime_utils_GLUtils.compileShader = function (source, type) {
    var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
    lime_graphics_opengl_GL.context.__context.shaderSource(shader, source);
    lime_graphics_opengl_GL.context.__context.compileShader(shader);
    if (
      lime_graphics_opengl_GL.context.__context.getShaderParameter(
        shader,
        35713
      ) == 0
    ) {
      var message;
      switch (type) {
        case 35632:
          message = "Error compiling fragment shader";
          break;
        case 35633:
          message = "Error compiling vertex shader";
          break;
        default:
          message = "Error compiling unknown shader type";
      }
      message +=
        "\n" +
        lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
      lime_utils_Log.error(message, {
        fileName: "GLUtils.hx",
        lineNumber: 35,
        className: "lime.utils.GLUtils",
        methodName: "compileShader",
      });
    }
    return shader;
  };
  lime_utils_GLUtils.createProgram = function (vertexSource, fragmentSource) {
    var vertexShader = lime_utils_GLUtils.compileShader(vertexSource, 35633);
    var fragmentShader = lime_utils_GLUtils.compileShader(
      fragmentSource,
      35632
    );
    var program = lime_graphics_opengl_GL.context.__context.createProgram();
    lime_graphics_opengl_GL.context.__context.attachShader(
      program,
      vertexShader
    );
    lime_graphics_opengl_GL.context.__context.attachShader(
      program,
      fragmentShader
    );
    lime_graphics_opengl_GL.context.__context.linkProgram(program);
    if (
      lime_graphics_opengl_GL.context.__context.getProgramParameter(
        program,
        35714
      ) == 0
    ) {
      lime_utils_Log.error("Unable to initialize the shader program", {
        fileName: "GLUtils.hx",
        lineNumber: 56,
        className: "lime.utils.GLUtils",
        methodName: "createProgram",
      });
    }
    return program;
  };
  var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
  $hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] =
    lime_utils__$Int16Array_Int16Array_$Impl_$;
  lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Int16Array",
    "Int16Array_Impl_",
  ];
  lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Int16Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Int16Array(bytes.b.bufferValue, byteOffset);
    }
    return new Int16Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "Int16Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
  $hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] =
    lime_utils__$Int32Array_Int32Array_$Impl_$;
  lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Int32Array",
    "Int32Array_Impl_",
  ];
  lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Int32Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Int32Array(bytes.b.bufferValue, byteOffset);
    }
    return new Int32Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "Int32Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
  $hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] =
    lime_utils__$Int8Array_Int8Array_$Impl_$;
  lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Int8Array",
    "Int8Array_Impl_",
  ];
  lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    return new Int8Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "Int8Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils_Log = function () {};
  $hxClasses["lime.utils.Log"] = lime_utils_Log;
  lime_utils_Log.__name__ = ["lime", "utils", "Log"];
  lime_utils_Log.debug = function (message, info) {
    if (lime_utils_Log.level >= 4) {
      console.log("[" + info.className + "] " + message);
    }
  };
  lime_utils_Log.error = function (message, info) {
    if (lime_utils_Log.level >= 1) {
      var message1 = "[" + info.className + "] ERROR: " + message;
      if (lime_utils_Log.throwErrors) {
        throw new js__$Boot_HaxeError(message1);
      } else {
        console.log(message1);
      }
    }
  };
  lime_utils_Log.info = function (message, info) {
    if (lime_utils_Log.level >= 3) {
      console.log("[" + info.className + "] " + message);
    }
  };
  lime_utils_Log.print = function (message) {
    console.log(message);
  };
  lime_utils_Log.println = function (message) {
    console.log(message);
  };
  lime_utils_Log.verbose = function (message, info) {
    if (lime_utils_Log.level >= 5) {
      console.log("[" + info.className + "] " + message);
    }
  };
  lime_utils_Log.warn = function (message, info) {
    if (lime_utils_Log.level >= 2) {
      console.log("[" + info.className + "] WARNING: " + message);
    }
  };
  var lime_utils__$Log_LogLevel_$Impl_$ = {};
  $hxClasses["lime.utils._Log.LogLevel_Impl_"] =
    lime_utils__$Log_LogLevel_$Impl_$;
  lime_utils__$Log_LogLevel_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_Log",
    "LogLevel_Impl_",
  ];
  lime_utils__$Log_LogLevel_$Impl_$.gt = function (a, b) {
    return a > b;
  };
  lime_utils__$Log_LogLevel_$Impl_$.gte = function (a, b) {
    return a >= b;
  };
  lime_utils__$Log_LogLevel_$Impl_$.lt = function (a, b) {
    return a < b;
  };
  lime_utils__$Log_LogLevel_$Impl_$.lte = function (a, b) {
    return a <= b;
  };
  var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
  $hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] =
    lime_utils__$UInt16Array_UInt16Array_$Impl_$;
  lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_UInt16Array",
    "UInt16Array_Impl_",
  ];
  lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Uint16Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Uint16Array(bytes.b.bufferValue, byteOffset);
    }
    return new Uint16Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "UInt16Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
  $hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] =
    lime_utils__$UInt32Array_UInt32Array_$Impl_$;
  lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_UInt32Array",
    "UInt32Array_Impl_",
  ];
  lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      byteOffset = 0;
    }
    if (byteOffset == null) {
      return new Uint32Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Uint32Array(bytes.b.bufferValue, byteOffset);
    }
    return new Uint32Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "UInt32Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
  $hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] =
    lime_utils__$UInt8Array_UInt8Array_$Impl_$;
  lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_UInt8Array",
    "UInt8Array_Impl_",
  ];
  lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function (
    bytes,
    byteOffset,
    len
  ) {
    if (byteOffset == null) {
      return new Uint8Array(bytes.b.bufferValue);
    }
    if (len == null) {
      return new Uint8Array(bytes.b.bufferValue, byteOffset);
    }
    return new Uint8Array(bytes.b.bufferValue, byteOffset, len);
  };
  lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function (this1) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function (this1) {
    if (this1 != null) {
      return (
        "UInt8Array [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
  $hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] =
    lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = [
    "lime",
    "utils",
    "_UInt8ClampedArray",
    "UInt8ClampedArray_Impl_",
  ];
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes =
    function (bytes, byteOffset, len) {
      if (byteOffset == null) {
        byteOffset = 0;
      }
      if (byteOffset == null) {
        return new Uint8ClampedArray(bytes.b.bufferValue);
      }
      if (len == null) {
        return new Uint8ClampedArray(bytes.b.bufferValue, byteOffset);
      }
      return new Uint8ClampedArray(bytes.b.bufferValue, byteOffset, len);
    };
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function (
    this1
  ) {
    return new haxe_io_Bytes(new Uint8Array(this1.buffer));
  };
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function (
    this1
  ) {
    if (this1 != null) {
      return (
        "UInt8ClampedArray [byteLength:" +
        this1.byteLength +
        ", length:" +
        this1.length +
        "]"
      );
    } else {
      return null;
    }
  };
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function (
    _in
  ) {
    var _out = _in | 0;
    if (_out > 255) {
      _out = 255;
    } else {
      _out = _out;
    }
    if (_out < 0) {
      return 0;
    } else {
      return _out;
    }
  };
  var lime_utils_compress_Deflate = function () {};
  $hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
  lime_utils_compress_Deflate.__name__ = [
    "lime",
    "utils",
    "compress",
    "Deflate",
  ];
  lime_utils_compress_Deflate.compress = function (bytes) {
    var data = pako.deflateRaw(bytes.b.bufferValue);
    return haxe_io_Bytes.ofData(data);
  };
  lime_utils_compress_Deflate.decompress = function (bytes) {
    var data = pako.inflateRaw(bytes.b.bufferValue);
    return haxe_io_Bytes.ofData(data);
  };
  var lime_utils_compress_LZMA = function () {};
  $hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
  lime_utils_compress_LZMA.__name__ = ["lime", "utils", "compress", "LZMA"];
  lime_utils_compress_LZMA.compress = function (bytes) {
    return null;
  };
  lime_utils_compress_LZMA.decompress = function (bytes) {
    return null;
  };
  var lime_utils_compress_Zlib = function () {};
  $hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
  lime_utils_compress_Zlib.__name__ = ["lime", "utils", "compress", "Zlib"];
  lime_utils_compress_Zlib.compress = function (bytes) {
    var data = pako.deflate(bytes.b.bufferValue);
    return haxe_io_Bytes.ofData(data);
  };
  lime_utils_compress_Zlib.decompress = function (bytes) {
    var data = pako.inflate(bytes.b.bufferValue);
    return haxe_io_Bytes.ofData(data);
  };
  var motion_actuators_IGenericActuator = function () {};
  $hxClasses["motion.actuators.IGenericActuator"] =
    motion_actuators_IGenericActuator;
  motion_actuators_IGenericActuator.__name__ = [
    "motion",
    "actuators",
    "IGenericActuator",
  ];
  motion_actuators_IGenericActuator.prototype = {
    autoVisible: null,
    delay: null,
    ease: null,
    onComplete: null,
    onRepeat: null,
    onUpdate: null,
    reflect: null,
    repeat: null,
    reverse: null,
    smartRotation: null,
    snapping: null,
    onPause: null,
    onResume: null,
    apply: null,
    move: null,
    pause: null,
    resume: null,
    stop: null,
    __class__: motion_actuators_IGenericActuator,
  };
  var motion_actuators_GenericActuator = function (
    target,
    duration,
    properties
  ) {
    this._autoVisible = true;
    this._delay = 0;
    this._reflect = false;
    this._repeat = 0;
    this._reverse = false;
    this._smartRotation = false;
    this._snapping = false;
    this.special = false;
    this.target = target;
    this.properties = properties;
    this.duration = duration;
    this._ease = motion_Actuate.defaultEase;
  };
  $hxClasses["motion.actuators.GenericActuator"] =
    motion_actuators_GenericActuator;
  motion_actuators_GenericActuator.__name__ = [
    "motion",
    "actuators",
    "GenericActuator",
  ];
  motion_actuators_GenericActuator.__interfaces__ = [
    motion_actuators_IGenericActuator,
  ];
  motion_actuators_GenericActuator.prototype = {
    duration: null,
    id: null,
    properties: null,
    target: null,
    _autoVisible: null,
    _delay: null,
    _ease: null,
    _onComplete: null,
    _onCompleteParams: null,
    _onRepeat: null,
    _onRepeatParams: null,
    _onUpdate: null,
    _onUpdateParams: null,
    _onResume: null,
    _onResumeParams: null,
    _onPause: null,
    _onPauseParams: null,
    _reflect: null,
    _repeat: null,
    _reverse: null,
    _smartRotation: null,
    _snapping: null,
    special: null,
    apply: function () {
      var _g = 0;
      var _g1 = Reflect.fields(this.properties);
      while (_g < _g1.length) {
        var i = _g1[_g];
        ++_g;
        if (Object.prototype.hasOwnProperty.call(this.target, i)) {
          this.target[i] = Reflect.field(this.properties, i);
        } else {
          Reflect.setProperty(
            this.target,
            i,
            Reflect.field(this.properties, i)
          );
        }
      }
    },
    autoVisible: function (value) {
      if (value == null) {
        value = true;
      }
      this._autoVisible = value;
      return this;
    },
    callMethod: function (method, params) {
      if (params == null) {
        params = [];
      }
      return method.apply(method, params);
    },
    change: function () {
      if (this._onUpdate != null) {
        var method = this._onUpdate;
        var params = this._onUpdateParams;
        if (params == null) {
          params = [];
        }
        method.apply(method, params);
      }
    },
    complete: function (sendEvent) {
      if (sendEvent == null) {
        sendEvent = true;
      }
      if (sendEvent) {
        this.change();
        if (this._onComplete != null) {
          var method = this._onComplete;
          var params = this._onCompleteParams;
          if (params == null) {
            params = [];
          }
          method.apply(method, params);
        }
      }
      motion_Actuate.unload(this);
    },
    delay: function (duration) {
      this._delay = duration;
      return this;
    },
    ease: function (easing) {
      this._ease = easing;
      return this;
    },
    move: function () {},
    onComplete: function (handler, parameters) {
      this._onComplete = handler;
      if (parameters == null) {
        this._onCompleteParams = [];
      } else {
        this._onCompleteParams = parameters;
      }
      if (this.duration == 0) {
        this.complete();
      }
      return this;
    },
    onRepeat: function (handler, parameters) {
      this._onRepeat = handler;
      if (parameters == null) {
        this._onRepeatParams = [];
      } else {
        this._onRepeatParams = parameters;
      }
      return this;
    },
    onUpdate: function (handler, parameters) {
      this._onUpdate = handler;
      if (parameters == null) {
        this._onUpdateParams = [];
      } else {
        this._onUpdateParams = parameters;
      }
      return this;
    },
    onPause: function (handler, parameters) {
      this._onPause = handler;
      if (parameters == null) {
        this._onPauseParams = [];
      } else {
        this._onPauseParams = parameters;
      }
      return this;
    },
    onResume: function (handler, parameters) {
      this._onResume = handler;
      if (parameters == null) {
        this._onResumeParams = [];
      } else {
        this._onResumeParams = parameters;
      }
      return this;
    },
    pause: function () {
      if (this._onPause != null) {
        var method = this._onPause;
        var params = this._onPauseParams;
        if (params == null) {
          params = [];
        }
        method.apply(method, params);
      }
    },
    reflect: function (value) {
      if (value == null) {
        value = true;
      }
      this._reflect = value;
      this.special = true;
      return this;
    },
    repeat: function (times) {
      if (times == null) {
        times = -1;
      }
      this._repeat = times;
      return this;
    },
    resume: function () {
      if (this._onResume != null) {
        var method = this._onResume;
        var params = this._onResumeParams;
        if (params == null) {
          params = [];
        }
        method.apply(method, params);
      }
    },
    reverse: function (value) {
      if (value == null) {
        value = true;
      }
      this._reverse = value;
      this.special = true;
      return this;
    },
    smartRotation: function (value) {
      if (value == null) {
        value = true;
      }
      this._smartRotation = value;
      this.special = true;
      return this;
    },
    snapping: function (value) {
      if (value == null) {
        value = true;
      }
      this._snapping = value;
      this.special = true;
      return this;
    },
    stop: function (properties, complete, sendEvent) {},
    __class__: motion_actuators_GenericActuator,
  };
  var motion_actuators_SimpleActuator = function (
    target,
    duration,
    properties
  ) {
    this.active = true;
    this.propertyDetails = [];
    this.sendChange = false;
    this.paused = false;
    this.cacheVisible = false;
    this.initialized = false;
    this.setVisible = false;
    this.toggleVisible = false;
    this.startTime = openfl_Lib.getTimer() / 1000;
    motion_actuators_GenericActuator.call(this, target, duration, properties);
    if (!motion_actuators_SimpleActuator.addedEvent) {
      motion_actuators_SimpleActuator.addedEvent = true;
      openfl_Lib.current.stage.addEventListener(
        "enterFrame",
        motion_actuators_SimpleActuator.stage_onEnterFrame
      );
    }
  };
  $hxClasses["motion.actuators.SimpleActuator"] =
    motion_actuators_SimpleActuator;
  motion_actuators_SimpleActuator.__name__ = [
    "motion",
    "actuators",
    "SimpleActuator",
  ];
  motion_actuators_SimpleActuator.stage_onEnterFrame = function (event) {
    var currentTime = openfl_Lib.getTimer() / 1000;
    var actuator;
    var j = 0;
    var cleanup = false;
    var _g1 = 0;
    var _g = motion_actuators_SimpleActuator.actuatorsLength;
    while (_g1 < _g) {
      var i = _g1++;
      actuator = motion_actuators_SimpleActuator.actuators[j];
      if (actuator != null && actuator.active) {
        if (currentTime >= actuator.timeOffset) {
          actuator.update(currentTime);
        }
        ++j;
      } else {
        motion_actuators_SimpleActuator.actuators.splice(j, 1);
        --motion_actuators_SimpleActuator.actuatorsLength;
      }
    }
  };
  motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
  motion_actuators_SimpleActuator.prototype = $extend(
    motion_actuators_GenericActuator.prototype,
    {
      setField_openfl_geom_Transform: function (target, propertyName, value) {
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          target[propertyName] = value;
        } else {
          Reflect.setProperty(target, propertyName, value);
        }
      },
      setField_motion_actuators_TransformActuator_T: function (
        target,
        propertyName,
        value
      ) {
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          target[propertyName] = value;
        } else {
          Reflect.setProperty(target, propertyName, value);
        }
      },
      setField_motion_actuators_MotionPathActuator_T: function (
        target,
        propertyName,
        value
      ) {
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          target[propertyName] = value;
        } else {
          Reflect.setProperty(target, propertyName, value);
        }
      },
      setField_openfl_display_DisplayObject: function (
        target,
        propertyName,
        value
      ) {
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          target[propertyName] = value;
        } else {
          Reflect.setProperty(target, propertyName, value);
        }
      },
      setField_motion_actuators_SimpleActuator_T: function (
        target,
        propertyName,
        value
      ) {
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          target[propertyName] = value;
        } else {
          Reflect.setProperty(target, propertyName, value);
        }
      },
      timeOffset: null,
      active: null,
      cacheVisible: null,
      detailsLength: null,
      initialized: null,
      paused: null,
      pauseTime: null,
      propertyDetails: null,
      sendChange: null,
      setVisible: null,
      startTime: null,
      toggleVisible: null,
      autoVisible: function (value) {
        if (value == null) {
          value = true;
        }
        this._autoVisible = value;
        if (!value) {
          this.toggleVisible = false;
          if (this.setVisible) {
            var target = this.target;
            var value1 = this.cacheVisible;
            if (Object.prototype.hasOwnProperty.call(target, "visible")) {
              target["visible"] = value1;
            } else {
              Reflect.setProperty(target, "visible", value1);
            }
          }
        }
        return this;
      },
      delay: function (duration) {
        this._delay = duration;
        this.timeOffset = this.startTime + duration;
        return this;
      },
      getField: function (target, propertyName) {
        var value = null;
        if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
          value = Reflect.field(target, propertyName);
        } else {
          value = Reflect.getProperty(target, propertyName);
        }
        return value;
      },
      initialize: function () {
        var details;
        var start;
        var _g = 0;
        var _g1 = Reflect.fields(this.properties);
        while (_g < _g1.length) {
          var i = _g1[_g];
          ++_g;
          var isField = true;
          if (
            Object.prototype.hasOwnProperty.call(this.target, i) &&
            !(
              this.target.__properties__ &&
              this.target.__properties__["set_" + i]
            )
          ) {
            start = Reflect.field(this.target, i);
          } else {
            isField = false;
            start = Reflect.getProperty(this.target, i);
          }
          if (typeof start == "number") {
            var target = this.properties;
            var value = null;
            if (Object.prototype.hasOwnProperty.call(target, i)) {
              value = Reflect.field(target, i);
            } else {
              value = Reflect.getProperty(target, i);
            }
            var value1 = value;
            if (start == null) {
              start = 0;
            }
            if (value1 == null) {
              value1 = 0;
            }
            details = new motion_actuators_PropertyDetails(
              this.target,
              i,
              start,
              value1 - start,
              isField
            );
            this.propertyDetails.push(details);
          }
        }
        this.detailsLength = this.propertyDetails.length;
        this.initialized = true;
      },
      move: function () {
        this.toggleVisible =
          Object.prototype.hasOwnProperty.call(this.properties, "alpha") &&
          js_Boot.__instanceof(this.target, openfl_display_DisplayObject);
        var tmp;
        if (this.toggleVisible && this.properties.alpha != 0) {
          var target = this.target;
          var value = null;
          if (Object.prototype.hasOwnProperty.call(target, "visible")) {
            value = Reflect.field(target, "visible");
          } else {
            value = Reflect.getProperty(target, "visible");
          }
          tmp = !value;
        } else {
          tmp = false;
        }
        if (tmp) {
          this.setVisible = true;
          var target1 = this.target;
          var value1 = null;
          if (Object.prototype.hasOwnProperty.call(target1, "visible")) {
            value1 = Reflect.field(target1, "visible");
          } else {
            value1 = Reflect.getProperty(target1, "visible");
          }
          this.cacheVisible = value1;
          var target2 = this.target;
          if (Object.prototype.hasOwnProperty.call(target2, "visible")) {
            target2["visible"] = true;
          } else {
            Reflect.setProperty(target2, "visible", true);
          }
        }
        this.timeOffset = this.startTime;
        motion_actuators_SimpleActuator.actuators.push(this);
        ++motion_actuators_SimpleActuator.actuatorsLength;
      },
      onUpdate: function (handler, parameters) {
        this._onUpdate = handler;
        if (parameters == null) {
          this._onUpdateParams = [];
        } else {
          this._onUpdateParams = parameters;
        }
        this.sendChange = true;
        return this;
      },
      pause: function () {
        if (!this.paused) {
          this.paused = true;
          motion_actuators_GenericActuator.prototype.pause.call(this);
          this.pauseTime = openfl_Lib.getTimer();
        }
      },
      resume: function () {
        if (this.paused) {
          this.paused = false;
          this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
          motion_actuators_GenericActuator.prototype.resume.call(this);
        }
      },
      setProperty: function (details, value) {
        if (details.isField) {
          details.target[details.propertyName] = value;
        } else {
          Reflect.setProperty(details.target, details.propertyName, value);
        }
      },
      stop: function (properties, complete, sendEvent) {
        if (this.active) {
          if (properties == null) {
            this.active = false;
            if (complete) {
              this.apply();
            }
            this.complete(sendEvent);
            return;
          }
          var _g = 0;
          var _g1 = Reflect.fields(properties);
          while (_g < _g1.length) {
            var i = _g1[_g];
            ++_g;
            if (Object.prototype.hasOwnProperty.call(this.properties, i)) {
              this.active = false;
              if (complete) {
                this.apply();
              }
              this.complete(sendEvent);
              return;
            }
          }
        }
      },
      update: function (currentTime) {
        if (!this.paused) {
          var details;
          var easing;
          var i;
          var tweenPosition = (currentTime - this.timeOffset) / this.duration;
          if (tweenPosition > 1) {
            tweenPosition = 1;
          }
          if (!this.initialized) {
            this.initialize();
          }
          if (!this.special) {
            easing = this._ease.calculate(tweenPosition);
            var _g1 = 0;
            var _g = this.detailsLength;
            while (_g1 < _g) {
              var i1 = _g1++;
              details = this.propertyDetails[i1];
              var value = details.start + details.change * easing;
              if (details.isField) {
                details.target[details.propertyName] = value;
              } else {
                Reflect.setProperty(
                  details.target,
                  details.propertyName,
                  value
                );
              }
            }
          } else {
            if (!this._reverse) {
              easing = this._ease.calculate(tweenPosition);
            } else {
              easing = this._ease.calculate(1 - tweenPosition);
            }
            var endValue;
            var _g11 = 0;
            var _g2 = this.detailsLength;
            while (_g11 < _g2) {
              var i2 = _g11++;
              details = this.propertyDetails[i2];
              if (
                this._smartRotation &&
                (details.propertyName == "rotation" ||
                  details.propertyName == "rotationX" ||
                  details.propertyName == "rotationY" ||
                  details.propertyName == "rotationZ")
              ) {
                var rotation = details.change % 360;
                if (rotation > 180) {
                  rotation -= 360;
                } else if (rotation < -180) {
                  rotation += 360;
                }
                endValue = details.start + rotation * easing;
              } else {
                endValue = details.start + details.change * easing;
              }
              if (!this._snapping) {
                if (details.isField) {
                  details.target[details.propertyName] = endValue;
                } else {
                  Reflect.setProperty(
                    details.target,
                    details.propertyName,
                    endValue
                  );
                }
              } else {
                var value1 = Math.round(endValue);
                if (details.isField) {
                  details.target[details.propertyName] = value1;
                } else {
                  Reflect.setProperty(
                    details.target,
                    details.propertyName,
                    value1
                  );
                }
              }
            }
          }
          if (tweenPosition == 1) {
            if (this._repeat == 0) {
              this.active = false;
              var tmp;
              if (this.toggleVisible) {
                var target = this.target;
                var value2 = null;
                if (Object.prototype.hasOwnProperty.call(target, "alpha")) {
                  value2 = Reflect.field(target, "alpha");
                } else {
                  value2 = Reflect.getProperty(target, "alpha");
                }
                tmp = value2 == 0;
              } else {
                tmp = false;
              }
              if (tmp) {
                var target1 = this.target;
                if (Object.prototype.hasOwnProperty.call(target1, "visible")) {
                  target1["visible"] = false;
                } else {
                  Reflect.setProperty(target1, "visible", false);
                }
              }
              this.complete(true);
              return;
            } else {
              if (this._onRepeat != null) {
                var method = this._onRepeat;
                var params = this._onRepeatParams;
                if (params == null) {
                  params = [];
                }
                method.apply(method, params);
              }
              if (this._reflect) {
                this._reverse = !this._reverse;
              }
              this.startTime = currentTime;
              this.timeOffset = this.startTime + this._delay;
              if (this._repeat > 0) {
                this._repeat--;
              }
            }
          }
          if (this.sendChange) {
            this.change();
          }
        }
      },
      __class__: motion_actuators_SimpleActuator,
    }
  );
  var motion_easing_Expo = function () {};
  $hxClasses["motion.easing.Expo"] = motion_easing_Expo;
  motion_easing_Expo.__name__ = ["motion", "easing", "Expo"];
  motion_easing_Expo.__properties__ = {
    get_easeOut: "get_easeOut",
    get_easeInOut: "get_easeInOut",
    get_easeIn: "get_easeIn",
  };
  motion_easing_Expo.get_easeIn = function () {
    return new motion_easing_ExpoEaseIn();
  };
  motion_easing_Expo.get_easeInOut = function () {
    return new motion_easing_ExpoEaseInOut();
  };
  motion_easing_Expo.get_easeOut = function () {
    return new motion_easing_ExpoEaseOut();
  };
  var motion_easing_IEasing = function () {};
  $hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
  motion_easing_IEasing.__name__ = ["motion", "easing", "IEasing"];
  motion_easing_IEasing.prototype = {
    calculate: null,
    ease: null,
    __class__: motion_easing_IEasing,
  };
  var motion_easing_ExpoEaseOut = function () {};
  $hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
  motion_easing_ExpoEaseOut.__name__ = ["motion", "easing", "ExpoEaseOut"];
  motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_ExpoEaseOut.prototype = {
    calculate: function (k) {
      if (k == 1) {
        return 1;
      } else {
        return 1 - Math.pow(2, -10 * k);
      }
    },
    ease: function (t, b, c, d) {
      if (t == d) {
        return b + c;
      } else {
        return c * (1 - Math.pow(2, (-10 * t) / d)) + b;
      }
    },
    __class__: motion_easing_ExpoEaseOut,
  };
  var motion_Actuate = function () {};
  $hxClasses["motion.Actuate"] = motion_Actuate;
  motion_Actuate.__name__ = ["motion", "Actuate"];
  motion_Actuate.apply = function (target, properties, customActuator) {
    motion_Actuate.stop(target, properties);
    if (customActuator == null) {
      customActuator = motion_Actuate.defaultActuator;
    }
    var actuator = Type.createInstance(customActuator, [target, 0, properties]);
    actuator.apply();
    return actuator;
  };
  motion_Actuate.effects = function (target, duration, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    return new motion__$Actuate_EffectsOptions(target, duration, overwrite);
  };
  motion_Actuate.getLibrary = function (target, allowCreation) {
    if (allowCreation == null) {
      allowCreation = true;
    }
    if (
      motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null &&
      allowCreation
    ) {
      motion_Actuate.targetLibraries.set(target, []);
    }
    return motion_Actuate.targetLibraries.h[target.__id__];
  };
  motion_Actuate.isActive = function () {
    var result = false;
    var library = motion_Actuate.targetLibraries.iterator();
    while (library.hasNext()) {
      var library1 = library.next();
      result = true;
      break;
    }
    return result;
  };
  motion_Actuate.motionPath = function (
    target,
    duration,
    properties,
    overwrite
  ) {
    if (overwrite == null) {
      overwrite = true;
    }
    return motion_Actuate.tween(
      target,
      duration,
      properties,
      overwrite,
      motion_actuators_MotionPathActuator
    );
  };
  motion_Actuate.pause = function (target) {
    if (js_Boot.__instanceof(target, motion_actuators_IGenericActuator)) {
      var actuator = target;
      actuator.pause();
    } else {
      var library = motion_Actuate.getLibrary(target, false);
      if (library != null) {
        var _g = 0;
        while (_g < library.length) {
          var actuator1 = library[_g];
          ++_g;
          actuator1.pause();
        }
      }
    }
  };
  motion_Actuate.pauseAll = function () {
    var library = motion_Actuate.targetLibraries.iterator();
    while (library.hasNext()) {
      var library1 = library.next();
      var _g = 0;
      while (_g < library1.length) {
        var actuator = library1[_g];
        ++_g;
        actuator.pause();
      }
    }
  };
  motion_Actuate.reset = function () {
    var library = motion_Actuate.targetLibraries.iterator();
    while (library.hasNext()) {
      var library1 = library.next();
      var i = library1.length - 1;
      while (i >= 0) {
        library1[i].stop(null, false, false);
        --i;
      }
    }
    motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
  };
  motion_Actuate.resume = function (target) {
    if (js_Boot.__instanceof(target, motion_actuators_IGenericActuator)) {
      var actuator = target;
      actuator.resume();
    } else {
      var library = motion_Actuate.getLibrary(target, false);
      if (library != null) {
        var _g = 0;
        while (_g < library.length) {
          var actuator1 = library[_g];
          ++_g;
          actuator1.resume();
        }
      }
    }
  };
  motion_Actuate.resumeAll = function () {
    var library = motion_Actuate.targetLibraries.iterator();
    while (library.hasNext()) {
      var library1 = library.next();
      var _g = 0;
      while (_g < library1.length) {
        var actuator = library1[_g];
        ++_g;
        actuator.resume();
      }
    }
  };
  motion_Actuate.stop = function (target, properties, complete, sendEvent) {
    if (sendEvent == null) {
      sendEvent = true;
    }
    if (complete == null) {
      complete = false;
    }
    if (target != null) {
      if (js_Boot.__instanceof(target, motion_actuators_IGenericActuator)) {
        var actuator = target;
        actuator.stop(null, complete, sendEvent);
      } else {
        var library = motion_Actuate.getLibrary(target, false);
        if (library != null) {
          if (typeof properties == "string") {
            var temp = {};
            temp[properties] = null;
            properties = temp;
          } else if (
            properties instanceof Array &&
            properties.__enum__ == null
          ) {
            var temp1 = {};
            var _g = 0;
            var _g1 = js_Boot.__cast(properties, Array);
            while (_g < _g1.length) {
              var property = _g1[_g];
              ++_g;
              temp1[property] = null;
            }
            properties = temp1;
          }
          var i = library.length - 1;
          while (i >= 0) {
            library[i].stop(properties, complete, sendEvent);
            --i;
          }
        }
      }
    }
  };
  motion_Actuate.timer = function (duration, customActuator) {
    return motion_Actuate.tween(
      new motion__$Actuate_TweenTimer(0),
      duration,
      new motion__$Actuate_TweenTimer(1),
      false,
      customActuator
    );
  };
  motion_Actuate.transform = function (target, duration, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    if (duration == null) {
      duration = 0;
    }
    return new motion__$Actuate_TransformOptions(target, duration, overwrite);
  };
  motion_Actuate.tween = function (
    target,
    duration,
    properties,
    overwrite,
    customActuator
  ) {
    if (overwrite == null) {
      overwrite = true;
    }
    if (target != null) {
      if (duration > 0) {
        if (customActuator == null) {
          customActuator = motion_Actuate.defaultActuator;
        }
        var actuator = Type.createInstance(customActuator, [
          target,
          duration,
          properties,
        ]);
        var library = motion_Actuate.getLibrary(actuator.target);
        if (overwrite) {
          var i = library.length - 1;
          while (i >= 0) {
            library[i].stop(actuator.properties, false, false);
            --i;
          }
          library = motion_Actuate.getLibrary(actuator.target);
        }
        library.push(actuator);
        actuator.move();
        return actuator;
      } else {
        return motion_Actuate.apply(target, properties, customActuator);
      }
    }
    return null;
  };
  motion_Actuate.unload = function (actuator) {
    var target = actuator.target;
    if (motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
      HxOverrides.remove(
        motion_Actuate.targetLibraries.h[target.__id__],
        actuator
      );
      if (motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
        motion_Actuate.targetLibraries.remove(target);
      }
    }
  };
  motion_Actuate.update = function (target, duration, start, end, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    var properties = { start: start, end: end };
    return motion_Actuate.tween(
      target,
      duration,
      properties,
      overwrite,
      motion_actuators_MethodActuator
    );
  };
  var motion__$Actuate_EffectsOptions = function (target, duration, overwrite) {
    this.target = target;
    this.duration = duration;
    this.overwrite = overwrite;
  };
  $hxClasses["motion._Actuate.EffectsOptions"] =
    motion__$Actuate_EffectsOptions;
  motion__$Actuate_EffectsOptions.__name__ = [
    "motion",
    "_Actuate",
    "EffectsOptions",
  ];
  motion__$Actuate_EffectsOptions.prototype = {
    duration: null,
    overwrite: null,
    target: null,
    filter: function (reference, properties) {
      properties.filter = reference;
      return motion_Actuate.tween(
        this.target,
        this.duration,
        properties,
        this.overwrite,
        motion_actuators_FilterActuator
      );
    },
    __class__: motion__$Actuate_EffectsOptions,
  };
  var motion__$Actuate_TransformOptions = function (
    target,
    duration,
    overwrite
  ) {
    this.target = target;
    this.duration = duration;
    this.overwrite = overwrite;
  };
  $hxClasses["motion._Actuate.TransformOptions"] =
    motion__$Actuate_TransformOptions;
  motion__$Actuate_TransformOptions.__name__ = [
    "motion",
    "_Actuate",
    "TransformOptions",
  ];
  motion__$Actuate_TransformOptions.prototype = {
    duration: null,
    overwrite: null,
    target: null,
    color: function (value, strength, alpha) {
      if (strength == null) {
        strength = 1;
      }
      if (value == null) {
        value = 0;
      }
      var properties = { colorValue: value, colorStrength: strength };
      if (alpha != null) {
        properties.colorAlpha = alpha;
      }
      return motion_Actuate.tween(
        this.target,
        this.duration,
        properties,
        this.overwrite,
        motion_actuators_TransformActuator
      );
    },
    sound: function (volume, pan) {
      var properties = {};
      if (volume != null) {
        properties.soundVolume = volume;
      }
      if (pan != null) {
        properties.soundPan = pan;
      }
      return motion_Actuate.tween(
        this.target,
        this.duration,
        properties,
        this.overwrite,
        motion_actuators_TransformActuator
      );
    },
    __class__: motion__$Actuate_TransformOptions,
  };
  var motion__$Actuate_TweenTimer = function (progress) {
    this.progress = progress;
  };
  $hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
  motion__$Actuate_TweenTimer.__name__ = ["motion", "_Actuate", "TweenTimer"];
  motion__$Actuate_TweenTimer.prototype = {
    progress: null,
    __class__: motion__$Actuate_TweenTimer,
  };
  var motion_MotionPath = function () {
    this._x = new motion_ComponentPath();
    this._y = new motion_ComponentPath();
    this._rotation = null;
  };
  $hxClasses["motion.MotionPath"] = motion_MotionPath;
  motion_MotionPath.__name__ = ["motion", "MotionPath"];
  motion_MotionPath.prototype = {
    rotation: null,
    x: null,
    y: null,
    _rotation: null,
    _x: null,
    _y: null,
    bezier: function (x, y, controlX, controlY, strength) {
      if (strength == null) {
        strength = 1;
      }
      this._x.addPath(new motion_BezierPath(x, controlX, strength));
      this._y.addPath(new motion_BezierPath(y, controlY, strength));
      return this;
    },
    line: function (x, y, strength) {
      if (strength == null) {
        strength = 1;
      }
      this._x.addPath(new motion_LinearPath(x, strength));
      this._y.addPath(new motion_LinearPath(y, strength));
      return this;
    },
    get_rotation: function () {
      if (this._rotation == null) {
        this._rotation = new motion_RotationPath(this._x, this._y);
      }
      return this._rotation;
    },
    get_x: function () {
      return this._x;
    },
    get_y: function () {
      return this._y;
    },
    __class__: motion_MotionPath,
    __properties__: {
      get_y: "get_y",
      get_x: "get_x",
      get_rotation: "get_rotation",
    },
  };
  var motion_IComponentPath = function () {};
  $hxClasses["motion.IComponentPath"] = motion_IComponentPath;
  motion_IComponentPath.__name__ = ["motion", "IComponentPath"];
  motion_IComponentPath.prototype = {
    get_end: null,
    end: null,
    start: null,
    calculate: null,
    __class__: motion_IComponentPath,
    __properties__: { get_end: "get_end" },
  };
  var motion_ComponentPath = function () {
    this.paths = [];
    this.start = 0;
    this.totalStrength = 0;
  };
  $hxClasses["motion.ComponentPath"] = motion_ComponentPath;
  motion_ComponentPath.__name__ = ["motion", "ComponentPath"];
  motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
  motion_ComponentPath.prototype = {
    start: null,
    end: null,
    paths: null,
    totalStrength: null,
    addPath: function (path) {
      this.paths.push(path);
      this.totalStrength += path.strength;
    },
    calculate: function (k) {
      if (this.paths.length == 1) {
        return this.paths[0].calculate(this.start, k);
      } else {
        var ratio = k * this.totalStrength;
        var lastEnd = this.start;
        var _g = 0;
        var _g1 = this.paths;
        while (_g < _g1.length) {
          var path = _g1[_g];
          ++_g;
          if (ratio > path.strength) {
            ratio -= path.strength;
            lastEnd = path.end;
          } else {
            return path.calculate(lastEnd, ratio / path.strength);
          }
        }
      }
      return 0;
    },
    get_end: function () {
      if (this.paths.length > 0) {
        var path = this.paths[this.paths.length - 1];
        return path.end;
      } else {
        return this.start;
      }
    },
    __class__: motion_ComponentPath,
    __properties__: { get_end: "get_end" },
  };
  var motion_BezierPath = function (end, control, strength) {
    this.end = end;
    this.control = control;
    this.strength = strength;
  };
  $hxClasses["motion.BezierPath"] = motion_BezierPath;
  motion_BezierPath.__name__ = ["motion", "BezierPath"];
  motion_BezierPath.prototype = {
    control: null,
    end: null,
    strength: null,
    calculate: function (start, k) {
      return (
        (1 - k) * (1 - k) * start +
        2 * (1 - k) * k * this.control +
        k * k * this.end
      );
    },
    __class__: motion_BezierPath,
  };
  var motion_LinearPath = function (end, strength) {
    motion_BezierPath.call(this, end, 0, strength);
  };
  $hxClasses["motion.LinearPath"] = motion_LinearPath;
  motion_LinearPath.__name__ = ["motion", "LinearPath"];
  motion_LinearPath.__super__ = motion_BezierPath;
  motion_LinearPath.prototype = $extend(motion_BezierPath.prototype, {
    calculate: function (start, k) {
      return start + k * (this.end - start);
    },
    __class__: motion_LinearPath,
  });
  var motion_RotationPath = function (x, y) {
    this.step = 0.01;
    this._x = x;
    this._y = y;
    this.offset = 0;
    this.start = this.calculate(0.0);
  };
  $hxClasses["motion.RotationPath"] = motion_RotationPath;
  motion_RotationPath.__name__ = ["motion", "RotationPath"];
  motion_RotationPath.__interfaces__ = [motion_IComponentPath];
  motion_RotationPath.prototype = {
    end: null,
    offset: null,
    start: null,
    step: null,
    _x: null,
    _y: null,
    calculate: function (k) {
      var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
      var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
      var angle = Math.atan2(dY, dX) * (180 / Math.PI);
      angle = (angle + this.offset) % 360;
      return angle;
    },
    get_end: function () {
      return this.calculate(1.0);
    },
    __class__: motion_RotationPath,
    __properties__: { get_end: "get_end" },
  };
  var motion_actuators_FilterActuator = function (
    target,
    duration,
    properties
  ) {
    this.filterIndex = -1;
    motion_actuators_SimpleActuator.call(this, target, duration, properties);
    if (js_Boot.__instanceof(properties.filter, Class)) {
      this.filterClass = properties.filter;
      if (target.get_filters().length == 0) {
        target.set_filters([Type.createInstance(this.filterClass, [])]);
      }
      var _g = 0;
      var _g1 = target.get_filters();
      while (_g < _g1.length) {
        var filter = _g1[_g];
        ++_g;
        if (js_Boot.__instanceof(filter, this.filterClass)) {
          this.filter = filter;
        }
      }
    } else {
      this.filterIndex = properties.filter;
      this.filter = target.get_filters()[this.filterIndex];
    }
  };
  $hxClasses["motion.actuators.FilterActuator"] =
    motion_actuators_FilterActuator;
  motion_actuators_FilterActuator.__name__ = [
    "motion",
    "actuators",
    "FilterActuator",
  ];
  motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
  motion_actuators_FilterActuator.prototype = $extend(
    motion_actuators_SimpleActuator.prototype,
    {
      filter: null,
      filterClass: null,
      filterIndex: null,
      apply: function () {
        var _g = 0;
        var _g1 = Reflect.fields(this.properties);
        while (_g < _g1.length) {
          var propertyName = _g1[_g];
          ++_g;
          if (propertyName != "filter") {
            this.filter[propertyName] = Reflect.field(
              this.properties,
              propertyName
            );
          }
        }
        var target = this.target;
        var value = null;
        if (Object.prototype.hasOwnProperty.call(target, "filters")) {
          value = Reflect.field(target, "filters");
        } else {
          value = Reflect.getProperty(target, "filters");
        }
        var filters = value;
        filters[this.properties.filter] = this.filter;
        var target1 = this.target;
        if (Object.prototype.hasOwnProperty.call(target1, "filters")) {
          target1["filters"] = filters;
        } else {
          Reflect.setProperty(target1, "filters", filters);
        }
      },
      initialize: function () {
        var details;
        var start;
        var _g = 0;
        var _g1 = Reflect.fields(this.properties);
        while (_g < _g1.length) {
          var propertyName = _g1[_g];
          ++_g;
          if (propertyName != "filter") {
            var target = this.filter;
            var value = null;
            if (Object.prototype.hasOwnProperty.call(target, propertyName)) {
              value = Reflect.field(target, propertyName);
            } else {
              value = Reflect.getProperty(target, propertyName);
            }
            start = value;
            details = new motion_actuators_PropertyDetails(
              this.filter,
              propertyName,
              start,
              Reflect.field(this.properties, propertyName) - start
            );
            this.propertyDetails.push(details);
          }
        }
        this.detailsLength = this.propertyDetails.length;
        this.initialized = true;
      },
      update: function (currentTime) {
        motion_actuators_SimpleActuator.prototype.update.call(
          this,
          currentTime
        );
        var filters = this.target.get_filters();
        if (this.filterIndex > -1) {
          filters[this.properties.filter] = this.filter;
        } else {
          var _g1 = 0;
          var _g = filters.length;
          while (_g1 < _g) {
            var i = _g1++;
            if (js_Boot.__instanceof(filters[i], this.filterClass)) {
              filters[i] = this.filter;
            }
          }
        }
        var target = this.target;
        if (Object.prototype.hasOwnProperty.call(target, "filters")) {
          target["filters"] = filters;
        } else {
          Reflect.setProperty(target, "filters", filters);
        }
      },
      __class__: motion_actuators_FilterActuator,
    }
  );
  var motion_actuators_MethodActuator = function (
    target,
    duration,
    properties
  ) {
    this.currentParameters = [];
    this.tweenProperties = {};
    motion_actuators_SimpleActuator.call(this, target, duration, properties);
    if (!Object.prototype.hasOwnProperty.call(properties, "start")) {
      this.properties.start = [];
    }
    if (!Object.prototype.hasOwnProperty.call(properties, "end")) {
      this.properties.end = this.properties.start;
    }
    var _g1 = 0;
    var _g = this.properties.start.length;
    while (_g1 < _g) {
      var i = _g1++;
      this.currentParameters.push(this.properties.start[i]);
    }
  };
  $hxClasses["motion.actuators.MethodActuator"] =
    motion_actuators_MethodActuator;
  motion_actuators_MethodActuator.__name__ = [
    "motion",
    "actuators",
    "MethodActuator",
  ];
  motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
  motion_actuators_MethodActuator.prototype = $extend(
    motion_actuators_SimpleActuator.prototype,
    {
      currentParameters: null,
      tweenProperties: null,
      apply: function () {
        var method = this.target;
        var params = this.properties.end;
        if (params == null) {
          params = [];
        }
        method.apply(method, params);
      },
      complete: function (sendEvent) {
        if (sendEvent == null) {
          sendEvent = true;
        }
        var _g1 = 0;
        var _g = this.properties.start.length;
        while (_g1 < _g) {
          var i = _g1++;
          this.currentParameters[i] = Reflect.field(
            this.tweenProperties,
            "param" + i
          );
        }
        var method = this.target;
        var params = this.currentParameters;
        if (params == null) {
          params = [];
        }
        method.apply(method, params);
        motion_actuators_SimpleActuator.prototype.complete.call(
          this,
          sendEvent
        );
      },
      initialize: function () {
        var details;
        var propertyName;
        var start;
        var _g1 = 0;
        var _g = this.properties.start.length;
        while (_g1 < _g) {
          var i = _g1++;
          propertyName = "param" + i;
          start = this.properties.start[i];
          this.tweenProperties[propertyName] = start;
          if (
            typeof start == "number" ||
            (typeof start == "number" && (start | 0) === start)
          ) {
            details = new motion_actuators_PropertyDetails(
              this.tweenProperties,
              propertyName,
              start,
              this.properties.end[i] - start
            );
            this.propertyDetails.push(details);
          }
        }
        this.detailsLength = this.propertyDetails.length;
        this.initialized = true;
      },
      update: function (currentTime) {
        motion_actuators_SimpleActuator.prototype.update.call(
          this,
          currentTime
        );
        if (this.active && !this.paused) {
          var _g1 = 0;
          var _g = this.properties.start.length;
          while (_g1 < _g) {
            var i = _g1++;
            this.currentParameters[i] = Reflect.field(
              this.tweenProperties,
              "param" + i
            );
          }
          var method = this.target;
          var params = this.currentParameters;
          if (params == null) {
            params = [];
          }
          method.apply(method, params);
        }
      },
      __class__: motion_actuators_MethodActuator,
    }
  );
  var motion_actuators_MotionPathActuator = function (
    target,
    duration,
    properties
  ) {
    motion_actuators_SimpleActuator.call(this, target, duration, properties);
  };
  $hxClasses["motion.actuators.MotionPathActuator"] =
    motion_actuators_MotionPathActuator;
  motion_actuators_MotionPathActuator.__name__ = [
    "motion",
    "actuators",
    "MotionPathActuator",
  ];
  motion_actuators_MotionPathActuator.__super__ =
    motion_actuators_SimpleActuator;
  motion_actuators_MotionPathActuator.prototype = $extend(
    motion_actuators_SimpleActuator.prototype,
    {
      apply: function () {
        var _g = 0;
        var _g1 = Reflect.fields(this.properties);
        while (_g < _g1.length) {
          var propertyName = _g1[_g];
          ++_g;
          if (Object.prototype.hasOwnProperty.call(this.target, propertyName)) {
            this.target[propertyName] = js_Boot
              .__cast(
                Reflect.field(this.properties, propertyName),
                motion_IComponentPath
              )
              .get_end();
          } else {
            Reflect.setProperty(
              this.target,
              propertyName,
              js_Boot
                .__cast(
                  Reflect.field(this.properties, propertyName),
                  motion_IComponentPath
                )
                .get_end()
            );
          }
        }
      },
      initialize: function () {
        var details;
        var path;
        var _g = 0;
        var _g1 = Reflect.fields(this.properties);
        while (_g < _g1.length) {
          var propertyName = _g1[_g];
          ++_g;
          path = js_Boot.__cast(
            Reflect.field(this.properties, propertyName),
            motion_IComponentPath
          );
          if (path != null) {
            var isField = true;
            if (
              Object.prototype.hasOwnProperty.call(this.target, propertyName)
            ) {
              path.start = Reflect.field(this.target, propertyName);
            } else {
              isField = false;
              path.start = Reflect.getProperty(this.target, propertyName);
            }
            details = new motion_actuators_PropertyPathDetails(
              this.target,
              propertyName,
              path,
              isField
            );
            this.propertyDetails.push(details);
          }
        }
        this.detailsLength = this.propertyDetails.length;
        this.initialized = true;
      },
      update: function (currentTime) {
        if (!this.paused) {
          var details;
          var easing;
          var tweenPosition = (currentTime - this.timeOffset) / this.duration;
          if (tweenPosition > 1) {
            tweenPosition = 1;
          }
          if (!this.initialized) {
            this.initialize();
          }
          if (!this.special) {
            easing = this._ease.calculate(tweenPosition);
            var _g = 0;
            var _g1 = this.propertyDetails;
            while (_g < _g1.length) {
              var details1 = _g1[_g];
              ++_g;
              if (details1.isField) {
                details1.target[details1.propertyName] = js_Boot
                  .__cast(details1, motion_actuators_PropertyPathDetails)
                  .path.calculate(easing);
              } else {
                Reflect.setProperty(
                  details1.target,
                  details1.propertyName,
                  js_Boot
                    .__cast(details1, motion_actuators_PropertyPathDetails)
                    .path.calculate(easing)
                );
              }
            }
          } else {
            if (!this._reverse) {
              easing = this._ease.calculate(tweenPosition);
            } else {
              easing = this._ease.calculate(1 - tweenPosition);
            }
            var endValue;
            var _g2 = 0;
            var _g11 = this.propertyDetails;
            while (_g2 < _g11.length) {
              var details2 = _g11[_g2];
              ++_g2;
              if (!this._snapping) {
                if (details2.isField) {
                  details2.target[details2.propertyName] = js_Boot
                    .__cast(details2, motion_actuators_PropertyPathDetails)
                    .path.calculate(easing);
                } else {
                  Reflect.setProperty(
                    details2.target,
                    details2.propertyName,
                    js_Boot
                      .__cast(details2, motion_actuators_PropertyPathDetails)
                      .path.calculate(easing)
                  );
                }
              } else if (details2.isField) {
                details2.target[details2.propertyName] = Math.round(
                  js_Boot
                    .__cast(details2, motion_actuators_PropertyPathDetails)
                    .path.calculate(easing)
                );
              } else {
                Reflect.setProperty(
                  details2.target,
                  details2.propertyName,
                  Math.round(
                    js_Boot
                      .__cast(details2, motion_actuators_PropertyPathDetails)
                      .path.calculate(easing)
                  )
                );
              }
            }
          }
          if (tweenPosition == 1) {
            if (this._repeat == 0) {
              this.active = false;
              var tmp;
              if (this.toggleVisible) {
                var target = this.target;
                var value = null;
                if (Object.prototype.hasOwnProperty.call(target, "alpha")) {
                  value = Reflect.field(target, "alpha");
                } else {
                  value = Reflect.getProperty(target, "alpha");
                }
                tmp = value == 0;
              } else {
                tmp = false;
              }
              if (tmp) {
                var target1 = this.target;
                if (Object.prototype.hasOwnProperty.call(target1, "visible")) {
                  target1["visible"] = false;
                } else {
                  Reflect.setProperty(target1, "visible", false);
                }
              }
              this.complete(true);
              return;
            } else {
              if (this._onRepeat != null) {
                var method = this._onRepeat;
                var params = this._onRepeatParams;
                if (params == null) {
                  params = [];
                }
                method.apply(method, params);
              }
              if (this._reflect) {
                this._reverse = !this._reverse;
              }
              this.startTime = currentTime;
              this.timeOffset = this.startTime + this._delay;
              if (this._repeat > 0) {
                this._repeat--;
              }
            }
          }
          if (this.sendChange) {
            this.change();
          }
        }
      },
      __class__: motion_actuators_MotionPathActuator,
    }
  );
  var motion_actuators_PropertyDetails = function (
    target,
    propertyName,
    start,
    change,
    isField
  ) {
    if (isField == null) {
      isField = true;
    }
    this.target = target;
    this.propertyName = propertyName;
    this.start = start;
    this.change = change;
    this.isField = isField;
  };
  $hxClasses["motion.actuators.PropertyDetails"] =
    motion_actuators_PropertyDetails;
  motion_actuators_PropertyDetails.__name__ = [
    "motion",
    "actuators",
    "PropertyDetails",
  ];
  motion_actuators_PropertyDetails.prototype = {
    change: null,
    isField: null,
    propertyName: null,
    start: null,
    target: null,
    __class__: motion_actuators_PropertyDetails,
  };
  var motion_actuators_PropertyPathDetails = function (
    target,
    propertyName,
    path,
    isField
  ) {
    if (isField == null) {
      isField = true;
    }
    motion_actuators_PropertyDetails.call(
      this,
      target,
      propertyName,
      0,
      0,
      isField
    );
    this.path = path;
  };
  $hxClasses["motion.actuators.PropertyPathDetails"] =
    motion_actuators_PropertyPathDetails;
  motion_actuators_PropertyPathDetails.__name__ = [
    "motion",
    "actuators",
    "PropertyPathDetails",
  ];
  motion_actuators_PropertyPathDetails.__super__ =
    motion_actuators_PropertyDetails;
  motion_actuators_PropertyPathDetails.prototype = $extend(
    motion_actuators_PropertyDetails.prototype,
    {
      path: null,
      __class__: motion_actuators_PropertyPathDetails,
    }
  );
  var motion_actuators_TransformActuator = function (
    target,
    duration,
    properties
  ) {
    motion_actuators_SimpleActuator.call(this, target, duration, properties);
  };
  $hxClasses["motion.actuators.TransformActuator"] =
    motion_actuators_TransformActuator;
  motion_actuators_TransformActuator.__name__ = [
    "motion",
    "actuators",
    "TransformActuator",
  ];
  motion_actuators_TransformActuator.__super__ =
    motion_actuators_SimpleActuator;
  motion_actuators_TransformActuator.prototype = $extend(
    motion_actuators_SimpleActuator.prototype,
    {
      endColorTransform: null,
      endSoundTransform: null,
      tweenColorTransform: null,
      tweenSoundTransform: null,
      apply: function () {
        this.initialize();
        if (this.endColorTransform != null) {
          var target = this.target;
          var value = null;
          if (Object.prototype.hasOwnProperty.call(target, "transform")) {
            value = Reflect.field(target, "transform");
          } else {
            value = Reflect.getProperty(target, "transform");
          }
          var transform = value;
          var value1 = this.endColorTransform;
          if (
            Object.prototype.hasOwnProperty.call(transform, "colorTransform")
          ) {
            transform["colorTransform"] = value1;
          } else {
            Reflect.setProperty(transform, "colorTransform", value1);
          }
        }
        if (this.endSoundTransform != null) {
          var target1 = this.target;
          var value2 = this.endSoundTransform;
          if (Object.prototype.hasOwnProperty.call(target1, "soundTransform")) {
            target1["soundTransform"] = value2;
          } else {
            Reflect.setProperty(target1, "soundTransform", value2);
          }
        }
      },
      initialize: function () {
        if (
          Object.prototype.hasOwnProperty.call(this.properties, "colorValue") &&
          js_Boot.__instanceof(this.target, openfl_display_DisplayObject)
        ) {
          this.initializeColor();
        }
        if (
          Object.prototype.hasOwnProperty.call(
            this.properties,
            "soundVolume"
          ) ||
          Object.prototype.hasOwnProperty.call(this.properties, "soundPan")
        ) {
          this.initializeSound();
        }
        this.detailsLength = this.propertyDetails.length;
        this.initialized = true;
      },
      initializeColor: function () {
        this.endColorTransform = new openfl_geom_ColorTransform();
        var color = this.properties.colorValue;
        var strength = this.properties.colorStrength;
        if (strength < 1) {
          var multiplier;
          var offset;
          if (strength < 0.5) {
            multiplier = 1;
            offset = strength * 2;
          } else {
            multiplier = 1 - (strength - 0.5) * 2;
            offset = 1;
          }
          this.endColorTransform.redMultiplier = multiplier;
          this.endColorTransform.greenMultiplier = multiplier;
          this.endColorTransform.blueMultiplier = multiplier;
          this.endColorTransform.redOffset = offset * ((color >> 16) & 255);
          this.endColorTransform.greenOffset = offset * ((color >> 8) & 255);
          this.endColorTransform.blueOffset = offset * (color & 255);
        } else {
          this.endColorTransform.redMultiplier = 0;
          this.endColorTransform.greenMultiplier = 0;
          this.endColorTransform.blueMultiplier = 0;
          this.endColorTransform.redOffset = (color >> 16) & 255;
          this.endColorTransform.greenOffset = (color >> 8) & 255;
          this.endColorTransform.blueOffset = color & 255;
        }
        var propertyNames = [
          "redMultiplier",
          "greenMultiplier",
          "blueMultiplier",
          "redOffset",
          "greenOffset",
          "blueOffset",
        ];
        if (
          Object.prototype.hasOwnProperty.call(this.properties, "colorAlpha")
        ) {
          this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
          propertyNames.push("alphaMultiplier");
        } else {
          var target = this.target;
          var value = null;
          if (Object.prototype.hasOwnProperty.call(target, "alpha")) {
            value = Reflect.field(target, "alpha");
          } else {
            value = Reflect.getProperty(target, "alpha");
          }
          this.endColorTransform.alphaMultiplier = value;
        }
        var target1 = this.target;
        var value1 = null;
        if (Object.prototype.hasOwnProperty.call(target1, "transform")) {
          value1 = Reflect.field(target1, "transform");
        } else {
          value1 = Reflect.getProperty(target1, "transform");
        }
        var transform = value1;
        var value2 = null;
        if (Object.prototype.hasOwnProperty.call(transform, "colorTransform")) {
          value2 = Reflect.field(transform, "colorTransform");
        } else {
          value2 = Reflect.getProperty(transform, "colorTransform");
        }
        var begin = value2;
        this.tweenColorTransform = new openfl_geom_ColorTransform();
        var details;
        var start;
        var _g = 0;
        while (_g < propertyNames.length) {
          var propertyName = propertyNames[_g];
          ++_g;
          var value3 = null;
          if (Object.prototype.hasOwnProperty.call(begin, propertyName)) {
            value3 = Reflect.field(begin, propertyName);
          } else {
            value3 = Reflect.getProperty(begin, propertyName);
          }
          start = value3;
          var details1 = this.tweenColorTransform;
          var target2 = this.endColorTransform;
          var value4 = null;
          if (Object.prototype.hasOwnProperty.call(target2, propertyName)) {
            value4 = Reflect.field(target2, propertyName);
          } else {
            value4 = Reflect.getProperty(target2, propertyName);
          }
          details = new motion_actuators_PropertyDetails(
            details1,
            propertyName,
            start,
            value4 - start
          );
          this.propertyDetails.push(details);
        }
      },
      initializeSound: function () {
        var target = this.target;
        var value = null;
        if (Object.prototype.hasOwnProperty.call(target, "soundTransform")) {
          value = Reflect.field(target, "soundTransform");
        } else {
          value = Reflect.getProperty(target, "soundTransform");
        }
        if (value == null) {
          var target1 = this.target;
          var value1 = new openfl_media_SoundTransform();
          if (Object.prototype.hasOwnProperty.call(target1, "soundTransform")) {
            target1["soundTransform"] = value1;
          } else {
            Reflect.setProperty(target1, "soundTransform", value1);
          }
        }
        var target2 = this.target;
        var value2 = null;
        if (Object.prototype.hasOwnProperty.call(target2, "soundTransform")) {
          value2 = Reflect.field(target2, "soundTransform");
        } else {
          value2 = Reflect.getProperty(target2, "soundTransform");
        }
        var start = value2;
        var target3 = this.target;
        var value3 = null;
        if (Object.prototype.hasOwnProperty.call(target3, "soundTransform")) {
          value3 = Reflect.field(target3, "soundTransform");
        } else {
          value3 = Reflect.getProperty(target3, "soundTransform");
        }
        this.endSoundTransform = value3;
        this.tweenSoundTransform = new openfl_media_SoundTransform();
        if (
          Object.prototype.hasOwnProperty.call(this.properties, "soundVolume")
        ) {
          this.endSoundTransform.volume = this.properties.soundVolume;
          this.propertyDetails.push(
            new motion_actuators_PropertyDetails(
              this.tweenSoundTransform,
              "volume",
              start.volume,
              this.endSoundTransform.volume - start.volume
            )
          );
        }
        if (Object.prototype.hasOwnProperty.call(this.properties, "soundPan")) {
          this.endSoundTransform.pan = this.properties.soundPan;
          this.propertyDetails.push(
            new motion_actuators_PropertyDetails(
              this.tweenSoundTransform,
              "pan",
              start.pan,
              this.endSoundTransform.pan - start.pan
            )
          );
        }
      },
      update: function (currentTime) {
        motion_actuators_SimpleActuator.prototype.update.call(
          this,
          currentTime
        );
        if (this.endColorTransform != null) {
          var target = this.target;
          var value = null;
          if (Object.prototype.hasOwnProperty.call(target, "transform")) {
            value = Reflect.field(target, "transform");
          } else {
            value = Reflect.getProperty(target, "transform");
          }
          var transform = value;
          var value1 = this.tweenColorTransform;
          if (
            Object.prototype.hasOwnProperty.call(transform, "colorTransform")
          ) {
            transform["colorTransform"] = value1;
          } else {
            Reflect.setProperty(transform, "colorTransform", value1);
          }
        }
        if (this.endSoundTransform != null) {
          var target1 = this.target;
          var value2 = this.tweenSoundTransform;
          if (Object.prototype.hasOwnProperty.call(target1, "soundTransform")) {
            target1["soundTransform"] = value2;
          } else {
            Reflect.setProperty(target1, "soundTransform", value2);
          }
        }
      },
      __class__: motion_actuators_TransformActuator,
    }
  );
  var motion_easing_Bounce = function () {};
  $hxClasses["motion.easing.Bounce"] = motion_easing_Bounce;
  motion_easing_Bounce.__name__ = ["motion", "easing", "Bounce"];
  motion_easing_Bounce.__properties__ = {
    get_easeOut: "get_easeOut",
    get_easeInOut: "get_easeInOut",
    get_easeIn: "get_easeIn",
  };
  motion_easing_Bounce.get_easeIn = function () {
    return new motion_easing_BounceEaseIn();
  };
  motion_easing_Bounce.get_easeInOut = function () {
    return new motion_easing_BounceEaseInOut();
  };
  motion_easing_Bounce.get_easeOut = function () {
    return new motion_easing_BounceEaseOut();
  };
  var motion_easing_BounceEaseIn = function () {};
  $hxClasses["motion.easing.BounceEaseIn"] = motion_easing_BounceEaseIn;
  motion_easing_BounceEaseIn.__name__ = ["motion", "easing", "BounceEaseIn"];
  motion_easing_BounceEaseIn.__interfaces__ = [motion_easing_IEasing];
  motion_easing_BounceEaseIn._ease = function (t, b, c, d) {
    var t1 = d - t;
    return (
      c -
      ((t1 /= d) < 0.36363636363636365
        ? c * (7.5625 * t1 * t1)
        : t1 < 0.72727272727272729
        ? c * (7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75)
        : t1 < 0.90909090909090906
        ? c * (7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375)
        : c * (7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375)) +
      b
    );
  };
  motion_easing_BounceEaseIn.prototype = {
    calculate: function (k) {
      var t = 1 - k;
      return (
        1 -
        ((t /= 1) < 0.36363636363636365
          ? 7.5625 * t * t
          : t < 0.72727272727272729
          ? 7.5625 * (t -= 0.54545454545454541) * t + 0.75
          : t < 0.90909090909090906
          ? 7.5625 * (t -= 0.81818181818181823) * t + 0.9375
          : 7.5625 * (t -= 0.95454545454545459) * t + 0.984375)
      );
    },
    ease: function (t, b, c, d) {
      var t1 = d - t;
      return (
        c -
        ((t1 /= d) < 0.36363636363636365
          ? c * (7.5625 * t1 * t1)
          : t1 < 0.72727272727272729
          ? c * (7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75)
          : t1 < 0.90909090909090906
          ? c * (7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375)
          : c * (7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375)) +
        b
      );
    },
    __class__: motion_easing_BounceEaseIn,
  };
  var motion_easing_BounceEaseInOut = function () {};
  $hxClasses["motion.easing.BounceEaseInOut"] = motion_easing_BounceEaseInOut;
  motion_easing_BounceEaseInOut.__name__ = [
    "motion",
    "easing",
    "BounceEaseInOut",
  ];
  motion_easing_BounceEaseInOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_BounceEaseInOut.prototype = {
    calculate: function (k) {
      if (k < 0.5) {
        var t = 1 - k * 2;
        return (
          (1 -
            ((t /= 1) < 0.36363636363636365
              ? 7.5625 * t * t
              : t < 0.72727272727272729
              ? 7.5625 * (t -= 0.54545454545454541) * t + 0.75
              : t < 0.90909090909090906
              ? 7.5625 * (t -= 0.81818181818181823) * t + 0.9375
              : 7.5625 * (t -= 0.95454545454545459) * t + 0.984375)) *
          0.5
        );
      } else {
        var t1 = k * 2 - 1;
        return (
          ((t1 /= 1) < 0.36363636363636365
            ? 7.5625 * t1 * t1
            : t1 < 0.72727272727272729
            ? 7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75
            : t1 < 0.90909090909090906
            ? 7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375
            : 7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375) *
            0.5 +
          0.5
        );
      }
    },
    ease: function (t, b, c, d) {
      if (t < d / 2) {
        var t1 = d - t * 2;
        return (
          (c -
            ((t1 /= d) < 0.36363636363636365
              ? c * (7.5625 * t1 * t1)
              : t1 < 0.72727272727272729
              ? c * (7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75)
              : t1 < 0.90909090909090906
              ? c * (7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375)
              : c * (7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375))) *
            0.5 +
          b
        );
      } else {
        var t2 = t * 2 - d;
        return (
          ((t2 /= d) < 0.36363636363636365
            ? c * (7.5625 * t2 * t2)
            : t2 < 0.72727272727272729
            ? c * (7.5625 * (t2 -= 0.54545454545454541) * t2 + 0.75)
            : t2 < 0.90909090909090906
            ? c * (7.5625 * (t2 -= 0.81818181818181823) * t2 + 0.9375)
            : c * (7.5625 * (t2 -= 0.95454545454545459) * t2 + 0.984375)) *
            0.5 +
          c * 0.5 +
          b
        );
      }
    },
    __class__: motion_easing_BounceEaseInOut,
  };
  var motion_easing_BounceEaseOut = function () {};
  $hxClasses["motion.easing.BounceEaseOut"] = motion_easing_BounceEaseOut;
  motion_easing_BounceEaseOut.__name__ = ["motion", "easing", "BounceEaseOut"];
  motion_easing_BounceEaseOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_BounceEaseOut._ease = function (t, b, c, d) {
    if ((t /= d) < 0.36363636363636365) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 0.72727272727272729) {
      return c * (7.5625 * (t -= 0.54545454545454541) * t + 0.75) + b;
    } else if (t < 0.90909090909090906) {
      return c * (7.5625 * (t -= 0.81818181818181823) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 0.95454545454545459) * t + 0.984375) + b;
    }
  };
  motion_easing_BounceEaseOut.prototype = {
    calculate: function (k) {
      var t = k;
      if ((t /= 1) < 0.36363636363636365) {
        return 7.5625 * t * t;
      } else if (t < 0.72727272727272729) {
        return 7.5625 * (t -= 0.54545454545454541) * t + 0.75;
      } else if (t < 0.90909090909090906) {
        return 7.5625 * (t -= 0.81818181818181823) * t + 0.9375;
      } else {
        return 7.5625 * (t -= 0.95454545454545459) * t + 0.984375;
      }
    },
    ease: function (t, b, c, d) {
      var t1 = t;
      if ((t1 /= d) < 0.36363636363636365) {
        return c * (7.5625 * t1 * t1) + b;
      } else if (t1 < 0.72727272727272729) {
        return c * (7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75) + b;
      } else if (t1 < 0.90909090909090906) {
        return c * (7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375) + b;
      } else {
        return c * (7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375) + b;
      }
    },
    __class__: motion_easing_BounceEaseOut,
  };
  var motion_easing_ExpoEaseIn = function () {};
  $hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
  motion_easing_ExpoEaseIn.__name__ = ["motion", "easing", "ExpoEaseIn"];
  motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
  motion_easing_ExpoEaseIn.prototype = {
    calculate: function (k) {
      if (k == 0) {
        return 0;
      } else {
        return Math.pow(2, 10 * (k - 1));
      }
    },
    ease: function (t, b, c, d) {
      if (t == 0) {
        return b;
      } else {
        return c * Math.pow(2, 10 * (t / d - 1)) + b;
      }
    },
    __class__: motion_easing_ExpoEaseIn,
  };
  var motion_easing_ExpoEaseInOut = function () {};
  $hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
  motion_easing_ExpoEaseInOut.__name__ = ["motion", "easing", "ExpoEaseInOut"];
  motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_ExpoEaseInOut.prototype = {
    calculate: function (k) {
      if (k == 0) {
        return 0;
      }
      if (k == 1) {
        return 1;
      }
      if ((k /= 0.5) < 1.0) {
        return 0.5 * Math.pow(2, 10 * (k - 1));
      }
      return 0.5 * (2 - Math.pow(2, -10 * --k));
    },
    ease: function (t, b, c, d) {
      if (t == 0) {
        return b;
      }
      if (t == d) {
        return b + c;
      }
      if ((t /= d / 2.0) < 1.0) {
        return (c / 2) * Math.pow(2, 10 * (t - 1)) + b;
      }
      return (c / 2) * (2 - Math.pow(2, -10 * --t)) + b;
    },
    __class__: motion_easing_ExpoEaseInOut,
  };
  var motion_easing_Linear = function () {};
  $hxClasses["motion.easing.Linear"] = motion_easing_Linear;
  motion_easing_Linear.__name__ = ["motion", "easing", "Linear"];
  motion_easing_Linear.__properties__ = { get_easeNone: "get_easeNone" };
  motion_easing_Linear.get_easeNone = function () {
    return new motion_easing_LinearEaseNone();
  };
  var motion_easing_LinearEaseNone = function () {};
  $hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
  motion_easing_LinearEaseNone.__name__ = [
    "motion",
    "easing",
    "LinearEaseNone",
  ];
  motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
  motion_easing_LinearEaseNone.prototype = {
    calculate: function (k) {
      return k;
    },
    ease: function (t, b, c, d) {
      return (c * t) / d + b;
    },
    __class__: motion_easing_LinearEaseNone,
  };
  var motion_easing_Quad = function () {};
  $hxClasses["motion.easing.Quad"] = motion_easing_Quad;
  motion_easing_Quad.__name__ = ["motion", "easing", "Quad"];
  motion_easing_Quad.__properties__ = {
    get_easeOut: "get_easeOut",
    get_easeInOut: "get_easeInOut",
    get_easeIn: "get_easeIn",
  };
  motion_easing_Quad.get_easeIn = function () {
    return new motion_easing_QuadEaseIn();
  };
  motion_easing_Quad.get_easeInOut = function () {
    return new motion_easing_QuadEaseInOut();
  };
  motion_easing_Quad.get_easeOut = function () {
    return new motion_easing_QuadEaseOut();
  };
  var motion_easing_QuadEaseIn = function () {};
  $hxClasses["motion.easing.QuadEaseIn"] = motion_easing_QuadEaseIn;
  motion_easing_QuadEaseIn.__name__ = ["motion", "easing", "QuadEaseIn"];
  motion_easing_QuadEaseIn.__interfaces__ = [motion_easing_IEasing];
  motion_easing_QuadEaseIn.prototype = {
    calculate: function (k) {
      return k * k;
    },
    ease: function (t, b, c, d) {
      return c * (t /= d) * t + b;
    },
    __class__: motion_easing_QuadEaseIn,
  };
  var motion_easing_QuadEaseInOut = function () {};
  $hxClasses["motion.easing.QuadEaseInOut"] = motion_easing_QuadEaseInOut;
  motion_easing_QuadEaseInOut.__name__ = ["motion", "easing", "QuadEaseInOut"];
  motion_easing_QuadEaseInOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_QuadEaseInOut.prototype = {
    calculate: function (k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k;
      }
      return -0.5 * ((k - 1) * (k - 3) - 1);
    },
    ease: function (t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return (c / 2) * t * t + b;
      }
      return (-c / 2) * ((t - 1) * (t - 3) - 1) + b;
    },
    __class__: motion_easing_QuadEaseInOut,
  };
  var motion_easing_QuadEaseOut = function () {};
  $hxClasses["motion.easing.QuadEaseOut"] = motion_easing_QuadEaseOut;
  motion_easing_QuadEaseOut.__name__ = ["motion", "easing", "QuadEaseOut"];
  motion_easing_QuadEaseOut.__interfaces__ = [motion_easing_IEasing];
  motion_easing_QuadEaseOut.prototype = {
    calculate: function (k) {
      return -k * (k - 2);
    },
    ease: function (t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    },
    __class__: motion_easing_QuadEaseOut,
  };
  var openfl_display_MovieClip = function () {
    openfl_display_Sprite.call(this);
    this.__currentFrame = 0;
    this.__currentLabels = [];
    this.__totalFrames = 0;
    this.enabled = true;
    if (openfl_display_MovieClip.__initSymbol != null) {
      this.__swf = openfl_display_MovieClip.__initSWF;
      this.__symbol = openfl_display_MovieClip.__initSymbol;
      openfl_display_MovieClip.__initSWF = null;
      openfl_display_MovieClip.__initSymbol = null;
      this.__fromSymbol(this.__swf, this.__symbol);
    }
  };
  $hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
  openfl_display_MovieClip.__name__ = ["openfl", "display", "MovieClip"];
  openfl_display_MovieClip.__super__ = openfl_display_Sprite;
  openfl_display_MovieClip.prototype = $extend(
    openfl_display_Sprite.prototype,
    {
      enabled: null,
      __currentFrame: null,
      __currentFrameLabel: null,
      __currentLabel: null,
      __currentLabels: null,
      __frameScripts: null,
      __frameTime: null,
      __lastUpdate: null,
      __maskCount: null,
      __objectDepths: null,
      __objects: null,
      __playing: null,
      __swf: null,
      __symbol: null,
      __timeElapsed: null,
      __totalFrames: null,
      __zeroSymbol: null,
      addFrameScript: function (index, method) {
        if (method != null) {
          if (this.__frameScripts == null) {
            this.__frameScripts = new haxe_ds_IntMap();
          }
          this.__frameScripts.h[index] = method;
        } else if (this.__frameScripts != null) {
          this.__frameScripts.remove(index);
        }
      },
      gotoAndPlay: function (frame, scene) {
        if (this.__symbol != null) {
          this.__currentFrame = this.__getFrame(frame);
          this.__updateFrame();
          this.play();
        }
      },
      gotoAndStop: function (frame, scene) {
        if (this.__symbol != null) {
          this.__currentFrame = this.__getFrame(frame);
          this.__updateFrame();
          this.stop();
        }
      },
      nextFrame: function () {
        if (this.__symbol != null) {
          var next = this.__currentFrame + 1;
          if (next > this.__totalFrames) {
            next = this.__totalFrames;
          }
          this.gotoAndStop(next);
        }
      },
      play: function () {
        if (this.__symbol != null) {
          if (!this.__playing && this.__totalFrames > 1) {
            this.__playing = true;
            this.__frameTime = (1000 / this.__swf.frameRate) | 0;
            this.__timeElapsed = 0;
          }
        }
      },
      prevFrame: function () {
        if (this.__symbol != null) {
          var previous = this.__currentFrame - 1;
          if (previous < 1) {
            previous = 1;
          }
          this.gotoAndStop(previous);
        }
      },
      stop: function () {
        if (this.__symbol != null) {
          if (this.__playing) {
            this.__playing = false;
          }
        }
      },
      __applyTween: function (start, end, ratio) {
        return start + (end - start) * ratio;
      },
      __enterFrame: function (deltaTime) {
        if (this.__symbol != null) {
          if (this.__playing) {
            this.__timeElapsed += deltaTime;
            var advanceFrames = Math.floor(
              this.__timeElapsed / this.__frameTime
            );
            this.__timeElapsed %= this.__frameTime;
            if (this.__frameScripts != null) {
              var _g1 = 0;
              var _g = advanceFrames;
              while (_g1 < _g) {
                var i = _g1++;
                this.__currentFrame++;
                if (this.__currentFrame > this.__totalFrames) {
                  this.__currentFrame = 1;
                }
                if (
                  this.__frameScripts.h.hasOwnProperty(this.__currentFrame - 1)
                ) {
                  this.__frameScripts.h[this.__currentFrame - 1]();
                  if (!this.__playing) {
                    break;
                  }
                }
              }
            } else {
              this.__currentFrame += advanceFrames;
              while (this.__currentFrame > this.__totalFrames)
                this.__currentFrame -= this.__totalFrames;
            }
            this.__updateFrame();
          }
        }
        openfl_display_Sprite.prototype.__enterFrame.call(this, deltaTime);
      },
      __fromSymbol: function (swf, symbol) {
        if (this.__objects != null) {
          return;
        }
        this.__swf = swf;
        this.__symbol = symbol;
        this.__lastUpdate = -1;
        this.__maskCount = 0;
        this.__objectDepths = [];
        this.__objects = new haxe_ds_IntMap();
        this.__zeroSymbol = -1;
        this.__currentFrame = 1;
        this.__totalFrames = this.__symbol.frames.length;
        var _g1 = 0;
        var _g = this.__symbol.frames.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (this.__symbol.frames[i].label != null) {
            this.__currentLabels.push(
              new openfl_display_FrameLabel(
                this.__symbol.frames[i].label,
                i + 1
              )
            );
          }
        }
        this.__updateFrame();
        var _g2 = 0;
        var _g11 = Type.getInstanceFields(js_Boot.getClass(this));
        while (_g2 < _g11.length) {
          var field = _g11[_g2];
          ++_g2;
          var _g21 = 0;
          var _g3 = this.__children;
          while (_g21 < _g3.length) {
            var child = _g3[_g21];
            ++_g21;
            if (child.get_name() == field) {
              this[field] = child;
            }
          }
        }
        if (this.__totalFrames > 1) {
          this.play();
        }
      },
      __getFrame: function (frame) {
        if (typeof frame == "number" && (frame | 0) === frame) {
          var index = frame;
          if (index < 1) {
            return 1;
          }
          if (index > this.__totalFrames) {
            return this.__totalFrames;
          }
          return index;
        } else if (typeof frame == "string") {
          var label = frame;
          var _g = 0;
          var _g1 = this.__currentLabels;
          while (_g < _g1.length) {
            var frameLabel = _g1[_g];
            ++_g;
            if (frameLabel.get_name() == label) {
              return frameLabel.get_frame();
            }
          }
        }
        return 1;
      },
      __placeObject: function (displayObject, frameObject) {
        if (frameObject.name != null) {
          displayObject.set_name(frameObject.name);
        }
        if (frameObject.matrix != null) {
          displayObject.get_transform().set_matrix(frameObject.matrix);
        }
        if (frameObject.colorTransform != null) {
          displayObject
            .get_transform()
            .set_colorTransform(frameObject.colorTransform);
        }
        if (frameObject.filters != null) {
          var filters = [];
          var _g = 0;
          var _g1 = frameObject.filters;
          while (_g < _g1.length) {
            var filter = _g1[_g];
            ++_g;
            switch (filter[1]) {
              case 0:
                var quality = filter[4];
                var blurY = filter[3];
                var blurX = filter[2];
                filters.push(
                  new openfl_filters_BlurFilter(blurX, blurY, quality)
                );
                break;
              case 1:
                var matrix = filter[2];
                filters.push(new openfl_filters_ColorMatrixFilter(matrix));
                break;
              case 2:
                var hideObject = filter[12];
                var knockout = filter[11];
                var inner = filter[10];
                var quality1 = filter[9];
                var strength = filter[8];
                var blurY1 = filter[7];
                var blurX1 = filter[6];
                var alpha = filter[5];
                var color = filter[4];
                var angle = filter[3];
                var distance = filter[2];
                filters.push(
                  new openfl_filters_DropShadowFilter(
                    distance,
                    angle,
                    color,
                    alpha,
                    blurX1,
                    blurY1,
                    strength,
                    quality1,
                    inner,
                    knockout,
                    hideObject
                  )
                );
                break;
              case 3:
                var knockout1 = filter[9];
                var inner1 = filter[8];
                var quality2 = filter[7];
                var strength1 = filter[6];
                var blurY2 = filter[5];
                var blurX2 = filter[4];
                var alpha1 = filter[3];
                var color1 = filter[2];
                filters.push(
                  new openfl_filters_GlowFilter(
                    color1,
                    alpha1,
                    blurX2,
                    blurY2,
                    strength1,
                    quality2,
                    inner1,
                    knockout1
                  )
                );
                break;
            }
          }
          displayObject.set_filters(filters);
        }
        displayObject.set_visible(frameObject.visible);
      },
      __renderFrame: function (index) {
        var previousIndex = this.__lastUpdate - 1;
        if (previousIndex > index) {
          var timelineObject;
          var exists;
          var i = 0;
          while (i < this.__objectDepths.length) {
            timelineObject = this.__objectDepths[i];
            exists = false;
            var _g = 0;
            var _g1 = this.__symbol.frames[0].objects;
            while (_g < _g1.length) {
              var frameObject = _g1[_g];
              ++_g;
              if (frameObject.id == timelineObject.id) {
                exists = true;
                break;
              }
            }
            if (!exists) {
              if (timelineObject.displayObject.parent == this) {
                this.removeChild(timelineObject.displayObject);
              }
              if (timelineObject.clipDepth > 0) {
                this.__maskCount--;
              }
              if (this.__maskCount < 0) {
                this.__maskCount = 0;
              }
              this.__objectDepths.splice(i, 1);
            } else {
              ++i;
            }
          }
          previousIndex = 0;
        }
        var frame;
        var timelineObject1;
        var displayObject;
        var depth;
        var symbol;
        var depthChange = false;
        var _g11 = previousIndex;
        var _g2 = index + 1;
        while (_g11 < _g2) {
          var i1 = _g11++;
          if (i1 < 0) {
            continue;
          }
          frame = this.__symbol.frames[i1];
          var _g21 = 0;
          var _g3 = frame.objects;
          while (_g21 < _g3.length) {
            var frameObject1 = _g3[_g21];
            ++_g21;
            if (
              frameObject1.type !=
              openfl__$internal_timeline_FrameObjectType.DESTROY
            ) {
              if (
                frameObject1.id == 0 &&
                frameObject1.symbol != this.__zeroSymbol
              ) {
                timelineObject1 = this.__objects.h[0];
                if (
                  timelineObject1 != null &&
                  timelineObject1.displayObject.parent == this
                ) {
                  this.removeChild(timelineObject1.displayObject);
                }
                HxOverrides.remove(this.__objectDepths, this.__objects.h[0]);
                timelineObject1 = null;
                this.__zeroSymbol = frameObject1.symbol;
              }
              displayObject = null;
              if (!this.__objects.h.hasOwnProperty(frameObject1.id)) {
                if (this.__swf.symbols.h.hasOwnProperty(frameObject1.symbol)) {
                  symbol = this.__swf.symbols.h[frameObject1.symbol];
                  displayObject = symbol.__createObject(this.__swf);
                }
                if (displayObject != null) {
                  timelineObject1 =
                    new openfl_display__$MovieClip_TimelineObject(
                      frameObject1.id,
                      frameObject1.depth,
                      frameObject1.clipDepth,
                      displayObject
                    );
                  if (frameObject1.clipDepth > 0) {
                    this.__maskCount++;
                  }
                  this.__objectDepths.push(timelineObject1);
                  this.__objects.h[frameObject1.id] = timelineObject1;
                  depthChange = true;
                }
              } else {
                timelineObject1 = this.__objects.h[frameObject1.id];
                displayObject = timelineObject1.displayObject;
                if (timelineObject1.displayObject.parent == null) {
                  if (frameObject1.clipDepth > 0) {
                    this.__maskCount++;
                  }
                  this.__objectDepths.push(timelineObject1);
                  depthChange = true;
                }
              }
              if (displayObject != null) {
                this.__placeObject(displayObject, frameObject1);
              }
            } else if (this.__objects.h.hasOwnProperty(frameObject1.id)) {
              timelineObject1 = this.__objects.h[frameObject1.id];
              if (timelineObject1 != null) {
                if (timelineObject1.displayObject.parent == this) {
                  this.removeChild(timelineObject1.displayObject);
                }
                if (timelineObject1.clipDepth > 0) {
                  this.__maskCount--;
                  var _g4 = 0;
                  var _g5 = this.__objectDepths;
                  while (_g4 < _g5.length) {
                    var object = _g5[_g4];
                    ++_g4;
                    if (
                      object.displayObject.get_mask() ==
                      timelineObject1.displayObject
                    ) {
                      object.displayObject.set_mask(null);
                    }
                  }
                }
                HxOverrides.remove(this.__objectDepths, timelineObject1);
              }
              depthChange = true;
            }
          }
        }
        if (depthChange) {
          this.__objectDepths.sort($bind(this, this.__sortTimelineDepth));
          var i2 = this.__objectDepths.length - 1;
          while (i2 >= 0) {
            timelineObject1 = this.__objectDepths[i2];
            this.addChildAt(timelineObject1.displayObject, 0);
            --i2;
          }
        }
        if (this.__maskCount > 0) {
          var object1;
          var mask;
          var _g6 = 0;
          var _g12 = this.__objectDepths;
          while (_g6 < _g12.length) {
            var timelineObject2 = _g12[_g6];
            ++_g6;
            if (timelineObject2.clipDepth > 0) {
              mask = timelineObject2.displayObject;
              var _g22 = 0;
              var _g31 = this.__objectDepths;
              while (_g22 < _g31.length) {
                var object2 = _g31[_g22];
                ++_g22;
                if (object2.depth <= timelineObject2.clipDepth) {
                  if (object2.depth >= timelineObject2.depth) {
                    object2.displayObject.set_mask(mask);
                  }
                } else {
                  break;
                }
              }
            }
          }
        }
      },
      __sortTimelineDepth: function (a, b) {
        return a.depth - b.depth;
      },
      __stopAllMovieClips: function () {
        openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
        this.stop();
      },
      __updateFrame: function () {
        if (this.__currentFrame != this.__lastUpdate) {
          var frameIndex = this.__currentFrame - 1;
          if (frameIndex > -1) {
            if (
              this.__symbol.frames.length > frameIndex &&
              this.__symbol.frames[frameIndex] != null
            ) {
              this.__currentFrameLabel = this.__symbol.frames[frameIndex].label;
            } else {
              this.__currentFrameLabel = null;
            }
            if (this.__currentFrameLabel != null) {
              this.__currentLabel = this.__currentFrameLabel;
            } else if (this.__currentFrame != this.__lastUpdate + 1) {
              this.__currentLabel = null;
              var _g = 0;
              var _g1 = this.__currentLabels;
              while (_g < _g1.length) {
                var label = _g1[_g];
                ++_g;
                if (label.get_frame() <= this.__currentFrame) {
                  this.__currentLabel = label.get_name();
                } else {
                  break;
                }
              }
            }
            this.__renderFrame(frameIndex);
          }
          this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
        this.__lastUpdate = this.__currentFrame;
      },
      get_currentFrame: function () {
        return this.__currentFrame;
      },
      get_currentFrameLabel: function () {
        return this.__currentFrameLabel;
      },
      get_currentLabel: function () {
        return this.__currentLabel;
      },
      get_currentLabels: function () {
        return this.__currentLabels;
      },
      get_framesLoaded: function () {
        return this.__totalFrames;
      },
      get_totalFrames: function () {
        return this.__totalFrames;
      },
      __class__: openfl_display_MovieClip,
      __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
        get_totalFrames: "get_totalFrames",
        get_framesLoaded: "get_framesLoaded",
        get_currentLabels: "get_currentLabels",
        get_currentLabel: "get_currentLabel",
        get_currentFrameLabel: "get_currentFrameLabel",
        get_currentFrame: "get_currentFrame",
      }),
    }
  );
  var openfl__$Vector_Vector_$Impl_$ = {};
  $hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
  openfl__$Vector_Vector_$Impl_$.__name__ = [
    "openfl",
    "_Vector",
    "Vector_Impl_",
  ];
  openfl__$Vector_Vector_$Impl_$.__properties__ = {
    set_length: "set_length",
    get_length: "get_length",
    set_fixed: "set_fixed",
    get_fixed: "get_fixed",
  };
  openfl__$Vector_Vector_$Impl_$.concat = function (this1, a) {
    return this1.concat(a);
  };
  openfl__$Vector_Vector_$Impl_$.copy = function (this1) {
    return this1.copy();
  };
  openfl__$Vector_Vector_$Impl_$.get = function (this1, index) {
    return this1.get(index);
  };
  openfl__$Vector_Vector_$Impl_$.indexOf = function (this1, x, from) {
    if (from == null) {
      from = 0;
    }
    return this1.indexOf(x, from);
  };
  openfl__$Vector_Vector_$Impl_$.insertAt = function (this1, index, element) {
    this1.insertAt(index, element);
  };
  openfl__$Vector_Vector_$Impl_$.iterator = function (this1) {
    return this1.iterator();
  };
  openfl__$Vector_Vector_$Impl_$.join = function (this1, sep) {
    return this1.join(sep);
  };
  openfl__$Vector_Vector_$Impl_$.lastIndexOf = function (this1, x, from) {
    if (from == null) {
      from = 0;
    }
    return this1.lastIndexOf(x, from);
  };
  openfl__$Vector_Vector_$Impl_$.pop = function (this1) {
    return this1.pop();
  };
  openfl__$Vector_Vector_$Impl_$.push = function (this1, x) {
    return this1.push(x);
  };
  openfl__$Vector_Vector_$Impl_$.reverse = function (this1) {
    this1.reverse();
  };
  openfl__$Vector_Vector_$Impl_$.set = function (this1, index, value) {
    return this1.set(index, value);
  };
  openfl__$Vector_Vector_$Impl_$.shift = function (this1) {
    return this1.shift();
  };
  openfl__$Vector_Vector_$Impl_$.slice = function (this1, pos, end) {
    return this1.slice(pos, end);
  };
  openfl__$Vector_Vector_$Impl_$.sort = function (this1, f) {
    this1.sort(f);
  };
  openfl__$Vector_Vector_$Impl_$.splice = function (this1, pos, len) {
    return this1.splice(pos, len);
  };
  openfl__$Vector_Vector_$Impl_$.toString = function (this1) {
    return this1.toString();
  };
  openfl__$Vector_Vector_$Impl_$.unshift = function (this1, x) {
    this1.unshift(x);
  };
  openfl__$Vector_Vector_$Impl_$.ofArray = function (a) {
    var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
    var _g1 = 0;
    var _g = a.length;
    while (_g1 < _g) {
      var i = _g1++;
      vector.set(i, a[i]);
    }
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.convert = function (v) {
    return v;
  };
  openfl__$Vector_Vector_$Impl_$.toBoolVector = function (t, length, fixed) {
    return new openfl__$Vector_BoolVector(length, fixed);
  };
  openfl__$Vector_Vector_$Impl_$.toIntVector = function (t, length, fixed) {
    return new openfl__$Vector_IntVector(length, fixed);
  };
  openfl__$Vector_Vector_$Impl_$.toFloatVector = function (t, length, fixed) {
    return new openfl__$Vector_FloatVector(length, fixed);
  };
  openfl__$Vector_Vector_$Impl_$.toFunctionVector = function (
    t,
    length,
    fixed
  ) {
    return new openfl__$Vector_FunctionVector(length, fixed);
  };
  openfl__$Vector_Vector_$Impl_$.toObjectVector = function (t, length, fixed) {
    return new openfl__$Vector_ObjectVector(length, fixed);
  };
  openfl__$Vector_Vector_$Impl_$.fromBoolVector = function (vector) {
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.fromIntVector = function (vector) {
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.fromFloatVector = function (vector) {
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function (vector) {
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.fromObjectVector = function (vector) {
    return vector;
  };
  openfl__$Vector_Vector_$Impl_$.get_fixed = function (this1) {
    return this1.fixed;
  };
  openfl__$Vector_Vector_$Impl_$.set_fixed = function (this1, value) {
    return (this1.fixed = value);
  };
  openfl__$Vector_Vector_$Impl_$.get_length = function (this1) {
    return this1.get_length();
  };
  openfl__$Vector_Vector_$Impl_$.set_length = function (this1, value) {
    return this1.set_length(value);
  };
  var openfl_geom_Matrix = function (a, b, c, d, tx, ty) {
    if (ty == null) {
      ty = 0;
    }
    if (tx == null) {
      tx = 0;
    }
    if (d == null) {
      d = 1;
    }
    if (c == null) {
      c = 0;
    }
    if (b == null) {
      b = 0;
    }
    if (a == null) {
      a = 1;
    }
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.tx = tx;
    this.ty = ty;
  };
  $hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
  openfl_geom_Matrix.__name__ = ["openfl", "geom", "Matrix"];
  openfl_geom_Matrix.prototype = {
    a: null,
    b: null,
    c: null,
    d: null,
    tx: null,
    ty: null,
    __array: null,
    clone: function () {
      return new openfl_geom_Matrix(
        this.a,
        this.b,
        this.c,
        this.d,
        this.tx,
        this.ty
      );
    },
    concat: function (m) {
      var a1 = this.a * m.a + this.b * m.c;
      this.b = this.a * m.b + this.b * m.d;
      this.a = a1;
      var c1 = this.c * m.a + this.d * m.c;
      this.d = this.c * m.b + this.d * m.d;
      this.c = c1;
      var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
      this.ty = this.tx * m.b + this.ty * m.d + m.ty;
      this.tx = tx1;
    },
    copyColumnFrom: function (column, vector3D) {
      if (column > 2) {
        throw new js__$Boot_HaxeError(
          "Column " + column + " out of bounds (2)"
        );
      } else if (column == 0) {
        this.a = vector3D.x;
        this.c = vector3D.y;
      } else if (column == 1) {
        this.b = vector3D.x;
        this.d = vector3D.y;
      } else {
        this.tx = vector3D.x;
        this.ty = vector3D.y;
      }
    },
    copyColumnTo: function (column, vector3D) {
      if (column > 2) {
        throw new js__$Boot_HaxeError(
          "Column " + column + " out of bounds (2)"
        );
      } else if (column == 0) {
        vector3D.x = this.a;
        vector3D.y = this.c;
        vector3D.z = 0;
      } else if (column == 1) {
        vector3D.x = this.b;
        vector3D.y = this.d;
        vector3D.z = 0;
      } else {
        vector3D.x = this.tx;
        vector3D.y = this.ty;
        vector3D.z = 1;
      }
    },
    copyFrom: function (sourceMatrix) {
      this.a = sourceMatrix.a;
      this.b = sourceMatrix.b;
      this.c = sourceMatrix.c;
      this.d = sourceMatrix.d;
      this.tx = sourceMatrix.tx;
      this.ty = sourceMatrix.ty;
    },
    copyRowFrom: function (row, vector3D) {
      if (row > 2) {
        throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
      } else if (row == 0) {
        this.a = vector3D.x;
        this.c = vector3D.y;
      } else if (row == 1) {
        this.b = vector3D.x;
        this.d = vector3D.y;
      } else {
        this.tx = vector3D.x;
        this.ty = vector3D.y;
      }
    },
    copyRowTo: function (row, vector3D) {
      if (row > 2) {
        throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
      } else if (row == 0) {
        vector3D.x = this.a;
        vector3D.y = this.b;
        vector3D.z = this.tx;
      } else if (row == 1) {
        vector3D.x = this.c;
        vector3D.y = this.d;
        vector3D.z = this.ty;
      } else {
        vector3D.setTo(0, 0, 1);
      }
    },
    createBox: function (scaleX, scaleY, rotation, tx, ty) {
      if (ty == null) {
        ty = 0;
      }
      if (tx == null) {
        tx = 0;
      }
      if (rotation == null) {
        rotation = 0;
      }
      if (rotation != 0) {
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        this.a = cos * scaleX;
        this.b = sin * scaleY;
        this.c = -sin * scaleX;
        this.d = cos * scaleY;
      } else {
        this.a = scaleX;
        this.b = 0;
        this.c = 0;
        this.d = scaleY;
      }
      this.tx = tx;
      this.ty = ty;
    },
    createGradientBox: function (width, height, rotation, tx, ty) {
      if (ty == null) {
        ty = 0;
      }
      if (tx == null) {
        tx = 0;
      }
      if (rotation == null) {
        rotation = 0;
      }
      this.a = width / 1638.4;
      this.d = height / 1638.4;
      if (rotation != 0) {
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);
        this.b = sin * this.d;
        this.c = -sin * this.a;
        this.a *= cos;
        this.d *= cos;
      } else {
        this.b = 0;
        this.c = 0;
      }
      this.tx = tx + width / 2;
      this.ty = ty + height / 2;
    },
    deltaTransformPoint: function (point) {
      return new openfl_geom_Point(
        point.x * this.a + point.y * this.c,
        point.x * this.b + point.y * this.d
      );
    },
    equals: function (matrix) {
      if (
        matrix != null &&
        this.tx == matrix.tx &&
        this.ty == matrix.ty &&
        this.a == matrix.a &&
        this.b == matrix.b &&
        this.c == matrix.c
      ) {
        return this.d == matrix.d;
      } else {
        return false;
      }
    },
    identity: function () {
      this.a = 1;
      this.b = 0;
      this.c = 0;
      this.d = 1;
      this.tx = 0;
      this.ty = 0;
    },
    invert: function () {
      var norm = this.a * this.d - this.b * this.c;
      if (norm == 0) {
        this.a = this.b = this.c = this.d = 0;
        this.tx = -this.tx;
        this.ty = -this.ty;
      } else {
        norm = 1.0 / norm;
        var a1 = this.d * norm;
        this.d = this.a * norm;
        this.a = a1;
        this.b *= -norm;
        this.c *= -norm;
        var tx1 = -this.a * this.tx - this.c * this.ty;
        this.ty = -this.b * this.tx - this.d * this.ty;
        this.tx = tx1;
      }
      return this;
    },
    rotate: function (theta) {
      var cos = Math.cos(theta);
      var sin = Math.sin(theta);
      var a1 = this.a * cos - this.b * sin;
      this.b = this.a * sin + this.b * cos;
      this.a = a1;
      var c1 = this.c * cos - this.d * sin;
      this.d = this.c * sin + this.d * cos;
      this.c = c1;
      var tx1 = this.tx * cos - this.ty * sin;
      this.ty = this.tx * sin + this.ty * cos;
      this.tx = tx1;
    },
    scale: function (sx, sy) {
      this.a *= sx;
      this.b *= sy;
      this.c *= sx;
      this.d *= sy;
      this.tx *= sx;
      this.ty *= sy;
    },
    setRotation: function (theta, scale) {
      if (scale == null) {
        scale = 1;
      }
      this.a = Math.cos(theta) * scale;
      this.c = Math.sin(theta) * scale;
      this.b = -this.c;
      this.d = this.a;
    },
    setTo: function (a, b, c, d, tx, ty) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    },
    to3DString: function (roundPixels) {
      if (roundPixels == null) {
        roundPixels = false;
      }
      if (roundPixels) {
        return (
          "matrix3d(" +
          this.a +
          ", " +
          this.b +
          ", 0, 0, " +
          this.c +
          ", " +
          this.d +
          ", 0, 0, 0, 0, 1, 0, " +
          (this.tx | 0) +
          ", " +
          (this.ty | 0) +
          ", 0, 1)"
        );
      } else {
        return (
          "matrix3d(" +
          this.a +
          ", " +
          this.b +
          ", 0, 0, " +
          this.c +
          ", " +
          this.d +
          ", 0, 0, 0, 0, 1, 0, " +
          this.tx +
          ", " +
          this.ty +
          ", 0, 1)"
        );
      }
    },
    toMozString: function () {
      return (
        "matrix(" +
        this.a +
        ", " +
        this.b +
        ", " +
        this.c +
        ", " +
        this.d +
        ", " +
        this.tx +
        "px, " +
        this.ty +
        "px)"
      );
    },
    toString: function () {
      return (
        "matrix(" +
        this.a +
        ", " +
        this.b +
        ", " +
        this.c +
        ", " +
        this.d +
        ", " +
        this.tx +
        ", " +
        this.ty +
        ")"
      );
    },
    transformPoint: function (pos) {
      return new openfl_geom_Point(
        pos.x * this.a + pos.y * this.c + this.tx,
        pos.x * this.b + pos.y * this.d + this.ty
      );
    },
    translate: function (dx, dy) {
      this.tx += dx;
      this.ty += dy;
    },
    toArray: function (transpose) {
      if (transpose == null) {
        transpose = false;
      }
      if (this.__array == null) {
        var this1 = new Float32Array(9);
        this.__array = this1;
      }
      if (transpose) {
        this.__array[0] = this.a;
        this.__array[1] = this.b;
        this.__array[2] = 0;
        this.__array[3] = this.c;
        this.__array[4] = this.d;
        this.__array[5] = 0;
        this.__array[6] = this.tx;
        this.__array[7] = this.ty;
        this.__array[8] = 1;
      } else {
        this.__array[0] = this.a;
        this.__array[1] = this.c;
        this.__array[2] = this.tx;
        this.__array[3] = this.b;
        this.__array[4] = this.d;
        this.__array[5] = this.ty;
        this.__array[6] = 0;
        this.__array[7] = 0;
        this.__array[8] = 1;
      }
      return this.__array;
    },
    __cleanValues: function () {
      this.a = Math.round(this.a * 1000) / 1000;
      this.b = Math.round(this.b * 1000) / 1000;
      this.c = Math.round(this.c * 1000) / 1000;
      this.d = Math.round(this.d * 1000) / 1000;
      this.tx = Math.round(this.tx * 10) / 10;
      this.ty = Math.round(this.ty * 10) / 10;
    },
    __toMatrix3: function () {
      openfl_geom_Matrix.__matrix3.setTo(
        this.a,
        this.b,
        this.c,
        this.d,
        this.tx,
        this.ty
      );
      return openfl_geom_Matrix.__matrix3;
    },
    __transformInversePoint: function (point) {
      var norm = this.a * this.d - this.b * this.c;
      if (norm == 0) {
        point.x = -this.tx;
        point.y = -this.ty;
      } else {
        var px =
          (1.0 / norm) *
          (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
        point.y =
          (1.0 / norm) *
          (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
        point.x = px;
      }
    },
    __transformInverseX: function (px, py) {
      var norm = this.a * this.d - this.b * this.c;
      if (norm == 0) {
        return -this.tx;
      } else {
        return (
          (1.0 / norm) * (this.c * (this.ty - py) + this.d * (px - this.tx))
        );
      }
    },
    __transformInverseY: function (px, py) {
      var norm = this.a * this.d - this.b * this.c;
      if (norm == 0) {
        return -this.ty;
      } else {
        return (
          (1.0 / norm) * (this.a * (py - this.ty) + this.b * (this.tx - px))
        );
      }
    },
    __transformPoint: function (point) {
      var px = point.x;
      var py = point.y;
      point.x = px * this.a + py * this.c + this.tx;
      point.y = px * this.b + py * this.d + this.ty;
    },
    __transformX: function (px, py) {
      return px * this.a + py * this.c + this.tx;
    },
    __transformY: function (px, py) {
      return px * this.b + py * this.d + this.ty;
    },
    __translateTransformed: function (px, py) {
      this.tx = px * this.a + py * this.c + this.tx;
      this.ty = px * this.b + py * this.d + this.ty;
    },
    __class__: openfl_geom_Matrix,
  };
  var openfl_geom_ColorTransform = function (
    redMultiplier,
    greenMultiplier,
    blueMultiplier,
    alphaMultiplier,
    redOffset,
    greenOffset,
    blueOffset,
    alphaOffset
  ) {
    if (alphaOffset == null) {
      alphaOffset = 0;
    }
    if (blueOffset == null) {
      blueOffset = 0;
    }
    if (greenOffset == null) {
      greenOffset = 0;
    }
    if (redOffset == null) {
      redOffset = 0;
    }
    if (alphaMultiplier == null) {
      alphaMultiplier = 1;
    }
    if (blueMultiplier == null) {
      blueMultiplier = 1;
    }
    if (greenMultiplier == null) {
      greenMultiplier = 1;
    }
    if (redMultiplier == null) {
      redMultiplier = 1;
    }
    this.redMultiplier = redMultiplier;
    this.greenMultiplier = greenMultiplier;
    this.blueMultiplier = blueMultiplier;
    this.alphaMultiplier = alphaMultiplier;
    this.redOffset = redOffset;
    this.greenOffset = greenOffset;
    this.blueOffset = blueOffset;
    this.alphaOffset = alphaOffset;
  };
  $hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
  openfl_geom_ColorTransform.__name__ = ["openfl", "geom", "ColorTransform"];
  openfl_geom_ColorTransform.prototype = {
    alphaMultiplier: null,
    alphaOffset: null,
    blueMultiplier: null,
    blueOffset: null,
    greenMultiplier: null,
    greenOffset: null,
    redMultiplier: null,
    redOffset: null,
    concat: function (second) {
      this.redMultiplier *= second.redMultiplier;
      this.greenMultiplier *= second.greenMultiplier;
      this.blueMultiplier *= second.blueMultiplier;
      this.alphaMultiplier *= second.alphaMultiplier;
      this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
      this.greenOffset =
        second.greenMultiplier * this.greenOffset + second.greenOffset;
      this.blueOffset =
        second.blueMultiplier * this.blueOffset + second.blueOffset;
      this.alphaOffset =
        second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
    },
    toString: function () {
      return (
        "(redMultiplier=" +
        this.redMultiplier +
        ", greenMultiplier=" +
        this.greenMultiplier +
        ", blueMultiplier=" +
        this.blueMultiplier +
        ", alphaMultiplier=" +
        this.alphaMultiplier +
        ", redOffset=" +
        this.redOffset +
        ", greenOffset=" +
        this.greenOffset +
        ", blueOffset=" +
        this.blueOffset +
        ", alphaOffset=" +
        this.alphaOffset +
        ")"
      );
    },
    __clone: function () {
      return new openfl_geom_ColorTransform(
        this.redMultiplier,
        this.greenMultiplier,
        this.blueMultiplier,
        this.alphaMultiplier,
        this.redOffset,
        this.greenOffset,
        this.blueOffset,
        this.alphaOffset
      );
    },
    __combine: function (ct) {
      this.redMultiplier *= ct.redMultiplier;
      this.greenMultiplier *= ct.greenMultiplier;
      this.blueMultiplier *= ct.blueMultiplier;
      this.alphaMultiplier *= ct.alphaMultiplier;
      this.redOffset += ct.redOffset;
      this.greenOffset += ct.greenOffset;
      this.blueOffset += ct.blueOffset;
      this.alphaOffset += ct.alphaOffset;
    },
    __equals: function (ct, skipAlphaMultiplier) {
      if (skipAlphaMultiplier == null) {
        skipAlphaMultiplier = false;
      }
      if (
        ct != null &&
        this.redMultiplier == ct.redMultiplier &&
        this.greenMultiplier == ct.greenMultiplier &&
        this.blueMultiplier == ct.blueMultiplier &&
        (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) &&
        this.redOffset == ct.redOffset &&
        this.greenOffset == ct.greenOffset &&
        this.blueOffset == ct.blueOffset
      ) {
        return this.alphaOffset == ct.alphaOffset;
      } else {
        return false;
      }
    },
    __isDefault: function () {
      if (
        this.redMultiplier == 1 &&
        this.greenMultiplier == 1 &&
        this.blueMultiplier == 1 &&
        this.alphaMultiplier == 1 &&
        this.redOffset == 0 &&
        this.greenOffset == 0 &&
        this.blueOffset == 0
      ) {
        return this.alphaOffset == 0;
      } else {
        return false;
      }
    },
    get_color: function () {
      return (
        ((this.redOffset | 0) << 16) |
        ((this.greenOffset | 0) << 8) |
        (this.blueOffset | 0)
      );
    },
    set_color: function (value) {
      this.redOffset = (value >> 16) & 255;
      this.greenOffset = (value >> 8) & 255;
      this.blueOffset = value & 255;
      this.redMultiplier = 0;
      this.greenMultiplier = 0;
      this.blueMultiplier = 0;
      return this.get_color();
    },
    __toLimeColorMatrix: function () {
      if (openfl_geom_ColorTransform.__limeColorMatrix == null) {
        var this1 = new Float32Array(20);
        openfl_geom_ColorTransform.__limeColorMatrix = this1;
      }
      openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
      openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
      openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
      openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
      openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
      openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
      openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
      openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
      return openfl_geom_ColorTransform.__limeColorMatrix;
    },
    __class__: openfl_geom_ColorTransform,
    __properties__: { set_color: "set_color", get_color: "get_color" },
  };
  var openfl_Lib = function () {};
  $hxClasses["openfl.Lib"] = openfl_Lib;
  openfl_Lib.__name__ = ["openfl", "Lib"];
  openfl_Lib["as"] = function (v, c) {
    if (js_Boot.__instanceof(v, c)) {
      return v;
    } else {
      return null;
    }
  };
  openfl_Lib.attach = function (name) {
    return new openfl_display_MovieClip();
  };
  openfl_Lib.getTimer = function () {
    return lime_system_System.getTimer();
  };
  openfl_Lib.getURL = function (request, target) {
    if (target == null) {
      target = "_blank";
    }
    lime_system_System.openURL(request.url, target);
  };
  openfl_Lib.notImplemented = function (posInfo) {
    var api = posInfo.className + "." + posInfo.methodName;
    var _this = openfl_Lib.__sentWarnings;
    if (
      !(__map_reserved[api] != null
        ? _this.existsReserved(api)
        : _this.h.hasOwnProperty(api))
    ) {
      var _this1 = openfl_Lib.__sentWarnings;
      if (__map_reserved[api] != null) {
        _this1.setReserved(api, true);
      } else {
        _this1.h[api] = true;
      }
      lime_utils_Log.warn(posInfo.methodName + " is not implemented", posInfo);
    }
  };
  openfl_Lib.preventDefaultTouchMove = function () {
    window.document.addEventListener(
      "touchmove",
      function (evt) {
        evt.preventDefault();
      },
      false
    );
  };
  openfl_Lib.trace = function (arg) {
    haxe_Log.trace(arg, {
      fileName: "Lib.hx",
      lineNumber: 151,
      className: "openfl.Lib",
      methodName: "trace",
    });
  };
  var openfl__$Vector_IVector = function () {};
  $hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
  openfl__$Vector_IVector.__name__ = ["openfl", "_Vector", "IVector"];
  openfl__$Vector_IVector.prototype = {
    set_length: null,
    get_length: null,
    fixed: null,
    concat: null,
    copy: null,
    get: null,
    indexOf: null,
    insertAt: null,
    iterator: null,
    join: null,
    lastIndexOf: null,
    pop: null,
    push: null,
    reverse: null,
    set: null,
    shift: null,
    slice: null,
    sort: null,
    splice: null,
    toString: null,
    unshift: null,
    __class__: openfl__$Vector_IVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$Vector_BoolVector = function (length, fixed, array) {
    if (array == null) {
      array = [];
    }
    this.__array = array;
    if (length != null) {
      this.set_length(length);
    }
    this.fixed = fixed == true;
  };
  $hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
  openfl__$Vector_BoolVector.__name__ = ["openfl", "_Vector", "BoolVector"];
  openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
  openfl__$Vector_BoolVector.prototype = {
    fixed: null,
    __array: null,
    concat: function (a) {
      if (a == null) {
        return new openfl__$Vector_BoolVector(null, null, this.__array.slice());
      } else {
        return new openfl__$Vector_BoolVector(
          null,
          null,
          this.__array.concat(
            js_Boot.__cast(a, openfl__$Vector_BoolVector).__array
          )
        );
      }
    },
    copy: function () {
      return new openfl__$Vector_BoolVector(
        null,
        this.fixed,
        this.__array.slice()
      );
    },
    get: function (index) {
      if (index >= this.__array.length) {
        return false;
      } else {
        return this.__array[index];
      }
    },
    indexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var _g1 = from;
      var _g = this.__array.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (this.__array[i] == x) {
          return i;
        }
      }
      return -1;
    },
    insertAt: function (index, element) {
      if (!this.fixed || index < this.__array.length) {
        this.__array.splice(index, 0, element);
      }
    },
    iterator: function () {
      return HxOverrides.iter(this.__array);
    },
    join: function (sep) {
      return this.__array.join(sep);
    },
    lastIndexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var i = this.__array.length - 1;
      while (i >= from) {
        if (this.__array[i] == x) {
          return i;
        }
        --i;
      }
      return -1;
    },
    pop: function () {
      if (!this.fixed) {
        return this.__array.pop();
      } else {
        return null;
      }
    },
    push: function (x) {
      if (!this.fixed) {
        return this.__array.push(x);
      } else {
        return this.__array.length;
      }
    },
    reverse: function () {
      this.__array.reverse();
    },
    set: function (index, value) {
      if (!this.fixed || index < this.__array.length) {
        return (this.__array[index] = value);
      } else {
        return value;
      }
    },
    shift: function () {
      if (!this.fixed) {
        return this.__array.shift();
      } else {
        return null;
      }
    },
    slice: function (startIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 16777215;
      }
      if (startIndex == null) {
        startIndex = 0;
      }
      return new openfl__$Vector_BoolVector(
        null,
        null,
        this.__array.slice(startIndex, endIndex)
      );
    },
    sort: function (f) {
      this.__array.sort(f);
    },
    splice: function (pos, len) {
      return new openfl__$Vector_BoolVector(
        null,
        null,
        this.__array.splice(pos, len)
      );
    },
    toString: function () {
      return this.__array.toString();
    },
    unshift: function (x) {
      if (!this.fixed) {
        this.__array.unshift(x);
      }
    },
    get_length: function () {
      return this.__array.length;
    },
    set_length: function (value) {
      if (!this.fixed) {
        var currentLength = this.__array.length;
        if (value < 0) {
          value = 0;
        }
        if (value > currentLength) {
          var _g1 = currentLength;
          var _g = value;
          while (_g1 < _g) {
            var i = _g1++;
            this.__array[i] = false;
          }
        } else {
          while (this.__array.length > value) this.__array.pop();
        }
      }
      return this.__array.length;
    },
    __class__: openfl__$Vector_BoolVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$Vector_FloatVector = function (length, fixed, array) {
    if (array == null) {
      array = [];
    }
    this.__array = array;
    if (length != null) {
      this.set_length(length);
    }
    this.fixed = fixed == true;
  };
  $hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
  openfl__$Vector_FloatVector.__name__ = ["openfl", "_Vector", "FloatVector"];
  openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
  openfl__$Vector_FloatVector.prototype = {
    fixed: null,
    __array: null,
    concat: function (a) {
      if (a == null) {
        return new openfl__$Vector_FloatVector(
          null,
          null,
          this.__array.slice()
        );
      } else {
        return new openfl__$Vector_FloatVector(
          null,
          null,
          this.__array.concat(
            js_Boot.__cast(a, openfl__$Vector_FloatVector).__array
          )
        );
      }
    },
    copy: function () {
      return new openfl__$Vector_FloatVector(
        null,
        this.fixed,
        this.__array.slice()
      );
    },
    get: function (index) {
      return this.__array[index];
    },
    indexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var _g1 = from;
      var _g = this.__array.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (this.__array[i] == x) {
          return i;
        }
      }
      return -1;
    },
    insertAt: function (index, element) {
      if (!this.fixed || index < this.__array.length) {
        this.__array.splice(index, 0, element);
      }
    },
    iterator: function () {
      return HxOverrides.iter(this.__array);
    },
    join: function (sep) {
      return this.__array.join(sep);
    },
    lastIndexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var i = this.__array.length - 1;
      while (i >= from) {
        if (this.__array[i] == x) {
          return i;
        }
        --i;
      }
      return -1;
    },
    pop: function () {
      if (!this.fixed) {
        return this.__array.pop();
      } else {
        return null;
      }
    },
    push: function (x) {
      if (!this.fixed) {
        return this.__array.push(x);
      } else {
        return this.__array.length;
      }
    },
    reverse: function () {
      this.__array.reverse();
    },
    set: function (index, value) {
      if (!this.fixed || index < this.__array.length) {
        return (this.__array[index] = value);
      } else {
        return value;
      }
    },
    shift: function () {
      if (!this.fixed) {
        return this.__array.shift();
      } else {
        return null;
      }
    },
    slice: function (startIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 16777215;
      }
      if (startIndex == null) {
        startIndex = 0;
      }
      return new openfl__$Vector_FloatVector(
        null,
        null,
        this.__array.slice(startIndex, endIndex)
      );
    },
    sort: function (f) {
      this.__array.sort(f);
    },
    splice: function (pos, len) {
      return new openfl__$Vector_FloatVector(
        null,
        null,
        this.__array.splice(pos, len)
      );
    },
    toString: function () {
      return this.__array.toString();
    },
    unshift: function (x) {
      if (!this.fixed) {
        this.__array.unshift(x);
      }
    },
    get_length: function () {
      return this.__array.length;
    },
    set_length: function (value) {
      if (!this.fixed) {
        var currentLength = this.__array.length;
        if (value < 0) {
          value = 0;
        }
        if (value > currentLength) {
          var _g1 = currentLength;
          var _g = value;
          while (_g1 < _g) {
            var i = _g1++;
            this.__array[i] = 0;
          }
        } else {
          while (this.__array.length > value) this.__array.pop();
        }
      }
      return this.__array.length;
    },
    __class__: openfl__$Vector_FloatVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$Vector_FunctionVector = function (length, fixed, array) {
    if (array == null) {
      array = [];
    }
    this.__array = array;
    if (length != null) {
      this.set_length(length);
    }
    this.fixed = fixed == true;
  };
  $hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
  openfl__$Vector_FunctionVector.__name__ = [
    "openfl",
    "_Vector",
    "FunctionVector",
  ];
  openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
  openfl__$Vector_FunctionVector.prototype = {
    fixed: null,
    __array: null,
    concat: function (a) {
      if (a == null) {
        return new openfl__$Vector_FunctionVector(
          null,
          null,
          this.__array.slice()
        );
      } else {
        return new openfl__$Vector_FunctionVector(
          null,
          null,
          this.__array.concat(
            js_Boot.__cast(a, openfl__$Vector_FunctionVector).__array
          )
        );
      }
    },
    copy: function () {
      return new openfl__$Vector_FunctionVector(
        null,
        this.fixed,
        this.__array.slice()
      );
    },
    get: function (index) {
      if (index >= this.__array.length) {
        return null;
      } else {
        return this.__array[index];
      }
    },
    indexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var _g1 = from;
      var _g = this.__array.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (Reflect.compareMethods(this.__array[i], x)) {
          return i;
        }
      }
      return -1;
    },
    insertAt: function (index, element) {
      if (!this.fixed || index < this.__array.length) {
        this.__array.splice(index, 0, element);
      }
    },
    iterator: function () {
      return HxOverrides.iter(this.__array);
    },
    join: function (sep) {
      return this.__array.join(sep);
    },
    lastIndexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var i = this.__array.length - 1;
      while (i >= from) {
        if (Reflect.compareMethods(this.__array[i], x)) {
          return i;
        }
        --i;
      }
      return -1;
    },
    pop: function () {
      if (!this.fixed) {
        return this.__array.pop();
      } else {
        return null;
      }
    },
    push: function (x) {
      if (!this.fixed) {
        return this.__array.push(x);
      } else {
        return this.__array.length;
      }
    },
    reverse: function () {
      this.__array.reverse();
    },
    set: function (index, value) {
      if (!this.fixed || index < this.__array.length) {
        return (this.__array[index] = value);
      } else {
        return value;
      }
    },
    shift: function () {
      if (!this.fixed) {
        return this.__array.shift();
      } else {
        return null;
      }
    },
    slice: function (startIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 16777215;
      }
      if (startIndex == null) {
        startIndex = 0;
      }
      return new openfl__$Vector_FunctionVector(
        null,
        null,
        this.__array.slice(startIndex, endIndex)
      );
    },
    sort: function (f) {
      this.__array.sort(f);
    },
    splice: function (pos, len) {
      return new openfl__$Vector_FunctionVector(
        null,
        null,
        this.__array.splice(pos, len)
      );
    },
    toString: function () {
      return this.__array.toString();
    },
    unshift: function (x) {
      if (!this.fixed) {
        this.__array.unshift(x);
      }
    },
    get_length: function () {
      return this.__array.length;
    },
    set_length: function (value) {
      if (!this.fixed) {
        var currentLength = this.__array.length;
        if (value < 0) {
          value = 0;
        }
        if (value > currentLength) {
          var _g1 = currentLength;
          var _g = value;
          while (_g1 < _g) {
            var i = _g1++;
            this.__array[i] = null;
          }
        } else {
          while (this.__array.length > value) this.__array.pop();
        }
      }
      return this.__array.length;
    },
    __class__: openfl__$Vector_FunctionVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$Vector_IntVector = function (length, fixed, array) {
    if (array == null) {
      array = [];
    }
    this.__array = array;
    if (length != null) {
      this.set_length(length);
    }
    this.fixed = fixed == true;
  };
  $hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
  openfl__$Vector_IntVector.__name__ = ["openfl", "_Vector", "IntVector"];
  openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
  openfl__$Vector_IntVector.prototype = {
    fixed: null,
    __array: null,
    concat: function (a) {
      if (a == null) {
        return new openfl__$Vector_IntVector(null, null, this.__array.slice());
      } else {
        return new openfl__$Vector_IntVector(
          null,
          null,
          this.__array.concat(
            js_Boot.__cast(a, openfl__$Vector_IntVector).__array
          )
        );
      }
    },
    copy: function () {
      return new openfl__$Vector_IntVector(
        null,
        this.fixed,
        this.__array.slice()
      );
    },
    get: function (index) {
      return this.__array[index];
    },
    indexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var _g1 = from;
      var _g = this.__array.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (this.__array[i] == x) {
          return i;
        }
      }
      return -1;
    },
    insertAt: function (index, element) {
      if (!this.fixed || index < this.__array.length) {
        this.__array.splice(index, 0, element);
      }
    },
    iterator: function () {
      return HxOverrides.iter(this.__array);
    },
    join: function (sep) {
      return this.__array.join(sep);
    },
    lastIndexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var i = this.__array.length - 1;
      while (i >= from) {
        if (this.__array[i] == x) {
          return i;
        }
        --i;
      }
      return -1;
    },
    pop: function () {
      if (!this.fixed) {
        return this.__array.pop();
      } else {
        return null;
      }
    },
    push: function (x) {
      if (!this.fixed) {
        return this.__array.push(x);
      } else {
        return this.__array.length;
      }
    },
    reverse: function () {
      this.__array.reverse();
    },
    set: function (index, value) {
      if (!this.fixed || index < this.__array.length) {
        return (this.__array[index] = value);
      } else {
        return value;
      }
    },
    shift: function () {
      if (!this.fixed) {
        return this.__array.shift();
      } else {
        return null;
      }
    },
    slice: function (startIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 16777215;
      }
      if (startIndex == null) {
        startIndex = 0;
      }
      return new openfl__$Vector_IntVector(
        null,
        null,
        this.__array.slice(startIndex, endIndex)
      );
    },
    sort: function (f) {
      this.__array.sort(f);
    },
    splice: function (pos, len) {
      return new openfl__$Vector_IntVector(
        null,
        null,
        this.__array.splice(pos, len)
      );
    },
    toString: function () {
      return this.__array.toString();
    },
    unshift: function (x) {
      if (!this.fixed) {
        this.__array.unshift(x);
      }
    },
    get_length: function () {
      return this.__array.length;
    },
    set_length: function (value) {
      if (!this.fixed) {
        var currentLength = this.__array.length;
        if (value < 0) {
          value = 0;
        }
        if (value > currentLength) {
          var _g1 = currentLength;
          var _g = value;
          while (_g1 < _g) {
            var i = _g1++;
            this.__array[i] = 0;
          }
        } else {
          while (this.__array.length > value) this.__array.pop();
        }
      }
      return this.__array.length;
    },
    __class__: openfl__$Vector_IntVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$Vector_ObjectVector = function (length, fixed, array) {
    if (array == null) {
      array = [];
    }
    this.__array = array;
    if (length != null) {
      this.set_length(length);
    }
    this.fixed = fixed == true;
  };
  $hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
  openfl__$Vector_ObjectVector.__name__ = ["openfl", "_Vector", "ObjectVector"];
  openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
  openfl__$Vector_ObjectVector.prototype = {
    fixed: null,
    __array: null,
    concat: function (a) {
      if (a == null) {
        return new openfl__$Vector_ObjectVector(
          null,
          null,
          this.__array.slice()
        );
      } else {
        return new openfl__$Vector_ObjectVector(
          null,
          null,
          this.__array.concat(
            js_Boot.__cast(a, openfl__$Vector_ObjectVector).__array
          )
        );
      }
    },
    copy: function () {
      return new openfl__$Vector_ObjectVector(null, null, this.__array.slice());
    },
    get: function (index) {
      return this.__array[index];
    },
    indexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var _g1 = from;
      var _g = this.__array.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (this.__array[i] == x) {
          return i;
        }
      }
      return -1;
    },
    insertAt: function (index, element) {
      if (!this.fixed || index < this.__array.length) {
        this.__array.splice(index, 0, element);
      }
    },
    iterator: function () {
      return HxOverrides.iter(this.__array);
    },
    join: function (sep) {
      return this.__array.join(sep);
    },
    lastIndexOf: function (x, from) {
      if (from == null) {
        from = 0;
      }
      var i = this.__array.length - 1;
      while (i >= from) {
        if (this.__array[i] == x) {
          return i;
        }
        --i;
      }
      return -1;
    },
    pop: function () {
      if (!this.fixed) {
        return this.__array.pop();
      } else {
        return null;
      }
    },
    push: function (x) {
      if (!this.fixed) {
        return this.__array.push(x);
      } else {
        return this.__array.length;
      }
    },
    reverse: function () {
      this.__array.reverse();
    },
    set: function (index, value) {
      if (!this.fixed || index < this.__array.length) {
        return (this.__array[index] = value);
      } else {
        return value;
      }
    },
    shift: function () {
      if (!this.fixed) {
        return this.__array.shift();
      } else {
        return null;
      }
    },
    slice: function (startIndex, endIndex) {
      if (endIndex == null) {
        endIndex = 16777215;
      }
      if (startIndex == null) {
        startIndex = 0;
      }
      return new openfl__$Vector_ObjectVector(
        null,
        null,
        this.__array.slice(startIndex, endIndex)
      );
    },
    sort: function (f) {
      this.__array.sort(f);
    },
    splice: function (pos, len) {
      return new openfl__$Vector_ObjectVector(
        null,
        null,
        this.__array.splice(pos, len)
      );
    },
    toString: function () {
      return this.__array.toString();
    },
    unshift: function (x) {
      if (!this.fixed) {
        this.__array.unshift(x);
      }
    },
    get_length: function () {
      return this.__array.length;
    },
    set_length: function (value) {
      if (!this.fixed) {
        var currentLength = this.__array.length;
        if (value < 0) {
          value = 0;
        }
        if (value > currentLength) {
          var _g1 = currentLength;
          var _g = value;
          while (_g1 < _g) {
            var i = _g1++;
            this.__array.push(null);
          }
        } else {
          while (this.__array.length > value) this.__array.pop();
        }
      }
      return this.__array.length;
    },
    __class__: openfl__$Vector_ObjectVector,
    __properties__: { set_length: "set_length", get_length: "get_length" },
  };
  var openfl__$internal_renderer_AbstractBlendModeManager = function () {};
  $hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] =
    openfl__$internal_renderer_AbstractBlendModeManager;
  openfl__$internal_renderer_AbstractBlendModeManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "AbstractBlendModeManager",
  ];
  openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
    setBlendMode: function (blendMode) {},
    __class__: openfl__$internal_renderer_AbstractBlendModeManager,
  };
  var openfl__$internal_renderer_AbstractFilterManager = function (
    renderSession
  ) {
    this.renderSession = renderSession;
  };
  $hxClasses["openfl._internal.renderer.AbstractFilterManager"] =
    openfl__$internal_renderer_AbstractFilterManager;
  openfl__$internal_renderer_AbstractFilterManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "AbstractFilterManager",
  ];
  openfl__$internal_renderer_AbstractFilterManager.prototype = {
    renderSession: null,
    pushObject: function (object) {
      return null;
    },
    popObject: function (object) {},
    __class__: openfl__$internal_renderer_AbstractFilterManager,
  };
  var openfl__$internal_renderer_AbstractMaskManager = function (
    renderSession
  ) {
    this.renderSession = renderSession;
  };
  $hxClasses["openfl._internal.renderer.AbstractMaskManager"] =
    openfl__$internal_renderer_AbstractMaskManager;
  openfl__$internal_renderer_AbstractMaskManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "AbstractMaskManager",
  ];
  openfl__$internal_renderer_AbstractMaskManager.prototype = {
    renderSession: null,
    pushMask: function (mask) {},
    pushObject: function (object, handleScrollRect) {
      if (handleScrollRect == null) {
        handleScrollRect = true;
      }
    },
    pushRect: function (rect, transform) {},
    popMask: function () {},
    popObject: function (object, handleScrollRect) {
      if (handleScrollRect == null) {
        handleScrollRect = true;
      }
    },
    popRect: function () {},
    saveState: function () {},
    restoreState: function () {},
    __class__: openfl__$internal_renderer_AbstractMaskManager,
  };
  var openfl__$internal_renderer_AbstractRenderer = function (stage) {
    this.stage = stage;
    this.width = stage.stageWidth;
    this.height = stage.stageHeight;
  };
  $hxClasses["openfl._internal.renderer.AbstractRenderer"] =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_AbstractRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "AbstractRenderer",
  ];
  openfl__$internal_renderer_AbstractRenderer.prototype = {
    height: null,
    width: null,
    transparent: null,
    viewport: null,
    renderSession: null,
    stage: null,
    clear: function () {},
    render: function () {},
    resize: function (width, height) {
      this.width = width;
      this.height = height;
    },
    __class__: openfl__$internal_renderer_AbstractRenderer,
  };
  var openfl__$internal_renderer_AbstractShaderManager = function () {};
  $hxClasses["openfl._internal.renderer.AbstractShaderManager"] =
    openfl__$internal_renderer_AbstractShaderManager;
  openfl__$internal_renderer_AbstractShaderManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "AbstractShaderManager",
  ];
  openfl__$internal_renderer_AbstractShaderManager.prototype = {
    currentShader: null,
    defaultShader: null,
    setShader: function (shader) {},
    __class__: openfl__$internal_renderer_AbstractShaderManager,
  };
  var openfl__$internal_renderer_DrawCommandBuffer = function () {
    if (openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
      this.types = [];
      this.b = [];
      this.i = [];
      this.f = [];
      this.o = [];
      this.ff = [];
      this.ii = [];
      this.copyOnWrite = true;
    } else {
      this.clear();
    }
  };
  $hxClasses["openfl._internal.renderer.DrawCommandBuffer"] =
    openfl__$internal_renderer_DrawCommandBuffer;
  openfl__$internal_renderer_DrawCommandBuffer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "DrawCommandBuffer",
  ];
  openfl__$internal_renderer_DrawCommandBuffer.prototype = {
    types: null,
    b: null,
    copyOnWrite: null,
    f: null,
    ff: null,
    i: null,
    ii: null,
    o: null,
    append: function (other) {
      if (this.get_length() == 0) {
        this.types = other.types;
        this.b = other.b;
        this.i = other.i;
        this.f = other.f;
        this.o = other.o;
        this.ff = other.ff;
        this.ii = other.ii;
        this.copyOnWrite = other.copyOnWrite = true;
        return other;
      }
      var data = new openfl__$internal_renderer_DrawCommandReader(other);
      var _g = 0;
      var _g1 = other.types;
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 0:
            var _g2 = data.prev;
            switch (_g2[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
            var this1 = data;
            var c = this1;
            this.beginBitmapFill(
              c.buffer.o[c.oPos],
              c.buffer.o[c.oPos + 1],
              c.buffer.b[c.bPos],
              c.buffer.b[c.bPos + 1]
            );
            break;
          case 1:
            var _g3 = data.prev;
            switch (_g3[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
            var this2 = data;
            var c1 = this2;
            this.beginFill(c1.buffer.i[c1.iPos], c1.buffer.f[c1.fPos]);
            break;
          case 2:
            var _g4 = data.prev;
            switch (_g4[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
            var this3 = data;
            var c2 = this3;
            this.beginGradientFill(
              c2.buffer.o[c2.oPos],
              c2.buffer.ii[c2.iiPos],
              c2.buffer.ff[c2.ffPos],
              c2.buffer.ii[c2.iiPos + 1],
              c2.buffer.o[c2.oPos + 1],
              c2.buffer.o[c2.oPos + 2],
              c2.buffer.o[c2.oPos + 3],
              c2.buffer.f[c2.fPos]
            );
            break;
          case 3:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this4 = data;
            var c3 = this4;
            this.cubicCurveTo(
              c3.buffer.f[c3.fPos],
              c3.buffer.f[c3.fPos + 1],
              c3.buffer.f[c3.fPos + 2],
              c3.buffer.f[c3.fPos + 3],
              c3.buffer.f[c3.fPos + 4],
              c3.buffer.f[c3.fPos + 5]
            );
            break;
          case 4:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this5 = data;
            var c4 = this5;
            this.curveTo(
              c4.buffer.f[c4.fPos],
              c4.buffer.f[c4.fPos + 1],
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            break;
          case 5:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this6 = data;
            var c5 = this6;
            this.drawCircle(
              c5.buffer.f[c5.fPos],
              c5.buffer.f[c5.fPos + 1],
              c5.buffer.f[c5.fPos + 2]
            );
            break;
          case 6:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this7 = data;
            var c6 = this7;
            this.drawEllipse(
              c6.buffer.f[c6.fPos],
              c6.buffer.f[c6.fPos + 1],
              c6.buffer.f[c6.fPos + 2],
              c6.buffer.f[c6.fPos + 3]
            );
            break;
          case 7:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            var this8 = data;
            var c7 = this8;
            this.drawRect(
              c7.buffer.f[c7.fPos],
              c7.buffer.f[c7.fPos + 1],
              c7.buffer.f[c7.fPos + 2],
              c7.buffer.f[c7.fPos + 3]
            );
            break;
          case 8:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            var this9 = data;
            var c8 = this9;
            this.drawRoundRect(
              c8.buffer.f[c8.fPos],
              c8.buffer.f[c8.fPos + 1],
              c8.buffer.f[c8.fPos + 2],
              c8.buffer.f[c8.fPos + 3],
              c8.buffer.f[c8.fPos + 4],
              c8.buffer.o[c8.oPos]
            );
            break;
          case 10:
            var _g11 = data.prev;
            switch (_g11[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
            var this10 = data;
            var c9 = this10;
            this.drawTriangles(
              c9.buffer.o[c9.oPos],
              c9.buffer.o[c9.oPos + 1],
              c9.buffer.o[c9.oPos + 2],
              c9.buffer.o[c9.oPos + 3]
            );
            break;
          case 11:
            var _g12 = data.prev;
            switch (_g12[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
            var this11 = data;
            var c10 = this11;
            this.endFill();
            break;
          case 12:
            var _g13 = data.prev;
            switch (_g13[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
            var this12 = data;
            var c11 = this12;
            this.lineBitmapStyle(
              c11.buffer.o[c11.oPos],
              c11.buffer.o[c11.oPos + 1],
              c11.buffer.b[c11.bPos],
              c11.buffer.b[c11.bPos + 1]
            );
            break;
          case 13:
            var _g14 = data.prev;
            switch (_g14[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
            var this13 = data;
            var c12 = this13;
            this.lineGradientStyle(
              c12.buffer.o[c12.oPos],
              c12.buffer.ii[c12.iiPos],
              c12.buffer.ff[c12.ffPos],
              c12.buffer.ii[c12.iiPos + 1],
              c12.buffer.o[c12.oPos + 1],
              c12.buffer.o[c12.oPos + 2],
              c12.buffer.o[c12.oPos + 3],
              c12.buffer.f[c12.fPos]
            );
            break;
          case 14:
            var _g15 = data.prev;
            switch (_g15[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
            var this14 = data;
            var c13 = this14;
            this.lineStyle(
              c13.buffer.o[c13.oPos],
              c13.buffer.i[c13.iPos],
              c13.buffer.f[c13.fPos],
              c13.buffer.b[c13.bPos],
              c13.buffer.o[c13.oPos + 1],
              c13.buffer.o[c13.oPos + 2],
              c13.buffer.o[c13.oPos + 3],
              c13.buffer.f[c13.fPos + 1]
            );
            break;
          case 15:
            var _g16 = data.prev;
            switch (_g16[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this15 = data;
            var c14 = this15;
            this.lineTo(c14.buffer.f[c14.fPos], c14.buffer.f[c14.fPos + 1]);
            break;
          case 16:
            var _g17 = data.prev;
            switch (_g17[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this16 = data;
            var c15 = this16;
            this.moveTo(c15.buffer.f[c15.fPos], c15.buffer.f[c15.fPos + 1]);
            break;
          case 17:
            var _g18 = data.prev;
            switch (_g18[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
            var this17 = data;
            var c16 = this17;
            this.overrideMatrix(c16.buffer.o[c16.oPos]);
            break;
          default:
        }
      }
      data.destroy();
      return other;
    },
    beginBitmapFill: function (bitmap, matrix, repeat, smooth) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL
      );
      this.o.push(bitmap);
      this.o.push(matrix);
      this.b.push(repeat);
      this.b.push(smooth);
    },
    beginFill: function (color, alpha) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
      this.i.push(color);
      this.f.push(alpha);
    },
    beginGradientFill: function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL
      );
      this.o.push(type);
      this.ii.push(colors);
      this.ff.push(alphas);
      this.ii.push(ratios);
      this.o.push(matrix);
      this.o.push(spreadMethod);
      this.o.push(interpolationMethod);
      this.f.push(focalPointRatio);
    },
    clear: function () {
      this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
      this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
      this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
      this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
      this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
      this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
      this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
      this.copyOnWrite = true;
    },
    copy: function () {
      var copy = new openfl__$internal_renderer_DrawCommandBuffer();
      copy.append(this);
      return copy;
    },
    cubicCurveTo: function (
      controlX1,
      controlY1,
      controlX2,
      controlY2,
      anchorX,
      anchorY
    ) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO
      );
      this.f.push(controlX1);
      this.f.push(controlY1);
      this.f.push(controlX2);
      this.f.push(controlY2);
      this.f.push(anchorX);
      this.f.push(anchorY);
    },
    curveTo: function (controlX, controlY, anchorX, anchorY) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
      this.f.push(controlX);
      this.f.push(controlY);
      this.f.push(anchorX);
      this.f.push(anchorY);
    },
    destroy: function () {
      this.clear();
      this.types = null;
      this.b = null;
      this.i = null;
      this.f = null;
      this.o = null;
      this.ff = null;
      this.ii = null;
    },
    drawCircle: function (x, y, radius) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
      this.f.push(x);
      this.f.push(y);
      this.f.push(radius);
    },
    drawEllipse: function (x, y, width, height) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
      this.f.push(x);
      this.f.push(y);
      this.f.push(width);
      this.f.push(height);
    },
    drawRect: function (x, y, width, height) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
      this.f.push(x);
      this.f.push(y);
      this.f.push(width);
      this.f.push(height);
    },
    drawRoundRect: function (x, y, width, height, ellipseWidth, ellipseHeight) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT
      );
      this.f.push(x);
      this.f.push(y);
      this.f.push(width);
      this.f.push(height);
      this.f.push(ellipseWidth);
      this.o.push(ellipseHeight);
    },
    drawTriangles: function (vertices, indices, uvtData, culling) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES
      );
      this.o.push(vertices);
      this.o.push(indices);
      this.o.push(uvtData);
      this.o.push(culling);
    },
    endFill: function () {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
    },
    lineBitmapStyle: function (bitmap, matrix, repeat, smooth) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE
      );
      this.o.push(bitmap);
      this.o.push(matrix);
      this.b.push(repeat);
      this.b.push(smooth);
    },
    lineGradientStyle: function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE
      );
      this.o.push(type);
      this.ii.push(colors);
      this.ff.push(alphas);
      this.ii.push(ratios);
      this.o.push(matrix);
      this.o.push(spreadMethod);
      this.o.push(interpolationMethod);
      this.f.push(focalPointRatio);
    },
    lineStyle: function (
      thickness,
      color,
      alpha,
      pixelHinting,
      scaleMode,
      caps,
      joints,
      miterLimit
    ) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
      this.o.push(thickness);
      this.i.push(color);
      this.f.push(alpha);
      this.b.push(pixelHinting);
      this.o.push(scaleMode);
      this.o.push(caps);
      this.o.push(joints);
      this.f.push(miterLimit);
    },
    lineTo: function (x, y) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
      this.f.push(x);
      this.f.push(y);
    },
    moveTo: function (x, y) {
      this.prepareWrite();
      this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
      this.f.push(x);
      this.f.push(y);
    },
    prepareWrite: function () {
      if (this.copyOnWrite) {
        this.types = this.types.slice();
        this.b = this.b.slice();
        this.i = this.i.slice();
        this.f = this.f.slice();
        this.o = this.o.slice();
        this.ff = this.ff.slice();
        this.ii = this.ii.slice();
        this.copyOnWrite = false;
      }
    },
    overrideMatrix: function (matrix) {
      this.prepareWrite();
      this.types.push(
        openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX
      );
      this.o.push(matrix);
    },
    get_length: function () {
      return this.types.length;
    },
    __class__: openfl__$internal_renderer_DrawCommandBuffer,
    __properties__: { get_length: "get_length" },
  };
  var openfl__$internal_renderer_DrawCommandReader = function (buffer) {
    this.buffer = buffer;
    this.bPos =
      this.iPos =
      this.fPos =
      this.oPos =
      this.ffPos =
      this.iiPos =
      this.tsPos =
        0;
    this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
  };
  $hxClasses["openfl._internal.renderer.DrawCommandReader"] =
    openfl__$internal_renderer_DrawCommandReader;
  openfl__$internal_renderer_DrawCommandReader.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "DrawCommandReader",
  ];
  openfl__$internal_renderer_DrawCommandReader.prototype = {
    buffer: null,
    bPos: null,
    iiPos: null,
    iPos: null,
    ffPos: null,
    fPos: null,
    oPos: null,
    prev: null,
    tsPos: null,
    advance: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
    },
    bool: function (index) {
      return this.buffer.b[this.bPos + index];
    },
    destroy: function () {
      this.buffer = null;
      this.reset();
    },
    fArr: function (index) {
      return this.buffer.ff[this.ffPos + index];
    },
    float: function (index) {
      return this.buffer.f[this.fPos + index];
    },
    iArr: function (index) {
      return this.buffer.ii[this.iiPos + index];
    },
    int: function (index) {
      return this.buffer.i[this.iPos + index];
    },
    obj: function (index) {
      return this.buffer.o[this.oPos + index];
    },
    readBeginBitmapFill: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
      var this1 = this;
      return this1;
    },
    readBeginFill: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
      var this1 = this;
      return this1;
    },
    readBeginGradientFill: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev =
        openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
      var this1 = this;
      return this1;
    },
    readCubicCurveTo: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
      var this1 = this;
      return this1;
    },
    readCurveTo: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
      var this1 = this;
      return this1;
    },
    readDrawCircle: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
      var this1 = this;
      return this1;
    },
    readDrawEllipse: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
      var this1 = this;
      return this1;
    },
    readDrawRect: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
      var this1 = this;
      return this1;
    },
    readDrawRoundRect: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
      var this1 = this;
      return this1;
    },
    readDrawTriangles: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
      var this1 = this;
      return this1;
    },
    readEndFill: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
      var this1 = this;
      return this1;
    },
    readLineBitmapStyle: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
      var this1 = this;
      return this1;
    },
    readLineGradientStyle: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev =
        openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
      var this1 = this;
      return this1;
    },
    readLineStyle: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
      var this1 = this;
      return this1;
    },
    readLineTo: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
      var this1 = this;
      return this1;
    },
    readMoveTo: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
      var this1 = this;
      return this1;
    },
    readOverrideMatrix: function () {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
      var this1 = this;
      return this1;
    },
    reset: function () {
      this.bPos =
        this.iPos =
        this.fPos =
        this.oPos =
        this.ffPos =
        this.iiPos =
        this.tsPos =
          0;
    },
    skip: function (type) {
      var _g = this.prev;
      switch (_g[1]) {
        case 0:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 1:
          this.iPos += 1;
          this.fPos += 1;
          break;
        case 2:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 3:
          this.fPos += 6;
          break;
        case 4:
          this.fPos += 4;
          break;
        case 5:
          this.fPos += 3;
          break;
        case 6:
          this.fPos += 4;
          break;
        case 7:
          this.fPos += 4;
          break;
        case 8:
          this.fPos += 5;
          this.oPos += 1;
          break;
        case 10:
          this.oPos += 4;
          break;
        case 11:
          break;
        case 12:
          this.oPos += 2;
          this.bPos += 2;
          break;
        case 13:
          this.oPos += 4;
          this.iiPos += 2;
          this.ffPos += 1;
          this.fPos += 1;
          break;
        case 14:
          this.oPos += 4;
          this.iPos += 1;
          this.fPos += 2;
          this.bPos += 1;
          break;
        case 15:
          this.fPos += 2;
          break;
        case 16:
          this.fPos += 2;
          break;
        case 17:
          this.oPos += 1;
          break;
        default:
      }
      this.prev = type;
    },
    __class__: openfl__$internal_renderer_DrawCommandReader,
  };
  var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"
  ] =
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "BeginBitmapFillView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ =
    {
      get_smooth: "get_smooth",
      get_repeat: "get_repeat",
      get_matrix: "get_matrix",
      get_bitmap: "get_bitmap",
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat =
    function (this1) {
      return this1.buffer.b[this1.bPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth =
    function (this1) {
      return this1.buffer.b[this1.bPos + 1];
    };
  var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "BeginFillView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ =
    { get_alpha: "get_alpha", get_color: "get_color" };
  openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color =
    function (this1) {
      return this1.buffer.i[this1.iPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"
  ] =
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "BeginGradientFillView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ =
    {
      get_focalPointRatio: "get_focalPointRatio",
      get_interpolationMethod: "get_interpolationMethod",
      get_spreadMethod: "get_spreadMethod",
      get_matrix: "get_matrix",
      get_ratios: "get_ratios",
      get_alphas: "get_alphas",
      get_colors: "get_colors",
      get_type: "get_type",
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors =
    function (this1) {
      return this1.buffer.ii[this1.iiPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas =
    function (this1) {
      return this1.buffer.ff[this1.ffPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios =
    function (this1) {
      return this1.buffer.ii[this1.iiPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod =
    function (this1) {
      return this1.buffer.o[this1.oPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod =
    function (this1) {
      return this1.buffer.o[this1.oPos + 3];
    };
  openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "CubicCurveToView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ =
    {
      get_anchorY: "get_anchorY",
      get_anchorX: "get_anchorX",
      get_controlY2: "get_controlY2",
      get_controlX2: "get_controlX2",
      get_controlY1: "get_controlY1",
      get_controlX1: "get_controlX1",
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 =
    function (this1) {
      return this1.buffer.f[this1.fPos + 3];
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX =
    function (this1) {
      return this1.buffer.f[this1.fPos + 4];
    };
  openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY =
    function (this1) {
      return this1.buffer.f[this1.fPos + 5];
    };
  var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
  $hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] =
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "CurveToView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ =
    {
      get_anchorY: "get_anchorY",
      get_anchorX: "get_anchorX",
      get_controlY: "get_controlY",
      get_controlX: "get_controlX",
    };
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY =
    function (this1) {
      return this1.buffer.f[this1.fPos + 3];
    };
  var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "DrawCircleView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ =
    { get_radius: "get_radius", get_y: "get_y", get_x: "get_x" };
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "DrawEllipseView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ =
    {
      get_height: "get_height",
      get_width: "get_width",
      get_y: "get_y",
      get_x: "get_x",
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height =
    function (this1) {
      return this1.buffer.f[this1.fPos + 3];
    };
  var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "DrawRectView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ =
    {
      get_height: "get_height",
      get_width: "get_width",
      get_y: "get_y",
      get_x: "get_x",
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height =
    function (this1) {
      return this1.buffer.f[this1.fPos + 3];
    };
  var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "DrawRoundRectView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ =
    {
      get_ellipseHeight: "get_ellipseHeight",
      get_ellipseWidth: "get_ellipseWidth",
      get_height: "get_height",
      get_width: "get_width",
      get_y: "get_y",
      get_x: "get_x",
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width =
    function (this1) {
      return this1.buffer.f[this1.fPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height =
    function (this1) {
      return this1.buffer.f[this1.fPos + 3];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth =
    function (this1) {
      return this1.buffer.f[this1.fPos + 4];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "DrawTrianglesView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ =
    {
      get_culling: "get_culling",
      get_uvtData: "get_uvtData",
      get_indices: "get_indices",
      get_vertices: "get_vertices",
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData =
    function (this1) {
      return this1.buffer.o[this1.oPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling =
    function (this1) {
      return this1.buffer.o[this1.oPos + 3];
    };
  var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
  $hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] =
    openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "EndFillView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"
  ] =
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "LineBitmapStyleView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ =
    {
      get_smooth: "get_smooth",
      get_repeat: "get_repeat",
      get_matrix: "get_matrix",
      get_bitmap: "get_bitmap",
    };
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat =
    function (this1) {
      return this1.buffer.b[this1.bPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth =
    function (this1) {
      return this1.buffer.b[this1.bPos + 1];
    };
  var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"
  ] =
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "LineGradientStyleView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ =
    {
      get_focalPointRatio: "get_focalPointRatio",
      get_interpolationMethod: "get_interpolationMethod",
      get_spreadMethod: "get_spreadMethod",
      get_matrix: "get_matrix",
      get_ratios: "get_ratios",
      get_alphas: "get_alphas",
      get_colors: "get_colors",
      get_type: "get_type",
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors =
    function (this1) {
      return this1.buffer.ii[this1.iiPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas =
    function (this1) {
      return this1.buffer.ff[this1.ffPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios =
    function (this1) {
      return this1.buffer.ii[this1.iiPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod =
    function (this1) {
      return this1.buffer.o[this1.oPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod =
    function (this1) {
      return this1.buffer.o[this1.oPos + 3];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "LineStyleView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ =
    {
      get_miterLimit: "get_miterLimit",
      get_joints: "get_joints",
      get_caps: "get_caps",
      get_scaleMode: "get_scaleMode",
      get_pixelHinting: "get_pixelHinting",
      get_alpha: "get_alpha",
      get_color: "get_color",
      get_thickness: "get_thickness",
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color =
    function (this1) {
      return this1.buffer.i[this1.iPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting =
    function (this1) {
      return this1.buffer.b[this1.bPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode =
    function (this1) {
      return this1.buffer.o[this1.oPos + 1];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps =
    function (this1) {
      return this1.buffer.o[this1.oPos + 2];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints =
    function (this1) {
      return this1.buffer.o[this1.oPos + 3];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
  $hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] =
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "_DrawCommandReader",
    "LineToView_Impl_",
  ];
  openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ =
    { get_y: "get_y", get_x: "get_x" };
  openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
  $hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] =
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "_DrawCommandReader",
    "MoveToView_Impl_",
  ];
  openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ =
    { get_y: "get_y", get_x: "get_x" };
  openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x =
    function (this1) {
      return this1.buffer.f[this1.fPos];
    };
  openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y =
    function (this1) {
      return this1.buffer.f[this1.fPos + 1];
    };
  var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ =
    {};
  $hxClasses[
    "openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"
  ] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
  openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ =
    [
      "openfl",
      "_internal",
      "renderer",
      "_DrawCommandReader",
      "OverrideMatrixView_Impl_",
    ];
  openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ =
    { get_matrix: "get_matrix" };
  openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new =
    function (d) {
      var this1 = d;
      return this1;
    };
  openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix =
    function (this1) {
      return this1.buffer.o[this1.oPos];
    };
  var openfl__$internal_renderer_DrawCommandType = ($hxClasses[
    "openfl._internal.renderer.DrawCommandType"
  ] = {
    __ename__: ["openfl", "_internal", "renderer", "DrawCommandType"],
    __constructs__: [
      "BEGIN_BITMAP_FILL",
      "BEGIN_FILL",
      "BEGIN_GRADIENT_FILL",
      "CUBIC_CURVE_TO",
      "CURVE_TO",
      "DRAW_CIRCLE",
      "DRAW_ELLIPSE",
      "DRAW_RECT",
      "DRAW_ROUND_RECT",
      "DRAW_TILES",
      "DRAW_TRIANGLES",
      "END_FILL",
      "LINE_BITMAP_STYLE",
      "LINE_GRADIENT_STYLE",
      "LINE_STYLE",
      "LINE_TO",
      "MOVE_TO",
      "OVERRIDE_MATRIX",
      "UNKNOWN",
    ],
  });
  openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = [
    "BEGIN_BITMAP_FILL",
    0,
  ];
  openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL", 1];
  openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = [
    "BEGIN_GRADIENT_FILL",
    2,
  ];
  openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString =
    $estr;
  openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = [
    "CUBIC_CURVE_TO",
    3,
  ];
  openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO", 4];
  openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE", 5];
  openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE", 6];
  openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT", 7];
  openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = [
    "DRAW_ROUND_RECT",
    8,
  ];
  openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES", 9];
  openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = [
    "DRAW_TRIANGLES",
    10,
  ];
  openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL", 11];
  openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = [
    "LINE_BITMAP_STYLE",
    12,
  ];
  openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = [
    "LINE_GRADIENT_STYLE",
    13,
  ];
  openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString =
    $estr;
  openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE", 14];
  openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO", 15];
  openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO", 16];
  openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = [
    "OVERRIDE_MATRIX",
    17,
  ];
  openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN", 18];
  openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
  openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ =
    openfl__$internal_renderer_DrawCommandType;
  var openfl__$internal_renderer_RenderSession = function () {
    this.activeTextures = 0;
    this.allowSmoothing = true;
  };
  $hxClasses["openfl._internal.renderer.RenderSession"] =
    openfl__$internal_renderer_RenderSession;
  openfl__$internal_renderer_RenderSession.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "RenderSession",
  ];
  openfl__$internal_renderer_RenderSession.prototype = {
    allowSmoothing: null,
    cairo: null,
    context: null,
    element: null,
    gl: null,
    renderer: null,
    roundPixels: null,
    transformProperty: null,
    transformOriginProperty: null,
    upscaled: null,
    vendorPrefix: null,
    projectionMatrix: null,
    z: null,
    drawCount: null,
    currentBlendMode: null,
    activeTextures: null,
    blendModeManager: null,
    filterManager: null,
    maskManager: null,
    shaderManager: null,
    __class__: openfl__$internal_renderer_RenderSession,
  };
  var openfl__$internal_renderer_cairo_CairoBitmap = function () {};
  $hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] =
    openfl__$internal_renderer_cairo_CairoBitmap;
  openfl__$internal_renderer_cairo_CairoBitmap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoBitmap",
  ];
  openfl__$internal_renderer_cairo_CairoBitmap.render = function (
    bitmap,
    renderSession
  ) {
    if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
      return;
    }
    var cairo = renderSession.cairo;
    if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
      renderSession.maskManager.pushObject(bitmap);
      var transform = bitmap.__renderTransform;
      if (renderSession.roundPixels) {
        var matrix = transform.__toMatrix3();
        matrix.tx = Math.round(matrix.tx);
        matrix.ty = Math.round(matrix.ty);
        cairo.set_matrix(matrix);
      } else {
        cairo.set_matrix(transform.__toMatrix3());
      }
      var surface = bitmap.bitmapData.getSurface();
      if (surface != null) {
        var pattern =
          lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(
            surface
          );
        lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(
          pattern,
          renderSession.allowSmoothing && bitmap.smoothing ? 1 : 3
        );
        cairo.set_source(pattern);
        if (bitmap.__worldAlpha == 1) {
          cairo.paint();
        } else {
          cairo.paintWithAlpha(bitmap.__worldAlpha);
        }
      }
      renderSession.maskManager.popObject(bitmap);
    }
  };
  var openfl__$internal_renderer_cairo_CairoDisplayObject = function () {};
  $hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] =
    openfl__$internal_renderer_cairo_CairoDisplayObject;
  openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoDisplayObject",
  ];
  openfl__$internal_renderer_cairo_CairoDisplayObject.render = function (
    displayObject,
    renderSession
  ) {};
  var openfl__$internal_renderer_cairo_CairoGraphics = function () {};
  $hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] =
    openfl__$internal_renderer_cairo_CairoGraphics;
  openfl__$internal_renderer_cairo_CairoGraphics.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoGraphics",
  ];
  openfl__$internal_renderer_cairo_CairoGraphics.closePath = function (
    strokeBefore
  ) {
    if (strokeBefore == null) {
      strokeBefore = false;
    }
    if (openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
      return;
    }
    if (!strokeBefore) {
      openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
    }
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(
      openfl__$internal_renderer_cairo_CairoGraphics.strokePattern
    );
    if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
      openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
    }
    if (strokeBefore) {
      openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
    }
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
  };
  openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern =
    function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      var pattern = null;
      switch (type) {
        case 0:
          if (matrix == null) {
            matrix = new openfl_geom_Matrix();
          }
          var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2, 0));
          var point2 = matrix.transformPoint(new openfl_geom_Point(819.2, 0));
          point1.x +=
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
          point2.x +=
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
          point1.y +=
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
          point2.y +=
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
          pattern =
            lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(
              point1.x,
              point1.y,
              point2.x,
              point2.y
            );
          break;
        case 1:
          if (matrix == null) {
            matrix = new openfl_geom_Matrix();
          }
          var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
          var x =
            matrix.tx +
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
          var y =
            matrix.ty +
            openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
          pattern =
            lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(
              x,
              y,
              0,
              x,
              y,
              Math.abs((point.x - matrix.tx) / 2)
            );
          break;
      }
      var _g1 = 0;
      var _g = colors.length;
      while (_g1 < _g) {
        var i = _g1++;
        var rgb = colors[i];
        var alpha = alphas[i];
        var r = ((rgb & 16711680) >>> 16) / 255;
        var g = ((rgb & 65280) >>> 8) / 255;
        var b = (rgb & 255) / 255;
        var ratio = ratios[i] / 255;
        if (ratio < 0) {
          ratio = 0;
        }
        if (ratio > 1) {
          ratio = 1;
        }
        lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(
          pattern,
          ratio,
          r,
          g,
          b,
          alpha
        );
      }
      var mat =
        lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(
          pattern
        );
      mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
      mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
      lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(
        pattern,
        mat
      );
      return pattern;
    };
  openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function (
    bitmapFill,
    matrix,
    bitmapRepeat,
    smooth
  ) {
    var pattern =
      lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(
        bitmapFill.getSurface()
      );
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(
      pattern,
      smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing
        ? 1
        : 3
    );
    if (bitmapRepeat) {
      lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(
        pattern,
        1
      );
    }
    openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
    return pattern;
  };
  openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function (
    x,
    y,
    width,
    height,
    ellipseWidth,
    ellipseHeight
  ) {
    if (ellipseHeight == null) {
      ellipseHeight = ellipseWidth;
    }
    ellipseWidth *= 0.5;
    ellipseHeight *= 0.5;
    if (ellipseWidth > width / 2) {
      ellipseWidth = width / 2;
    }
    if (ellipseHeight > height / 2) {
      ellipseHeight = height / 2;
    }
    var xe = x + width;
    var ye = y + height;
    var cx1 =
      -ellipseWidth +
      ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
    var cx2 =
      -ellipseWidth +
      ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
    var cy1 =
      -ellipseHeight +
      ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
    var cy2 =
      -ellipseHeight +
      ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
      xe,
      ye - ellipseHeight
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      xe,
      ye + cy2,
      xe + cx1,
      ye + cy1
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      xe + cx2,
      ye,
      xe - ellipseWidth,
      ye
    );
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
      x + ellipseWidth,
      ye
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      x - cx2,
      ye,
      x - cx1,
      ye + cy1
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      x,
      ye + cy2,
      x,
      ye - ellipseHeight
    );
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
      x,
      y + ellipseHeight
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      x,
      y - cy2,
      x - cx1,
      y - cy1
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      x - cx2,
      y,
      x + ellipseWidth,
      y
    );
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
      xe - ellipseWidth,
      y
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      xe + cx2,
      y,
      xe + cx1,
      y - cy1
    );
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
      xe,
      y - cy2,
      xe,
      y + ellipseHeight
    );
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
      xe,
      ye - ellipseHeight
    );
  };
  openfl__$internal_renderer_cairo_CairoGraphics.endFill = function () {
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
    openfl__$internal_renderer_cairo_CairoGraphics.playCommands(
      openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,
      false
    );
    openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
  };
  openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function () {
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
    openfl__$internal_renderer_cairo_CairoGraphics.playCommands(
      openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,
      true
    );
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
    openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
  };
  openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function (
    graphics,
    x,
    y
  ) {
    return false;
  };
  openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function (
    x1,
    y1,
    x2,
    y2,
    x3,
    y3
  ) {
    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
  };
  openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function (
    uvt,
    skipT
  ) {
    if (skipT == null) {
      skipT = false;
    }
    var max = -Infinity;
    var tmp = -Infinity;
    var len = uvt.get_length();
    var _g1 = 1;
    var _g = len + 1;
    while (_g1 < _g) {
      var t = _g1++;
      if (skipT && t % 3 == 0) {
        continue;
      }
      tmp = uvt.get(t - 1);
      if (max < tmp) {
        max = tmp;
      }
    }
    if (!skipT) {
      return { max: max, uvt: uvt };
    }
    var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    var _g11 = 1;
    var _g2 = len + 1;
    while (_g11 < _g2) {
      var t1 = _g11++;
      if (skipT && t1 % 3 == 0) {
        continue;
      }
      result.push(uvt.get(t1 - 1));
    }
    return { max: max, uvt: result };
  };
  openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function (
    commands,
    stroke
  ) {
    if (stroke == null) {
      stroke = false;
    }
    if (commands.get_length() == 0) {
      return;
    }
    openfl__$internal_renderer_cairo_CairoGraphics.bounds =
      openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
    var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
    var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
    var positionX = 0.0;
    var positionY = 0.0;
    var closeGap = false;
    var startX = 0.0;
    var startY = 0.0;
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
    var hasPath = false;
    var data = new openfl__$internal_renderer_DrawCommandReader(commands);
    var _g = 0;
    var _g1 = commands.types;
    try {
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 0:
            var _g2 = data.prev;
            switch (_g2[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
            var this1 = data;
            var c = this1;
            openfl__$internal_renderer_cairo_CairoGraphics.fillPattern =
              openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(
                c.buffer.o[c.oPos],
                c.buffer.o[c.oPos + 1],
                c.buffer.b[c.bPos],
                c.buffer.b[c.bPos + 1]
              );
            openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill =
              c.buffer.o[c.oPos];
            openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat =
              c.buffer.b[c.bPos];
            openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
            break;
          case 1:
            var _g3 = data.prev;
            switch (_g3[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
            var this2 = data;
            var c1 = this2;
            if (c1.buffer.f[c1.fPos] < 0.005) {
              openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
            } else {
              if (
                openfl__$internal_renderer_cairo_CairoGraphics.fillPattern !=
                null
              ) {
                openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix =
                  null;
              }
              openfl__$internal_renderer_cairo_CairoGraphics.fillPattern =
                lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(
                  ((c1.buffer.i[c1.iPos] & 16711680) >>> 16) / 255,
                  ((c1.buffer.i[c1.iPos] & 65280) >>> 8) / 255,
                  (c1.buffer.i[c1.iPos] & 255) / 255,
                  c1.buffer.f[c1.fPos]
                );
              openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
            }
            openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
            break;
          case 2:
            var _g4 = data.prev;
            switch (_g4[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
            var this3 = data;
            var c2 = this3;
            if (
              openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null
            ) {
              openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix =
                null;
            }
            openfl__$internal_renderer_cairo_CairoGraphics.fillPattern =
              openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(
                c2.buffer.o[c2.oPos],
                c2.buffer.ii[c2.iiPos],
                c2.buffer.ff[c2.ffPos],
                c2.buffer.ii[c2.iiPos + 1],
                c2.buffer.o[c2.oPos + 1],
                c2.buffer.o[c2.oPos + 2],
                c2.buffer.o[c2.oPos + 3],
                c2.buffer.f[c2.fPos]
              );
            openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
            openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
            break;
          case 3:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this4 = data;
            var c3 = this4;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
              c3.buffer.f[c3.fPos] - offsetX,
              c3.buffer.f[c3.fPos + 1] - offsetY,
              c3.buffer.f[c3.fPos + 2] - offsetX,
              c3.buffer.f[c3.fPos + 3] - offsetY,
              c3.buffer.f[c3.fPos + 4] - offsetX,
              c3.buffer.f[c3.fPos + 5] - offsetY
            );
            break;
          case 4:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this5 = data;
            var c4 = this5;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
              c4.buffer.f[c4.fPos] - offsetX,
              c4.buffer.f[c4.fPos + 1] - offsetY,
              c4.buffer.f[c4.fPos + 2] - offsetX,
              c4.buffer.f[c4.fPos + 3] - offsetY
            );
            break;
          case 5:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this6 = data;
            var c5 = this6;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
              c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],
              c5.buffer.f[c5.fPos + 1] - offsetY
            );
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(
              c5.buffer.f[c5.fPos] - offsetX,
              c5.buffer.f[c5.fPos + 1] - offsetY,
              c5.buffer.f[c5.fPos + 2],
              0,
              Math.PI * 2
            );
            break;
          case 6:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this7 = data;
            var c6 = this7;
            hasPath = true;
            var x = c6.buffer.f[c6.fPos];
            var y = c6.buffer.f[c6.fPos + 1];
            var width = c6.buffer.f[c6.fPos + 2];
            var height = c6.buffer.f[c6.fPos + 3];
            x -= offsetX;
            y -= offsetY;
            var kappa = 0.5522848;
            var ox = (width / 2) * kappa;
            var oy = (height / 2) * kappa;
            var xe = x + width;
            var ye = y + height;
            var xm = x + width / 2;
            var ym = y + height / 2;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x, ym);
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
              x,
              ym - oy,
              xm - ox,
              y,
              xm,
              y
            );
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
              xm + ox,
              y,
              xe,
              ym - oy,
              xe,
              ym
            );
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
              xe,
              ym + oy,
              xm + ox,
              ye,
              xm,
              ye
            );
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
              xm - ox,
              ye,
              x,
              ym + oy,
              x,
              ym
            );
            break;
          case 7:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            var this8 = data;
            var c7 = this8;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(
              c7.buffer.f[c7.fPos] - offsetX,
              c7.buffer.f[c7.fPos + 1] - offsetY,
              c7.buffer.f[c7.fPos + 2],
              c7.buffer.f[c7.fPos + 3]
            );
            break;
          case 8:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            var this9 = data;
            var c8 = this9;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(
              c8.buffer.f[c8.fPos] - offsetX,
              c8.buffer.f[c8.fPos + 1] - offsetY,
              c8.buffer.f[c8.fPos + 2],
              c8.buffer.f[c8.fPos + 3],
              c8.buffer.f[c8.fPos + 4],
              c8.buffer.o[c8.oPos]
            );
            break;
          case 10:
            var _g11 = data.prev;
            switch (_g11[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
            var this10 = data;
            var c9 = this10;
            var v = c9.buffer.o[c9.oPos];
            var ind = c9.buffer.o[c9.oPos + 1];
            var uvt = c9.buffer.o[c9.oPos + 2];
            var colorFill =
              openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
            if (colorFill && uvt != null) {
              throw "__break__";
            }
            var width1 = 0;
            var height1 = 0;
            var currentMatrix =
              openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
            if (!colorFill) {
              if (uvt == null) {
                uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
                var _g31 = 0;
                var _g21 = (v.get_length() / 2) | 0;
                while (_g31 < _g21) {
                  var i = _g31++;
                  uvt.push(
                    v.get(i * 2) /
                      openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill
                        .width
                  );
                  uvt.push(
                    v.get(i * 2 + 1) /
                      openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill
                        .height
                  );
                }
              }
              var skipT =
                c9.buffer.o[c9.oPos + 2].get_length() != v.get_length();
              var normalizedUVT =
                openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(
                  uvt,
                  skipT
                );
              var maxUVT = normalizedUVT.max;
              uvt = normalizedUVT.uvt;
              if (maxUVT > 1) {
                width1 =
                  openfl__$internal_renderer_cairo_CairoGraphics.bounds.width |
                  0;
                height1 =
                  openfl__$internal_renderer_cairo_CairoGraphics.bounds.height |
                  0;
              } else {
                width1 =
                  openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill
                    .width;
                height1 =
                  openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill
                    .height;
              }
            }
            var i1 = 0;
            var l = ind.get_length();
            var a_;
            var b_;
            var c_;
            var iax;
            var iay;
            var ibx;
            var iby;
            var icx;
            var icy;
            var x1;
            var y1;
            var x2;
            var y2;
            var x3;
            var y3;
            var uvx1;
            var uvy1;
            var uvx2;
            var uvy2;
            var uvx3;
            var uvy3;
            var denom;
            var t1;
            var t2;
            var t3;
            var t4;
            var dx;
            var dy;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(
              1
            );
            while (i1 < l) {
              a_ = i1;
              b_ = i1 + 1;
              c_ = i1 + 2;
              iax = ind.get(a_) * 2;
              iay = ind.get(a_) * 2 + 1;
              ibx = ind.get(b_) * 2;
              iby = ind.get(b_) * 2 + 1;
              icx = ind.get(c_) * 2;
              icy = ind.get(c_) * 2 + 1;
              x1 = v.get(iax);
              y1 = v.get(iay);
              x2 = v.get(ibx);
              y2 = v.get(iby);
              x3 = v.get(icx);
              y3 = v.get(icy);
              var _g22 = c9.buffer.o[c9.oPos + 3];
              switch (_g22) {
                case 0:
                  if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
                    i1 += 3;
                    continue;
                  }
                  break;
                case 2:
                  if (!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
                    i1 += 3;
                    continue;
                  }
                  break;
                default:
              }
              if (colorFill) {
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
                  x1,
                  y1
                );
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
                  x2,
                  y2
                );
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
                  x3,
                  y3
                );
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
                if (
                  !openfl__$internal_renderer_cairo_CairoGraphics.hitTesting
                ) {
                  openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
                }
                i1 += 3;
                continue;
              }
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(
                openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3()
              );
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
                x1,
                y1
              );
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
                x2,
                y2
              );
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
                x3,
                y3
              );
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
              uvx1 = uvt.get(iax) * width1;
              uvx2 = uvt.get(ibx) * width1;
              uvx3 = uvt.get(icx) * width1;
              uvy1 = uvt.get(iay) * height1;
              uvy2 = uvt.get(iby) * height1;
              uvy3 = uvt.get(icy) * height1;
              denom =
                uvx1 * (uvy3 - uvy2) -
                uvx2 * uvy3 +
                uvx3 * uvy2 +
                (uvx2 - uvx3) * uvy1;
              if (denom == 0) {
                i1 += 3;
                continue;
              }
              x1 *= currentMatrix.a;
              x2 *= currentMatrix.a;
              x3 *= currentMatrix.a;
              y1 *= currentMatrix.d;
              y2 *= currentMatrix.d;
              y3 *= currentMatrix.d;
              t1 =
                -(
                  uvy1 * (x3 - x2) -
                  uvy2 * x3 +
                  uvy3 * x2 +
                  (uvy2 - uvy3) * x1
                ) / denom;
              t2 =
                (uvy2 * y3 +
                  uvy1 * (y2 - y3) -
                  uvy3 * y2 +
                  (uvy3 - uvy2) * y1) /
                denom;
              t3 =
                (uvx1 * (x3 - x2) -
                  uvx2 * x3 +
                  uvx3 * x2 +
                  (uvx2 - uvx3) * x1) /
                denom;
              t4 =
                -(
                  uvx2 * y3 +
                  uvx1 * (y2 - y3) -
                  uvx3 * y2 +
                  (uvx3 - uvx2) * y1
                ) / denom;
              dx =
                (uvx1 * (uvy3 * x2 - uvy2 * x3) +
                  uvy1 * (uvx2 * x3 - uvx3 * x2) +
                  (uvx3 * uvy2 - uvx2 * uvy3) * x1) /
                denom;
              dy =
                (uvx1 * (uvy3 * y2 - uvy2 * y3) +
                  uvy1 * (uvx2 * y3 - uvx3 * y2) +
                  (uvx3 * uvy2 - uvx2 * uvy3) * y1) /
                denom;
              var matrix = new lime_math_Matrix3(t1, t2, t3, t4, dx, dy);
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(
                matrix
              );
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(
                openfl__$internal_renderer_cairo_CairoGraphics.fillPattern
              );
              if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
              }
              i1 += 3;
            }
            break;
          case 12:
            var _g12 = data.prev;
            switch (_g12[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
            var this11 = data;
            var c10 = this11;
            if (
              stroke &&
              openfl__$internal_renderer_cairo_CairoGraphics.hasStroke
            ) {
              openfl__$internal_renderer_cairo_CairoGraphics.closePath();
            }
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
              positionX - offsetX,
              positionY - offsetY
            );
            openfl__$internal_renderer_cairo_CairoGraphics.strokePattern =
              openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(
                c10.buffer.o[c10.oPos],
                c10.buffer.o[c10.oPos + 1],
                c10.buffer.b[c10.bPos],
                c10.buffer.b[c10.bPos + 1]
              );
            openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
            break;
          case 13:
            var _g13 = data.prev;
            switch (_g13[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
            var this12 = data;
            var c11 = this12;
            if (
              stroke &&
              openfl__$internal_renderer_cairo_CairoGraphics.hasStroke
            ) {
              openfl__$internal_renderer_cairo_CairoGraphics.closePath();
            }
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
              positionX - offsetX,
              positionY - offsetY
            );
            openfl__$internal_renderer_cairo_CairoGraphics.strokePattern =
              openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(
                c11.buffer.o[c11.oPos],
                c11.buffer.ii[c11.iiPos],
                c11.buffer.ff[c11.ffPos],
                c11.buffer.ii[c11.iiPos + 1],
                c11.buffer.o[c11.oPos + 1],
                c11.buffer.o[c11.oPos + 2],
                c11.buffer.o[c11.oPos + 3],
                c11.buffer.f[c11.fPos]
              );
            openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
            break;
          case 14:
            var _g14 = data.prev;
            switch (_g14[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
            var this13 = data;
            var c12 = this13;
            if (
              stroke &&
              openfl__$internal_renderer_cairo_CairoGraphics.hasStroke
            ) {
              openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
            }
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
              positionX - offsetX,
              positionY - offsetY
            );
            if (c12.buffer.o[c12.oPos] == null) {
              openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
            } else {
              openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(
                c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1
              );
              if (c12.buffer.o[c12.oPos + 3] == null) {
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(
                  1
                );
              } else {
                var _g23 = c12.buffer.o[c12.oPos + 3];
                var tmp;
                switch (_g23) {
                  case 0:
                    tmp = 2;
                    break;
                  case 1:
                    tmp = 0;
                    break;
                  default:
                    tmp = 1;
                }
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(
                  tmp
                );
              }
              if (c12.buffer.o[c12.oPos + 2] == null) {
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(
                  1
                );
              } else {
                var _g24 = c12.buffer.o[c12.oPos + 2];
                var tmp1;
                switch (_g24) {
                  case 0:
                    tmp1 = 0;
                    break;
                  case 2:
                    tmp1 = 2;
                    break;
                  default:
                    tmp1 = 1;
                }
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(
                  tmp1
                );
              }
              openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(
                c12.buffer.f[c12.fPos + 1]
              );
              var r = ((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255;
              var g = ((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255;
              var b = (c12.buffer.i[c12.iPos] & 255) / 255;
              if (c12.buffer.f[c12.fPos] == 1) {
                openfl__$internal_renderer_cairo_CairoGraphics.strokePattern =
                  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(
                    r,
                    g,
                    b
                  );
              } else {
                openfl__$internal_renderer_cairo_CairoGraphics.strokePattern =
                  lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(
                    r,
                    g,
                    b,
                    c12.buffer.f[c12.fPos]
                  );
              }
            }
            break;
          case 15:
            var _g15 = data.prev;
            switch (_g15[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this14 = data;
            var c13 = this14;
            hasPath = true;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
              c13.buffer.f[c13.fPos] - offsetX,
              c13.buffer.f[c13.fPos + 1] - offsetY
            );
            positionX = c13.buffer.f[c13.fPos];
            positionY = c13.buffer.f[c13.fPos + 1];
            break;
          case 16:
            var _g16 = data.prev;
            switch (_g16[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this15 = data;
            var c14 = this15;
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(
              c14.buffer.f[c14.fPos] - offsetX,
              c14.buffer.f[c14.fPos + 1] - offsetY
            );
            positionX = c14.buffer.f[c14.fPos];
            positionY = c14.buffer.f[c14.fPos + 1];
            closeGap = true;
            startX = c14.buffer.f[c14.fPos];
            startY = c14.buffer.f[c14.fPos + 1];
            break;
          default:
            var _g17 = data.prev;
            switch (_g17[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = type;
        }
      }
    } catch (e) {
      if (e != "__break__") throw e;
    }
    data.destroy();
    if (hasPath) {
      if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
        if (
          openfl__$internal_renderer_cairo_CairoGraphics.hasFill &&
          closeGap
        ) {
          openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(
            startX - offsetX,
            startY - offsetY
          );
        } else if (closeGap && positionX == startX && positionY == startY) {
          openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
        }
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(
          openfl__$internal_renderer_cairo_CairoGraphics.strokePattern
        );
        if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
          openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
        }
      }
      if (!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(
          -openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,
          -openfl__$internal_renderer_cairo_CairoGraphics.bounds.y
        );
        if (
          openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix !=
          null
        ) {
          var matrix1 =
            openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
          matrix1.invert();
          if (
            openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null
          ) {
            matrix1.concat(
              openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix
            );
          }
          lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(
            openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,
            matrix1.__toMatrix3()
          );
        }
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(
          openfl__$internal_renderer_cairo_CairoGraphics.fillPattern
        );
        if (
          openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null
        ) {
          openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(
            openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3()
          );
          if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
          }
          openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(
            openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3()
          );
        } else if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
          openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
        }
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(
          openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,
          openfl__$internal_renderer_cairo_CairoGraphics.bounds.y
        );
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
      }
    }
  };
  openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function (
    cx,
    cy,
    x,
    y
  ) {
    var current = null;
    if (
      !openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()
    ) {
      openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx, cy);
      current = new lime_math_Vector2(cx, cy);
    } else {
      current =
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
    }
    var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
    var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
    var cx2 = x + 0.66666666666666663 * (cx - x);
    var cy2 = y + 0.66666666666666663 * (cy - y);
    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(
      cx1,
      cy1,
      cx2,
      cy2,
      x,
      y
    );
  };
  openfl__$internal_renderer_cairo_CairoGraphics.render = function (
    graphics,
    renderSession,
    parentTransform
  ) {};
  openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function (
    graphics,
    renderSession
  ) {
    if (graphics.__commands.get_length() != 0) {
      var cairo = renderSession.cairo;
      var positionX = 0.0;
      var positionY = 0.0;
      var offsetX = 0;
      var offsetY = 0;
      var data = new openfl__$internal_renderer_DrawCommandReader(
        graphics.__commands
      );
      var _g = 0;
      var _g1 = graphics.__commands.types;
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 3:
            var _g2 = data.prev;
            switch (_g2[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this1 = data;
            var c = this1;
            cairo.curveTo(
              c.buffer.f[c.fPos] - offsetX,
              c.buffer.f[c.fPos + 1] - offsetY,
              c.buffer.f[c.fPos + 2] - offsetX,
              c.buffer.f[c.fPos + 3] - offsetY,
              c.buffer.f[c.fPos + 4] - offsetX,
              c.buffer.f[c.fPos + 5] - offsetY
            );
            positionX = c.buffer.f[c.fPos + 4];
            positionY = c.buffer.f[c.fPos + 4];
            break;
          case 4:
            var _g3 = data.prev;
            switch (_g3[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this2 = data;
            var c1 = this2;
            openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(
              c1.buffer.f[c1.fPos] - offsetX,
              c1.buffer.f[c1.fPos + 1] - offsetY,
              c1.buffer.f[c1.fPos + 2] - offsetX,
              c1.buffer.f[c1.fPos + 3] - offsetY
            );
            positionX = c1.buffer.f[c1.fPos + 2];
            positionY = c1.buffer.f[c1.fPos + 3];
            break;
          case 5:
            var _g4 = data.prev;
            switch (_g4[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this3 = data;
            var c2 = this3;
            cairo.arc(
              c2.buffer.f[c2.fPos] - offsetX,
              c2.buffer.f[c2.fPos + 1] - offsetY,
              c2.buffer.f[c2.fPos + 2],
              0,
              Math.PI * 2
            );
            break;
          case 6:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this4 = data;
            var c3 = this4;
            var x = c3.buffer.f[c3.fPos];
            var y = c3.buffer.f[c3.fPos + 1];
            var width = c3.buffer.f[c3.fPos + 2];
            var height = c3.buffer.f[c3.fPos + 3];
            x -= offsetX;
            y -= offsetY;
            var kappa = 0.5522848;
            var ox = (width / 2) * kappa;
            var oy = (height / 2) * kappa;
            var xe = x + width;
            var ye = y + height;
            var xm = x + width / 2;
            var ym = y + height / 2;
            cairo.moveTo(x, ym);
            cairo.curveTo(x, ym - oy, xm - ox, y, xm, y);
            cairo.curveTo(xm + ox, y, xe, ym - oy, xe, ym);
            cairo.curveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            cairo.curveTo(xm - ox, ye, x, ym + oy, x, ym);
            break;
          case 7:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            var this5 = data;
            var c4 = this5;
            cairo.rectangle(
              c4.buffer.f[c4.fPos] - offsetX,
              c4.buffer.f[c4.fPos + 1] - offsetY,
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            break;
          case 8:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            var this6 = data;
            var c5 = this6;
            openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(
              c5.buffer.f[c5.fPos] - offsetX,
              c5.buffer.f[c5.fPos + 1] - offsetY,
              c5.buffer.f[c5.fPos + 2],
              c5.buffer.f[c5.fPos + 3],
              c5.buffer.f[c5.fPos + 4],
              c5.buffer.o[c5.oPos]
            );
            break;
          case 15:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this7 = data;
            var c6 = this7;
            cairo.lineTo(
              c6.buffer.f[c6.fPos] - offsetX,
              c6.buffer.f[c6.fPos + 1] - offsetY
            );
            positionX = c6.buffer.f[c6.fPos];
            positionY = c6.buffer.f[c6.fPos + 1];
            break;
          case 16:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this8 = data;
            var c7 = this8;
            cairo.moveTo(
              c7.buffer.f[c7.fPos] - offsetX,
              c7.buffer.f[c7.fPos + 1] - offsetY
            );
            positionX = c7.buffer.f[c7.fPos];
            positionY = c7.buffer.f[c7.fPos + 1];
            break;
          default:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = type;
        }
      }
      data.destroy();
    }
  };
  var openfl__$internal_renderer_cairo_CairoRenderer = function (stage, cairo) {
    openfl__$internal_renderer_AbstractRenderer.call(this, stage);
  };
  $hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] =
    openfl__$internal_renderer_cairo_CairoRenderer;
  openfl__$internal_renderer_cairo_CairoRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoRenderer",
  ];
  openfl__$internal_renderer_cairo_CairoRenderer.__super__ =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(
    openfl__$internal_renderer_AbstractRenderer.prototype,
    {
      cairo: null,
      clear: function () {
        var _g = 0;
        var _g1 = this.stage.stage3Ds;
        while (_g < _g1.get_length()) {
          var stage3D = _g1.get(_g);
          ++_g;
          stage3D.__renderCairo(this.stage, this.renderSession);
        }
      },
      render: function () {
        this.renderSession.allowSmoothing = this.stage.quality != 2;
        this.cairo.identityMatrix();
        if (this.stage.__clearBeforeRender) {
          this.cairo.setSourceRGB(
            this.stage.__colorSplit[0],
            this.stage.__colorSplit[1],
            this.stage.__colorSplit[2]
          );
          this.cairo.paint();
        }
        this.stage.__renderCairo(this.renderSession);
      },
      __class__: openfl__$internal_renderer_cairo_CairoRenderer,
    }
  );
  var openfl__$internal_renderer_cairo_CairoTextField = function () {};
  $hxClasses["openfl._internal.renderer.cairo.CairoTextField"] =
    openfl__$internal_renderer_cairo_CairoTextField;
  openfl__$internal_renderer_cairo_CairoTextField.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoTextField",
  ];
  openfl__$internal_renderer_cairo_CairoTextField.render = function (
    textField,
    renderSession,
    transform
  ) {};
  var openfl__$internal_renderer_cairo_CairoTilemap = function () {};
  $hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] =
    openfl__$internal_renderer_cairo_CairoTilemap;
  openfl__$internal_renderer_cairo_CairoTilemap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "cairo",
    "CairoTilemap",
  ];
  openfl__$internal_renderer_cairo_CairoTilemap.render = function (
    tilemap,
    renderSession
  ) {
    if (
      !tilemap.__renderable ||
      tilemap.__tiles.length == 0 ||
      tilemap.__worldAlpha <= 0
    ) {
      return;
    }
    var cairo = renderSession.cairo;
    renderSession.maskManager.pushObject(tilemap);
    var rect = openfl_geom_Rectangle.__temp;
    rect.setTo(0, 0, tilemap.__width, tilemap.__height);
    renderSession.maskManager.pushRect(rect, tilemap.__renderTransform);
    var transform = tilemap.__renderTransform;
    var roundPixels = renderSession.roundPixels;
    var defaultTileset = tilemap.tileset;
    var cacheBitmapData = null;
    var surface = null;
    var pattern = null;
    var tiles;
    var count;
    var tile;
    var alpha;
    var visible;
    var tileset;
    var tileData;
    var bitmapData;
    tiles = tilemap.__tiles;
    count = tiles.length;
    var matrix = new lime_math_Matrix3();
    var tileTransform = openfl_geom_Matrix.__temp;
    var _g1 = 0;
    var _g = count;
    while (_g1 < _g) {
      var i = _g1++;
      tile = tiles[i];
      alpha = tile.alpha;
      visible = tile.visible;
      if (!visible || alpha <= 0) {
        continue;
      }
      if (tile.tileset != null) {
        tileset = tile.tileset;
      } else {
        tileset = defaultTileset;
      }
      if (tileset == null) {
        continue;
      }
      tileData = tileset.__data[tile.id];
      if (tileData == null) {
        continue;
      }
      bitmapData = tileset.bitmapData;
      if (bitmapData == null) {
        continue;
      }
      if (bitmapData != cacheBitmapData) {
        surface = bitmapData.getSurface();
        pattern =
          lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(
            surface
          );
        lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(
          pattern,
          renderSession.allowSmoothing && tilemap.smoothing ? 1 : 3
        );
        cairo.set_source(pattern);
        cacheBitmapData = bitmapData;
      }
      tileTransform.setTo(1, 0, 0, 1, -tile.originX, -tile.originY);
      tileTransform.concat(tile.matrix);
      tileTransform.concat(transform);
      if (roundPixels) {
        tileTransform.tx = Math.round(tileTransform.tx);
        tileTransform.ty = Math.round(tileTransform.ty);
      }
      cairo.set_matrix(tileTransform.__toMatrix3());
      matrix.tx = tileData.x;
      matrix.ty = tileData.y;
      lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(
        pattern,
        matrix
      );
      cairo.set_source(pattern);
      cairo.save();
      cairo.newPath();
      cairo.rectangle(0, 0, tileData.width, tileData.height);
      cairo.clip();
      if (tilemap.__worldAlpha == 1 && alpha == 1) {
        cairo.paint();
      } else {
        cairo.paintWithAlpha(tilemap.__worldAlpha * alpha);
      }
      cairo.restore();
    }
    renderSession.maskManager.popRect();
    renderSession.maskManager.popObject(tilemap);
  };
  var openfl__$internal_renderer_canvas_CanvasBitmap = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] =
    openfl__$internal_renderer_canvas_CanvasBitmap;
  openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasBitmap",
  ];
  openfl__$internal_renderer_canvas_CanvasBitmap.render = function (
    bitmap,
    renderSession
  ) {
    if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
      return;
    }
    var context = renderSession.context;
    if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
      renderSession.maskManager.pushObject(bitmap, false);
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
        bitmap.bitmapData.image
      );
      context.globalAlpha = bitmap.__worldAlpha;
      var transform = bitmap.__renderTransform;
      var scrollRect = bitmap.__scrollRect;
      if (renderSession.roundPixels) {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx | 0,
          transform.ty | 0
        );
      } else {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
      }
      if (!renderSession.allowSmoothing || !bitmap.smoothing) {
        context.mozImageSmoothingEnabled = false;
        context.msImageSmoothingEnabled = false;
        context.imageSmoothingEnabled = false;
      }
      if (scrollRect == null) {
        context.drawImage(bitmap.bitmapData.image.get_src(), 0, 0);
      } else {
        context.drawImage(
          bitmap.bitmapData.image.get_src(),
          scrollRect.x,
          scrollRect.y,
          scrollRect.width,
          scrollRect.height,
          scrollRect.x,
          scrollRect.y,
          scrollRect.width,
          scrollRect.height
        );
      }
      if (!renderSession.allowSmoothing || !bitmap.smoothing) {
        context.mozImageSmoothingEnabled = true;
        context.msImageSmoothingEnabled = true;
        context.imageSmoothingEnabled = true;
      }
      renderSession.maskManager.popObject(bitmap, false);
    }
  };
  var openfl__$internal_renderer_canvas_CanvasDisplayObject = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] =
    openfl__$internal_renderer_canvas_CanvasDisplayObject;
  openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasDisplayObject",
  ];
  openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function (
    displayObject,
    renderSession
  ) {
    if (
      displayObject.opaqueBackground == null &&
      displayObject.__graphics == null
    ) {
      return;
    }
    if (!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
      return;
    }
    if (
      displayObject.opaqueBackground != null &&
      displayObject.get_width() > 0 &&
      displayObject.get_height() > 0
    ) {
      renderSession.maskManager.pushObject(displayObject);
      var context = renderSession.context;
      var transform = displayObject.__renderTransform;
      if (renderSession.roundPixels) {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx | 0,
          transform.ty | 0
        );
      } else {
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
      }
      var color = displayObject.opaqueBackground;
      context.fillStyle =
        "rgb(" +
        ((color >>> 16) & 255) +
        "," +
        ((color >>> 8) & 255) +
        "," +
        (color & 255) +
        ")";
      context.fillRect(
        0,
        0,
        displayObject.get_width(),
        displayObject.get_height()
      );
      renderSession.maskManager.popObject(displayObject);
    }
    if (displayObject.__graphics != null) {
      if (!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
        var graphics = displayObject.__graphics;
        if (graphics != null) {
          openfl__$internal_renderer_canvas_CanvasGraphics.render(
            graphics,
            renderSession,
            displayObject.__renderTransform
          );
          var bounds = graphics.__bounds;
          var width = graphics.__width;
          var height = graphics.__height;
          if (graphics.__canvas != null) {
            var context1 = renderSession.context;
            var scrollRect = displayObject.__scrollRect;
            if (
              width > 0 &&
              height > 0 &&
              (scrollRect == null ||
                (scrollRect.width > 0 && scrollRect.height > 0))
            ) {
              renderSession.maskManager.pushObject(displayObject);
              context1.globalAlpha = displayObject.__worldAlpha;
              var transform1 = graphics.__worldTransform;
              if (renderSession.roundPixels) {
                context1.setTransform(
                  transform1.a,
                  transform1.b,
                  transform1.c,
                  transform1.d,
                  transform1.tx | 0,
                  transform1.ty | 0
                );
              } else {
                context1.setTransform(
                  transform1.a,
                  transform1.b,
                  transform1.c,
                  transform1.d,
                  transform1.tx,
                  transform1.ty
                );
              }
              context1.drawImage(graphics.__canvas, 0, 0);
              renderSession.maskManager.popObject(displayObject);
            }
          }
        }
      }
    }
  };
  var openfl__$internal_renderer_canvas_CanvasGraphics = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] =
    openfl__$internal_renderer_canvas_CanvasGraphics;
  openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasGraphics",
  ];
  openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function (
    strokeBefore
  ) {
    if (strokeBefore == null) {
      strokeBefore = false;
    }
    if (
      openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle ==
      null
    ) {
      return;
    }
    if (!strokeBefore) {
      openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
    }
    openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
    if (strokeBefore) {
      openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
    }
    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function (
    bitmap,
    bitmapRepeat,
    smooth
  ) {
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
    openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
    return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(
      bitmap.image.get_src(),
      bitmapRepeat ? "repeat" : "no-repeat"
    );
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern =
    function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      var gradientFill = null;
      switch (type) {
        case 0:
          var matrix1 = matrix != null ? matrix : new openfl_geom_Matrix();
          var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2, 0));
          var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2, 0));
          gradientFill =
            openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(
              point1.x,
              point1.y,
              point2.x,
              point2.y
            );
          break;
        case 1:
          if (matrix == null) {
            matrix = new openfl_geom_Matrix();
          }
          var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
          gradientFill =
            openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(
              matrix.tx,
              matrix.ty,
              0,
              matrix.tx,
              matrix.ty,
              Math.abs((point.x - matrix.tx) / 2)
            );
          break;
      }
      var _g1 = 0;
      var _g = colors.length;
      while (_g1 < _g) {
        var i = _g1++;
        var rgb = colors[i];
        var alpha = alphas[i];
        var r = (rgb & 16711680) >>> 16;
        var g = (rgb & 65280) >>> 8;
        var b = rgb & 255;
        var ratio = ratios[i] / 255;
        if (ratio < 0) {
          ratio = 0;
        }
        if (ratio > 1) {
          ratio = 1;
        }
        gradientFill.addColorStop(
          ratio,
          "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")"
        );
      }
      return gradientFill;
    };
  openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas =
    function (bitmap, repeat, width, height) {
      var canvas = window.document.createElement("canvas");
      var context = canvas.getContext("2d");
      canvas.width = width;
      canvas.height = height;
      var tmp = bitmap.image.get_src();
      context.fillStyle = context.createPattern(
        tmp,
        repeat ? "repeat" : "no-repeat"
      );
      context.beginPath();
      context.moveTo(0, 0);
      context.lineTo(0, height);
      context.lineTo(width, height);
      context.lineTo(width, 0);
      context.lineTo(0, 0);
      context.closePath();
      if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
        context.fill();
      }
      return canvas;
    };
  openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function (
    x,
    y,
    width,
    height,
    ellipseWidth,
    ellipseHeight
  ) {
    if (ellipseHeight == null) {
      ellipseHeight = ellipseWidth;
    }
    ellipseWidth *= 0.5;
    ellipseHeight *= 0.5;
    if (ellipseWidth > width / 2) {
      ellipseWidth = width / 2;
    }
    if (ellipseHeight > height / 2) {
      ellipseHeight = height / 2;
    }
    var xe = x + width;
    var ye = y + height;
    var cx1 =
      -ellipseWidth +
      ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
    var cx2 =
      -ellipseWidth +
      ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
    var cy1 =
      -ellipseHeight +
      ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
    var cy2 =
      -ellipseHeight +
      ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
    openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
      xe,
      ye - ellipseHeight
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      xe,
      ye + cy2,
      xe + cx1,
      ye + cy1
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      xe + cx2,
      ye,
      xe - ellipseWidth,
      ye
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
      x + ellipseWidth,
      ye
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      x - cx2,
      ye,
      x - cx1,
      ye + cy1
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      x,
      ye + cy2,
      x,
      ye - ellipseHeight
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
      x,
      y + ellipseHeight
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      x,
      y - cy2,
      x - cx1,
      y - cy1
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      x - cx2,
      y,
      x + ellipseWidth,
      y
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
      xe - ellipseWidth,
      y
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      xe + cx2,
      y,
      xe + cx1,
      y - cy1
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
      xe,
      y - cy2,
      xe,
      y + ellipseHeight
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
      xe,
      ye - ellipseHeight
    );
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function () {
    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
    openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(
      openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,
      false
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function () {
    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
    openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(
      openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,
      true
    );
    openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function (
    graphics,
    x,
    y
  ) {
    openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
    openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
    if (
      graphics.__commands.get_length() == 0 ||
      openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null ||
      openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 ||
      openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0
    ) {
      return false;
    } else {
      openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
      var transform = graphics.__renderTransform;
      var px = x * transform.a + y * transform.c + transform.tx;
      var py = x * transform.b + y * transform.d + transform.ty;
      x = px;
      y = py;
      x -=
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x *
          transform.a +
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y *
          transform.c +
        transform.tx;
      y -=
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x *
          transform.b +
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y *
          transform.d +
        transform.ty;
      var cacheCanvas = graphics.__canvas;
      var cacheContext = graphics.__context;
      graphics.__canvas =
        openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
      graphics.__context =
        openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
      openfl__$internal_renderer_canvas_CanvasGraphics.context =
        graphics.__context;
      openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(
        transform.a,
        transform.b,
        transform.c,
        transform.d,
        transform.tx,
        transform.ty
      );
      openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
      openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
      openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
      openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
      openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
      openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
      var data = new openfl__$internal_renderer_DrawCommandReader(
        graphics.__commands
      );
      var _g = 0;
      var _g1 = graphics.__commands.types;
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 0:
          case 1:
          case 2:
            openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
            openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
            if (
              openfl__$internal_renderer_canvas_CanvasGraphics.hasFill &&
              openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(
                x,
                y
              )
            ) {
              data.destroy();
              graphics.__canvas = cacheCanvas;
              graphics.__context = cacheContext;
              return true;
            }
            if (
              openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke &&
              openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(
                x,
                y
              )
            ) {
              data.destroy();
              graphics.__canvas = cacheCanvas;
              graphics.__context = cacheContext;
              return true;
            }
            if (
              type ==
              openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL
            ) {
              var _g2 = data.prev;
              switch (_g2[1]) {
                case 0:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 1:
                  data.iPos += 1;
                  data.fPos += 1;
                  break;
                case 2:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 3:
                  data.fPos += 6;
                  break;
                case 4:
                  data.fPos += 4;
                  break;
                case 5:
                  data.fPos += 3;
                  break;
                case 6:
                  data.fPos += 4;
                  break;
                case 7:
                  data.fPos += 4;
                  break;
                case 8:
                  data.fPos += 5;
                  data.oPos += 1;
                  break;
                case 10:
                  data.oPos += 4;
                  break;
                case 11:
                  break;
                case 12:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 13:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 14:
                  data.oPos += 4;
                  data.iPos += 1;
                  data.fPos += 2;
                  data.bPos += 1;
                  break;
                case 15:
                  data.fPos += 2;
                  break;
                case 16:
                  data.fPos += 2;
                  break;
                case 17:
                  data.oPos += 1;
                  break;
                default:
              }
              data.prev =
                openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
              var this1 = data;
              var c = this1;
              openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(
                c.buffer.o[c.oPos],
                c.buffer.o[c.oPos + 1],
                c.buffer.b[c.bPos],
                c.buffer.b[c.bPos + 1]
              );
              openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(
                c.buffer.o[c.oPos],
                c.buffer.o[c.oPos + 1],
                c.buffer.b[c.bPos],
                c.buffer.b[c.bPos + 1]
              );
            } else if (
              type ==
              openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL
            ) {
              var _g3 = data.prev;
              switch (_g3[1]) {
                case 0:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 1:
                  data.iPos += 1;
                  data.fPos += 1;
                  break;
                case 2:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 3:
                  data.fPos += 6;
                  break;
                case 4:
                  data.fPos += 4;
                  break;
                case 5:
                  data.fPos += 3;
                  break;
                case 6:
                  data.fPos += 4;
                  break;
                case 7:
                  data.fPos += 4;
                  break;
                case 8:
                  data.fPos += 5;
                  data.oPos += 1;
                  break;
                case 10:
                  data.oPos += 4;
                  break;
                case 11:
                  break;
                case 12:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 13:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 14:
                  data.oPos += 4;
                  data.iPos += 1;
                  data.fPos += 2;
                  data.bPos += 1;
                  break;
                case 15:
                  data.fPos += 2;
                  break;
                case 16:
                  data.fPos += 2;
                  break;
                case 17:
                  data.oPos += 1;
                  break;
                default:
              }
              data.prev =
                openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
              var this2 = data;
              var c1 = this2;
              openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(
                c1.buffer.o[c1.oPos],
                c1.buffer.ii[c1.iiPos],
                c1.buffer.ff[c1.ffPos],
                c1.buffer.ii[c1.iiPos + 1],
                c1.buffer.o[c1.oPos + 1],
                c1.buffer.o[c1.oPos + 2],
                c1.buffer.o[c1.oPos + 3],
                c1.buffer.f[c1.fPos]
              );
              openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(
                c1.buffer.o[c1.oPos],
                c1.buffer.ii[c1.iiPos],
                c1.buffer.ff[c1.ffPos],
                c1.buffer.ii[c1.iiPos + 1],
                c1.buffer.o[c1.oPos + 1],
                c1.buffer.o[c1.oPos + 2],
                c1.buffer.o[c1.oPos + 3],
                c1.buffer.f[c1.fPos]
              );
            } else {
              var _g4 = data.prev;
              switch (_g4[1]) {
                case 0:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 1:
                  data.iPos += 1;
                  data.fPos += 1;
                  break;
                case 2:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 3:
                  data.fPos += 6;
                  break;
                case 4:
                  data.fPos += 4;
                  break;
                case 5:
                  data.fPos += 3;
                  break;
                case 6:
                  data.fPos += 4;
                  break;
                case 7:
                  data.fPos += 4;
                  break;
                case 8:
                  data.fPos += 5;
                  data.oPos += 1;
                  break;
                case 10:
                  data.oPos += 4;
                  break;
                case 11:
                  break;
                case 12:
                  data.oPos += 2;
                  data.bPos += 2;
                  break;
                case 13:
                  data.oPos += 4;
                  data.iiPos += 2;
                  data.ffPos += 1;
                  data.fPos += 1;
                  break;
                case 14:
                  data.oPos += 4;
                  data.iPos += 1;
                  data.fPos += 2;
                  data.bPos += 1;
                  break;
                case 15:
                  data.fPos += 2;
                  break;
                case 16:
                  data.fPos += 2;
                  break;
                case 17:
                  data.oPos += 1;
                  break;
                default:
              }
              data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
              var this3 = data;
              var c2 = this3;
              openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(
                c2.buffer.i[c2.iPos],
                1
              );
              openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(
                c2.buffer.i[c2.iPos],
                1
              );
            }
            break;
          case 3:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this4 = data;
            var c3 = this4;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(
              c3.buffer.f[c3.fPos],
              c3.buffer.f[c3.fPos + 1],
              c3.buffer.f[c3.fPos + 2],
              c3.buffer.f[c3.fPos + 3],
              c3.buffer.f[c3.fPos + 4],
              c3.buffer.f[c3.fPos + 5]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(
              c3.buffer.f[c3.fPos],
              c3.buffer.f[c3.fPos + 1],
              c3.buffer.f[c3.fPos + 2],
              c3.buffer.f[c3.fPos + 3],
              c3.buffer.f[c3.fPos + 4],
              c3.buffer.f[c3.fPos + 5]
            );
            break;
          case 4:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this5 = data;
            var c4 = this5;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(
              c4.buffer.f[c4.fPos],
              c4.buffer.f[c4.fPos + 1],
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(
              c4.buffer.f[c4.fPos],
              c4.buffer.f[c4.fPos + 1],
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            break;
          case 5:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this6 = data;
            var c5 = this6;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(
              c5.buffer.f[c5.fPos],
              c5.buffer.f[c5.fPos + 1],
              c5.buffer.f[c5.fPos + 2]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(
              c5.buffer.f[c5.fPos],
              c5.buffer.f[c5.fPos + 1],
              c5.buffer.f[c5.fPos + 2]
            );
            break;
          case 6:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this7 = data;
            var c6 = this7;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(
              c6.buffer.f[c6.fPos],
              c6.buffer.f[c6.fPos + 1],
              c6.buffer.f[c6.fPos + 2],
              c6.buffer.f[c6.fPos + 3]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(
              c6.buffer.f[c6.fPos],
              c6.buffer.f[c6.fPos + 1],
              c6.buffer.f[c6.fPos + 2],
              c6.buffer.f[c6.fPos + 3]
            );
            break;
          case 7:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            var this8 = data;
            var c7 = this8;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(
              c7.buffer.f[c7.fPos],
              c7.buffer.f[c7.fPos + 1],
              c7.buffer.f[c7.fPos + 2],
              c7.buffer.f[c7.fPos + 3]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(
              c7.buffer.f[c7.fPos],
              c7.buffer.f[c7.fPos + 1],
              c7.buffer.f[c7.fPos + 2],
              c7.buffer.f[c7.fPos + 3]
            );
            break;
          case 8:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            var this9 = data;
            var c8 = this9;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(
              c8.buffer.f[c8.fPos],
              c8.buffer.f[c8.fPos + 1],
              c8.buffer.f[c8.fPos + 2],
              c8.buffer.f[c8.fPos + 3],
              c8.buffer.f[c8.fPos + 4],
              c8.buffer.o[c8.oPos]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(
              c8.buffer.f[c8.fPos],
              c8.buffer.f[c8.fPos + 1],
              c8.buffer.f[c8.fPos + 2],
              c8.buffer.f[c8.fPos + 3],
              c8.buffer.f[c8.fPos + 4],
              c8.buffer.o[c8.oPos]
            );
            break;
          case 11:
            var _g11 = data.prev;
            switch (_g11[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
            var this10 = data;
            openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
            openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
            if (
              openfl__$internal_renderer_canvas_CanvasGraphics.hasFill &&
              openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(
                x,
                y
              )
            ) {
              data.destroy();
              graphics.__canvas = cacheCanvas;
              graphics.__context = cacheContext;
              return true;
            }
            if (
              openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke &&
              openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(
                x,
                y
              )
            ) {
              data.destroy();
              graphics.__canvas = cacheCanvas;
              graphics.__context = cacheContext;
              return true;
            }
            openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
            break;
          case 12:
            var _g12 = data.prev;
            switch (_g12[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
            var this11 = data;
            var c9 = this11;
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(
              c9.buffer.o[c9.oPos],
              c9.buffer.o[c9.oPos + 1],
              c9.buffer.b[c9.bPos],
              c9.buffer.b[c9.bPos + 1]
            );
            break;
          case 13:
            var _g13 = data.prev;
            switch (_g13[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
            var this12 = data;
            var c10 = this12;
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(
              c10.buffer.o[c10.oPos],
              c10.buffer.ii[c10.iiPos],
              c10.buffer.ff[c10.ffPos],
              c10.buffer.ii[c10.iiPos + 1],
              c10.buffer.o[c10.oPos + 1],
              c10.buffer.o[c10.oPos + 2],
              c10.buffer.o[c10.oPos + 3],
              c10.buffer.f[c10.fPos]
            );
            break;
          case 14:
            var _g14 = data.prev;
            switch (_g14[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
            var this13 = data;
            var c11 = this13;
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(
              c11.buffer.o[c11.oPos],
              c11.buffer.i[c11.iPos],
              1,
              c11.buffer.b[c11.bPos],
              c11.buffer.o[c11.oPos + 1],
              c11.buffer.o[c11.oPos + 2],
              c11.buffer.o[c11.oPos + 3],
              c11.buffer.f[c11.fPos + 1]
            );
            break;
          case 15:
            var _g15 = data.prev;
            switch (_g15[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this14 = data;
            var c12 = this14;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(
              c12.buffer.f[c12.fPos],
              c12.buffer.f[c12.fPos + 1]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(
              c12.buffer.f[c12.fPos],
              c12.buffer.f[c12.fPos + 1]
            );
            break;
          case 16:
            var _g16 = data.prev;
            switch (_g16[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this15 = data;
            var c13 = this15;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(
              c13.buffer.f[c13.fPos],
              c13.buffer.f[c13.fPos + 1]
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(
              c13.buffer.f[c13.fPos],
              c13.buffer.f[c13.fPos + 1]
            );
            break;
          default:
            var _g17 = data.prev;
            switch (_g17[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = type;
        }
      }
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() >
        0
      ) {
        openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
      }
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() >
        0
      ) {
        openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
      }
      data.destroy();
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.hasFill &&
        openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(
          x,
          y
        )
      ) {
        graphics.__canvas = cacheCanvas;
        graphics.__context = cacheContext;
        return true;
      }
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke &&
        openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(
          x,
          y
        )
      ) {
        graphics.__canvas = cacheCanvas;
        graphics.__context = cacheContext;
        return true;
      }
      graphics.__canvas = cacheCanvas;
      graphics.__context = cacheContext;
    }
    return false;
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function (
    x1,
    y1,
    x2,
    y2,
    x3,
    y3
  ) {
    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function (
    uvt,
    skipT
  ) {
    if (skipT == null) {
      skipT = false;
    }
    var max = -Infinity;
    var tmp = -Infinity;
    var len = uvt.get_length();
    var _g1 = 1;
    var _g = len + 1;
    while (_g1 < _g) {
      var t = _g1++;
      if (skipT && t % 3 == 0) {
        continue;
      }
      tmp = uvt.get(t - 1);
      if (max < tmp) {
        max = tmp;
      }
    }
    if (!skipT) {
      return { max: max, uvt: uvt };
    }
    var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    var _g11 = 1;
    var _g2 = len + 1;
    while (_g11 < _g2) {
      var t1 = _g11++;
      if (skipT && t1 % 3 == 0) {
        continue;
      }
      result.push(uvt.get(t1 - 1));
    }
    return { max: max, uvt: result };
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function (
    commands,
    stroke
  ) {
    if (stroke == null) {
      stroke = false;
    }
    openfl__$internal_renderer_canvas_CanvasGraphics.bounds =
      openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
    var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
    var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
    var positionX = 0.0;
    var positionY = 0.0;
    var closeGap = false;
    var startX = 0.0;
    var startY = 0.0;
    openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
    var data = new openfl__$internal_renderer_DrawCommandReader(commands);
    var _g = 0;
    var _g1 = commands.types;
    while (_g < _g1.length) {
      var type = _g1[_g];
      ++_g;
      switch (type[1]) {
        case 0:
          var _g2 = data.prev;
          switch (_g2[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev =
            openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
          var this1 = data;
          var c = this1;
          openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill =
            c.buffer.o[c.oPos];
          openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle =
            openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(
              c.buffer.o[c.oPos],
              true,
              c.buffer.b[c.bPos + 1]
            );
          openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
          if (c.buffer.o[c.oPos + 1] != null) {
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix =
              c.buffer.o[c.oPos + 1];
            openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix =
              c.buffer.o[c.oPos + 1].clone();
            openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
          } else {
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix =
              null;
            openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix =
              null;
          }
          break;
        case 1:
          var _g3 = data.prev;
          switch (_g3[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
          var this2 = data;
          var c1 = this2;
          if (c1.buffer.f[c1.fPos] < 0.005) {
            openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
          } else {
            if (c1.buffer.f[c1.fPos] == 1) {
              var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215, 6);
              openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle =
                "#" + tmp;
            } else {
              var r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
              var g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
              var b = c1.buffer.i[c1.iPos] & 255;
              openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle =
                "rgba(" +
                r +
                ", " +
                g +
                ", " +
                b +
                ", " +
                c1.buffer.f[c1.fPos] +
                ")";
            }
            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
            openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
            openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
          }
          break;
        case 2:
          var _g4 = data.prev;
          switch (_g4[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev =
            openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
          var this3 = data;
          var c2 = this3;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle =
            openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(
              c2.buffer.o[c2.oPos],
              c2.buffer.ii[c2.iiPos],
              c2.buffer.ff[c2.ffPos],
              c2.buffer.ii[c2.iiPos + 1],
              c2.buffer.o[c2.oPos + 1],
              c2.buffer.o[c2.oPos + 2],
              c2.buffer.o[c2.oPos + 3],
              c2.buffer.f[c2.fPos]
            );
          openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
          openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
          openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
          break;
        case 3:
          var _g5 = data.prev;
          switch (_g5[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
          var this4 = data;
          var c3 = this4;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
            c3.buffer.f[c3.fPos] - offsetX,
            c3.buffer.f[c3.fPos + 1] - offsetY,
            c3.buffer.f[c3.fPos + 2] - offsetX,
            c3.buffer.f[c3.fPos + 3] - offsetY,
            c3.buffer.f[c3.fPos + 4] - offsetX,
            c3.buffer.f[c3.fPos + 5] - offsetY
          );
          break;
        case 4:
          var _g6 = data.prev;
          switch (_g6[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
          var this5 = data;
          var c4 = this5;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
            c4.buffer.f[c4.fPos] - offsetX,
            c4.buffer.f[c4.fPos + 1] - offsetY,
            c4.buffer.f[c4.fPos + 2] - offsetX,
            c4.buffer.f[c4.fPos + 3] - offsetY
          );
          break;
        case 5:
          var _g7 = data.prev;
          switch (_g7[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
          var this6 = data;
          var c5 = this6;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],
            c5.buffer.f[c5.fPos + 1] - offsetY
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(
            c5.buffer.f[c5.fPos] - offsetX,
            c5.buffer.f[c5.fPos + 1] - offsetY,
            c5.buffer.f[c5.fPos + 2],
            0,
            Math.PI * 2,
            true
          );
          break;
        case 6:
          var _g8 = data.prev;
          switch (_g8[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
          var this7 = data;
          var c6 = this7;
          var x = c6.buffer.f[c6.fPos];
          var y = c6.buffer.f[c6.fPos + 1];
          var width = c6.buffer.f[c6.fPos + 2];
          var height = c6.buffer.f[c6.fPos + 3];
          x -= offsetX;
          y -= offsetY;
          var kappa = 0.5522848;
          var ox = (width / 2) * kappa;
          var oy = (height / 2) * kappa;
          var xe = x + width;
          var ye = y + height;
          var xm = x + width / 2;
          var ym = y + height / 2;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            x,
            ym
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
            x,
            ym - oy,
            xm - ox,
            y,
            xm,
            y
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
            xm + ox,
            y,
            xe,
            ym - oy,
            xe,
            ym
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
            xe,
            ym + oy,
            xm + ox,
            ye,
            xm,
            ye
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
            xm - ox,
            ye,
            x,
            ym + oy,
            x,
            ym
          );
          break;
        case 7:
          var _g9 = data.prev;
          switch (_g9[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
          var this8 = data;
          var c7 = this8;
          var optimizationUsed = false;
          if (
            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill !=
              null &&
            !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting
          ) {
            var st = 0;
            var sr = 0;
            var sb = 0;
            var sl = 0;
            var canOptimizeMatrix = true;
            if (
              openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix !=
              null
            ) {
              if (
                openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix
                  .b != 0 ||
                openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix
                  .c != 0
              ) {
                canOptimizeMatrix = false;
              } else {
                var stl =
                  openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(
                    new openfl_geom_Point(
                      c7.buffer.f[c7.fPos],
                      c7.buffer.f[c7.fPos + 1]
                    )
                  );
                var sbr =
                  openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(
                    new openfl_geom_Point(
                      c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2],
                      c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3]
                    )
                  );
                st = stl.y;
                sl = stl.x;
                sb = sbr.y;
                sr = sbr.x;
              }
            } else {
              st = c7.buffer.f[c7.fPos + 1];
              sl = c7.buffer.f[c7.fPos];
              sb = c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3];
              sr = c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2];
            }
            if (
              canOptimizeMatrix &&
              st >= 0 &&
              sl >= 0 &&
              sr <=
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill
                  .width &&
              sb <=
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill
                  .height
            ) {
              optimizationUsed = true;
              if (
                !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting
              ) {
                openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(
                  openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),
                  sl,
                  st,
                  sr - sl,
                  sb - st,
                  c7.buffer.f[c7.fPos] - offsetX,
                  c7.buffer.f[c7.fPos + 1] - offsetY,
                  c7.buffer.f[c7.fPos + 2],
                  c7.buffer.f[c7.fPos + 3]
                );
              }
            }
          }
          if (!optimizationUsed) {
            openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(
              c7.buffer.f[c7.fPos] - offsetX,
              c7.buffer.f[c7.fPos + 1] - offsetY,
              c7.buffer.f[c7.fPos + 2],
              c7.buffer.f[c7.fPos + 3]
            );
          }
          break;
        case 8:
          var _g10 = data.prev;
          switch (_g10[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev =
            openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
          var this9 = data;
          var c8 = this9;
          openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(
            c8.buffer.f[c8.fPos] - offsetX,
            c8.buffer.f[c8.fPos + 1] - offsetY,
            c8.buffer.f[c8.fPos + 2],
            c8.buffer.f[c8.fPos + 3],
            c8.buffer.f[c8.fPos + 4],
            c8.buffer.o[c8.oPos]
          );
          break;
        case 12:
          var _g11 = data.prev;
          switch (_g11[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev =
            openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
          var this10 = data;
          var c9 = this10;
          if (
            stroke &&
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke
          ) {
            openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
          }
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            positionX - offsetX,
            positionY - offsetY
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle =
            openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(
              c9.buffer.o[c9.oPos],
              c9.buffer.b[c9.bPos],
              c9.buffer.b[c9.bPos + 1]
            );
          openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
          break;
        case 13:
          var _g12 = data.prev;
          switch (_g12[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev =
            openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
          var this11 = data;
          var c10 = this11;
          if (
            stroke &&
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke
          ) {
            openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
          }
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            positionX - offsetX,
            positionY - offsetY
          );
          openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle =
            openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(
              c10.buffer.o[c10.oPos],
              c10.buffer.ii[c10.iiPos],
              c10.buffer.ff[c10.ffPos],
              c10.buffer.ii[c10.iiPos + 1],
              c10.buffer.o[c10.oPos + 1],
              c10.buffer.o[c10.oPos + 2],
              c10.buffer.o[c10.oPos + 3],
              c10.buffer.f[c10.fPos]
            );
          openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
          openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
          break;
        case 14:
          var _g13 = data.prev;
          switch (_g13[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
          var this12 = data;
          var c11 = this12;
          if (
            stroke &&
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke
          ) {
            openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
          }
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            positionX - offsetX,
            positionY - offsetY
          );
          if (c11.buffer.o[c11.oPos] == null) {
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
          } else {
            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth =
              c11.buffer.o[c11.oPos] > 0 ? c11.buffer.o[c11.oPos] : 1;
            var tmp1 =
              c11.buffer.o[c11.oPos + 3] == null
                ? "round"
                : openfl_display__$JointStyle_JointStyle_$Impl_$
                    .toString(c11.buffer.o[c11.oPos + 3])
                    .toLowerCase();
            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin =
              tmp1;
            var tmp2;
            if (c11.buffer.o[c11.oPos + 2] == null) {
              tmp2 = "round";
            } else {
              var _g21 = c11.buffer.o[c11.oPos + 2];
              if (_g21 == 0) {
                tmp2 = "butt";
              } else {
                tmp2 = openfl_display__$CapsStyle_CapsStyle_$Impl_$
                  .toString(c11.buffer.o[c11.oPos + 2])
                  .toLowerCase();
              }
            }
            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap =
              tmp2;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit =
              c11.buffer.f[c11.fPos + 1];
            if (c11.buffer.f[c11.fPos] == 1) {
              var tmp3 = StringTools.hex(c11.buffer.i[c11.iPos] & 16777215, 6);
              openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle =
                "#" + tmp3;
            } else {
              var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
              var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
              var b1 = c11.buffer.i[c11.iPos] & 255;
              openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle =
                "rgba(" +
                r1 +
                ", " +
                g1 +
                ", " +
                b1 +
                ", " +
                c11.buffer.f[c11.fPos] +
                ")";
            }
            openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
          }
          break;
        case 15:
          var _g14 = data.prev;
          switch (_g14[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
          var this13 = data;
          var c12 = this13;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
            c12.buffer.f[c12.fPos] - offsetX,
            c12.buffer.f[c12.fPos + 1] - offsetY
          );
          positionX = c12.buffer.f[c12.fPos];
          positionY = c12.buffer.f[c12.fPos + 1];
          break;
        case 16:
          var _g15 = data.prev;
          switch (_g15[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
          var this14 = data;
          var c13 = this14;
          openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
            c13.buffer.f[c13.fPos] - offsetX,
            c13.buffer.f[c13.fPos + 1] - offsetY
          );
          positionX = c13.buffer.f[c13.fPos];
          positionY = c13.buffer.f[c13.fPos + 1];
          closeGap = true;
          startX = c13.buffer.f[c13.fPos];
          startY = c13.buffer.f[c13.fPos + 1];
          break;
        default:
          var _g16 = data.prev;
          switch (_g16[1]) {
            case 0:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 1:
              data.iPos += 1;
              data.fPos += 1;
              break;
            case 2:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 3:
              data.fPos += 6;
              break;
            case 4:
              data.fPos += 4;
              break;
            case 5:
              data.fPos += 3;
              break;
            case 6:
              data.fPos += 4;
              break;
            case 7:
              data.fPos += 4;
              break;
            case 8:
              data.fPos += 5;
              data.oPos += 1;
              break;
            case 10:
              data.oPos += 4;
              break;
            case 11:
              break;
            case 12:
              data.oPos += 2;
              data.bPos += 2;
              break;
            case 13:
              data.oPos += 4;
              data.iiPos += 2;
              data.ffPos += 1;
              data.fPos += 1;
              break;
            case 14:
              data.oPos += 4;
              data.iPos += 1;
              data.fPos += 2;
              data.bPos += 1;
              break;
            case 15:
              data.fPos += 2;
              break;
            case 16:
              data.fPos += 2;
              break;
            case 17:
              data.oPos += 1;
              break;
            default:
          }
          data.prev = type;
      }
    }
    data.destroy();
    if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.hasFill &&
        closeGap
      ) {
        openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
          startX - offsetX,
          startY - offsetY
        );
      } else if (closeGap && positionX == startX && positionY == startY) {
        openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
      }
      if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
        openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
      }
    }
    if (!stroke) {
      if (
        openfl__$internal_renderer_canvas_CanvasGraphics.hasFill ||
        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null
      ) {
        openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(
          -openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,
          -openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y
        );
        if (
          openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null
        ) {
          openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,
            openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty
          );
          if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
            openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
          }
          openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.a,
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.b,
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.c,
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.d,
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.tx,
            openfl__$internal_renderer_canvas_CanvasGraphics
              .inversePendingMatrix.ty
          );
        } else if (
          !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting
        ) {
          openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
        }
        openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(
          openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,
          openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y
        );
        openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
      }
    }
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.render = function (
    graphics,
    renderSession,
    parentTransform
  ) {
    graphics.__update();
    if (graphics.__dirty) {
      openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
      openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
      openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing =
        renderSession.allowSmoothing;
      openfl__$internal_renderer_canvas_CanvasGraphics.bounds =
        graphics.__bounds;
      var width = graphics.__width;
      var height = graphics.__height;
      if (
        !graphics.__visible ||
        graphics.__commands.get_length() == 0 ||
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null ||
        width < 1 ||
        height < 1
      ) {
        graphics.__canvas = null;
        graphics.__context = null;
        graphics.__bitmap = null;
      } else {
        if (graphics.__canvas == null) {
          graphics.__canvas = window.document.createElement("canvas");
          graphics.__context = graphics.__canvas.getContext("2d");
        }
        openfl__$internal_renderer_canvas_CanvasGraphics.context =
          graphics.__context;
        var transform = graphics.__renderTransform;
        var canvas = graphics.__canvas;
        var devicePixelRatio = window.devicePixelRatio || 1;
        var scaledWidth = (width * devicePixelRatio) | 0;
        var scaledHeight = (height * devicePixelRatio) | 0;
        if (canvas.width == scaledWidth && canvas.height == scaledHeight) {
          openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(
            0,
            0,
            scaledWidth,
            scaledHeight
          );
        } else {
          canvas.width = width;
          canvas.height = height;
        }
        openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
        openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
        openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
        var data = new openfl__$internal_renderer_DrawCommandReader(
          graphics.__commands
        );
        var _g = 0;
        var _g1 = graphics.__commands.types;
        try {
          while (_g < _g1.length) {
            var type = _g1[_g];
            ++_g;
            switch (type[1]) {
              case 0:
              case 1:
              case 2:
                openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                if (
                  type ==
                  openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL
                ) {
                  var _g2 = data.prev;
                  switch (_g2[1]) {
                    case 0:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 1:
                      data.iPos += 1;
                      data.fPos += 1;
                      break;
                    case 2:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 3:
                      data.fPos += 6;
                      break;
                    case 4:
                      data.fPos += 4;
                      break;
                    case 5:
                      data.fPos += 3;
                      break;
                    case 6:
                      data.fPos += 4;
                      break;
                    case 7:
                      data.fPos += 4;
                      break;
                    case 8:
                      data.fPos += 5;
                      data.oPos += 1;
                      break;
                    case 10:
                      data.oPos += 4;
                      break;
                    case 11:
                      break;
                    case 12:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 13:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 14:
                      data.oPos += 4;
                      data.iPos += 1;
                      data.fPos += 2;
                      data.bPos += 1;
                      break;
                    case 15:
                      data.fPos += 2;
                      break;
                    case 16:
                      data.fPos += 2;
                      break;
                    case 17:
                      data.oPos += 1;
                      break;
                    default:
                  }
                  data.prev =
                    openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
                  var this1 = data;
                  var c = this1;
                  openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(
                    c.buffer.o[c.oPos],
                    c.buffer.o[c.oPos + 1],
                    c.buffer.b[c.bPos],
                    c.buffer.b[c.bPos + 1]
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(
                    c.buffer.o[c.oPos],
                    c.buffer.o[c.oPos + 1],
                    c.buffer.b[c.bPos],
                    c.buffer.b[c.bPos + 1]
                  );
                } else if (
                  type ==
                  openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL
                ) {
                  var _g3 = data.prev;
                  switch (_g3[1]) {
                    case 0:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 1:
                      data.iPos += 1;
                      data.fPos += 1;
                      break;
                    case 2:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 3:
                      data.fPos += 6;
                      break;
                    case 4:
                      data.fPos += 4;
                      break;
                    case 5:
                      data.fPos += 3;
                      break;
                    case 6:
                      data.fPos += 4;
                      break;
                    case 7:
                      data.fPos += 4;
                      break;
                    case 8:
                      data.fPos += 5;
                      data.oPos += 1;
                      break;
                    case 10:
                      data.oPos += 4;
                      break;
                    case 11:
                      break;
                    case 12:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 13:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 14:
                      data.oPos += 4;
                      data.iPos += 1;
                      data.fPos += 2;
                      data.bPos += 1;
                      break;
                    case 15:
                      data.fPos += 2;
                      break;
                    case 16:
                      data.fPos += 2;
                      break;
                    case 17:
                      data.oPos += 1;
                      break;
                    default:
                  }
                  data.prev =
                    openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
                  var this2 = data;
                  var c1 = this2;
                  openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(
                    c1.buffer.o[c1.oPos],
                    c1.buffer.ii[c1.iiPos],
                    c1.buffer.ff[c1.ffPos],
                    c1.buffer.ii[c1.iiPos + 1],
                    c1.buffer.o[c1.oPos + 1],
                    c1.buffer.o[c1.oPos + 2],
                    c1.buffer.o[c1.oPos + 3],
                    c1.buffer.f[c1.fPos]
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(
                    c1.buffer.o[c1.oPos],
                    c1.buffer.ii[c1.iiPos],
                    c1.buffer.ff[c1.ffPos],
                    c1.buffer.ii[c1.iiPos + 1],
                    c1.buffer.o[c1.oPos + 1],
                    c1.buffer.o[c1.oPos + 2],
                    c1.buffer.o[c1.oPos + 3],
                    c1.buffer.f[c1.fPos]
                  );
                } else {
                  var _g4 = data.prev;
                  switch (_g4[1]) {
                    case 0:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 1:
                      data.iPos += 1;
                      data.fPos += 1;
                      break;
                    case 2:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 3:
                      data.fPos += 6;
                      break;
                    case 4:
                      data.fPos += 4;
                      break;
                    case 5:
                      data.fPos += 3;
                      break;
                    case 6:
                      data.fPos += 4;
                      break;
                    case 7:
                      data.fPos += 4;
                      break;
                    case 8:
                      data.fPos += 5;
                      data.oPos += 1;
                      break;
                    case 10:
                      data.oPos += 4;
                      break;
                    case 11:
                      break;
                    case 12:
                      data.oPos += 2;
                      data.bPos += 2;
                      break;
                    case 13:
                      data.oPos += 4;
                      data.iiPos += 2;
                      data.ffPos += 1;
                      data.fPos += 1;
                      break;
                    case 14:
                      data.oPos += 4;
                      data.iPos += 1;
                      data.fPos += 2;
                      data.bPos += 1;
                      break;
                    case 15:
                      data.fPos += 2;
                      break;
                    case 16:
                      data.fPos += 2;
                      break;
                    case 17:
                      data.oPos += 1;
                      break;
                    default:
                  }
                  data.prev =
                    openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
                  var this3 = data;
                  var c2 = this3;
                  openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(
                    c2.buffer.i[c2.iPos],
                    c2.buffer.f[c2.fPos]
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(
                    c2.buffer.i[c2.iPos],
                    c2.buffer.f[c2.fPos]
                  );
                }
                break;
              case 3:
                var _g5 = data.prev;
                switch (_g5[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
                var this4 = data;
                var c3 = this4;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(
                  c3.buffer.f[c3.fPos],
                  c3.buffer.f[c3.fPos + 1],
                  c3.buffer.f[c3.fPos + 2],
                  c3.buffer.f[c3.fPos + 3],
                  c3.buffer.f[c3.fPos + 4],
                  c3.buffer.f[c3.fPos + 5]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(
                  c3.buffer.f[c3.fPos],
                  c3.buffer.f[c3.fPos + 1],
                  c3.buffer.f[c3.fPos + 2],
                  c3.buffer.f[c3.fPos + 3],
                  c3.buffer.f[c3.fPos + 4],
                  c3.buffer.f[c3.fPos + 5]
                );
                break;
              case 4:
                var _g6 = data.prev;
                switch (_g6[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
                var this5 = data;
                var c4 = this5;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(
                  c4.buffer.f[c4.fPos],
                  c4.buffer.f[c4.fPos + 1],
                  c4.buffer.f[c4.fPos + 2],
                  c4.buffer.f[c4.fPos + 3]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(
                  c4.buffer.f[c4.fPos],
                  c4.buffer.f[c4.fPos + 1],
                  c4.buffer.f[c4.fPos + 2],
                  c4.buffer.f[c4.fPos + 3]
                );
                break;
              case 5:
                var _g7 = data.prev;
                switch (_g7[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
                var this6 = data;
                var c5 = this6;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(
                  c5.buffer.f[c5.fPos],
                  c5.buffer.f[c5.fPos + 1],
                  c5.buffer.f[c5.fPos + 2]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(
                  c5.buffer.f[c5.fPos],
                  c5.buffer.f[c5.fPos + 1],
                  c5.buffer.f[c5.fPos + 2]
                );
                break;
              case 6:
                var _g8 = data.prev;
                switch (_g8[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
                var this7 = data;
                var c6 = this7;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(
                  c6.buffer.f[c6.fPos],
                  c6.buffer.f[c6.fPos + 1],
                  c6.buffer.f[c6.fPos + 2],
                  c6.buffer.f[c6.fPos + 3]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(
                  c6.buffer.f[c6.fPos],
                  c6.buffer.f[c6.fPos + 1],
                  c6.buffer.f[c6.fPos + 2],
                  c6.buffer.f[c6.fPos + 3]
                );
                break;
              case 7:
                var _g9 = data.prev;
                switch (_g9[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
                var this8 = data;
                var c7 = this8;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(
                  c7.buffer.f[c7.fPos],
                  c7.buffer.f[c7.fPos + 1],
                  c7.buffer.f[c7.fPos + 2],
                  c7.buffer.f[c7.fPos + 3]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(
                  c7.buffer.f[c7.fPos],
                  c7.buffer.f[c7.fPos + 1],
                  c7.buffer.f[c7.fPos + 2],
                  c7.buffer.f[c7.fPos + 3]
                );
                break;
              case 8:
                var _g10 = data.prev;
                switch (_g10[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
                var this9 = data;
                var c8 = this9;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(
                  c8.buffer.f[c8.fPos],
                  c8.buffer.f[c8.fPos + 1],
                  c8.buffer.f[c8.fPos + 2],
                  c8.buffer.f[c8.fPos + 3],
                  c8.buffer.f[c8.fPos + 4],
                  c8.buffer.o[c8.oPos]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(
                  c8.buffer.f[c8.fPos],
                  c8.buffer.f[c8.fPos + 1],
                  c8.buffer.f[c8.fPos + 2],
                  c8.buffer.f[c8.fPos + 3],
                  c8.buffer.f[c8.fPos + 4],
                  c8.buffer.o[c8.oPos]
                );
                break;
              case 10:
                openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                var _g11 = data.prev;
                switch (_g11[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
                var this10 = data;
                var c9 = this10;
                var v = c9.buffer.o[c9.oPos];
                var ind = c9.buffer.o[c9.oPos + 1];
                var uvt = c9.buffer.o[c9.oPos + 2];
                var pattern = null;
                var colorFill =
                  openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill ==
                  null;
                if (colorFill && uvt != null) {
                  throw "__break__";
                }
                if (!colorFill) {
                  if (uvt == null) {
                    uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
                    var _g31 = 0;
                    var _g21 = (v.get_length() / 2) | 0;
                    while (_g31 < _g21) {
                      var i = _g31++;
                      uvt.push(
                        v.get(i * 2) /
                          openfl__$internal_renderer_canvas_CanvasGraphics
                            .bitmapFill.width
                      );
                      uvt.push(
                        v.get(i * 2 + 1) /
                          openfl__$internal_renderer_canvas_CanvasGraphics
                            .bitmapFill.height
                      );
                    }
                  }
                  var skipT = uvt.get_length() != v.get_length();
                  var normalizedUVT =
                    openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(
                      uvt,
                      skipT
                    );
                  var maxUVT = normalizedUVT.max;
                  uvt = normalizedUVT.uvt;
                  if (maxUVT > 1) {
                    pattern =
                      openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(
                        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,
                        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,
                        openfl__$internal_renderer_canvas_CanvasGraphics.bounds
                          .width | 0,
                        openfl__$internal_renderer_canvas_CanvasGraphics.bounds
                          .height | 0
                      );
                  } else {
                    pattern =
                      openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(
                        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,
                        openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,
                        openfl__$internal_renderer_canvas_CanvasGraphics
                          .bitmapFill.width,
                        openfl__$internal_renderer_canvas_CanvasGraphics
                          .bitmapFill.height
                      );
                  }
                }
                var i1 = 0;
                var l = ind.get_length();
                var a_;
                var b_;
                var c_;
                var iax;
                var iay;
                var ibx;
                var iby;
                var icx;
                var icy;
                var x1;
                var y1;
                var x2;
                var y2;
                var x3;
                var y3;
                var uvx1;
                var uvy1;
                var uvx2;
                var uvy2;
                var uvx3;
                var uvy3;
                var denom;
                var t1;
                var t2;
                var t3;
                var t4;
                var dx;
                var dy;
                while (i1 < l) {
                  a_ = i1;
                  b_ = i1 + 1;
                  c_ = i1 + 2;
                  iax = ind.get(a_) * 2;
                  iay = ind.get(a_) * 2 + 1;
                  ibx = ind.get(b_) * 2;
                  iby = ind.get(b_) * 2 + 1;
                  icx = ind.get(c_) * 2;
                  icy = ind.get(c_) * 2 + 1;
                  x1 = v.get(iax);
                  y1 = v.get(iay);
                  x2 = v.get(ibx);
                  y2 = v.get(iby);
                  x3 = v.get(icx);
                  y3 = v.get(icy);
                  var _g22 = c9.buffer.o[c9.oPos + 3];
                  switch (_g22) {
                    case 0:
                      if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
                        i1 += 3;
                        continue;
                      }
                      break;
                    case 2:
                      if (
                        !((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)
                      ) {
                        i1 += 3;
                        continue;
                      }
                      break;
                    default:
                  }
                  if (colorFill) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
                      x1,
                      y1
                    );
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
                      x2,
                      y2
                    );
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
                      x3,
                      y3
                    );
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
                    if (
                      !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting
                    ) {
                      openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
                    }
                    i1 += 3;
                    continue;
                  }
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
                    x1,
                    y1
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
                    x2,
                    y2
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
                    x3,
                    y3
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
                  uvx1 = uvt.get(iax) * pattern.width;
                  uvx2 = uvt.get(ibx) * pattern.width;
                  uvx3 = uvt.get(icx) * pattern.width;
                  uvy1 = uvt.get(iay) * pattern.height;
                  uvy2 = uvt.get(iby) * pattern.height;
                  uvy3 = uvt.get(icy) * pattern.height;
                  denom =
                    uvx1 * (uvy3 - uvy2) -
                    uvx2 * uvy3 +
                    uvx3 * uvy2 +
                    (uvx2 - uvx3) * uvy1;
                  if (denom == 0) {
                    i1 += 3;
                    continue;
                  }
                  t1 =
                    -(
                      uvy1 * (x3 - x2) -
                      uvy2 * x3 +
                      uvy3 * x2 +
                      (uvy2 - uvy3) * x1
                    ) / denom;
                  t2 =
                    (uvy2 * y3 +
                      uvy1 * (y2 - y3) -
                      uvy3 * y2 +
                      (uvy3 - uvy2) * y1) /
                    denom;
                  t3 =
                    (uvx1 * (x3 - x2) -
                      uvx2 * x3 +
                      uvx3 * x2 +
                      (uvx2 - uvx3) * x1) /
                    denom;
                  t4 =
                    -(
                      uvx2 * y3 +
                      uvx1 * (y2 - y3) -
                      uvx3 * y2 +
                      (uvx3 - uvx2) * y1
                    ) / denom;
                  dx =
                    (uvx1 * (uvy3 * x2 - uvy2 * x3) +
                      uvy1 * (uvx2 * x3 - uvx3 * x2) +
                      (uvx3 * uvy2 - uvx2 * uvy3) * x1) /
                    denom;
                  dy =
                    (uvx1 * (uvy3 * y2 - uvy2 * y3) +
                      uvy1 * (uvx2 * y3 - uvx3 * y2) +
                      (uvx3 * uvy2 - uvx2 * uvy3) * y1) /
                    denom;
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(
                    t1,
                    t2,
                    t3,
                    t4,
                    dx,
                    dy
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(
                    pattern,
                    0,
                    0
                  );
                  openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
                  i1 += 3;
                }
                break;
              case 11:
                var _g12 = data.prev;
                switch (_g12[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
                var this11 = data;
                openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill =
                  null;
                break;
              case 12:
                var _g13 = data.prev;
                switch (_g13[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
                var this12 = data;
                var c10 = this12;
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(
                  c10.buffer.o[c10.oPos],
                  c10.buffer.o[c10.oPos + 1],
                  c10.buffer.b[c10.bPos],
                  c10.buffer.b[c10.bPos + 1]
                );
                break;
              case 13:
                var _g14 = data.prev;
                switch (_g14[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
                var this13 = data;
                var c11 = this13;
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(
                  c11.buffer.o[c11.oPos],
                  c11.buffer.ii[c11.iiPos],
                  c11.buffer.ff[c11.ffPos],
                  c11.buffer.ii[c11.iiPos + 1],
                  c11.buffer.o[c11.oPos + 1],
                  c11.buffer.o[c11.oPos + 2],
                  c11.buffer.o[c11.oPos + 3],
                  c11.buffer.f[c11.fPos]
                );
                break;
              case 14:
                var _g15 = data.prev;
                switch (_g15[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev =
                  openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
                var this14 = data;
                var c12 = this14;
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(
                  c12.buffer.o[c12.oPos],
                  c12.buffer.i[c12.iPos],
                  c12.buffer.f[c12.fPos],
                  c12.buffer.b[c12.bPos],
                  c12.buffer.o[c12.oPos + 1],
                  c12.buffer.o[c12.oPos + 2],
                  c12.buffer.o[c12.oPos + 3],
                  c12.buffer.f[c12.fPos + 1]
                );
                break;
              case 15:
                var _g16 = data.prev;
                switch (_g16[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
                var this15 = data;
                var c13 = this15;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(
                  c13.buffer.f[c13.fPos],
                  c13.buffer.f[c13.fPos + 1]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(
                  c13.buffer.f[c13.fPos],
                  c13.buffer.f[c13.fPos + 1]
                );
                break;
              case 16:
                var _g17 = data.prev;
                switch (_g17[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
                var this16 = data;
                var c14 = this16;
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(
                  c14.buffer.f[c14.fPos],
                  c14.buffer.f[c14.fPos + 1]
                );
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(
                  c14.buffer.f[c14.fPos],
                  c14.buffer.f[c14.fPos + 1]
                );
                break;
              default:
                var _g18 = data.prev;
                switch (_g18[1]) {
                  case 0:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 1:
                    data.iPos += 1;
                    data.fPos += 1;
                    break;
                  case 2:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 3:
                    data.fPos += 6;
                    break;
                  case 4:
                    data.fPos += 4;
                    break;
                  case 5:
                    data.fPos += 3;
                    break;
                  case 6:
                    data.fPos += 4;
                    break;
                  case 7:
                    data.fPos += 4;
                    break;
                  case 8:
                    data.fPos += 5;
                    data.oPos += 1;
                    break;
                  case 10:
                    data.oPos += 4;
                    break;
                  case 11:
                    break;
                  case 12:
                    data.oPos += 2;
                    data.bPos += 2;
                    break;
                  case 13:
                    data.oPos += 4;
                    data.iiPos += 2;
                    data.ffPos += 1;
                    data.fPos += 1;
                    break;
                  case 14:
                    data.oPos += 4;
                    data.iPos += 1;
                    data.fPos += 2;
                    data.bPos += 1;
                    break;
                  case 15:
                    data.fPos += 2;
                    break;
                  case 16:
                    data.fPos += 2;
                    break;
                  case 17:
                    data.oPos += 1;
                    break;
                  default:
                }
                data.prev = type;
            }
          }
        } catch (e) {
          if (e != "__break__") throw e;
        }
        if (
          openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() >
          0
        ) {
          openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
        }
        if (
          openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() >
          0
        ) {
          openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
        }
        data.destroy();
        graphics.__bitmap = openfl_display_BitmapData.fromCanvas(
          graphics.__canvas
        );
      }
      graphics.set___dirty(false);
    }
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function (
    graphics,
    renderSession
  ) {
    if (graphics.__commands.get_length() != 0) {
      openfl__$internal_renderer_canvas_CanvasGraphics.context =
        renderSession.context;
      var positionX = 0.0;
      var positionY = 0.0;
      var offsetX = 0;
      var offsetY = 0;
      var data = new openfl__$internal_renderer_DrawCommandReader(
        graphics.__commands
      );
      var _g = 0;
      var _g1 = graphics.__commands.types;
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 3:
            var _g2 = data.prev;
            switch (_g2[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this1 = data;
            var c = this1;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
              c.buffer.f[c.fPos] - offsetX,
              c.buffer.f[c.fPos + 1] - offsetY,
              c.buffer.f[c.fPos + 2] - offsetX,
              c.buffer.f[c.fPos + 3] - offsetY,
              c.buffer.f[c.fPos + 4] - offsetX,
              c.buffer.f[c.fPos + 5] - offsetY
            );
            positionX = c.buffer.f[c.fPos + 4];
            positionY = c.buffer.f[c.fPos + 5];
            break;
          case 4:
            var _g3 = data.prev;
            switch (_g3[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this2 = data;
            var c1 = this2;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(
              c1.buffer.f[c1.fPos] - offsetX,
              c1.buffer.f[c1.fPos + 1] - offsetY,
              c1.buffer.f[c1.fPos + 2] - offsetX,
              c1.buffer.f[c1.fPos + 3] - offsetY
            );
            positionX = c1.buffer.f[c1.fPos + 2];
            positionY = c1.buffer.f[c1.fPos + 3];
            break;
          case 5:
            var _g4 = data.prev;
            switch (_g4[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this3 = data;
            var c2 = this3;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(
              c2.buffer.f[c2.fPos] - offsetX,
              c2.buffer.f[c2.fPos + 1] - offsetY,
              c2.buffer.f[c2.fPos + 2],
              0,
              Math.PI * 2,
              true
            );
            break;
          case 6:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this4 = data;
            var c3 = this4;
            var x = c3.buffer.f[c3.fPos];
            var y = c3.buffer.f[c3.fPos + 1];
            var width = c3.buffer.f[c3.fPos + 2];
            var height = c3.buffer.f[c3.fPos + 3];
            x -= offsetX;
            y -= offsetY;
            var kappa = 0.5522848;
            var ox = (width / 2) * kappa;
            var oy = (height / 2) * kappa;
            var xe = x + width;
            var ye = y + height;
            var xm = x + width / 2;
            var ym = y + height / 2;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
              x,
              ym
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
              x,
              ym - oy,
              xm - ox,
              y,
              xm,
              y
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
              xm + ox,
              y,
              xe,
              ym - oy,
              xe,
              ym
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
              xe,
              ym + oy,
              xm + ox,
              ye,
              xm,
              ye
            );
            openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(
              xm - ox,
              ye,
              x,
              ym + oy,
              x,
              ym
            );
            break;
          case 7:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            var this5 = data;
            var c4 = this5;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(
              c4.buffer.f[c4.fPos] - offsetX,
              c4.buffer.f[c4.fPos + 1] - offsetY,
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            break;
          case 8:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            var this6 = data;
            var c5 = this6;
            openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(
              c5.buffer.f[c5.fPos] - offsetX,
              c5.buffer.f[c5.fPos + 1] - offsetY,
              c5.buffer.f[c5.fPos + 2],
              c5.buffer.f[c5.fPos + 3],
              c5.buffer.f[c5.fPos + 4],
              c5.buffer.o[c5.oPos]
            );
            break;
          case 15:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this7 = data;
            var c6 = this7;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(
              c6.buffer.f[c6.fPos] - offsetX,
              c6.buffer.f[c6.fPos + 1] - offsetY
            );
            positionX = c6.buffer.f[c6.fPos];
            positionY = c6.buffer.f[c6.fPos + 1];
            break;
          case 16:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this8 = data;
            var c7 = this8;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(
              c7.buffer.f[c7.fPos] - offsetX,
              c7.buffer.f[c7.fPos + 1] - offsetY
            );
            positionX = c7.buffer.f[c7.fPos];
            positionY = c7.buffer.f[c7.fPos + 1];
            break;
          default:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = type;
        }
      }
      data.destroy();
    }
  };
  openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function (
    smooth
  ) {
    if (!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
      smooth = false;
    }
    if (
      openfl__$internal_renderer_canvas_CanvasGraphics.context
        .imageSmoothingEnabled != smooth
    ) {
      openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled =
        smooth;
      openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled =
        smooth;
      openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled =
        smooth;
    }
  };
  var openfl__$internal_renderer_canvas_CanvasMaskManager = function (
    renderSession
  ) {
    openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
  };
  $hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] =
    openfl__$internal_renderer_canvas_CanvasMaskManager;
  openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasMaskManager",
  ];
  openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ =
    openfl__$internal_renderer_AbstractMaskManager;
  openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(
    openfl__$internal_renderer_AbstractMaskManager.prototype,
    {
      pushMask: function (mask) {
        var context = this.renderSession.context;
        context.save();
        var transform = mask.__getRenderTransform();
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
        context.beginPath();
        mask.__renderCanvasMask(this.renderSession);
        context.clip();
      },
      pushObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.pushRect(object.__scrollRect, object.__renderTransform);
        }
        if (object.__mask != null) {
          this.pushMask(object.__mask);
        }
      },
      pushRect: function (rect, transform) {
        var context = this.renderSession.context;
        context.save();
        context.setTransform(
          transform.a,
          transform.b,
          transform.c,
          transform.d,
          transform.tx,
          transform.ty
        );
        context.beginPath();
        context.rect(rect.x, rect.y, rect.width, rect.height);
        context.clip();
      },
      popMask: function () {
        this.renderSession.context.restore();
      },
      popObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (object.__mask != null) {
          this.popMask();
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.popRect();
        }
      },
      popRect: function () {
        this.renderSession.context.restore();
      },
      __class__: openfl__$internal_renderer_canvas_CanvasMaskManager,
    }
  );
  var openfl__$internal_renderer_canvas_CanvasRenderer = function (
    stage,
    context
  ) {
    openfl__$internal_renderer_AbstractRenderer.call(this, stage);
    this.context = context;
    this.renderSession = new openfl__$internal_renderer_RenderSession();
    this.renderSession.context = context;
    this.renderSession.renderer = this;
    this.renderSession.maskManager =
      new openfl__$internal_renderer_canvas_CanvasMaskManager(
        this.renderSession
      );
  };
  $hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] =
    openfl__$internal_renderer_canvas_CanvasRenderer;
  openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasRenderer",
  ];
  openfl__$internal_renderer_canvas_CanvasRenderer.__super__ =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(
    openfl__$internal_renderer_AbstractRenderer.prototype,
    {
      context: null,
      clear: function () {
        var _g = 0;
        var _g1 = this.stage.stage3Ds;
        while (_g < _g1.get_length()) {
          var stage3D = _g1.get(_g);
          ++_g;
          stage3D.__renderCanvas(this.stage, this.renderSession);
        }
      },
      render: function () {
        this.renderSession.allowSmoothing = this.stage.quality != 2;
        this.context.setTransform(1, 0, 0, 1, 0, 0);
        this.context.globalAlpha = 1;
        if (!this.stage.__transparent && this.stage.__clearBeforeRender) {
          this.context.fillStyle = this.stage.__colorString;
          this.context.fillRect(
            0,
            0,
            this.stage.stageWidth * this.stage.window.__scale,
            this.stage.stageHeight * this.stage.window.__scale
          );
        } else if (this.stage.__transparent && this.stage.__clearBeforeRender) {
          this.context.clearRect(
            0,
            0,
            this.stage.stageWidth * this.stage.window.__scale,
            this.stage.stageHeight * this.stage.window.__scale
          );
        }
        this.stage.__renderCanvas(this.renderSession);
      },
      __class__: openfl__$internal_renderer_canvas_CanvasRenderer,
    }
  );
  var openfl__$internal_renderer_canvas_CanvasShape = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasShape"] =
    openfl__$internal_renderer_canvas_CanvasShape;
  openfl__$internal_renderer_canvas_CanvasShape.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasShape",
  ];
  openfl__$internal_renderer_canvas_CanvasShape.render = function (
    shape,
    renderSession
  ) {
    if (!shape.__renderable || shape.__worldAlpha <= 0) {
      return;
    }
    var graphics = shape.__graphics;
    if (graphics != null) {
      openfl__$internal_renderer_canvas_CanvasGraphics.render(
        graphics,
        renderSession,
        shape.__renderTransform
      );
      var bounds = graphics.__bounds;
      var width = graphics.__width;
      var height = graphics.__height;
      if (graphics.__canvas != null) {
        var context = renderSession.context;
        var scrollRect = shape.__scrollRect;
        if (
          width > 0 &&
          height > 0 &&
          (scrollRect == null ||
            (scrollRect.width > 0 && scrollRect.height > 0))
        ) {
          renderSession.maskManager.pushObject(shape);
          context.globalAlpha = shape.__worldAlpha;
          var transform = graphics.__worldTransform;
          if (renderSession.roundPixels) {
            context.setTransform(
              transform.a,
              transform.b,
              transform.c,
              transform.d,
              transform.tx | 0,
              transform.ty | 0
            );
          } else {
            context.setTransform(
              transform.a,
              transform.b,
              transform.c,
              transform.d,
              transform.tx,
              transform.ty
            );
          }
          context.drawImage(graphics.__canvas, 0, 0);
          renderSession.maskManager.popObject(shape);
        }
      }
    }
  };
  var openfl__$internal_renderer_canvas_CanvasTextField = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] =
    openfl__$internal_renderer_canvas_CanvasTextField;
  openfl__$internal_renderer_canvas_CanvasTextField.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasTextField",
  ];
  openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode =
    function (textEngine) {};
  openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function (
    textEngine
  ) {
    if (textEngine.__hiddenInput == null) {
      textEngine.__hiddenInput = window.document.createElement("input");
      var hiddenInput = textEngine.__hiddenInput;
      hiddenInput.type = "text";
      hiddenInput.style.position = "absolute";
      hiddenInput.style.opacity = "0";
      hiddenInput.style.color = "transparent";
      hiddenInput.style.left = "0px";
      hiddenInput.style.top = "50%";
      if (
        new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(
          window.navigator.userAgent
        )
      ) {
        hiddenInput.style.fontSize = "0px";
        hiddenInput.style.width = "0px";
        hiddenInput.style.height = "0px";
      } else {
        hiddenInput.style.width = "1px";
        hiddenInput.style.height = "1px";
      }
      hiddenInput.style.pointerEvents = "none";
      hiddenInput.style.zIndex = "-10000000";
      if (textEngine.maxChars > 0) {
        hiddenInput.maxLength = textEngine.maxChars;
      }
      window.document.body.appendChild(hiddenInput);
      hiddenInput.value = textEngine.text;
    }
  };
  openfl__$internal_renderer_canvas_CanvasTextField.render = function (
    textField,
    renderSession,
    transform
  ) {
    var textEngine = textField.__textEngine;
    var bounds = textEngine.bounds;
    var graphics = textField.__graphics;
    if (textField.__dirty) {
      textField.__updateLayout();
      if (graphics.__bounds == null) {
        graphics.__bounds = new openfl_geom_Rectangle();
      }
      graphics.__bounds.copyFrom(bounds);
    }
    graphics.__update();
    if (textField.__dirty || graphics.__dirty) {
      var width = graphics.__width;
      var height = graphics.__height;
      if (
        ((textEngine.text == null || textEngine.text == "") &&
          !textEngine.background &&
          !textEngine.border &&
          !textEngine.__hasFocus &&
          (textEngine.type != 1 || !textEngine.selectable)) ||
        ((textEngine.width <= 0 || textEngine.height <= 0) &&
          textEngine.autoSize != 2)
      ) {
        textField.__graphics.__canvas = null;
        textField.__graphics.__context = null;
        textField.__graphics.__bitmap = null;
        textField.__graphics.set___dirty(false);
        textField.__dirty = false;
      } else {
        if (textField.__graphics.__canvas == null) {
          textField.__graphics.__canvas =
            window.document.createElement("canvas");
          textField.__graphics.__context =
            textField.__graphics.__canvas.getContext("2d");
        }
        openfl__$internal_renderer_canvas_CanvasTextField.context =
          graphics.__context;
        var transform1 = graphics.__renderTransform;
        graphics.__canvas.width = width;
        graphics.__canvas.height = height;
        openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(
          transform1.a,
          transform1.b,
          transform1.c,
          transform1.d,
          transform1.tx,
          transform1.ty
        );
        if (
          openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null
        ) {
          openfl__$internal_renderer_canvas_CanvasTextField.clearRect =
            typeof navigator !== "undefined" &&
            typeof navigator["isCocoonJS"] !== "undefined";
        }
        if (openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
          openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(
            0,
            0,
            graphics.__canvas.width,
            graphics.__canvas.height
          );
        }
        if (
          (textEngine.text != null && textEngine.text != "") ||
          textEngine.__hasFocus
        ) {
          var text = textEngine.text;
          if (
            !renderSession.allowSmoothing ||
            (textEngine.antiAliasType == 0 && textEngine.sharpness == 400)
          ) {
            graphics.__context.mozImageSmoothingEnabled = false;
            graphics.__context.msImageSmoothingEnabled = false;
            graphics.__context.imageSmoothingEnabled = false;
          } else {
            graphics.__context.mozImageSmoothingEnabled = true;
            graphics.__context.msImageSmoothingEnabled = true;
            graphics.__context.imageSmoothingEnabled = true;
          }
          if (textEngine.border || textEngine.background) {
            openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
              0.5,
              0.5,
              bounds.width - 1,
              bounds.height - 1
            );
            if (textEngine.background) {
              var tmp = StringTools.hex(
                textEngine.backgroundColor & 16777215,
                6
              );
              openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                "#" + tmp;
              openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
            }
            if (textEngine.border) {
              openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
              var tmp1 = StringTools.hex(textEngine.borderColor & 16777215, 6);
              openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                "#" + tmp1;
              openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
            }
          }
          openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline =
            "top";
          openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign =
            "start";
          var scrollX = -textField.get_scrollH();
          var scrollY = 0.0;
          var _g1 = 0;
          var _g = textField.get_scrollV() - 1;
          while (_g1 < _g) {
            var i = _g1++;
            scrollY -= textEngine.lineHeights.get(i);
          }
          var advance;
          var offsetY = 0.0;
          var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)", "g").match(
            window.navigator.userAgent
          );
          var _g2 = 0;
          var _g11 = textEngine.layoutGroups;
          while (_g2 < _g11.get_length()) {
            var group = _g11.get(_g2);
            ++_g2;
            if (group.lineIndex < textField.get_scrollV() - 1) {
              continue;
            }
            if (
              group.lineIndex >
              textField.get_scrollV() + textEngine.bottomScrollV - 2
            ) {
              break;
            }
            openfl__$internal_renderer_canvas_CanvasTextField.context.font =
              openfl__$internal_text_TextEngine.getFont(group.format);
            var tmp2 = StringTools.hex(group.format.color & 16777215, 6);
            openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
              "#" + tmp2;
            if (applyHack) {
              offsetY = group.format.size * 0.185;
            }
            if (textField.__filters != null && textField.__filters.length > 0) {
              if (
                js_Boot.__instanceof(
                  textField.__filters[0],
                  openfl_filters_GlowFilter
                )
              ) {
                var glowFilter = textField.__filters[0];
                var cacheAlpha =
                  openfl__$internal_renderer_canvas_CanvasTextField.context
                    .globalAlpha;
                openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                  cacheAlpha * glowFilter.alpha;
                var tmp3 = StringTools.hex(glowFilter.color & 16777215, 6);
                openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                  "#" + tmp3;
                openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth =
                  Math.max(glowFilter.blurX, glowFilter.blurY);
                openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(
                  text.substring(group.startIndex, group.endIndex),
                  group.offsetX + scrollX,
                  group.offsetY + offsetY + scrollY
                );
                openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                  null;
                openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha =
                  cacheAlpha;
              }
            }
            openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
              text.substring(group.startIndex, group.endIndex),
              group.offsetX + scrollX,
              group.offsetY + offsetY + scrollY
            );
            if (textField.__caretIndex > -1 && textEngine.selectable) {
              if (textField.__selectionIndex == textField.__caretIndex) {
                if (
                  textField.__showCursor &&
                  group.startIndex <= textField.__caretIndex &&
                  group.endIndex >= textField.__caretIndex
                ) {
                  advance = 0.0;
                  var _g3 = 0;
                  var _g21 = textField.__caretIndex - group.startIndex;
                  while (_g3 < _g21) {
                    var i1 = _g3++;
                    if (group.advances.length <= i1) {
                      break;
                    }
                    advance += group.advances[i1];
                  }
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                    group.offsetX + advance,
                    group.offsetY,
                    1,
                    group.height
                  );
                }
              } else if (
                (group.startIndex <= textField.__caretIndex &&
                  group.endIndex >= textField.__caretIndex) ||
                (group.startIndex <= textField.__selectionIndex &&
                  group.endIndex >= textField.__selectionIndex) ||
                (group.startIndex > textField.__caretIndex &&
                  group.endIndex < textField.__selectionIndex) ||
                (group.startIndex > textField.__selectionIndex &&
                  group.endIndex < textField.__caretIndex)
              ) {
                var selectionStart =
                  Math.min(textField.__selectionIndex, textField.__caretIndex) |
                  0;
                var selectionEnd =
                  Math.max(textField.__selectionIndex, textField.__caretIndex) |
                  0;
                if (group.startIndex > selectionStart) {
                  selectionStart = group.startIndex;
                }
                if (group.endIndex < selectionEnd) {
                  selectionEnd = group.endIndex;
                }
                var start;
                var end;
                start = textField.getCharBoundaries(selectionStart);
                if (selectionEnd >= textEngine.text.length) {
                  end = textField.getCharBoundaries(textEngine.text.length - 1);
                  end.x += end.width + 2;
                } else {
                  end = textField.getCharBoundaries(selectionEnd);
                }
                if (start != null && end != null) {
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#000000";
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(
                    start.x,
                    start.y,
                    end.x - start.x,
                    group.height
                  );
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                    "#FFFFFF";
                  openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(
                    text.substring(selectionStart, selectionEnd),
                    scrollX + start.x,
                    group.offsetY + offsetY + scrollY
                  );
                }
              }
            }
          }
        } else {
          if (textEngine.border || textEngine.background) {
            if (textEngine.border) {
              openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                0.5,
                0.5,
                bounds.width - 1,
                bounds.height - 1
              );
            } else {
              openfl__$internal_renderer_canvas_CanvasTextField.context.rect(
                0,
                0,
                bounds.width,
                bounds.height
              );
            }
            if (textEngine.background) {
              var tmp4 = StringTools.hex(
                textEngine.backgroundColor & 16777215,
                6
              );
              openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle =
                "#" + tmp4;
              openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
            }
            if (textEngine.border) {
              openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
              openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap =
                "square";
              var tmp5 = StringTools.hex(textEngine.borderColor & 16777215, 6);
              openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
                "#" + tmp5;
              openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
            }
          }
          if (
            textField.__caretIndex > -1 &&
            textEngine.selectable &&
            textField.__showCursor
          ) {
            var scrollX1 = -textField.get_scrollH();
            var scrollY1 = 0.0;
            var _g12 = 0;
            var _g4 = textField.get_scrollV() - 1;
            while (_g12 < _g4) {
              var i2 = _g12++;
              scrollY1 -= textEngine.lineHeights.get(i2);
            }
            openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
            var tmp6 = StringTools.hex(
              textField.get_defaultTextFormat().color & 16777215,
              6
            );
            openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle =
              "#" + tmp6;
            openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(
              scrollX1 + 2.5,
              scrollY1 + 2.5
            );
            openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
            openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(
              scrollX1 + 2.5,
              scrollY1 +
                openfl__$internal_text_TextEngine.getFormatHeight(
                  textField.get_defaultTextFormat()
                ) -
                1
            );
            openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
            openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
          }
        }
        graphics.__bitmap = openfl_display_BitmapData.fromCanvas(
          textField.__graphics.__canvas
        );
        graphics.__visible = true;
        textField.__dirty = false;
        graphics.set___dirty(false);
      }
    }
  };
  var openfl__$internal_renderer_canvas_CanvasTilemap = function () {};
  $hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] =
    openfl__$internal_renderer_canvas_CanvasTilemap;
  openfl__$internal_renderer_canvas_CanvasTilemap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "canvas",
    "CanvasTilemap",
  ];
  openfl__$internal_renderer_canvas_CanvasTilemap.render = function (
    tilemap,
    renderSession
  ) {
    if (
      !tilemap.__renderable ||
      tilemap.__tiles.length == 0 ||
      tilemap.__worldAlpha <= 0
    ) {
      return;
    }
    var context = renderSession.context;
    renderSession.maskManager.pushObject(tilemap);
    var rect = openfl_geom_Rectangle.__temp;
    rect.setTo(0, 0, tilemap.__width, tilemap.__height);
    renderSession.maskManager.pushRect(rect, tilemap.__renderTransform);
    var transform = tilemap.__renderTransform;
    var roundPixels = renderSession.roundPixels;
    if (!renderSession.allowSmoothing || !tilemap.smoothing) {
      context.mozImageSmoothingEnabled = false;
      context.msImageSmoothingEnabled = false;
      context.imageSmoothingEnabled = false;
    }
    var defaultTileset = tilemap.tileset;
    var cacheBitmapData = null;
    var source = null;
    var tiles;
    var count;
    var tile;
    var alpha;
    var visible;
    var tileset;
    var tileData;
    var bitmapData;
    tiles = tilemap.__tiles;
    count = tiles.length;
    var tileTransform = openfl_geom_Matrix.__temp;
    var _g1 = 0;
    var _g = count;
    while (_g1 < _g) {
      var i = _g1++;
      tile = tiles[i];
      alpha = tile.alpha;
      visible = tile.visible;
      if (!visible || alpha <= 0) {
        continue;
      }
      if (tile.tileset != null) {
        tileset = tile.tileset;
      } else {
        tileset = defaultTileset;
      }
      if (tileset == null) {
        continue;
      }
      tileData = tileset.__data[tile.id];
      if (tileData == null) {
        continue;
      }
      bitmapData = tileset.bitmapData;
      if (bitmapData == null) {
        continue;
      }
      if (bitmapData != cacheBitmapData) {
        if (bitmapData.image.buffer.__srcImage == null) {
          lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmapData.image);
        }
        source = bitmapData.image.get_src();
        cacheBitmapData = bitmapData;
      }
      context.globalAlpha = tilemap.__worldAlpha * alpha;
      tileTransform.setTo(1, 0, 0, 1, -tile.originX, -tile.originY);
      tileTransform.concat(tile.matrix);
      tileTransform.concat(transform);
      if (roundPixels) {
        context.setTransform(
          tileTransform.a,
          tileTransform.b,
          tileTransform.c,
          tileTransform.d,
          tileTransform.tx | 0,
          tileTransform.ty | 0
        );
      } else {
        context.setTransform(
          tileTransform.a,
          tileTransform.b,
          tileTransform.c,
          tileTransform.d,
          tileTransform.tx,
          tileTransform.ty
        );
      }
      context.drawImage(
        source,
        tileData.x,
        tileData.y,
        tileData.width,
        tileData.height,
        0,
        0,
        tileData.width,
        tileData.height
      );
    }
    if (!renderSession.allowSmoothing || !tilemap.smoothing) {
      context.mozImageSmoothingEnabled = true;
      context.msImageSmoothingEnabled = true;
      context.imageSmoothingEnabled = true;
    }
    renderSession.maskManager.popRect();
    renderSession.maskManager.popObject(tilemap);
  };
  var openfl__$internal_renderer_console_ConsoleRenderer = function (
    stage,
    ctx
  ) {
    openfl__$internal_renderer_AbstractRenderer.call(this, stage);
    throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
  };
  $hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] =
    openfl__$internal_renderer_console_ConsoleRenderer;
  openfl__$internal_renderer_console_ConsoleRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "console",
    "ConsoleRenderer",
  ];
  openfl__$internal_renderer_console_ConsoleRenderer.__super__ =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(
    openfl__$internal_renderer_AbstractRenderer.prototype,
    {
      render: function () {},
      __class__: openfl__$internal_renderer_console_ConsoleRenderer,
    }
  );
  var openfl__$internal_renderer_dom_DOMBitmap = function () {};
  $hxClasses["openfl._internal.renderer.dom.DOMBitmap"] =
    openfl__$internal_renderer_dom_DOMBitmap;
  openfl__$internal_renderer_dom_DOMBitmap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMBitmap",
  ];
  openfl__$internal_renderer_dom_DOMBitmap.render = function (
    bitmap,
    renderSession
  ) {
    if (
      bitmap.stage != null &&
      bitmap.__worldVisible &&
      bitmap.__renderable &&
      bitmap.bitmapData != null &&
      bitmap.bitmapData.__isValid
    ) {
      renderSession.maskManager.pushObject(bitmap);
      if (bitmap.bitmapData.image.buffer.__srcImage != null) {
        openfl__$internal_renderer_dom_DOMBitmap.renderImage(
          bitmap,
          renderSession
        );
      } else {
        openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(
          bitmap,
          renderSession
        );
      }
      renderSession.maskManager.popObject(bitmap);
    } else {
      if (bitmap.__image != null) {
        renderSession.element.removeChild(bitmap.__image);
        bitmap.__image = null;
        bitmap.__style = null;
      }
      if (bitmap.__canvas != null) {
        renderSession.element.removeChild(bitmap.__canvas);
        bitmap.__canvas = null;
        bitmap.__style = null;
      }
    }
  };
  openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function (
    bitmap,
    renderSession
  ) {
    if (bitmap.__image != null) {
      renderSession.element.removeChild(bitmap.__image);
      bitmap.__image = null;
    }
    if (bitmap.__canvas == null) {
      bitmap.__canvas = window.document.createElement("canvas");
      bitmap.__context = bitmap.__canvas.getContext("2d");
      bitmap.__imageVersion = -1;
      if (!renderSession.allowSmoothing || !bitmap.smoothing) {
        bitmap.__context.mozImageSmoothingEnabled = false;
        bitmap.__context.msImageSmoothingEnabled = false;
        bitmap.__context.imageSmoothingEnabled = false;
      }
      openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
        bitmap,
        bitmap.__canvas,
        renderSession
      );
    }
    if (bitmap.__imageVersion != bitmap.bitmapData.image.version) {
      lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
        bitmap.bitmapData.image
      );
      bitmap.__canvas.width = bitmap.bitmapData.width;
      bitmap.__canvas.height = bitmap.bitmapData.height;
      bitmap.__context.drawImage(
        bitmap.bitmapData.image.buffer.__srcCanvas,
        0,
        0
      );
      bitmap.__imageVersion = bitmap.bitmapData.image.version;
    }
    openfl__$internal_renderer_dom_DOMRenderer.updateClip(
      bitmap,
      renderSession
    );
    openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
      bitmap,
      renderSession,
      true,
      true,
      true
    );
  };
  openfl__$internal_renderer_dom_DOMBitmap.renderImage = function (
    bitmap,
    renderSession
  ) {
    if (bitmap.__canvas != null) {
      renderSession.element.removeChild(bitmap.__canvas);
      bitmap.__canvas = null;
    }
    if (bitmap.__image == null) {
      bitmap.__image = window.document.createElement("img");
      bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
      openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
        bitmap,
        bitmap.__image,
        renderSession
      );
    }
    openfl__$internal_renderer_dom_DOMRenderer.updateClip(
      bitmap,
      renderSession
    );
    openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
      bitmap,
      renderSession,
      true,
      true,
      true
    );
  };
  var openfl__$internal_renderer_dom_DOMDisplayObject = function () {};
  $hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] =
    openfl__$internal_renderer_dom_DOMDisplayObject;
  openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMDisplayObject",
  ];
  openfl__$internal_renderer_dom_DOMDisplayObject.render = function (
    displayObject,
    renderSession
  ) {
    var tmp =
      displayObject.opaqueBackground != null &&
      displayObject.get_width() > 0 &&
      displayObject.get_height() > 0;
    var graphics = displayObject.__graphics;
    if (
      displayObject.stage != null &&
      displayObject.__worldVisible &&
      displayObject.__renderable &&
      graphics != null
    ) {
      openfl__$internal_renderer_canvas_CanvasGraphics.render(
        graphics,
        renderSession,
        displayObject.__renderTransform
      );
      if (
        graphics.__dirty ||
        displayObject.__worldAlphaChanged ||
        displayObject.__canvas != graphics.__canvas
      ) {
        if (graphics.__canvas != null) {
          if (displayObject.__canvas != graphics.__canvas) {
            if (displayObject.__canvas != null) {
              renderSession.element.removeChild(displayObject.__canvas);
            }
            displayObject.__canvas = graphics.__canvas;
            displayObject.__context = graphics.__context;
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
              displayObject,
              displayObject.__canvas,
              renderSession
            );
          }
        } else if (displayObject.__canvas != null) {
          renderSession.element.removeChild(displayObject.__canvas);
          displayObject.__canvas = null;
          displayObject.__style = null;
        }
      }
      if (displayObject.__canvas != null) {
        renderSession.maskManager.pushObject(displayObject);
        var cacheTransform = displayObject.__renderTransform;
        displayObject.__renderTransform = graphics.__worldTransform;
        if (graphics.__transformDirty) {
          graphics.__transformDirty = false;
          displayObject.__renderTransformChanged = true;
        }
        openfl__$internal_renderer_dom_DOMRenderer.updateClip(
          displayObject,
          renderSession
        );
        openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
          displayObject,
          renderSession,
          true,
          true,
          true
        );
        displayObject.__renderTransform = cacheTransform;
        renderSession.maskManager.popObject(displayObject);
      }
    } else if (displayObject.__canvas != null) {
      renderSession.element.removeChild(displayObject.__canvas);
      displayObject.__canvas = null;
      displayObject.__style = null;
    }
  };
  var openfl__$internal_renderer_dom_DOMMaskManager = function (renderSession) {
    openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
    this.clipRects = [];
    this.numClipRects = 0;
  };
  $hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] =
    openfl__$internal_renderer_dom_DOMMaskManager;
  openfl__$internal_renderer_dom_DOMMaskManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMMaskManager",
  ];
  openfl__$internal_renderer_dom_DOMMaskManager.__super__ =
    openfl__$internal_renderer_AbstractMaskManager;
  openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(
    openfl__$internal_renderer_AbstractMaskManager.prototype,
    {
      currentClipRect: null,
      clipRects: null,
      numClipRects: null,
      pushMask: function (mask) {
        this.pushRect(mask.getBounds(mask), mask.__getRenderTransform());
      },
      pushObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.pushRect(object.__scrollRect, object.__renderTransform);
        }
        if (object.__mask != null) {
          this.pushMask(object.__mask);
        }
      },
      pushRect: function (rect, transform) {
        if (this.numClipRects == this.clipRects.length) {
          this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
        }
        var clipRect = this.clipRects[this.numClipRects];
        rect.__transform(clipRect, transform);
        if (this.numClipRects > 0) {
          var parentClipRect = this.clipRects[this.numClipRects - 1];
          clipRect.__contract(
            parentClipRect.x,
            parentClipRect.y,
            parentClipRect.width,
            parentClipRect.height
          );
        }
        if (clipRect.height < 0) {
          clipRect.height = 0;
        }
        if (clipRect.width < 0) {
          clipRect.width = 0;
        }
        this.currentClipRect = clipRect;
        this.numClipRects++;
      },
      popMask: function () {
        this.popRect();
      },
      popObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (object.__mask != null) {
          this.popMask();
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.popRect();
        }
      },
      popRect: function () {
        if (this.numClipRects > 0) {
          this.numClipRects--;
          if (this.numClipRects > 0) {
            this.currentClipRect = this.clipRects[this.numClipRects - 1];
          } else {
            this.currentClipRect = null;
          }
        }
      },
      updateClip: function (displayObject) {
        if (this.currentClipRect == null) {
          displayObject.__worldClipChanged = displayObject.__worldClip != null;
          displayObject.__worldClip = null;
        } else {
          if (displayObject.__worldClip == null) {
            displayObject.__worldClip = new openfl_geom_Rectangle();
          }
          var clip = openfl_geom_Rectangle.__temp;
          var matrix = openfl_geom_Matrix.__temp;
          matrix.copyFrom(displayObject.__renderTransform);
          matrix.invert();
          this.currentClipRect.__transform(clip, matrix);
          if (clip.equals(displayObject.__worldClip)) {
            displayObject.__worldClipChanged = false;
          } else {
            displayObject.__worldClip.copyFrom(clip);
            displayObject.__worldClipChanged = true;
          }
        }
      },
      __class__: openfl__$internal_renderer_dom_DOMMaskManager,
    }
  );
  var openfl__$internal_renderer_dom_DOMRenderer = function (stage, element) {
    openfl__$internal_renderer_AbstractRenderer.call(this, stage);
  };
  $hxClasses["openfl._internal.renderer.dom.DOMRenderer"] =
    openfl__$internal_renderer_dom_DOMRenderer;
  openfl__$internal_renderer_dom_DOMRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMRenderer",
  ];
  openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function (
    displayObject,
    renderSession,
    setTransform,
    setAlpha,
    setClip
  ) {
    var style = displayObject.__style;
    if (setTransform && displayObject.__renderTransformChanged) {
      var _this = displayObject.__renderTransform;
      style.setProperty(
        renderSession.transformProperty,
        renderSession.roundPixels
          ? "matrix3d(" +
              _this.a +
              ", " +
              _this.b +
              ", 0, 0, " +
              _this.c +
              ", " +
              _this.d +
              ", 0, 0, 0, 0, 1, 0, " +
              (_this.tx | 0) +
              ", " +
              (_this.ty | 0) +
              ", 0, 1)"
          : "matrix3d(" +
              _this.a +
              ", " +
              _this.b +
              ", 0, 0, " +
              _this.c +
              ", " +
              _this.d +
              ", 0, 0, 0, 0, 1, 0, " +
              _this.tx +
              ", " +
              _this.ty +
              ", 0, 1)",
        null
      );
    }
    if (displayObject.__worldZ != ++renderSession.z) {
      displayObject.__worldZ = renderSession.z;
      style.setProperty(
        "z-index",
        displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,
        null
      );
    }
    if (setAlpha && displayObject.__worldAlphaChanged) {
      if (displayObject.__worldAlpha < 1) {
        style.setProperty(
          "opacity",
          displayObject.__worldAlpha == null
            ? "null"
            : "" + displayObject.__worldAlpha,
          null
        );
      } else {
        style.removeProperty("opacity");
      }
    }
    if (setClip && displayObject.__worldClipChanged) {
      if (displayObject.__worldClip == null) {
        style.removeProperty("clip");
      } else {
        var clip = displayObject.__worldClip;
        style.setProperty(
          "clip",
          "rect(" +
            clip.y +
            "px, " +
            clip.get_right() +
            "px, " +
            clip.get_bottom() +
            "px, " +
            clip.x +
            "px)",
          null
        );
      }
    }
  };
  openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function (
    displayObject,
    element,
    renderSession
  ) {
    var style = (displayObject.__style = element.style);
    style.setProperty("position", "absolute", null);
    style.setProperty("top", "0", null);
    style.setProperty("left", "0", null);
    style.setProperty(renderSession.transformOriginProperty, "0 0 0", null);
    renderSession.element.appendChild(element);
    displayObject.__worldAlphaChanged = true;
    displayObject.__renderTransformChanged = true;
    displayObject.__worldVisibleChanged = true;
    displayObject.__worldClipChanged = true;
    displayObject.__worldClip = null;
    displayObject.__worldZ = -1;
  };
  openfl__$internal_renderer_dom_DOMRenderer.updateClip = function (
    displayObject,
    renderSession
  ) {
    var maskManager = renderSession.maskManager;
    maskManager.updateClip(displayObject);
  };
  openfl__$internal_renderer_dom_DOMRenderer.__super__ =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(
    openfl__$internal_renderer_AbstractRenderer.prototype,
    {
      element: null,
      clear: function () {
        var _g = 0;
        var _g1 = this.stage.stage3Ds;
        while (_g < _g1.get_length()) {
          var stage3D = _g1.get(_g);
          ++_g;
          stage3D.__renderDOM(this.stage, this.renderSession);
        }
      },
      render: function () {
        this.renderSession.allowSmoothing = this.stage.quality != 2;
        if (!this.stage.__transparent) {
          this.element.style.background = this.stage.__colorString;
        } else {
          this.element.style.background = "none";
        }
        this.renderSession.z = 1;
        this.stage.__renderDOM(this.renderSession);
      },
      __class__: openfl__$internal_renderer_dom_DOMRenderer,
    }
  );
  var openfl__$internal_renderer_dom_DOMShape = function () {};
  $hxClasses["openfl._internal.renderer.dom.DOMShape"] =
    openfl__$internal_renderer_dom_DOMShape;
  openfl__$internal_renderer_dom_DOMShape.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMShape",
  ];
  openfl__$internal_renderer_dom_DOMShape.render = function (
    shape,
    renderSession
  ) {
    var graphics = shape.__graphics;
    if (
      shape.stage != null &&
      shape.__worldVisible &&
      shape.__renderable &&
      graphics != null
    ) {
      openfl__$internal_renderer_canvas_CanvasGraphics.render(
        graphics,
        renderSession,
        shape.__renderTransform
      );
      if (
        graphics.__dirty ||
        shape.__worldAlphaChanged ||
        shape.__canvas != graphics.__canvas
      ) {
        if (graphics.__canvas != null) {
          if (shape.__canvas != graphics.__canvas) {
            if (shape.__canvas != null) {
              renderSession.element.removeChild(shape.__canvas);
            }
            shape.__canvas = graphics.__canvas;
            shape.__context = graphics.__context;
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
              shape,
              shape.__canvas,
              renderSession
            );
          }
        } else if (shape.__canvas != null) {
          renderSession.element.removeChild(shape.__canvas);
          shape.__canvas = null;
          shape.__style = null;
        }
      }
      if (shape.__canvas != null) {
        renderSession.maskManager.pushObject(shape);
        var cacheTransform = shape.__renderTransform;
        shape.__renderTransform = graphics.__worldTransform;
        if (graphics.__transformDirty) {
          graphics.__transformDirty = false;
          shape.__renderTransformChanged = true;
        }
        openfl__$internal_renderer_dom_DOMRenderer.updateClip(
          shape,
          renderSession
        );
        openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
          shape,
          renderSession,
          true,
          true,
          true
        );
        shape.__renderTransform = cacheTransform;
        renderSession.maskManager.popObject(shape);
      }
    } else if (shape.__canvas != null) {
      renderSession.element.removeChild(shape.__canvas);
      shape.__canvas = null;
      shape.__style = null;
    }
  };
  var openfl__$internal_renderer_dom_DOMTextField = function () {};
  $hxClasses["openfl._internal.renderer.dom.DOMTextField"] =
    openfl__$internal_renderer_dom_DOMTextField;
  openfl__$internal_renderer_dom_DOMTextField.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMTextField",
  ];
  openfl__$internal_renderer_dom_DOMTextField.measureText = function (
    textField
  ) {
    var textEngine = textField.__textEngine;
    var div = textField.__div;
    if (div == null) {
      div = window.document.createElement("div");
      var _this_r = new RegExp("\n", "g".split("u").join(""));
      div.innerHTML = textEngine.text.replace(_this_r, "<br>");
      div.style.setProperty(
        "font",
        openfl__$internal_text_TextEngine.getFont(textField.__textFormat),
        null
      );
      div.style.setProperty("pointer-events", "none", null);
      div.style.position = "absolute";
      div.style.top = "110%";
      window.document.body.appendChild(div);
    }
    textEngine.__measuredWidth = div.clientWidth;
    if (textField.__div == null) {
      div.style.width = Std.string(textEngine.width - 4) + "px";
    }
    textEngine.__measuredHeight = div.clientHeight;
    if (textField.__div == null) {
      window.document.body.removeChild(div);
    }
  };
  openfl__$internal_renderer_dom_DOMTextField.render = function (
    textField,
    renderSession
  ) {
    var textEngine = textField.__textEngine;
    if (
      textField.stage != null &&
      textField.__worldVisible &&
      textField.__renderable
    ) {
      if (
        textField.__dirty ||
        textField.__renderTransformChanged ||
        textField.__div == null
      ) {
        if (
          textEngine.text != "" ||
          textEngine.background ||
          textEngine.border ||
          textEngine.type == 1
        ) {
          if (textField.__div == null) {
            textField.__div = window.document.createElement("div");
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
              textField,
              textField.__div,
              renderSession
            );
            textField.__style.setProperty("outline", "none", null);
            textField.__div.addEventListener(
              "input",
              function (event) {
                event.preventDefault();
                if (textField.get_htmlText() != textField.__div.innerHTML) {
                  textField.set_htmlText(textField.__div.innerHTML);
                  var textField1 = textField.__displayAsPassword;
                  textField.__dirty = false;
                }
              },
              true
            );
          }
          if (!textEngine.wordWrap) {
            textField.__style.setProperty("white-space", "nowrap", null);
          } else {
            textField.__style.setProperty("word-wrap", "break-word", null);
          }
          textField.__style.setProperty("overflow", "hidden", null);
          if (textEngine.selectable) {
            textField.__style.setProperty("cursor", "text", null);
            textField.__style.setProperty("-webkit-user-select", "text", null);
            textField.__style.setProperty("-moz-user-select", "text", null);
            textField.__style.setProperty("-ms-user-select", "text", null);
            textField.__style.setProperty("-o-user-select", "text", null);
          } else {
            textField.__style.setProperty("cursor", "inherit", null);
          }
          textField.__div.contentEditable = textEngine.type == 1;
          var style = textField.__style;
          if (textEngine.background) {
            style.setProperty(
              "background-color",
              "#" + StringTools.hex(textEngine.backgroundColor & 16777215, 6),
              null
            );
          } else {
            style.removeProperty("background-color");
          }
          var w = textEngine.width;
          var h = textEngine.height;
          var scale = 1;
          var unscaledSize = textField.__textFormat.size;
          var scaledSize = unscaledSize;
          var t = textField.__renderTransform;
          if (t.a != 1.0 || t.d != 1.0) {
            if (t.a == t.d) {
              scale = t.a;
              t.a = t.d = 1.0;
            } else if (t.a > t.d) {
              scale = t.a;
              t.d /= t.a;
              t.a = 1.0;
            } else {
              scale = t.d;
              t.a /= t.d;
              t.d = 1.0;
            }
            scaledSize *= scale;
            w = Math.ceil(w * scale);
            h = Math.ceil(h * scale);
          }
          textField.__textFormat.size = scaledSize;
          var text = textEngine.text;
          var adjustment = 0;
          if (!textField.__isHTML) {
            text = StringTools.htmlEscape(text);
          } else {
            var matchText = text;
            while (
              openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(
                matchText
              )
            ) {
              var fontText =
                openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(
                  0
                );
              var style1 = "";
              if (
                openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(
                  fontText
                )
              ) {
                style1 +=
                  "font-family:'" +
                  openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(
                    openfl__$internal_renderer_dom_DOMTextField.__regexFace
                  ) +
                  "';";
              }
              if (
                openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(
                  fontText
                )
              ) {
                style1 +=
                  "color:#" +
                  openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(
                    openfl__$internal_renderer_dom_DOMTextField.__regexColor
                  ) +
                  ";";
              }
              if (
                openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(
                  fontText
                )
              ) {
                var sizeAttr =
                  openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(
                    openfl__$internal_renderer_dom_DOMTextField.__regexSize
                  );
                var firstChar = HxOverrides.cca(sizeAttr, 0);
                var size;
                adjustment = parseFloat(sizeAttr) * scale;
                if (firstChar == 43 || firstChar == 45) {
                  size = scaledSize + adjustment;
                } else {
                  size = adjustment;
                }
                style1 += "font-size:" + size + "px;";
              }
              text = StringTools.replace(
                text,
                fontText,
                "<span style='" + style1 + "'>"
              );
              matchText =
                openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
            }
            text = text.replace(
              openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,
              "</span>"
            );
          }
          text = StringTools.replace(
            text,
            "<p ",
            "<p style='margin-top:0; margin-bottom:0;' "
          );
          var unscaledLeading = textField.__textFormat.leading;
          textField.__textFormat.leading += adjustment | 0;
          var _this_r = new RegExp("\r\n", "g".split("u").join(""));
          var tmp = text.replace(_this_r, "<br>");
          textField.__div.innerHTML = tmp;
          var _this_r1 = new RegExp("\n", "g".split("u").join(""));
          var tmp1 = textField.__div.innerHTML.replace(_this_r1, "<br>");
          textField.__div.innerHTML = tmp1;
          var _this_r2 = new RegExp("\r", "g".split("u").join(""));
          var tmp2 = textField.__div.innerHTML.replace(_this_r2, "<br>");
          textField.__div.innerHTML = tmp2;
          style.setProperty(
            "font",
            openfl__$internal_text_TextEngine.getFont(textField.__textFormat),
            null
          );
          textField.__textFormat.size = unscaledSize;
          textField.__textFormat.leading = unscaledLeading;
          style.setProperty("top", "3px", null);
          if (textEngine.border) {
            style.setProperty(
              "border",
              "solid 1px #" +
                StringTools.hex(textEngine.borderColor & 16777215, 6),
              null
            );
            textField.__renderTransform.translate(-1, -1);
            textField.__renderTransformChanged = true;
            textField.__transformDirty = true;
          } else if (style.border != "") {
            style.removeProperty("border");
            textField.__renderTransformChanged = true;
          }
          style.setProperty(
            "color",
            "#" + StringTools.hex(textField.__textFormat.color & 16777215, 6),
            null
          );
          style.setProperty("width", w + "px", null);
          style.setProperty("height", h + "px", null);
          var _g = textField.__textFormat.align;
          switch (_g) {
            case 0:
              style.setProperty("text-align", "center", null);
              break;
            case 4:
              style.setProperty("text-align", "right", null);
              break;
            default:
              style.setProperty("text-align", "left", null);
          }
          textField.__dirty = false;
        } else if (textField.__div != null) {
          renderSession.element.removeChild(textField.__div);
          textField.__div = null;
        }
      }
      if (textField.__div != null) {
        openfl__$internal_renderer_dom_DOMRenderer.updateClip(
          textField,
          renderSession
        );
        openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
          textField,
          renderSession,
          true,
          true,
          true
        );
      }
    } else if (textField.__div != null) {
      renderSession.element.removeChild(textField.__div);
      textField.__div = null;
      textField.__style = null;
    }
  };
  openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function (
    regex
  ) {
    if (regex.matched(2) != null) {
      return regex.matched(2);
    } else {
      return regex.matched(3);
    }
  };
  var openfl__$internal_renderer_dom_DOMTilemap = function () {};
  $hxClasses["openfl._internal.renderer.dom.DOMTilemap"] =
    openfl__$internal_renderer_dom_DOMTilemap;
  openfl__$internal_renderer_dom_DOMTilemap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "dom",
    "DOMTilemap",
  ];
  openfl__$internal_renderer_dom_DOMTilemap.render = function (
    tilemap,
    renderSession
  ) {
    if (
      tilemap.stage != null &&
      tilemap.__worldVisible &&
      tilemap.__renderable &&
      tilemap.__tiles.length > 0
    ) {
      if (tilemap.__canvas == null) {
        tilemap.__canvas = window.document.createElement("canvas");
        tilemap.__context = tilemap.__canvas.getContext("2d");
        openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
          tilemap,
          tilemap.__canvas,
          renderSession
        );
      }
      tilemap.__canvas.width = tilemap.__width;
      tilemap.__canvas.height = tilemap.__height;
      tilemap.__context.globalAlpha = tilemap.__worldAlpha;
      renderSession.context = tilemap.__context;
      if (
        !(
          !tilemap.__renderable ||
          tilemap.__tiles.length == 0 ||
          tilemap.__worldAlpha <= 0
        )
      ) {
        var context = renderSession.context;
        renderSession.maskManager.pushObject(tilemap);
        var rect = openfl_geom_Rectangle.__temp;
        rect.setTo(0, 0, tilemap.__width, tilemap.__height);
        renderSession.maskManager.pushRect(rect, tilemap.__renderTransform);
        var transform = tilemap.__renderTransform;
        var roundPixels = renderSession.roundPixels;
        if (!renderSession.allowSmoothing || !tilemap.smoothing) {
          context.mozImageSmoothingEnabled = false;
          context.msImageSmoothingEnabled = false;
          context.imageSmoothingEnabled = false;
        }
        var defaultTileset = tilemap.tileset;
        var cacheBitmapData = null;
        var source = null;
        var tiles;
        var count;
        var tile;
        var alpha;
        var visible;
        var tileset;
        var tileData;
        var bitmapData;
        tiles = tilemap.__tiles;
        count = tiles.length;
        var tileTransform = openfl_geom_Matrix.__temp;
        var _g1 = 0;
        var _g = count;
        while (_g1 < _g) {
          var i = _g1++;
          tile = tiles[i];
          alpha = tile.alpha;
          visible = tile.visible;
          if (!visible || alpha <= 0) {
            continue;
          }
          if (tile.tileset != null) {
            tileset = tile.tileset;
          } else {
            tileset = defaultTileset;
          }
          if (tileset == null) {
            continue;
          }
          tileData = tileset.__data[tile.id];
          if (tileData == null) {
            continue;
          }
          bitmapData = tileset.bitmapData;
          if (bitmapData == null) {
            continue;
          }
          if (bitmapData != cacheBitmapData) {
            if (bitmapData.image.buffer.__srcImage == null) {
              lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
                bitmapData.image
              );
            }
            source = bitmapData.image.get_src();
            cacheBitmapData = bitmapData;
          }
          context.globalAlpha = tilemap.__worldAlpha * alpha;
          tileTransform.setTo(1, 0, 0, 1, -tile.originX, -tile.originY);
          tileTransform.concat(tile.matrix);
          tileTransform.concat(transform);
          if (roundPixels) {
            context.setTransform(
              tileTransform.a,
              tileTransform.b,
              tileTransform.c,
              tileTransform.d,
              tileTransform.tx | 0,
              tileTransform.ty | 0
            );
          } else {
            context.setTransform(
              tileTransform.a,
              tileTransform.b,
              tileTransform.c,
              tileTransform.d,
              tileTransform.tx,
              tileTransform.ty
            );
          }
          context.drawImage(
            source,
            tileData.x,
            tileData.y,
            tileData.width,
            tileData.height,
            0,
            0,
            tileData.width,
            tileData.height
          );
        }
        if (!renderSession.allowSmoothing || !tilemap.smoothing) {
          context.mozImageSmoothingEnabled = true;
          context.msImageSmoothingEnabled = true;
          context.imageSmoothingEnabled = true;
        }
        renderSession.maskManager.popRect();
        renderSession.maskManager.popObject(tilemap);
      }
      renderSession.context = null;
      openfl__$internal_renderer_dom_DOMRenderer.updateClip(
        tilemap,
        renderSession
      );
      openfl__$internal_renderer_dom_DOMRenderer.applyStyle(
        tilemap,
        renderSession,
        true,
        false,
        true
      );
    } else if (tilemap.__canvas != null) {
      renderSession.element.removeChild(tilemap.__canvas);
      tilemap.__canvas = null;
      tilemap.__style = null;
    }
  };
  var openfl__$internal_renderer_flash_FlashRenderer = function () {};
  $hxClasses["openfl._internal.renderer.flash.FlashRenderer"] =
    openfl__$internal_renderer_flash_FlashRenderer;
  openfl__$internal_renderer_flash_FlashRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "flash",
    "FlashRenderer",
  ];
  openfl__$internal_renderer_flash_FlashRenderer.register = function (
    renderObject
  ) {
    if (openfl__$internal_renderer_flash_FlashRenderer.instances == null) {
      openfl__$internal_renderer_flash_FlashRenderer.instances =
        new haxe_ds_ObjectMap();
      openfl_Lib.current.stage.addEventListener(
        "enterFrame",
        openfl__$internal_renderer_flash_FlashRenderer.render,
        false,
        -2147483648
      );
    }
    openfl__$internal_renderer_flash_FlashRenderer.instances.set(
      renderObject,
      true
    );
  };
  openfl__$internal_renderer_flash_FlashRenderer.render = function (_) {
    var instance =
      openfl__$internal_renderer_flash_FlashRenderer.instances.keys();
    while (instance.hasNext()) {
      var instance1 = instance.next();
      instance1.__renderFlash();
    }
  };
  var openfl__$internal_renderer_flash_IDisplayObject = function () {};
  $hxClasses["openfl._internal.renderer.flash.IDisplayObject"] =
    openfl__$internal_renderer_flash_IDisplayObject;
  openfl__$internal_renderer_flash_IDisplayObject.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "flash",
    "IDisplayObject",
  ];
  openfl__$internal_renderer_flash_IDisplayObject.prototype = {
    __renderFlash: null,
    __class__: openfl__$internal_renderer_flash_IDisplayObject,
  };
  var openfl_geom_Rectangle = function (x, y, width, height) {
    if (height == null) {
      height = 0;
    }
    if (width == null) {
      width = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  };
  $hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
  openfl_geom_Rectangle.__name__ = ["openfl", "geom", "Rectangle"];
  openfl_geom_Rectangle.prototype = {
    height: null,
    width: null,
    x: null,
    y: null,
    clone: function () {
      return new openfl_geom_Rectangle(this.x, this.y, this.width, this.height);
    },
    contains: function (x, y) {
      if (x >= this.x && y >= this.y && x < this.get_right()) {
        return y < this.get_bottom();
      } else {
        return false;
      }
    },
    containsPoint: function (point) {
      return this.contains(point.x, point.y);
    },
    containsRect: function (rect) {
      if (rect.width <= 0 || rect.height <= 0) {
        if (
          rect.x > this.x &&
          rect.y > this.y &&
          rect.get_right() < this.get_right()
        ) {
          return rect.get_bottom() < this.get_bottom();
        } else {
          return false;
        }
      } else if (
        rect.x >= this.x &&
        rect.y >= this.y &&
        rect.get_right() <= this.get_right()
      ) {
        return rect.get_bottom() <= this.get_bottom();
      } else {
        return false;
      }
    },
    copyFrom: function (sourceRect) {
      this.x = sourceRect.x;
      this.y = sourceRect.y;
      this.width = sourceRect.width;
      this.height = sourceRect.height;
    },
    equals: function (toCompare) {
      if (toCompare == this) {
        return true;
      } else if (
        toCompare != null &&
        this.x == toCompare.x &&
        this.y == toCompare.y &&
        this.width == toCompare.width
      ) {
        return this.height == toCompare.height;
      } else {
        return false;
      }
    },
    inflate: function (dx, dy) {
      this.x -= dx;
      this.width += dx * 2;
      this.y -= dy;
      this.height += dy * 2;
    },
    inflatePoint: function (point) {
      this.inflate(point.x, point.y);
    },
    intersection: function (toIntersect) {
      var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
      var x1 =
        this.get_right() > toIntersect.get_right()
          ? toIntersect.get_right()
          : this.get_right();
      if (x1 <= x0) {
        return new openfl_geom_Rectangle();
      }
      var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
      var y1 =
        this.get_bottom() > toIntersect.get_bottom()
          ? toIntersect.get_bottom()
          : this.get_bottom();
      if (y1 <= y0) {
        return new openfl_geom_Rectangle();
      }
      return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
    },
    intersects: function (toIntersect) {
      var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
      var x1 =
        this.get_right() > toIntersect.get_right()
          ? toIntersect.get_right()
          : this.get_right();
      if (x1 <= x0) {
        return false;
      }
      var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
      var y1 =
        this.get_bottom() > toIntersect.get_bottom()
          ? toIntersect.get_bottom()
          : this.get_bottom();
      return y1 > y0;
    },
    isEmpty: function () {
      if (!(this.width <= 0)) {
        return this.height <= 0;
      } else {
        return true;
      }
    },
    offset: function (dx, dy) {
      this.x += dx;
      this.y += dy;
    },
    offsetPoint: function (point) {
      this.x += point.x;
      this.y += point.y;
    },
    setEmpty: function () {
      this.x = this.y = this.width = this.height = 0;
    },
    setTo: function (xa, ya, widtha, heighta) {
      this.x = xa;
      this.y = ya;
      this.width = widtha;
      this.height = heighta;
    },
    toString: function () {
      return (
        "(x=" +
        this.x +
        ", y=" +
        this.y +
        ", width=" +
        this.width +
        ", height=" +
        this.height +
        ")"
      );
    },
    union: function (toUnion) {
      if (this.width == 0 || this.height == 0) {
        return toUnion.clone();
      } else if (toUnion.width == 0 || toUnion.height == 0) {
        return this.clone();
      }
      var x0 = this.x > toUnion.x ? toUnion.x : this.x;
      var x1 =
        this.get_right() < toUnion.get_right()
          ? toUnion.get_right()
          : this.get_right();
      var y0 = this.y > toUnion.y ? toUnion.y : this.y;
      var y1 =
        this.get_bottom() < toUnion.get_bottom()
          ? toUnion.get_bottom()
          : this.get_bottom();
      return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
    },
    __contract: function (x, y, width, height) {
      if (this.width == 0 && this.height == 0) {
        return;
      }
      var offsetX = 0.0;
      var offsetY = 0.0;
      var offsetRight = 0.0;
      var offsetBottom = 0.0;
      if (this.x < x) {
        offsetX = x - this.x;
      }
      if (this.y < y) {
        offsetY = y - this.y;
      }
      if (this.get_right() > x + width) {
        offsetRight = x + width - this.get_right();
      }
      if (this.get_bottom() > y + height) {
        offsetBottom = y + height - this.get_bottom();
      }
      this.x += offsetX;
      this.y += offsetY;
      this.width += offsetRight - offsetX;
      this.height += offsetBottom - offsetY;
    },
    __expand: function (x, y, width, height) {
      if (this.width == 0 && this.height == 0) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        return;
      }
      var cacheRight = this.get_right();
      var cacheBottom = this.get_bottom();
      if (this.x > x) {
        this.x = x;
        this.width = cacheRight - x;
      }
      if (this.y > y) {
        this.y = y;
        this.height = cacheBottom - y;
      }
      if (cacheRight < x + width) {
        this.width = x + width - this.x;
      }
      if (cacheBottom < y + height) {
        this.height = y + height - this.y;
      }
    },
    __toLimeRectangle: function () {
      if (openfl_geom_Rectangle.__limeRectangle == null) {
        openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
      }
      openfl_geom_Rectangle.__limeRectangle.setTo(
        this.x,
        this.y,
        this.width,
        this.height
      );
      return openfl_geom_Rectangle.__limeRectangle;
    },
    __transform: function (rect, m) {
      var tx0 = m.a * this.x + m.c * this.y;
      var tx1 = tx0;
      var ty0 = m.b * this.x + m.d * this.y;
      var ty1 = ty0;
      var tx = m.a * (this.x + this.width) + m.c * this.y;
      var ty = m.b * (this.x + this.width) + m.d * this.y;
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
      ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      tx = m.a * this.x + m.c * (this.y + this.height);
      ty = m.b * this.x + m.d * (this.y + this.height);
      if (tx < tx0) {
        tx0 = tx;
      }
      if (ty < ty0) {
        ty0 = ty;
      }
      if (tx > tx1) {
        tx1 = tx;
      }
      if (ty > ty1) {
        ty1 = ty;
      }
      rect.setTo(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0);
    },
    get_bottom: function () {
      return this.y + this.height;
    },
    set_bottom: function (b) {
      this.height = b - this.y;
      return b;
    },
    get_bottomRight: function () {
      return new openfl_geom_Point(this.x + this.width, this.y + this.height);
    },
    set_bottomRight: function (p) {
      this.width = p.x - this.x;
      this.height = p.y - this.y;
      return p.clone();
    },
    get_left: function () {
      return this.x;
    },
    set_left: function (l) {
      this.width -= l - this.x;
      this.x = l;
      return l;
    },
    get_right: function () {
      return this.x + this.width;
    },
    set_right: function (r) {
      this.width = r - this.x;
      return r;
    },
    get_size: function () {
      return new openfl_geom_Point(this.width, this.height);
    },
    set_size: function (p) {
      this.width = p.x;
      this.height = p.y;
      return p.clone();
    },
    get_top: function () {
      return this.y;
    },
    set_top: function (t) {
      this.height -= t - this.y;
      this.y = t;
      return t;
    },
    get_topLeft: function () {
      return new openfl_geom_Point(this.x, this.y);
    },
    set_topLeft: function (p) {
      this.x = p.x;
      this.y = p.y;
      return p.clone();
    },
    __class__: openfl_geom_Rectangle,
    __properties__: {
      set_topLeft: "set_topLeft",
      get_topLeft: "get_topLeft",
      set_top: "set_top",
      get_top: "get_top",
      set_size: "set_size",
      get_size: "get_size",
      set_right: "set_right",
      get_right: "get_right",
      set_left: "set_left",
      get_left: "get_left",
      set_bottomRight: "set_bottomRight",
      get_bottomRight: "get_bottomRight",
      set_bottom: "set_bottom",
      get_bottom: "get_bottom",
    },
  };
  var openfl__$internal_renderer_flash_FlashTilemap = function () {};
  $hxClasses["openfl._internal.renderer.flash.FlashTilemap"] =
    openfl__$internal_renderer_flash_FlashTilemap;
  openfl__$internal_renderer_flash_FlashTilemap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "flash",
    "FlashTilemap",
  ];
  openfl__$internal_renderer_flash_FlashTilemap.render = function (tilemap) {};
  var openfl__$internal_renderer_opengl_GLBitmap = function () {};
  $hxClasses["openfl._internal.renderer.opengl.GLBitmap"] =
    openfl__$internal_renderer_opengl_GLBitmap;
  openfl__$internal_renderer_opengl_GLBitmap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLBitmap",
  ];
  openfl__$internal_renderer_opengl_GLBitmap.render = function (
    bitmap,
    renderSession
  ) {
    if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
      return;
    }
    if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
      var renderer = renderSession.renderer;
      var gl = renderSession.gl;
      renderSession.blendModeManager.setBlendMode(bitmap.get_blendMode());
      renderSession.maskManager.pushObject(bitmap);
      var shader = renderSession.filterManager.pushObject(bitmap);
      shader.get_data().uImage0.input = bitmap.bitmapData;
      var tmp =
        renderSession.allowSmoothing &&
        (bitmap.smoothing || renderSession.upscaled);
      shader.get_data().uImage0.smoothing = tmp;
      shader.get_data().uMatrix.value = renderer.getMatrix(
        bitmap.__renderTransform
      );
      renderSession.shaderManager.setShader(shader);
      var target = gl.ARRAY_BUFFER;
      var buffer = bitmap.bitmapData.getBuffer(gl, bitmap.__worldAlpha);
      gl.__context.bindBuffer(target, buffer);
      var index = shader.get_data().aPosition.index;
      var type = gl.FLOAT;
      var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
      gl.__context.vertexAttribPointer(index, 3, type, false, 24, offset);
      var index1 = shader.get_data().aTexCoord.index;
      var type1 = gl.FLOAT;
      var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
      gl.__context.vertexAttribPointer(index1, 2, type1, false, 24, offset1);
      var index2 = shader.get_data().aAlpha.index;
      var type2 = gl.FLOAT;
      var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
      gl.__context.vertexAttribPointer(index2, 1, type2, false, 24, offset2);
      gl.__context.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
      renderSession.filterManager.popObject(bitmap);
      renderSession.maskManager.popObject(bitmap);
    }
  };
  var openfl__$internal_renderer_opengl_GLBlendModeManager = function (gl) {
    openfl__$internal_renderer_AbstractBlendModeManager.call(this);
    this.gl = gl;
    this.setBlendMode(10);
    gl.__context.enable(gl.BLEND);
  };
  $hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] =
    openfl__$internal_renderer_opengl_GLBlendModeManager;
  openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLBlendModeManager",
  ];
  openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ =
    openfl__$internal_renderer_AbstractBlendModeManager;
  openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(
    openfl__$internal_renderer_AbstractBlendModeManager.prototype,
    {
      currentBlendMode: null,
      gl: null,
      setBlendMode: function (blendMode) {
        if (this.currentBlendMode == blendMode) {
          return;
        }
        this.currentBlendMode = blendMode;
        switch (blendMode) {
          case 0:
            this.gl.__context.blendEquation(this.gl.FUNC_ADD);
            this.gl.__context.blendFunc(this.gl.ONE, this.gl.ONE);
            break;
          case 9:
            this.gl.__context.blendEquation(this.gl.FUNC_ADD);
            this.gl.__context.blendFunc(
              this.gl.DST_COLOR,
              this.gl.ONE_MINUS_SRC_ALPHA
            );
            break;
          case 12:
            this.gl.__context.blendEquation(this.gl.FUNC_ADD);
            this.gl.__context.blendFunc(
              this.gl.ONE,
              this.gl.ONE_MINUS_SRC_COLOR
            );
            break;
          case 14:
            this.gl.__context.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
            this.gl.__context.blendFunc(this.gl.ONE, this.gl.ONE);
            break;
          default:
            this.gl.__context.blendEquation(this.gl.FUNC_ADD);
            this.gl.__context.blendFunc(
              this.gl.ONE,
              this.gl.ONE_MINUS_SRC_ALPHA
            );
        }
      },
      __class__: openfl__$internal_renderer_opengl_GLBlendModeManager,
    }
  );
  var openfl__$internal_renderer_opengl_GLDisplayObject = function () {};
  $hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] =
    openfl__$internal_renderer_opengl_GLDisplayObject;
  openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLDisplayObject",
  ];
  openfl__$internal_renderer_opengl_GLDisplayObject.render = function (
    displayObject,
    renderSession
  ) {
    if (
      displayObject.opaqueBackground == null &&
      displayObject.__graphics == null
    ) {
      return;
    }
    if (!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
      return;
    }
    if (
      displayObject.opaqueBackground != null &&
      displayObject.get_width() > 0 &&
      displayObject.get_height() > 0
    ) {
      renderSession.maskManager.pushObject(displayObject);
      var gl = renderSession.gl;
      var rect = openfl_geom_Rectangle.__temp;
      rect.setTo(0, 0, displayObject.get_width(), displayObject.get_height());
      renderSession.maskManager.pushRect(rect, displayObject.__renderTransform);
      var color = displayObject.opaqueBackground;
      gl.__context.clearColor(
        ((color >>> 16) & 255) / 255,
        ((color >>> 8) & 255) / 255,
        (color & 255) / 255,
        1
      );
      gl.__context.clear(gl.COLOR_BUFFER_BIT);
      renderSession.maskManager.popRect();
      renderSession.maskManager.popObject(displayObject);
    }
    if (displayObject.__graphics != null) {
      if (!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
        var graphics = displayObject.__graphics;
        if (graphics != null) {
          openfl__$internal_renderer_canvas_CanvasGraphics.render(
            graphics,
            renderSession,
            displayObject.__renderTransform
          );
          var bounds = graphics.__bounds;
          if (graphics.__bitmap != null && graphics.__visible) {
            var renderer = renderSession.renderer;
            var gl1 = renderSession.gl;
            renderSession.blendModeManager.setBlendMode(
              displayObject.get_blendMode()
            );
            renderSession.maskManager.pushObject(displayObject);
            var shader = renderSession.filterManager.pushObject(displayObject);
            shader.get_data().uImage0.input = graphics.__bitmap;
            shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
            shader.get_data().uMatrix.value = renderer.getMatrix(
              graphics.__worldTransform
            );
            renderSession.shaderManager.setShader(shader);
            var target = gl1.ARRAY_BUFFER;
            var buffer = graphics.__bitmap.getBuffer(
              gl1,
              displayObject.__worldAlpha
            );
            gl1.__context.bindBuffer(target, buffer);
            var index = shader.get_data().aPosition.index;
            var type = gl1.FLOAT;
            var offset =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
            gl1.__context.vertexAttribPointer(
              index,
              3,
              type,
              false,
              24,
              offset
            );
            var index1 = shader.get_data().aTexCoord.index;
            var type1 = gl1.FLOAT;
            var offset1 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
            gl1.__context.vertexAttribPointer(
              index1,
              2,
              type1,
              false,
              24,
              offset1
            );
            var index2 = shader.get_data().aAlpha.index;
            var type2 = gl1.FLOAT;
            var offset2 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
            gl1.__context.vertexAttribPointer(
              index2,
              1,
              type2,
              false,
              24,
              offset2
            );
            gl1.__context.drawArrays(gl1.TRIANGLE_STRIP, 0, 4);
            renderSession.filterManager.popObject(displayObject);
            renderSession.maskManager.popObject(displayObject);
          }
        }
      }
    }
  };
  var openfl__$internal_renderer_opengl_GLFilterManager = function (
    renderer,
    renderSession
  ) {
    openfl__$internal_renderer_AbstractFilterManager.call(this, renderSession);
    this.renderer = renderer;
    this.gl = renderSession.gl;
    this.filterDepth = 0;
    this.matrix = new openfl_geom_Matrix();
  };
  $hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] =
    openfl__$internal_renderer_opengl_GLFilterManager;
  openfl__$internal_renderer_opengl_GLFilterManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLFilterManager",
  ];
  openfl__$internal_renderer_opengl_GLFilterManager.__super__ =
    openfl__$internal_renderer_AbstractFilterManager;
  openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(
    openfl__$internal_renderer_AbstractFilterManager.prototype,
    {
      filterDepth: null,
      gl: null,
      matrix: null,
      renderer: null,
      pushObject: function (object) {
        if (object.__filters != null && object.__filters.length > 0) {
          if (
            js_Boot.__instanceof(
              object.__filters[0],
              openfl_filters_GlowFilter
            ) &&
            js_Boot.__instanceof(object, openfl_text_TextField)
          ) {
            return this.renderSession.shaderManager.defaultShader;
          }
          if (
            object.__filters.length == 1 &&
            object.__filters[0].__numPasses == 0
          ) {
            return object.__filters[0].__initShader(this.renderSession, 0);
          } else {
            this.renderer.getRenderTarget(true);
          }
          this.filterDepth++;
        }
        return this.renderSession.shaderManager.defaultShader;
      },
      popObject: function (object) {
        if (object.__filters != null && object.__filters.length > 0) {
          if (
            js_Boot.__instanceof(
              object.__filters[0],
              openfl_filters_GlowFilter
            ) &&
            js_Boot.__instanceof(object, openfl_text_TextField)
          ) {
            return;
          }
          var numPasses = 0;
          if (
            object.__filters.length > 1 ||
            object.__filters[0].__numPasses > 0
          ) {
            numPasses = object.__filters.length;
            var _g = 0;
            var _g1 = object.__filters;
            while (_g < _g1.length) {
              var filter = _g1[_g];
              ++_g;
              numPasses += filter.__numPasses > 0 ? filter.__numPasses - 1 : 0;
            }
          }
          if (numPasses > 0) {
            var currentTarget;
            var shader;
            var _g2 = 0;
            var _g11 = object.__filters;
            while (_g2 < _g11.length) {
              var filter1 = _g11[_g2];
              ++_g2;
              if (filter1.__numPasses > 0) {
                var _g3 = 0;
                var _g21 = filter1.__numPasses;
                while (_g3 < _g21) {
                  var i = _g3++;
                  currentTarget = this.renderer.currentRenderTarget;
                  this.renderer.getRenderTarget(true);
                  shader = filter1.__initShader(this.renderSession, i);
                  this.renderPass(currentTarget, shader);
                }
              } else {
                currentTarget = this.renderer.currentRenderTarget;
                this.renderer.getRenderTarget(true);
                shader = filter1.__initShader(this.renderSession, 0);
                this.renderPass(currentTarget, shader);
              }
              this.filterDepth--;
              this.renderer.getRenderTarget(this.filterDepth > 0);
              this.renderPass(
                this.renderer.currentRenderTarget,
                this.renderSession.shaderManager.defaultShader
              );
            }
          } else {
            this.filterDepth--;
          }
        }
      },
      renderPass: function (target, shader) {
        shader.get_data().uImage0.input = target;
        var tmp =
          this.renderSession.allowSmoothing && this.renderSession.upscaled;
        shader.get_data().uImage0.smoothing = tmp;
        shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
        this.renderSession.shaderManager.setShader(shader);
        var _this = this.gl;
        var target1 = this.gl.ARRAY_BUFFER;
        var buffer = target.getBuffer(this.gl, 1);
        _this.__context.bindBuffer(target1, buffer);
        var _this1 = this.gl;
        var index = shader.get_data().aPosition.index;
        var type = this.gl.FLOAT;
        var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
        _this1.__context.vertexAttribPointer(index, 3, type, false, 24, offset);
        var _this2 = this.gl;
        var index1 = shader.get_data().aTexCoord.index;
        var type1 = this.gl.FLOAT;
        var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
        _this2.__context.vertexAttribPointer(
          index1,
          2,
          type1,
          false,
          24,
          offset1
        );
        var _this3 = this.gl;
        var index2 = shader.get_data().aAlpha.index;
        var type2 = this.gl.FLOAT;
        var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
        _this3.__context.vertexAttribPointer(
          index2,
          1,
          type2,
          false,
          24,
          offset2
        );
        this.gl.__context.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);
      },
      __class__: openfl__$internal_renderer_opengl_GLFilterManager,
    }
  );
  var openfl__$internal_renderer_opengl_GLMaskManager = function (
    renderSession
  ) {
    openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
    this.gl = renderSession.gl;
    this.clipRects = [];
    this.numClipRects = 0;
    this.tempRect = new openfl_geom_Rectangle();
  };
  $hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] =
    openfl__$internal_renderer_opengl_GLMaskManager;
  openfl__$internal_renderer_opengl_GLMaskManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLMaskManager",
  ];
  openfl__$internal_renderer_opengl_GLMaskManager.__super__ =
    openfl__$internal_renderer_AbstractMaskManager;
  openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(
    openfl__$internal_renderer_AbstractMaskManager.prototype,
    {
      clipRects: null,
      gl: null,
      numClipRects: null,
      tempRect: null,
      pushMask: function (mask) {
        this.pushRect(mask.getBounds(mask), mask.__getRenderTransform());
      },
      pushObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.pushRect(object.__scrollRect, object.__renderTransform);
        }
        if (object.__mask != null) {
          this.pushMask(object.__mask);
        }
      },
      pushRect: function (rect, transform) {
        var stage = openfl_Lib.current.stage;
        if (this.numClipRects == this.clipRects.length) {
          this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
        }
        var clipRect = this.clipRects[this.numClipRects];
        rect.__transform(clipRect, transform);
        if (this.numClipRects > 0) {
          var parentClipRect = this.clipRects[this.numClipRects - 1];
          clipRect.__contract(
            parentClipRect.x,
            parentClipRect.y,
            parentClipRect.width,
            parentClipRect.height
          );
        }
        if (clipRect.height < 0) {
          clipRect.height = 0;
        }
        if (clipRect.width < 0) {
          clipRect.width = 0;
        }
        this.scissorRect(clipRect);
        this.numClipRects++;
      },
      popMask: function () {
        this.popRect();
      },
      popObject: function (object, handleScrollRect) {
        if (handleScrollRect == null) {
          handleScrollRect = true;
        }
        if (object.__mask != null) {
          this.popMask();
        }
        if (handleScrollRect && object.__scrollRect != null) {
          this.popRect();
        }
      },
      popRect: function () {
        if (this.numClipRects > 0) {
          this.numClipRects--;
          if (this.numClipRects > 0) {
            this.scissorRect(this.clipRects[this.numClipRects - 1]);
          } else {
            this.scissorRect();
          }
        }
      },
      scissorRect: function (rect) {
        if (rect != null) {
          var renderer = this.renderSession.renderer;
          this.gl.__context.enable(this.gl.SCISSOR_TEST);
          var clipRect = this.tempRect;
          rect.__transform(clipRect, renderer.displayMatrix);
          var x = Math.floor(clipRect.x);
          var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
          var width = Math.ceil(clipRect.width);
          var height = Math.ceil(clipRect.height);
          if (width < 0) {
            width = 0;
          }
          if (height < 0) {
            height = 0;
          }
          this.gl.__context.scissor(x, y, width, height);
        } else {
          this.gl.__context.disable(this.gl.SCISSOR_TEST);
        }
      },
      __class__: openfl__$internal_renderer_opengl_GLMaskManager,
    }
  );
  var openfl__$internal_renderer_opengl_GLRenderer = function (
    stage,
    gl,
    flipped
  ) {
    if (flipped == null) {
      flipped = true;
    }
    openfl__$internal_renderer_AbstractRenderer.call(this, stage);
    this.gl = gl;
    this.flipped = flipped;
    this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
    this.values = [];
    this.renderSession = new openfl__$internal_renderer_RenderSession();
    this.renderSession.gl = gl;
    this.renderSession.renderer = this;
    this.renderSession.blendModeManager =
      new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
    this.renderSession.filterManager =
      new openfl__$internal_renderer_opengl_GLFilterManager(
        this,
        this.renderSession
      );
    this.renderSession.shaderManager =
      new openfl__$internal_renderer_opengl_GLShaderManager(gl);
    this.renderSession.maskManager =
      new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
    if (stage.window != null) {
      if (stage.stage3Ds.get(0).context3D == null) {
        stage.stage3Ds.get(0).__createContext(stage, this.renderSession);
      }
      this.resize(
        Math.ceil(stage.window.__width * stage.window.__scale),
        Math.ceil(stage.window.__height * stage.window.__scale)
      );
    }
  };
  $hxClasses["openfl._internal.renderer.opengl.GLRenderer"] =
    openfl__$internal_renderer_opengl_GLRenderer;
  openfl__$internal_renderer_opengl_GLRenderer.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLRenderer",
  ];
  openfl__$internal_renderer_opengl_GLRenderer.__super__ =
    openfl__$internal_renderer_AbstractRenderer;
  openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(
    openfl__$internal_renderer_AbstractRenderer.prototype,
    {
      projection: null,
      projectionFlipped: null,
      currentRenderTarget: null,
      displayHeight: null,
      displayMatrix: null,
      displayWidth: null,
      flipped: null,
      gl: null,
      matrix: null,
      renderTargetA: null,
      renderTargetB: null,
      offsetX: null,
      offsetY: null,
      values: null,
      clear: function () {
        if (this.stage.__transparent) {
          this.gl.__context.clearColor(0, 0, 0, 0);
        } else {
          this.gl.__context.clearColor(
            this.stage.__colorSplit[0],
            this.stage.__colorSplit[1],
            this.stage.__colorSplit[2],
            1
          );
        }
        this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
        var _g = 0;
        var _g1 = this.stage.stage3Ds;
        while (_g < _g1.get_length()) {
          var stage3D = _g1.get(_g);
          ++_g;
          stage3D.__renderGL(this.stage, this.renderSession);
        }
      },
      getCacheObject: function () {},
      getMatrix: function (transform) {
        var _matrix = openfl_geom_Matrix.__temp;
        _matrix.copyFrom(transform);
        _matrix.concat(this.displayMatrix);
        if (this.renderSession.roundPixels) {
          _matrix.tx = Math.round(_matrix.tx);
          _matrix.ty = Math.round(_matrix.ty);
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 0, _matrix.a);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 1, _matrix.b);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 4, _matrix.c);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 5, _matrix.d);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 12, _matrix.tx);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix, 13, _matrix.ty);
        lime_math__$Matrix4_Matrix4_$Impl_$.append(
          this.matrix,
          this.flipped ? this.projectionFlipped : this.projection
        );
        var _g = 0;
        while (_g < 16) {
          var i = _g++;
          this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(
            this.matrix,
            i
          );
        }
        return this.values;
      },
      getRenderTarget: function (framebuffer) {
        if (framebuffer) {
          if (this.renderTargetA == null) {
            this.renderTargetA = openfl_display_BitmapData.fromTexture(
              this.stage.stage3Ds
                .get(0)
                .context3D.createRectangleTexture(
                  this.width,
                  this.height,
                  1,
                  true
                )
            );
            var _this = this.gl;
            var target = this.gl.TEXTURE_2D;
            var texture = this.renderTargetA.getTexture(this.gl);
            _this.__context.bindTexture(target, texture);
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_S,
              this.gl.CLAMP_TO_EDGE
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_T,
              this.gl.CLAMP_TO_EDGE
            );
          }
          if (this.renderTargetB == null) {
            this.renderTargetB = openfl_display_BitmapData.fromTexture(
              this.stage.stage3Ds
                .get(0)
                .context3D.createRectangleTexture(
                  this.width,
                  this.height,
                  1,
                  true
                )
            );
            var _this1 = this.gl;
            var target1 = this.gl.TEXTURE_2D;
            var texture1 = this.renderTargetB.getTexture(this.gl);
            _this1.__context.bindTexture(target1, texture1);
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_S,
              this.gl.CLAMP_TO_EDGE
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_T,
              this.gl.CLAMP_TO_EDGE
            );
          }
          if (this.currentRenderTarget == this.renderTargetA) {
            this.currentRenderTarget = this.renderTargetB;
          } else {
            this.currentRenderTarget = this.renderTargetA;
          }
          var _this2 = this.gl;
          var target2 = this.gl.FRAMEBUFFER;
          var framebuffer1 = this.currentRenderTarget.__getFramebuffer(this.gl);
          _this2.__context.bindFramebuffer(target2, framebuffer1);
          this.gl.__context.viewport(0, 0, this.width, this.height);
          this.gl.__context.clearColor(0, 0, 0, 0);
          this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
          this.flipped = false;
        } else {
          this.gl.__context.bindFramebuffer(this.gl.FRAMEBUFFER, null);
          this.flipped = true;
        }
      },
      render: function () {
        this.gl.__context.viewport(
          this.offsetX,
          this.offsetY,
          this.displayWidth,
          this.displayHeight
        );
        this.renderSession.allowSmoothing = this.stage.quality != 2;
        this.renderSession.upscaled =
          this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
        this.stage.__renderGL(this.renderSession);
        if (this.offsetX > 0 || this.offsetY > 0) {
          this.gl.__context.clearColor(0, 0, 0, 1);
          this.gl.__context.enable(this.gl.SCISSOR_TEST);
          if (this.offsetX > 0) {
            this.gl.__context.scissor(0, 0, this.offsetX, this.height);
            this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
            this.gl.__context.scissor(
              this.offsetX + this.displayWidth,
              0,
              this.width,
              this.height
            );
            this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
          }
          if (this.offsetY > 0) {
            this.gl.__context.scissor(0, 0, this.width, this.offsetY);
            this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
            this.gl.__context.scissor(
              0,
              this.offsetY + this.displayHeight,
              this.width,
              this.height
            );
            this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
          }
          this.gl.__context.disable(this.gl.SCISSOR_TEST);
        }
      },
      resize: function (width, height) {
        openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(
          this,
          width,
          height
        );
        if (width > 0 && height > 0) {
          if (
            this.renderTargetA != null &&
            (this.renderTargetA.width != width ||
              this.renderTargetA.height != height)
          ) {
            this.renderTargetA = openfl_display_BitmapData.fromTexture(
              this.stage.stage3Ds
                .get(0)
                .context3D.createRectangleTexture(width, height, 1, true)
            );
            var _this = this.gl;
            var target = this.gl.TEXTURE_2D;
            var texture = this.renderTargetA.getTexture(this.gl);
            _this.__context.bindTexture(target, texture);
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_S,
              this.gl.CLAMP_TO_EDGE
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_T,
              this.gl.CLAMP_TO_EDGE
            );
          }
          if (
            this.renderTargetB != null &&
            (this.renderTargetB.width != width ||
              this.renderTargetB.height != height)
          ) {
            this.renderTargetB = openfl_display_BitmapData.fromTexture(
              this.stage.stage3Ds
                .get(0)
                .context3D.createRectangleTexture(width, height, 1, true)
            );
            var _this1 = this.gl;
            var target1 = this.gl.TEXTURE_2D;
            var texture1 = this.renderTargetB.getTexture(this.gl);
            _this1.__context.bindTexture(target1, texture1);
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_S,
              this.gl.CLAMP_TO_EDGE
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_WRAP_T,
              this.gl.CLAMP_TO_EDGE
            );
          }
        }
        this.displayMatrix = this.stage.__displayMatrix;
        var _this2 = this.displayMatrix;
        this.offsetX = Math.round(0 * _this2.a + 0 * _this2.c + _this2.tx);
        var _this3 = this.displayMatrix;
        this.offsetY = Math.round(0 * _this3.b + 0 * _this3.d + _this3.ty);
        var _this4 = this.displayMatrix;
        this.displayWidth = Math.round(
          this.stage.stageWidth * _this4.a +
            0 * _this4.c +
            _this4.tx -
            this.offsetX
        );
        var _this5 = this.displayMatrix;
        this.displayHeight = Math.round(
          0 * _this5.b +
            this.stage.stageHeight * _this5.d +
            _this5.ty -
            this.offsetY
        );
        this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(
          this.offsetX,
          this.displayWidth + this.offsetX,
          this.offsetY,
          this.displayHeight + this.offsetY,
          -1000,
          1000
        );
        this.projectionFlipped =
          lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(
            this.offsetX,
            this.displayWidth + this.offsetX,
            this.displayHeight + this.offsetY,
            this.offsetY,
            -1000,
            1000
          );
      },
      __class__: openfl__$internal_renderer_opengl_GLRenderer,
    }
  );
  var openfl__$internal_renderer_opengl_GLShaderManager = function (gl) {
    openfl__$internal_renderer_AbstractShaderManager.call(this);
    this.gl = gl;
    this.defaultShader = new openfl_display_Shader();
    this.defaultShader.gl = gl;
    this.defaultShader.__init();
  };
  $hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] =
    openfl__$internal_renderer_opengl_GLShaderManager;
  openfl__$internal_renderer_opengl_GLShaderManager.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLShaderManager",
  ];
  openfl__$internal_renderer_opengl_GLShaderManager.__super__ =
    openfl__$internal_renderer_AbstractShaderManager;
  openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(
    openfl__$internal_renderer_AbstractShaderManager.prototype,
    {
      gl: null,
      setShader: function (shader) {
        if (this.currentShader == shader) {
          if (this.currentShader != null) {
            this.currentShader.__update();
          }
          return;
        }
        if (this.currentShader != null) {
          this.currentShader.__disable();
        }
        if (shader == null) {
          this.currentShader = null;
          this.gl.__context.useProgram(null);
          return;
        }
        this.currentShader = shader;
        if (this.currentShader.gl == null) {
          this.currentShader.gl = this.gl;
          this.currentShader.__init();
        }
        this.gl.__context.useProgram(shader.glProgram);
        this.currentShader.__enable();
        this.currentShader.__update();
      },
      __class__: openfl__$internal_renderer_opengl_GLShaderManager,
    }
  );
  var openfl__$internal_renderer_opengl_GLShape = function () {};
  $hxClasses["openfl._internal.renderer.opengl.GLShape"] =
    openfl__$internal_renderer_opengl_GLShape;
  openfl__$internal_renderer_opengl_GLShape.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLShape",
  ];
  openfl__$internal_renderer_opengl_GLShape.render = function (
    shape,
    renderSession
  ) {
    if (!shape.__renderable || shape.__worldAlpha <= 0) {
      return;
    }
    var graphics = shape.__graphics;
    if (graphics != null) {
      openfl__$internal_renderer_canvas_CanvasGraphics.render(
        graphics,
        renderSession,
        shape.__renderTransform
      );
      var bounds = graphics.__bounds;
      if (graphics.__bitmap != null && graphics.__visible) {
        var renderer = renderSession.renderer;
        var gl = renderSession.gl;
        renderSession.blendModeManager.setBlendMode(shape.get_blendMode());
        renderSession.maskManager.pushObject(shape);
        var shader = renderSession.filterManager.pushObject(shape);
        shader.get_data().uImage0.input = graphics.__bitmap;
        shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
        shader.get_data().uMatrix.value = renderer.getMatrix(
          graphics.__worldTransform
        );
        renderSession.shaderManager.setShader(shader);
        var target = gl.ARRAY_BUFFER;
        var buffer = graphics.__bitmap.getBuffer(gl, shape.__worldAlpha);
        gl.__context.bindBuffer(target, buffer);
        var index = shader.get_data().aPosition.index;
        var type = gl.FLOAT;
        var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
        gl.__context.vertexAttribPointer(index, 3, type, false, 24, offset);
        var index1 = shader.get_data().aTexCoord.index;
        var type1 = gl.FLOAT;
        var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
        gl.__context.vertexAttribPointer(index1, 2, type1, false, 24, offset1);
        var index2 = shader.get_data().aAlpha.index;
        var type2 = gl.FLOAT;
        var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
        gl.__context.vertexAttribPointer(index2, 1, type2, false, 24, offset2);
        gl.__context.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        renderSession.filterManager.popObject(shape);
        renderSession.maskManager.popObject(shape);
      }
    }
  };
  var openfl__$internal_renderer_opengl_GLStage3D = function () {};
  $hxClasses["openfl._internal.renderer.opengl.GLStage3D"] =
    openfl__$internal_renderer_opengl_GLStage3D;
  openfl__$internal_renderer_opengl_GLStage3D.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLStage3D",
  ];
  openfl__$internal_renderer_opengl_GLStage3D.render = function (
    stage3D,
    renderSession
  ) {
    if (stage3D.context3D != null) {
      renderSession.blendModeManager.setBlendMode(null);
      if (renderSession.shaderManager.currentShader != null) {
        renderSession.shaderManager.setShader(null);
        if (stage3D.context3D.__program != null) {
          stage3D.context3D.__program.__use();
        }
      }
    }
    renderSession.gl.__context.getError();
  };
  var openfl__$internal_renderer_opengl_GLTilemap = function () {};
  $hxClasses["openfl._internal.renderer.opengl.GLTilemap"] =
    openfl__$internal_renderer_opengl_GLTilemap;
  openfl__$internal_renderer_opengl_GLTilemap.__name__ = [
    "openfl",
    "_internal",
    "renderer",
    "opengl",
    "GLTilemap",
  ];
  openfl__$internal_renderer_opengl_GLTilemap.render = function (
    tilemap,
    renderSession
  ) {
    if (
      !tilemap.__renderable ||
      tilemap.__tiles.length == 0 ||
      tilemap.__worldAlpha <= 0
    ) {
      return;
    }
    var renderer = renderSession.renderer;
    var gl = renderSession.gl;
    renderSession.blendModeManager.setBlendMode(tilemap.get_blendMode());
    renderSession.maskManager.pushObject(tilemap);
    var shader = renderSession.filterManager.pushObject(tilemap);
    var rect = openfl_geom_Rectangle.__temp;
    rect.setTo(0, 0, tilemap.__width, tilemap.__height);
    renderSession.maskManager.pushRect(rect, tilemap.__renderTransform);
    shader.get_data().uMatrix.value = renderer.getMatrix(
      tilemap.__renderTransform
    );
    var tmp = renderSession.allowSmoothing && tilemap.smoothing;
    shader.get_data().uImage0.smoothing = tmp;
    var defaultTileset = tilemap.tileset;
    var worldAlpha = tilemap.__worldAlpha;
    var alphaDirty = tilemap.__worldAlpha != tilemap.__cacheAlpha;
    var tiles;
    var count;
    var bufferData;
    var buffer;
    var startIndex;
    var offset;
    var uvs;
    var uv;
    var tileWidth = 0;
    var tileHeight = 0;
    var tile;
    var alpha;
    var visible;
    var tileset;
    var tileData;
    var tileMatrix;
    var x;
    var y;
    var x2;
    var y2;
    var x3;
    var y3;
    var x4;
    var y4;
    tiles = tilemap.__tiles;
    count = tiles.length;
    bufferData = tilemap.__bufferData;
    if (
      bufferData == null ||
      tilemap.__dirty ||
      bufferData.length != count * 30
    ) {
      startIndex = 0;
      if (bufferData == null) {
        var elements = count * 30;
        var this1;
        if (elements != null) {
          this1 = new Float32Array(elements);
        } else {
          this1 = null;
        }
        bufferData = this1;
      } else if (bufferData.length != count * 30) {
        if (!tilemap.__dirty) {
          startIndex = (bufferData.length / 30) | 0;
        }
        var elements1 = count * 30;
        var this2;
        if (elements1 != null) {
          this2 = new Float32Array(elements1);
        } else {
          this2 = null;
        }
        var data = this2;
        if (bufferData.length <= data.length) {
          data.set(bufferData);
        } else {
          data.set(bufferData.subarray(0, data.length));
        }
        bufferData = data;
      }
      var _g1 = startIndex;
      var _g = count;
      while (_g1 < _g) {
        var i = _g1++;
        openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha(
          tiles[i],
          worldAlpha,
          i * 30,
          bufferData
        );
        if (tiles[i].tileset != null) {
          tileset = tiles[i].tileset;
        } else {
          tileset = tilemap.tileset;
        }
        if (tileset != null) {
          openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV(
            tiles[i],
            tileset,
            i * 30,
            bufferData
          );
        }
      }
      tilemap.__bufferData = bufferData;
    }
    if (tilemap.__buffer == null || tilemap.__bufferContext != gl) {
      tilemap.__bufferContext = gl;
      tilemap.__buffer = gl.__context.createBuffer();
    }
    gl.__context.bindBuffer(gl.ARRAY_BUFFER, tilemap.__buffer);
    var drawCount = 0;
    var _g11 = 0;
    var _g2 = count;
    while (_g11 < _g2) {
      var i1 = _g11++;
      offset = i1 * 30;
      tile = tiles[i1];
      alpha = tile.alpha;
      visible = tile.visible;
      if (!visible || alpha <= 0) {
        openfl__$internal_renderer_opengl_GLTilemap.__skipTile(
          tile,
          i1,
          offset,
          bufferData
        );
        continue;
      }
      if (tile.tileset != null) {
        tileset = tile.tileset;
      } else {
        tileset = defaultTileset;
      }
      if (tileset == null) {
        openfl__$internal_renderer_opengl_GLTilemap.__skipTile(
          tile,
          i1,
          offset,
          bufferData
        );
        continue;
      }
      tileData = tileset.__data[tile.id];
      if (tileData == null) {
        openfl__$internal_renderer_opengl_GLTilemap.__skipTile(
          tile,
          i1,
          offset,
          bufferData
        );
        continue;
      }
      tileWidth = tileData.width;
      tileHeight = tileData.height;
      if (alphaDirty || tile.__alphaDirty) {
        openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha(
          tile,
          worldAlpha,
          offset,
          bufferData
        );
      }
      if (tile.__sourceDirty) {
        openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV(
          tile,
          tileset,
          offset,
          bufferData
        );
      }
      if (tile.__transformDirty) {
        tileMatrix = openfl_geom_Matrix.__temp;
        tileMatrix.setTo(1, 0, 0, 1, -tile.originX, -tile.originY);
        tileMatrix.concat(tile.matrix);
        x = tile.__transform[0] =
          0 * tileMatrix.a + 0 * tileMatrix.c + tileMatrix.tx;
        y = tile.__transform[1] =
          0 * tileMatrix.b + 0 * tileMatrix.d + tileMatrix.ty;
        x2 = tile.__transform[2] =
          tileWidth * tileMatrix.a + 0 * tileMatrix.c + tileMatrix.tx;
        y2 = tile.__transform[3] =
          tileWidth * tileMatrix.b + 0 * tileMatrix.d + tileMatrix.ty;
        x3 = tile.__transform[4] =
          0 * tileMatrix.a + tileHeight * tileMatrix.c + tileMatrix.tx;
        y3 = tile.__transform[5] =
          0 * tileMatrix.b + tileHeight * tileMatrix.d + tileMatrix.ty;
        x4 = tile.__transform[6] =
          tileWidth * tileMatrix.a + tileHeight * tileMatrix.c + tileMatrix.tx;
        y4 = tile.__transform[7] =
          tileWidth * tileMatrix.b + tileHeight * tileMatrix.d + tileMatrix.ty;
        tile.__transformDirty = false;
      } else {
        x = tile.__transform[0];
        y = tile.__transform[1];
        x2 = tile.__transform[2];
        y2 = tile.__transform[3];
        x3 = tile.__transform[4];
        y3 = tile.__transform[5];
        x4 = tile.__transform[6];
        y4 = tile.__transform[7];
      }
      bufferData[offset] = x;
      bufferData[offset + 1] = y;
      bufferData[offset + 5] = x2;
      bufferData[offset + 6] = y2;
      bufferData[offset + 10] = x3;
      bufferData[offset + 11] = y3;
      bufferData[offset + 15] = x3;
      bufferData[offset + 16] = y3;
      bufferData[offset + 20] = x2;
      bufferData[offset + 21] = y2;
      bufferData[offset + 25] = x4;
      bufferData[offset + 26] = y4;
      drawCount = i1;
      openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i1] = false;
    }
    gl.bufferData(
      gl.ARRAY_BUFFER,
      bufferData.byteLength,
      bufferData,
      gl.DYNAMIC_DRAW
    );
    var index = shader.get_data().aPosition.index;
    var type = gl.FLOAT;
    var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
    gl.__context.vertexAttribPointer(index, 2, type, false, 20, offset1);
    var index1 = shader.get_data().aTexCoord.index;
    var type1 = gl.FLOAT;
    var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(8);
    gl.__context.vertexAttribPointer(index1, 2, type1, false, 20, offset2);
    var index2 = shader.get_data().aAlpha.index;
    var type2 = gl.FLOAT;
    var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(16);
    gl.__context.vertexAttribPointer(index2, 1, type2, false, 20, offset3);
    var cacheBitmapData = null;
    var lastIndex = 0;
    var _g12 = 0;
    var _g3 = drawCount + 1;
    while (_g12 < _g3) {
      var i2 = _g12++;
      if (openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i2]) {
        continue;
      }
      tile = tiles[i2];
      if (tile.tileset != null) {
        tileset = tile.tileset;
      } else {
        tileset = defaultTileset;
      }
      if (tileset.bitmapData != cacheBitmapData) {
        if (cacheBitmapData != null) {
          shader.get_data().uImage0.input = cacheBitmapData;
          renderSession.shaderManager.setShader(shader);
          gl.__context.drawArrays(
            gl.TRIANGLES,
            lastIndex * 6,
            (i2 - lastIndex) * 6
          );
        }
        cacheBitmapData = tileset.bitmapData;
        lastIndex = i2;
      }
      if (i2 == drawCount && tileset.bitmapData != null) {
        shader.get_data().uImage0.input = tileset.bitmapData;
        renderSession.shaderManager.setShader(shader);
        gl.__context.drawArrays(
          gl.TRIANGLES,
          lastIndex * 6,
          (i2 + 1 - lastIndex) * 6
        );
      }
    }
    var index3 = shader.get_data().aAlpha.index;
    gl.__context.disableVertexAttribArray(index3);
    tilemap.__dirty = false;
    tilemap.__cacheAlpha = worldAlpha;
    renderSession.filterManager.popObject(tilemap);
    renderSession.maskManager.popRect();
    renderSession.maskManager.popObject(tilemap);
  };
  openfl__$internal_renderer_opengl_GLTilemap.__skipTile = function (
    tile,
    i,
    tileOffset,
    bufferData
  ) {
    var tileOffset1 = i * 30;
    bufferData[tileOffset1 + 4] = 0;
    bufferData[tileOffset1 + 9] = 0;
    bufferData[tileOffset1 + 14] = 0;
    bufferData[tileOffset1 + 19] = 0;
    bufferData[tileOffset1 + 24] = 0;
    bufferData[tileOffset1 + 29] = 0;
    openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles.h[i] = true;
    tile.__alphaDirty = true;
  };
  openfl__$internal_renderer_opengl_GLTilemap.__updateTileAlpha = function (
    tile,
    worldAlpha,
    tileOffset,
    bufferData
  ) {
    var alpha = worldAlpha * tile.alpha;
    bufferData[tileOffset + 4] = alpha;
    bufferData[tileOffset + 9] = alpha;
    bufferData[tileOffset + 14] = alpha;
    bufferData[tileOffset + 19] = alpha;
    bufferData[tileOffset + 24] = alpha;
    bufferData[tileOffset + 29] = alpha;
    tile.__alphaDirty = false;
  };
  openfl__$internal_renderer_opengl_GLTilemap.__updateTileUV = function (
    tile,
    tileset,
    tileOffset,
    bufferData
  ) {
    var tileData = tileset.__data[tile.id];
    if (tileData == null) {
      return;
    }
    var x = tileData.__uvX;
    var y = tileData.__uvY;
    var x2 = tileData.__uvWidth;
    var y2 = tileData.__uvHeight;
    bufferData[tileOffset + 2] = x;
    bufferData[tileOffset + 3] = y;
    bufferData[tileOffset + 7] = x2;
    bufferData[tileOffset + 8] = y;
    bufferData[tileOffset + 12] = x;
    bufferData[tileOffset + 13] = y2;
    bufferData[tileOffset + 17] = x;
    bufferData[tileOffset + 18] = y2;
    bufferData[tileOffset + 22] = x2;
    bufferData[tileOffset + 23] = y;
    bufferData[tileOffset + 27] = x2;
    bufferData[tileOffset + 28] = y2;
    tile.__sourceDirty = false;
  };
  var openfl__$internal_stage3D_AGALConverter = function () {};
  $hxClasses["openfl._internal.stage3D.AGALConverter"] =
    openfl__$internal_stage3D_AGALConverter;
  openfl__$internal_stage3D_AGALConverter.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "AGALConverter",
  ];
  openfl__$internal_stage3D_AGALConverter.prefixFromType = function (
    regType,
    programType
  ) {
    switch (regType) {
      case 0:
        return "va";
      case 1:
        if (
          programType ==
          openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
        ) {
          return "vc";
        } else {
          return "fc";
        }
        break;
      case 2:
        if (
          programType ==
          openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
        ) {
          return "vt";
        } else {
          return "ft";
        }
        break;
      case 3:
        return "output_";
      case 4:
        return "v";
      case 5:
        return "sampler";
      default:
        throw new js__$Boot_HaxeError(
          new openfl_errors_IllegalOperationError("Invalid data!")
        );
    }
  };
  openfl__$internal_stage3D_AGALConverter.readUInt64 = function (byteArray) {
    var low = byteArray.readInt();
    var high = byteArray.readInt();
    var this1 = new haxe__$Int64__$_$_$Int64(high, low);
    return this1;
  };
  openfl__$internal_stage3D_AGALConverter.convertToGLSL = function (
    agal,
    samplerState
  ) {
    agal.position = 0;
    agal.__endian = 1;
    var magic = agal.readByte() & 255;
    if (magic == 176) {
      return agal.readUTF();
    }
    if (magic != 160) {
      throw new js__$Boot_HaxeError(
        new openfl_errors_IllegalOperationError(
          "Magic value must be 0xA0, may not be AGAL"
        )
      );
    }
    var version = agal.readInt();
    if (version != 1) {
      throw new js__$Boot_HaxeError(
        new openfl_errors_IllegalOperationError("Version must be 1")
      );
    }
    var shaderTypeID = agal.readByte() & 255;
    if (shaderTypeID != 161) {
      throw new js__$Boot_HaxeError(
        new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1")
      );
    }
    var programType =
      (agal.readByte() & 255) == 0
        ? openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
        : openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
    var map = new openfl__$internal_stage3D_RegisterMap();
    var sb_b = "";
    while (
      agal.position <
      openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)
    ) {
      var opcode = agal.readInt();
      var dest = agal.readUnsignedInt();
      var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
      var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
      var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(
        dest,
        programType
      );
      var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(
        source1,
        programType,
        dr.mask
      );
      var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(
        source2,
        programType,
        dr.mask
      );
      sb_b += "\t";
      switch (opcode) {
        case 0:
          sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 1:
          sb_b += Std.string(
            dr.toGLSL() +
              " = " +
              sr1.toGLSL() +
              " + " +
              sr2.toGLSL() +
              "; // add"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 2:
          sb_b += Std.string(
            dr.toGLSL() +
              " = " +
              sr1.toGLSL() +
              " - " +
              sr2.toGLSL() +
              "; // sub"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 3:
          sb_b += Std.string(
            dr.toGLSL() +
              " = " +
              sr1.toGLSL() +
              " * " +
              sr2.toGLSL() +
              "; // mul"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 4:
          sb_b += Std.string(
            dr.toGLSL() +
              " = " +
              sr1.toGLSL() +
              " / " +
              sr2.toGLSL() +
              "; // div"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 5:
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(1) / " +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "; // rcp (untested)"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 6:
          sb_b += Std.string(
            dr.toGLSL() +
              " = min(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "); // min"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 7:
          sb_b += Std.string(
            dr.toGLSL() +
              " = max(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "); // max"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 8:
          sb_b += Std.string(
            dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 9:
          sb_b += Std.string(
            dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 10:
          sb_b += Std.string(
            dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 11:
          sb_b += Std.string(
            dr.toGLSL() +
              " = pow(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "); // pow"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 12:
          sb_b += Std.string(
            dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 13:
          sb_b += Std.string(
            dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 14:
          sb_b += Std.string(
            dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 15:
          sb_b += Std.string(
            dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 16:
          sb_b += Std.string(
            dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 17:
          sr1.sourceMask = sr2.sourceMask = 7;
          sb_b += Std.string(
            dr.toGLSL() +
              " = cross(vec3(" +
              sr1.toGLSL() +
              "), vec3(" +
              sr2.toGLSL() +
              ")); // crs"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 18:
          sr1.sourceMask = sr2.sourceMask = 7;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(dot(vec3(" +
              sr1.toGLSL() +
              "), vec3(" +
              sr2.toGLSL() +
              ")))" +
              dr.getWriteMask() +
              "; // dp3"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 19:
          sr1.sourceMask = sr2.sourceMask = 15;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(dot(vec4(" +
              sr1.toGLSL() +
              "), vec4(" +
              sr2.toGLSL() +
              ")))" +
              dr.getWriteMask() +
              "; // dp4"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 20:
          sb_b += Std.string(
            dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 21:
          sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 22:
          sb_b += Std.string(
            dr.toGLSL() +
              " = clamp(" +
              sr1.toGLSL() +
              ", 0.0, 1.0); // saturate"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 23:
          var existingUsage = map.getRegisterUsage(sr2);
          if (
            existingUsage !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 &&
            existingUsage !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
          ) {
            sb_b += Std.string(
              dr.toGLSL() +
                " = " +
                sr1.toGLSL() +
                " * mat3(" +
                sr2.toGLSL(false) +
                "); // m33"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4
            );
          } else {
            sr1.sourceMask = sr2.sourceMask = 7;
            sb_b += Std.string(
              dr.toGLSL() +
                " = vec3(" +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 0) +
                "), " +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 1) +
                ")," +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 2) +
                ")); // m33"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              0
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              1
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              2
            );
          }
          break;
        case 24:
          var existingUsage1 = map.getRegisterUsage(sr2);
          if (
            existingUsage1 !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 &&
            existingUsage1 !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
          ) {
            sb_b += Std.string(
              dr.toGLSL() +
                " = " +
                sr1.toGLSL() +
                " * " +
                sr2.toGLSL(false) +
                "; // m44"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4
            );
          } else {
            sr1.sourceMask = sr2.sourceMask = 15;
            sb_b += Std.string(
              dr.toGLSL() +
                " = vec4(" +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 0) +
                "), " +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 1) +
                "), " +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 2) +
                "), " +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 3) +
                ")); // m44"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              0
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              1
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              2
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              3
            );
          }
          break;
        case 25:
          dr.mask &= 7;
          var existingUsage2 = map.getRegisterUsage(sr2);
          if (
            existingUsage2 !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 &&
            existingUsage2 !=
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
          ) {
            sb_b += Std.string(
              dr.toGLSL() +
                " = " +
                sr1.toGLSL() +
                " * " +
                sr2.toGLSL(false) +
                "; // m34"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4
            );
          } else {
            sr1.sourceMask = sr2.sourceMask = 15;
            sb_b += Std.string(
              dr.toGLSL() +
                " = vec3(" +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 0) +
                "), " +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 1) +
                ")," +
                "dot(" +
                sr1.toGLSL(true) +
                "," +
                sr2.toGLSL(true, 2) +
                ")); // m34"
            );
            map.addDR(
              dr,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr1,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              0
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              1
            );
            map.addSR(
              sr2,
              openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,
              2
            );
          }
          break;
        case 39:
          sr1.sourceMask = 15;
          sb_b += Std.string(
            "if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;"
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 40:
          var sampler =
            openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(
              source2,
              programType
            );
          var _g = sampler.d;
          switch (_g) {
            case 0:
              sr1.sourceMask = 3;
              map.addSaR(
                sampler,
                openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D
              );
              sb_b += Std.string(
                dr.toGLSL() +
                  " = texture2D(" +
                  sampler.toGLSL() +
                  ", " +
                  sr1.toGLSL() +
                  "); // tex"
              );
              break;
            case 1:
              sr1.sourceMask = 7;
              sb_b += Std.string(
                dr.toGLSL() +
                  " = textureCube(" +
                  sampler.toGLSL() +
                  ", " +
                  sr1.toGLSL() +
                  "); // tex"
              );
              map.addSaR(
                sampler,
                openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE
              );
              break;
          }
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          if (samplerState != null) {
            samplerState[sampler.n] = sampler.toSamplerState();
          }
          break;
        case 41:
          sr1.sourceMask = sr2.sourceMask = 15;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(greaterThanEqual(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "))" +
              dr.getWriteMask() +
              "; // ste"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 42:
          sr1.sourceMask = sr2.sourceMask = 15;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(lessThan(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "))" +
              dr.getWriteMask() +
              "; // slt"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 44:
          sr1.sourceMask = sr2.sourceMask = 15;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(equal(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "))" +
              dr.getWriteMask() +
              "; // seq"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        case 45:
          sr1.sourceMask = sr2.sourceMask = 15;
          sb_b += Std.string(
            dr.toGLSL() +
              " = vec4(notEqual(" +
              sr1.toGLSL() +
              ", " +
              sr2.toGLSL() +
              "))" +
              dr.getWriteMask() +
              "; // sne"
          );
          map.addDR(
            dr,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr1,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          map.addSR(
            sr2,
            openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
          );
          break;
        default:
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError("Opcode " + opcode)
          );
      }
      sb_b += "\n";
    }
    if (openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
      var version1 =
        lime_graphics_opengl_GL.context.__context.getParameter(7938);
      openfl__$internal_stage3D_AGALConverter.limitedProfile =
        version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
    }
    var glsl_b = "";
    glsl_b += Std.string(
      "// AGAL " +
        (programType ==
        openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
          ? "vertex"
          : "fragment") +
        " shader\n"
    );
    if (openfl__$internal_stage3D_AGALConverter.limitedProfile) {
      glsl_b += "#version 100\n";
      glsl_b += "precision highp float;\n";
    } else {
      glsl_b += "#version 120\n";
    }
    glsl_b += Std.string(map.toGLSL(false));
    if (
      programType ==
      openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
    ) {
      glsl_b += "uniform vec4 vcPositionScale;\n";
    }
    glsl_b += "void main() {\n";
    glsl_b += Std.string(map.toGLSL(true));
    glsl_b += Std.string(sb_b);
    if (
      programType ==
      openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
    ) {
      glsl_b += "\tgl_Position *= vcPositionScale;\n";
    }
    glsl_b += "}\n";
    return glsl_b;
  };
  var openfl__$internal_stage3D__$AGALConverter_DestRegister = function () {};
  $hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] =
    openfl__$internal_stage3D__$AGALConverter_DestRegister;
  openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "_AGALConverter",
    "DestRegister",
  ];
  openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function (
    v,
    programType
  ) {
    var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
    dr.programType = programType;
    dr.type = (v >>> 24) & 15;
    dr.mask = (v >>> 16) & 15;
    dr.n = v & 65535;
    return dr;
  };
  openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
    mask: null,
    n: null,
    programType: null,
    type: null,
    getWriteMask: function () {
      var str = ".";
      if ((this.mask & 1) != 0) {
        str += "x";
      }
      if ((this.mask & 2) != 0) {
        str += "y";
      }
      if ((this.mask & 4) != 0) {
        str += "z";
      }
      if ((this.mask & 8) != 0) {
        str += "w";
      }
      return str;
    },
    toGLSL: function (useMask) {
      if (useMask == null) {
        useMask = true;
      }
      var str;
      if (this.type == 3) {
        if (
          this.programType ==
          openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
        ) {
          str = "gl_Position";
        } else {
          str = "gl_FragColor";
        }
      } else {
        str =
          openfl__$internal_stage3D_AGALConverter.prefixFromType(
            this.type,
            this.programType
          ) + this.n;
      }
      if (useMask && this.mask != 15) {
        str += this.getWriteMask();
      }
      return str;
    },
    __class__: openfl__$internal_stage3D__$AGALConverter_DestRegister,
  };
  var openfl__$internal_stage3D__$AGALConverter_ProgramType = ($hxClasses[
    "openfl._internal.stage3D._AGALConverter.ProgramType"
  ] = {
    __ename__: [
      "openfl",
      "_internal",
      "stage3D",
      "_AGALConverter",
      "ProgramType",
    ],
    __constructs__: ["VERTEX", "FRAGMENT"],
  });
  openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX", 0];
  openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
  openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_ProgramType;
  openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = [
    "FRAGMENT",
    1,
  ];
  openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_ProgramType;
  var openfl__$internal_stage3D_RegisterMap = function () {
    this.mEntries = [];
  };
  $hxClasses["openfl._internal.stage3D.RegisterMap"] =
    openfl__$internal_stage3D_RegisterMap;
  openfl__$internal_stage3D_RegisterMap.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "RegisterMap",
  ];
  openfl__$internal_stage3D_RegisterMap.prototype = {
    mEntries: null,
    add: function (type, name, number, usage) {
      var _g = 0;
      var _g1 = this.mEntries;
      while (_g < _g1.length) {
        var entry = _g1[_g];
        ++_g;
        if (
          entry.type == type &&
          entry.name == name &&
          entry.number == number
        ) {
          if (entry.usage != usage) {
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError(
                "Cannot use register in multiple ways yet (mat4/vec4)"
              )
            );
          }
          return;
        }
      }
      var entry1 =
        new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
      entry1.type = type;
      entry1.name = name;
      entry1.number = number;
      entry1.usage = usage;
      this.mEntries.push(entry1);
    },
    addDR: function (dr, usage) {
      this.add(dr.type, dr.toGLSL(false), dr.n, usage);
    },
    addSaR: function (sr, usage) {
      this.add(sr.type, sr.toGLSL(), sr.n, usage);
    },
    addSR: function (sr, usage, offset) {
      if (offset == null) {
        offset = 0;
      }
      if (sr.d != 0) {
        this.add(
          sr.itype,
          openfl__$internal_stage3D_AGALConverter.prefixFromType(
            sr.itype,
            sr.programType
          ) + sr.n,
          sr.n,
          openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4
        );
        this.add(
          sr.type,
          openfl__$internal_stage3D_AGALConverter.prefixFromType(
            sr.type,
            sr.programType
          ) + sr.o,
          sr.o,
          openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
        );
        return;
      }
      this.add(sr.type, sr.toGLSL(false, offset), sr.n + offset, usage);
    },
    getRegisterUsage: function (sr) {
      if (sr.d != 0) {
        return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
      }
      return this.getUsage(sr.type, sr.toGLSL(false), sr.n);
    },
    getUsage: function (type, name, number) {
      var _g = 0;
      var _g1 = this.mEntries;
      while (_g < _g1.length) {
        var entry = _g1[_g];
        ++_g;
        if (
          entry.type == type &&
          entry.name == name &&
          entry.number == number
        ) {
          return entry.usage;
        }
      }
      return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
    },
    toGLSL: function (tempRegistersOnly) {
      this.mEntries.sort(function (a, b) {
        return a.number - b.number;
      });
      var arrayCount = new haxe_ds_ObjectMap();
      var entry;
      var _g1 = 0;
      var _g = this.mEntries.length;
      while (_g1 < _g) {
        var i = _g1++;
        entry = this.mEntries[i];
        if (
          entry.usage ==
          openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
        ) {
          if (i < this.mEntries.length - 1) {
            var v = this.mEntries[i + 1].number - entry.number;
            arrayCount.set(entry, v);
          } else {
            arrayCount.set(entry, 128);
          }
        }
      }
      this.mEntries.sort(function (a1, b1) {
        return js_Boot.__cast(a1.type, Int) - js_Boot.__cast(b1.type, Int);
      });
      var sb_b = "";
      var _g11 = 0;
      var _g2 = this.mEntries.length;
      while (_g11 < _g2) {
        var i1 = _g11++;
        entry = this.mEntries[i1];
        if (
          (tempRegistersOnly && entry.type != 2) ||
          (!tempRegistersOnly && entry.type == 2)
        ) {
          continue;
        }
        if (entry.type == 3) {
          continue;
        }
        var _g21 = entry.type;
        switch (_g21) {
          case 0:
            sb_b += "attribute ";
            break;
          case 1:
            sb_b += "uniform ";
            break;
          case 2:
            sb_b += "\t";
            break;
          case 3:
            break;
          case 4:
            sb_b += "varying ";
            break;
          case 5:
            sb_b += "uniform ";
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError()
            );
        }
        var _g3 = entry.usage;
        switch (_g3[1]) {
          case 0:
            haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED", {
              fileName: "AGALConverter.hx",
              lineNumber: 800,
              className: "openfl._internal.stage3D.RegisterMap",
              methodName: "toGLSL",
            });
            break;
          case 1:
            sb_b += "vec4 ";
            break;
          case 2:
            sb_b += "mat4 ";
            break;
          case 3:
            sb_b += "sampler2D ";
            break;
          case 4:
            haxe_Log.trace(
              "Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",
              {
                fileName: "AGALConverter.hx",
                lineNumber: 804,
                className: "openfl._internal.stage3D.RegisterMap",
                methodName: "toGLSL",
              }
            );
            break;
          case 5:
            sb_b += "samplerCube ";
            break;
          case 6:
            sb_b += "vec4 ";
            break;
        }
        if (
          entry.usage ==
          openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA
        ) {
          sb_b += "sampler2D ";
          sb_b += Std.string(entry.name);
          sb_b += ";\n";
          sb_b += "uniform ";
          sb_b += "sampler2D ";
          sb_b += Std.string(entry.name + "_alpha");
          sb_b += ";\n";
        } else if (
          entry.usage ==
          openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY
        ) {
          sb_b += Std.string(
            entry.name + "[" + arrayCount.h[entry.__id__] + "]"
          );
          sb_b += ";\n";
        } else {
          sb_b += Std.string(entry.name);
          sb_b += ";\n";
        }
      }
      return sb_b;
    },
    __class__: openfl__$internal_stage3D_RegisterMap,
  };
  var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry =
    function () {};
  $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] =
    openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
  openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "_AGALConverter",
    "RegisterMapEntry",
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
    name: null,
    number: null,
    type: null,
    usage: null,
    __class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry,
  };
  var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = ($hxClasses[
    "openfl._internal.stage3D._AGALConverter.RegisterUsage"
  ] = {
    __ename__: [
      "openfl",
      "_internal",
      "stage3D",
      "_AGALConverter",
      "RegisterUsage",
    ],
    __constructs__: [
      "UNUSED",
      "VECTOR_4",
      "MATRIX_4_4",
      "SAMPLER_2D",
      "SAMPLER_2D_ALPHA",
      "SAMPLER_CUBE",
      "VECTOR_4_ARRAY",
    ],
  });
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = [
    "UNUSED",
    0,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = [
    "VECTOR_4",
    1,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = [
    "MATRIX_4_4",
    2,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = [
    "SAMPLER_2D",
    3,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = [
    "SAMPLER_2D_ALPHA",
    4,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = [
    "SAMPLER_CUBE",
    5,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = [
    "VECTOR_4_ARRAY",
    6,
  ];
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString =
    $estr;
  openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ =
    openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
  var openfl__$internal_stage3D__$AGALConverter_SamplerRegister =
    function () {};
  $hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] =
    openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
  openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "_AGALConverter",
    "SamplerRegister",
  ];
  openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function (
    v,
    programType
  ) {
    var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
    sr.programType = programType;
    var b = 60;
    b &= 63;
    var a;
    if (b == 0) {
      var this1 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a = this1;
    } else if (b < 32) {
      var this2 = new haxe__$Int64__$_$_$Int64(
        v.high >> b,
        (v.high << (32 - b)) | (v.low >>> b)
      );
      a = this2;
    } else {
      var this3 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b - 32)
      );
      a = this3;
    }
    var this4 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b1 = this4;
    var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high, a.low & b1.low);
    sr.f = this5.low;
    var b2 = 56;
    b2 &= 63;
    var a1;
    if (b2 == 0) {
      var this6 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a1 = this6;
    } else if (b2 < 32) {
      var this7 = new haxe__$Int64__$_$_$Int64(
        v.high >> b2,
        (v.high << (32 - b2)) | (v.low >>> b2)
      );
      a1 = this7;
    } else {
      var this8 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b2 - 32)
      );
      a1 = this8;
    }
    var this9 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b3 = this9;
    var this10 = new haxe__$Int64__$_$_$Int64(
      a1.high & b3.high,
      a1.low & b3.low
    );
    sr.m = this10.low;
    var b4 = 52;
    b4 &= 63;
    var a2;
    if (b4 == 0) {
      var this11 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a2 = this11;
    } else if (b4 < 32) {
      var this12 = new haxe__$Int64__$_$_$Int64(
        v.high >> b4,
        (v.high << (32 - b4)) | (v.low >>> b4)
      );
      a2 = this12;
    } else {
      var this13 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b4 - 32)
      );
      a2 = this13;
    }
    var this14 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b5 = this14;
    var this15 = new haxe__$Int64__$_$_$Int64(
      a2.high & b5.high,
      a2.low & b5.low
    );
    sr.w = this15.low;
    var b6 = 48;
    b6 &= 63;
    var a3;
    if (b6 == 0) {
      var this16 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a3 = this16;
    } else if (b6 < 32) {
      var this17 = new haxe__$Int64__$_$_$Int64(
        v.high >> b6,
        (v.high << (32 - b6)) | (v.low >>> b6)
      );
      a3 = this17;
    } else {
      var this18 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b6 - 32)
      );
      a3 = this18;
    }
    var this19 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b7 = this19;
    var this20 = new haxe__$Int64__$_$_$Int64(
      a3.high & b7.high,
      a3.low & b7.low
    );
    sr.s = this20.low;
    var b8 = 44;
    b8 &= 63;
    var a4;
    if (b8 == 0) {
      var this21 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a4 = this21;
    } else if (b8 < 32) {
      var this22 = new haxe__$Int64__$_$_$Int64(
        v.high >> b8,
        (v.high << (32 - b8)) | (v.low >>> b8)
      );
      a4 = this22;
    } else {
      var this23 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b8 - 32)
      );
      a4 = this23;
    }
    var this24 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b9 = this24;
    var this25 = new haxe__$Int64__$_$_$Int64(
      a4.high & b9.high,
      a4.low & b9.low
    );
    sr.d = this25.low;
    var b10 = 40;
    b10 &= 63;
    var a5;
    if (b10 == 0) {
      var this26 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a5 = this26;
    } else if (b10 < 32) {
      var this27 = new haxe__$Int64__$_$_$Int64(
        v.high >> b10,
        (v.high << (32 - b10)) | (v.low >>> b10)
      );
      a5 = this27;
    } else {
      var this28 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b10 - 32)
      );
      a5 = this28;
    }
    var this29 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b11 = this29;
    var this30 = new haxe__$Int64__$_$_$Int64(
      a5.high & b11.high,
      a5.low & b11.low
    );
    sr.t = this30.low;
    var b12 = 32;
    b12 &= 63;
    var a6;
    if (b12 == 0) {
      var this31 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a6 = this31;
    } else if (b12 < 32) {
      var this32 = new haxe__$Int64__$_$_$Int64(
        v.high >> b12,
        (v.high << (32 - b12)) | (v.low >>> b12)
      );
      a6 = this32;
    } else {
      var this33 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b12 - 32)
      );
      a6 = this33;
    }
    var this34 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b13 = this34;
    var this35 = new haxe__$Int64__$_$_$Int64(
      a6.high & b13.high,
      a6.low & b13.low
    );
    sr.type = this35.low;
    var b14 = 16;
    b14 &= 63;
    var a7;
    if (b14 == 0) {
      var this36 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a7 = this36;
    } else if (b14 < 32) {
      var this37 = new haxe__$Int64__$_$_$Int64(
        v.high >> b14,
        (v.high << (32 - b14)) | (v.low >>> b14)
      );
      a7 = this37;
    } else {
      var this38 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b14 - 32)
      );
      a7 = this38;
    }
    var this39 = new haxe__$Int64__$_$_$Int64(0, 255);
    var b15 = this39;
    var this40 = new haxe__$Int64__$_$_$Int64(
      a7.high & b15.high,
      a7.low & b15.low
    );
    sr.b = this40.low;
    var this41 = new haxe__$Int64__$_$_$Int64(0, 65535);
    var b16 = this41;
    var this42 = new haxe__$Int64__$_$_$Int64(
      v.high & b16.high,
      v.low & b16.low
    );
    sr.n = this42.low;
    return sr;
  };
  openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
    b: null,
    d: null,
    f: null,
    m: null,
    n: null,
    programType: null,
    s: null,
    t: null,
    type: null,
    w: null,
    toGLSL: function () {
      var str =
        openfl__$internal_stage3D_AGALConverter.prefixFromType(
          this.type,
          this.programType
        ) + this.n;
      return str;
    },
    toSamplerState: function () {
      var magFilter = 0;
      var minFilter = 0;
      var wrapModeS = 0;
      var wrapModeT = 0;
      var _g = this.f;
      switch (_g) {
        case 0:
          magFilter = 9728;
          break;
        case 1:
          magFilter = 9729;
          break;
        default:
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError()
          );
      }
      var _g1 = this.m;
      switch (_g1) {
        case 0:
          if (this.f != 0) {
            minFilter = 9729;
          } else {
            minFilter = 9728;
          }
          break;
        case 1:
          if (this.f != 0) {
            minFilter = 9986;
          } else {
            minFilter = 9984;
          }
          break;
        case 2:
          if (this.f != 0) {
            minFilter = 9987;
          } else {
            minFilter = 9985;
          }
          break;
        default:
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError()
          );
      }
      var _g2 = this.w;
      switch (_g2) {
        case 0:
          wrapModeS = 33071;
          wrapModeT = 33071;
          break;
        case 1:
          wrapModeS = 10497;
          wrapModeT = 10497;
          break;
        default:
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError()
          );
      }
      var ignoreSampler = (this.s & 4) == 4;
      var centroid = (this.s & 1) == 1;
      var lodBias = ((this.b << 24) >> 24) / 8.0;
      var maxAniso = 0.0;
      return new openfl__$internal_stage3D_SamplerState(
        minFilter,
        magFilter,
        wrapModeS,
        wrapModeT,
        lodBias,
        maxAniso,
        ignoreSampler,
        centroid
      );
    },
    __class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister,
  };
  var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function () {};
  $hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] =
    openfl__$internal_stage3D__$AGALConverter_SourceRegister;
  openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "_AGALConverter",
    "SourceRegister",
  ];
  openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function (
    v,
    programType,
    sourceMask
  ) {
    var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
    sr.programType = programType;
    var b = 63;
    b &= 63;
    var a;
    if (b == 0) {
      var this1 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a = this1;
    } else if (b < 32) {
      var this2 = new haxe__$Int64__$_$_$Int64(
        v.high >> b,
        (v.high << (32 - b)) | (v.low >>> b)
      );
      a = this2;
    } else {
      var this3 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b - 32)
      );
      a = this3;
    }
    var this4 = new haxe__$Int64__$_$_$Int64(0, 1);
    var b1 = this4;
    var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high, a.low & b1.low);
    sr.d = this5.low;
    var b2 = 48;
    b2 &= 63;
    var a1;
    if (b2 == 0) {
      var this6 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a1 = this6;
    } else if (b2 < 32) {
      var this7 = new haxe__$Int64__$_$_$Int64(
        v.high >> b2,
        (v.high << (32 - b2)) | (v.low >>> b2)
      );
      a1 = this7;
    } else {
      var this8 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b2 - 32)
      );
      a1 = this8;
    }
    var this9 = new haxe__$Int64__$_$_$Int64(0, 3);
    var b3 = this9;
    var this10 = new haxe__$Int64__$_$_$Int64(
      a1.high & b3.high,
      a1.low & b3.low
    );
    sr.q = this10.low;
    var b4 = 40;
    b4 &= 63;
    var a2;
    if (b4 == 0) {
      var this11 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a2 = this11;
    } else if (b4 < 32) {
      var this12 = new haxe__$Int64__$_$_$Int64(
        v.high >> b4,
        (v.high << (32 - b4)) | (v.low >>> b4)
      );
      a2 = this12;
    } else {
      var this13 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b4 - 32)
      );
      a2 = this13;
    }
    var this14 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b5 = this14;
    var this15 = new haxe__$Int64__$_$_$Int64(
      a2.high & b5.high,
      a2.low & b5.low
    );
    sr.itype = this15.low;
    var b6 = 32;
    b6 &= 63;
    var a3;
    if (b6 == 0) {
      var this16 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a3 = this16;
    } else if (b6 < 32) {
      var this17 = new haxe__$Int64__$_$_$Int64(
        v.high >> b6,
        (v.high << (32 - b6)) | (v.low >>> b6)
      );
      a3 = this17;
    } else {
      var this18 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b6 - 32)
      );
      a3 = this18;
    }
    var this19 = new haxe__$Int64__$_$_$Int64(0, 15);
    var b7 = this19;
    var this20 = new haxe__$Int64__$_$_$Int64(
      a3.high & b7.high,
      a3.low & b7.low
    );
    sr.type = this20.low;
    var b8 = 24;
    b8 &= 63;
    var a4;
    if (b8 == 0) {
      var this21 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a4 = this21;
    } else if (b8 < 32) {
      var this22 = new haxe__$Int64__$_$_$Int64(
        v.high >> b8,
        (v.high << (32 - b8)) | (v.low >>> b8)
      );
      a4 = this22;
    } else {
      var this23 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b8 - 32)
      );
      a4 = this23;
    }
    var this24 = new haxe__$Int64__$_$_$Int64(0, 255);
    var b9 = this24;
    var this25 = new haxe__$Int64__$_$_$Int64(
      a4.high & b9.high,
      a4.low & b9.low
    );
    sr.s = this25.low;
    var b10 = 16;
    b10 &= 63;
    var a5;
    if (b10 == 0) {
      var this26 = new haxe__$Int64__$_$_$Int64(v.high, v.low);
      a5 = this26;
    } else if (b10 < 32) {
      var this27 = new haxe__$Int64__$_$_$Int64(
        v.high >> b10,
        (v.high << (32 - b10)) | (v.low >>> b10)
      );
      a5 = this27;
    } else {
      var this28 = new haxe__$Int64__$_$_$Int64(
        v.high >> 31,
        v.high >> (b10 - 32)
      );
      a5 = this28;
    }
    var this29 = new haxe__$Int64__$_$_$Int64(0, 255);
    var b11 = this29;
    var this30 = new haxe__$Int64__$_$_$Int64(
      a5.high & b11.high,
      a5.low & b11.low
    );
    sr.o = this30.low;
    var this31 = new haxe__$Int64__$_$_$Int64(0, 65535);
    var b12 = this31;
    var this32 = new haxe__$Int64__$_$_$Int64(
      v.high & b12.high,
      v.low & b12.low
    );
    sr.n = this32.low;
    sr.sourceMask = sourceMask;
    return sr;
  };
  openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
    d: null,
    itype: null,
    n: null,
    o: null,
    programType: null,
    q: null,
    s: null,
    sourceMask: null,
    type: null,
    toGLSL: function (emitSwizzle, offset) {
      if (offset == null) {
        offset = 0;
      }
      if (emitSwizzle == null) {
        emitSwizzle = true;
      }
      if (this.type == 3) {
        if (
          this.programType ==
          openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX
        ) {
          return "gl_Position";
        } else {
          return "gl_FragColor";
        }
      }
      var fullxyzw = this.s == 228 && this.sourceMask == 15;
      var swizzle = "";
      if (this.type != 5 && !fullxyzw) {
        var _g = 0;
        while (_g < 4) {
          var i = _g++;
          if ((this.sourceMask & (1 << i)) != 0) {
            var _g1 = (this.s >> (i * 2)) & 3;
            switch (_g1) {
              case 0:
                swizzle += "x";
                break;
              case 1:
                swizzle += "y";
                break;
              case 2:
                swizzle += "z";
                break;
              case 3:
                swizzle += "w";
                break;
            }
          }
        }
      }
      var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(
        this.type,
        this.programType
      );
      if (this.d == 0) {
        str += this.n + offset;
      } else {
        str += this.o;
        var indexComponent = String.fromCharCode(
          HxOverrides.cca("x", 0) + this.q
        );
        var indexRegister =
          openfl__$internal_stage3D_AGALConverter.prefixFromType(
            this.itype,
            this.programType
          ) +
          this.n +
          "." +
          indexComponent;
        str += "[ int(" + indexRegister + ") +" + offset + "]";
      }
      if (emitSwizzle && swizzle != "") {
        str += "." + swizzle;
      }
      return str;
    },
    __class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister,
  };
  var openfl__$internal_stage3D_Context3DStateCache = function () {
    this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null, 4096);
    this.clearSettings();
  };
  $hxClasses["openfl._internal.stage3D.Context3DStateCache"] =
    openfl__$internal_stage3D_Context3DStateCache;
  openfl__$internal_stage3D_Context3DStateCache.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "Context3DStateCache",
  ];
  openfl__$internal_stage3D_Context3DStateCache.prototype = {
    _activeTexture: null,
    _activeVertexArray: null,
    _cullingMode: null,
    _depthTestCompareMode: null,
    _depthTestEnabled: null,
    _depthTestMask: null,
    _destBlendFactor: null,
    _program: null,
    _registers: null,
    _srcBlendFactor: null,
    _viewportHeight: null,
    _viewportOriginX: null,
    _viewportOriginY: null,
    _viewportWidth: null,
    clearRegisters: function () {
      var numFloats = 4096;
      var _g1 = 0;
      var _g = numFloats;
      while (_g1 < _g) {
        var c = _g1++;
        this._registers.set(c, -999999999.0);
      }
    },
    clearSettings: function () {
      this._srcBlendFactor = null;
      this._destBlendFactor = null;
      this._depthTestEnabled = false;
      this._depthTestMask = false;
      this._depthTestCompareMode = null;
      this._program = null;
      this._cullingMode = null;
      this._activeTexture = -1;
      this._activeVertexArray = -1;
      this._viewportOriginX = -1;
      this._viewportOriginY = -1;
      this._viewportWidth = -1;
      this._viewportHeight = -1;
      this.clearRegisters();
    },
    updateActiveTextureSample: function (texture) {
      this._activeTexture = texture;
      return true;
    },
    updateActiveVertexArray: function (vertexArray) {
      this._activeVertexArray = vertexArray;
      return true;
    },
    updateBlendDestFactor: function (factor) {
      this._destBlendFactor = factor;
      return true;
    },
    updateBlendSrcFactor: function (factor) {
      this._srcBlendFactor = factor;
      return true;
    },
    updateCullingMode: function (cullMode) {
      this._cullingMode = cullMode;
      return true;
    },
    updateDepthCompareMode: function (mode) {
      this._depthTestCompareMode = mode;
      return true;
    },
    updateDepthTestEnabled: function (test) {
      this._depthTestEnabled = test;
      return true;
    },
    updateDepthTestMask: function (mask) {
      this._depthTestMask = mask;
      return true;
    },
    updateProgram3D: function (program3d) {
      this._program = program3d;
      return true;
    },
    updateRegisters: function (mTemp, startRegister, numRegisters) {
      return true;
    },
    updateViewport: function (originX, originY, width, height) {
      this._viewportOriginX = originX;
      this._viewportOriginY = originY;
      this._viewportWidth = width;
      this._viewportHeight = height;
      return true;
    },
    __class__: openfl__$internal_stage3D_Context3DStateCache,
  };
  var openfl__$internal_stage3D_GLUtils = function () {};
  $hxClasses["openfl._internal.stage3D.GLUtils"] =
    openfl__$internal_stage3D_GLUtils;
  openfl__$internal_stage3D_GLUtils.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "GLUtils",
  ];
  openfl__$internal_stage3D_GLUtils.CheckGLError = function () {
    if (!openfl__$internal_stage3D_GLUtils.debug) {
      return;
    }
    var error = lime_graphics_opengl_GL.context.__context.getError();
    if (error != 0) {
      var errorText;
      switch (error) {
        case 0:
          errorText = "GL_NO_ERROR";
          break;
        case 1280:
          errorText = "GL_INVALID_ENUM";
          break;
        case 1281:
          errorText = "GL_INVALID_VALUE";
          break;
        case 1282:
          errorText = "GL_INVALID_OPERATION";
          break;
        case 1285:
          errorText = "GL_OUT_OF_MEMORY";
          break;
        case 1286:
          errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
          break;
        default:
          if (error == null) {
            errorText = "null";
          } else {
            errorText = "" + error;
          }
      }
      throw new js__$Boot_HaxeError(
        new openfl_errors_IllegalOperationError(
          "Error calling openGL api. Error: " + errorText + "\n"
        )
      );
    }
  };
  var openfl__$internal_stage3D_SamplerState = function (
    minFilter,
    magFilter,
    wrapModeS,
    wrapModeT,
    lodBias,
    maxAniso,
    ignoreSampler,
    centroid,
    mipmapGenerated
  ) {
    if (mipmapGenerated == null) {
      mipmapGenerated = false;
    }
    if (centroid == null) {
      centroid = false;
    }
    if (ignoreSampler == null) {
      ignoreSampler = false;
    }
    if (maxAniso == null) {
      maxAniso = 0.0;
    }
    if (lodBias == null) {
      lodBias = 0.0;
    }
    this.set_minFilter(minFilter);
    this.set_magFilter(magFilter);
    this.set_wrapModeS(wrapModeS);
    this.set_wrapModeT(wrapModeT);
    this.set_lodBias(lodBias);
    this.set_maxAniso(maxAniso);
    this.ignoreSampler = ignoreSampler;
    this.centroid = centroid;
    this.mipmapGenerated = mipmapGenerated;
    this.__samplerDirty = true;
  };
  $hxClasses["openfl._internal.stage3D.SamplerState"] =
    openfl__$internal_stage3D_SamplerState;
  openfl__$internal_stage3D_SamplerState.__name__ = [
    "openfl",
    "_internal",
    "stage3D",
    "SamplerState",
  ];
  openfl__$internal_stage3D_SamplerState.prototype = {
    lodBias: null,
    magFilter: null,
    maxAniso: null,
    minFilter: null,
    wrapModeS: null,
    wrapModeT: null,
    centroid: null,
    ignoreSampler: null,
    mipmapGenerated: null,
    __samplerDirty: null,
    copyFrom: function (other) {
      if (other == null || other.ignoreSampler) {
        return;
      }
      this.set_minFilter(other.minFilter);
      this.set_magFilter(other.magFilter);
      this.set_wrapModeS(other.wrapModeS);
      this.set_wrapModeT(other.wrapModeT);
      this.set_lodBias(other.lodBias);
      this.set_maxAniso(other.maxAniso);
      this.centroid = other.centroid;
      this.mipmapGenerated = other.mipmapGenerated;
    },
    equals: function (other) {
      if (this == other) {
        return !this.__samplerDirty;
      }
      if (other == null) {
        return false;
      }
      if (
        this.minFilter == other.minFilter &&
        this.magFilter == other.magFilter &&
        this.wrapModeS == other.wrapModeS &&
        this.wrapModeT == other.wrapModeT &&
        this.lodBias == other.lodBias &&
        this.maxAniso == other.maxAniso
      ) {
        return this.mipmapGenerated == other.mipmapGenerated;
      } else {
        return false;
      }
    },
    set_lodBias: function (value) {
      if (this.lodBias != value) {
        this.__samplerDirty = true;
      }
      return (this.lodBias = value);
    },
    set_magFilter: function (value) {
      if (this.magFilter != value) {
        this.__samplerDirty = true;
      }
      return (this.magFilter = value);
    },
    set_maxAniso: function (value) {
      if (this.maxAniso != value) {
        this.__samplerDirty = true;
      }
      return (this.maxAniso = value);
    },
    set_minFilter: function (value) {
      if (this.minFilter != value) {
        this.__samplerDirty = true;
      }
      return (this.minFilter = value);
    },
    set_wrapModeS: function (value) {
      if (this.wrapModeS != value) {
        this.__samplerDirty = true;
      }
      return (this.wrapModeS = value);
    },
    set_wrapModeT: function (value) {
      if (this.wrapModeT != value) {
        this.__samplerDirty = true;
      }
      return (this.wrapModeT = value);
    },
    __class__: openfl__$internal_stage3D_SamplerState,
    __properties__: {
      set_wrapModeT: "set_wrapModeT",
      set_wrapModeS: "set_wrapModeS",
      set_minFilter: "set_minFilter",
      set_maxAniso: "set_maxAniso",
      set_magFilter: "set_magFilter",
      set_lodBias: "set_lodBias",
    },
  };
  var openfl__$internal_swf_FilterType = ($hxClasses[
    "openfl._internal.swf.FilterType"
  ] = {
    __ename__: ["openfl", "_internal", "swf", "FilterType"],
    __constructs__: [
      "BlurFilter",
      "ColorMatrixFilter",
      "DropShadowFilter",
      "GlowFilter",
    ],
  });
  openfl__$internal_swf_FilterType.BlurFilter = function (
    blurX,
    blurY,
    quality
  ) {
    var $x = ["BlurFilter", 0, blurX, blurY, quality];
    $x.__enum__ = openfl__$internal_swf_FilterType;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_FilterType.ColorMatrixFilter = function (matrix) {
    var $x = ["ColorMatrixFilter", 1, matrix];
    $x.__enum__ = openfl__$internal_swf_FilterType;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_FilterType.DropShadowFilter = function (
    distance,
    angle,
    color,
    alpha,
    blurX,
    blurY,
    strength,
    quality,
    inner,
    knockout,
    hideObject
  ) {
    var $x = [
      "DropShadowFilter",
      2,
      distance,
      angle,
      color,
      alpha,
      blurX,
      blurY,
      strength,
      quality,
      inner,
      knockout,
      hideObject,
    ];
    $x.__enum__ = openfl__$internal_swf_FilterType;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_FilterType.GlowFilter = function (
    color,
    alpha,
    blurX,
    blurY,
    strength,
    quality,
    inner,
    knockout
  ) {
    var $x = [
      "GlowFilter",
      3,
      color,
      alpha,
      blurX,
      blurY,
      strength,
      quality,
      inner,
      knockout,
    ];
    $x.__enum__ = openfl__$internal_swf_FilterType;
    $x.toString = $estr;
    return $x;
  };
  var openfl__$internal_swf_SWFLite = function () {
    this.symbols = new haxe_ds_IntMap();
  };
  $hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
  openfl__$internal_swf_SWFLite.__name__ = [
    "openfl",
    "_internal",
    "swf",
    "SWFLite",
  ];
  openfl__$internal_swf_SWFLite.resolveClass = function (name) {
    var value = Type.resolveClass(name);
    if (value == null) {
      value = Type.resolveClass(
        StringTools.replace(name, "openfl._legacy", "openfl")
      );
    }
    if (value == null) {
      value = Type.resolveClass(
        StringTools.replace(name, "openfl._v2", "openfl")
      );
    }
    return value;
  };
  openfl__$internal_swf_SWFLite.resolveEnum = function (name) {
    var value = Type.resolveEnum(name);
    if (value == null) {
      value = Type.resolveEnum(
        StringTools.replace(name, "openfl._legacy", "openfl")
      );
    }
    if (value == null) {
      value = Type.resolveEnum(
        StringTools.replace(name, "openfl._v2", "openfl")
      );
    }
    return value;
  };
  openfl__$internal_swf_SWFLite.unserialize = function (data) {
    if (data == null) {
      return null;
    }
    var unserializer = new haxe_Unserializer(data);
    unserializer.setResolver({
      resolveClass: openfl__$internal_swf_SWFLite.resolveClass,
      resolveEnum: openfl__$internal_swf_SWFLite.resolveEnum,
    });
    return unserializer.unserialize();
  };
  openfl__$internal_swf_SWFLite.prototype = {
    frameRate: null,
    library: null,
    root: null,
    symbols: null,
    createButton: function (className) {
      return null;
    },
    createMovieClip: function (className) {
      if (className == null) {
        className = "";
      }
      if (className == "") {
        return this.root.__createObject(this);
      } else {
        var symbol = this.symbols.iterator();
        while (symbol.hasNext()) {
          var symbol1 = symbol.next();
          if (symbol1.className == className) {
            if (
              js_Boot.__instanceof(
                symbol1,
                openfl__$internal_symbols_SpriteSymbol
              )
            ) {
              return js_Boot
                .__cast(symbol1, openfl__$internal_symbols_SpriteSymbol)
                .__createObject(this);
            }
          }
        }
      }
      return null;
    },
    getBitmapData: function (className) {
      var symbol = this.symbols.iterator();
      while (symbol.hasNext()) {
        var symbol1 = symbol.next();
        if (symbol1.className == className) {
          if (
            js_Boot.__instanceof(
              symbol1,
              openfl__$internal_symbols_BitmapSymbol
            )
          ) {
            var bitmap = symbol1;
            return openfl_utils_Assets.getBitmapData(bitmap.path);
          }
        }
      }
      return null;
    },
    hasSymbol: function (className) {
      var symbol = this.symbols.iterator();
      while (symbol.hasNext()) {
        var symbol1 = symbol.next();
        if (symbol1.className == className) {
          return true;
        }
      }
      return false;
    },
    serialize: function () {
      var serializer = new haxe_Serializer();
      serializer.serialize(this);
      return serializer.toString();
    },
    __class__: openfl__$internal_swf_SWFLite,
  };
  var openfl_utils_AssetLibrary = function () {
    lime_utils_AssetLibrary.call(this);
  };
  $hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
  openfl_utils_AssetLibrary.__name__ = ["openfl", "utils", "AssetLibrary"];
  openfl_utils_AssetLibrary.fromBytes = function (bytes, rootPath) {
    return openfl_utils_AssetLibrary.fromManifest(
      lime_utils_AssetManifest.fromBytes(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),
        rootPath
      )
    );
  };
  openfl_utils_AssetLibrary.fromFile = function (path, rootPath) {
    return openfl_utils_AssetLibrary.fromManifest(
      lime_utils_AssetManifest.fromFile(path, rootPath)
    );
  };
  openfl_utils_AssetLibrary.fromManifest = function (manifest) {
    var library = lime_utils_AssetLibrary.fromManifest(manifest);
    if (
      library != null &&
      js_Boot.__instanceof(library, openfl_utils_AssetLibrary)
    ) {
      return library;
    } else {
      return null;
    }
  };
  openfl_utils_AssetLibrary.loadFromBytes = function (bytes, rootPath) {
    return lime_utils_AssetManifest
      .loadFromBytes(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),
        rootPath
      )
      .then(function (manifest) {
        return openfl_utils_AssetLibrary.loadFromManifest(manifest);
      });
  };
  openfl_utils_AssetLibrary.loadFromFile = function (path, rootPath) {
    return lime_utils_AssetManifest
      .loadFromFile(path, rootPath)
      .then(function (manifest) {
        return openfl_utils_AssetLibrary.loadFromManifest(manifest);
      });
  };
  openfl_utils_AssetLibrary.loadFromManifest = function (manifest) {
    var library = openfl_utils_AssetLibrary.fromManifest(manifest);
    if (
      library != null &&
      js_Boot.__instanceof(library, openfl_utils_AssetLibrary)
    ) {
      return library.load().then(function (library1) {
        return lime_app_Future.withValue(library1);
      });
    } else {
      return lime_app_Future.withError("Could not load asset manifest");
    }
  };
  openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
  openfl_utils_AssetLibrary.prototype = $extend(
    lime_utils_AssetLibrary.prototype,
    {
      getMovieClip: function (id) {
        return null;
      },
      loadMovieClip: function (id) {
        var _gthis = this;
        return new lime_app_Future(function () {
          return _gthis.getMovieClip(id);
        });
      },
      __class__: openfl_utils_AssetLibrary,
    }
  );
  var openfl__$internal_swf_SWFLiteLibrary = function (id) {
    openfl_utils_AssetLibrary.call(this);
    this.id = id;
    this.alphaCheck = new haxe_ds_StringMap();
    this.rootPath = "";
  };
  $hxClasses["openfl._internal.swf.SWFLiteLibrary"] =
    openfl__$internal_swf_SWFLiteLibrary;
  openfl__$internal_swf_SWFLiteLibrary.__name__ = [
    "openfl",
    "_internal",
    "swf",
    "SWFLiteLibrary",
  ];
  openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
  openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(
    openfl_utils_AssetLibrary.prototype,
    {
      alphaCheck: null,
      id: null,
      preloading: null,
      rootPath: null,
      swf: null,
      exists: function (id, type) {
        if (this.swf == null) {
          return false;
        }
        if (id == "" && type == "MOVIE_CLIP") {
          return true;
        }
        if (type == "IMAGE" || type == "MOVIE_CLIP") {
          if (this.swf != null) {
            return this.swf.hasSymbol(id);
          } else {
            return false;
          }
        }
        return false;
      },
      getImage: function (id) {
        var _this = this.alphaCheck;
        if (
          !(__map_reserved[id] != null
            ? _this.existsReserved(id)
            : _this.h.hasOwnProperty(id))
        ) {
          var symbol = this.swf.symbols.iterator();
          while (symbol.hasNext()) {
            var symbol1 = symbol.next();
            if (
              js_Boot.__instanceof(
                symbol1,
                openfl__$internal_symbols_BitmapSymbol
              ) &&
              js_Boot.__cast(symbol1, openfl__$internal_symbols_BitmapSymbol)
                .path == id
            ) {
              var bitmapSymbol = symbol1;
              if (bitmapSymbol.alpha != null) {
                var image = openfl_utils_AssetLibrary.prototype.getImage.call(
                  this,
                  id
                );
                var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(
                  this,
                  bitmapSymbol.alpha
                );
                this.__copyChannel(image, alpha);
                var _this1 = this.cachedImages;
                if (__map_reserved[id] != null) {
                  _this1.setReserved(id, image);
                } else {
                  _this1.h[id] = image;
                }
                var _this2 = this.alphaCheck;
                if (__map_reserved[id] != null) {
                  _this2.setReserved(id, true);
                } else {
                  _this2.h[id] = true;
                }
                return image;
              }
            }
          }
        }
        return openfl_utils_AssetLibrary.prototype.getImage.call(this, id);
      },
      getMovieClip: function (id) {
        if (this.swf != null) {
          return this.swf.createMovieClip(id);
        } else {
          return null;
        }
      },
      isLocal: function (id, type) {
        return true;
      },
      load: function () {
        var _gthis = this;
        if (this.id != null) {
          var key = this.id;
          var _this = this.preload;
          if (__map_reserved[key] != null) {
            _this.setReserved(key, true);
          } else {
            _this.h[key] = true;
          }
        }
        var promise = new lime_app_Promise();
        this.preloading = true;
        var onComplete = function (data) {
          var key1 = _gthis.id;
          var _this1 = _gthis.cachedText;
          if (__map_reserved[key1] != null) {
            _this1.setReserved(key1, data);
          } else {
            _this1.h[key1] = data;
          }
          _gthis.swf = openfl__$internal_swf_SWFLite.unserialize(data);
          _gthis.swf.library = _gthis;
          var key2 = _gthis.id;
          var value = _gthis.swf;
          var _this2 = openfl__$internal_swf_SWFLite.instances;
          if (__map_reserved[key2] != null) {
            _this2.setReserved(key2, value);
          } else {
            _this2.h[key2] = value;
          }
          _gthis
            .__load()
            .onProgress($bind(promise, promise.progress))
            .onError($bind(promise, promise.error))
            .onComplete(function (_) {
              _gthis.preloading = false;
              promise.complete(_gthis);
            });
        };
        if (openfl_utils_Assets.exists(this.id)) {
          var id = this.paths.keys();
          while (id.hasNext()) {
            var id1 = id.next();
            var _this3 = this.preload;
            if (__map_reserved[id1] != null) {
              _this3.setReserved(id1, true);
            } else {
              _this3.h[id1] = true;
            }
          }
          this.loadText(this.id)
            .onError($bind(promise, promise.error))
            .onComplete(onComplete);
        } else {
          var id2 = this.paths.keys();
          while (id2.hasNext()) {
            var id3 = id2.next();
            var _this4 = this.preload;
            if (__map_reserved[id3] != null) {
              _this4.setReserved(id3, true);
            } else {
              _this4.h[id3] = true;
            }
          }
          var path =
            this.rootPath != null && this.rootPath != ""
              ? this.rootPath + "/" + this.id
              : this.id;
          var loader = new openfl_net_URLLoader();
          loader.addEventListener("complete", function (_1) {
            onComplete(loader.data);
          });
          loader.addEventListener("ioError", function (e) {
            promise.error(e);
          });
          loader.load(new openfl_net_URLRequest(path));
        }
        return promise.future;
      },
      loadImage: function (id) {
        var _gthis = this;
        var tmp;
        if (!this.preloading) {
          var _this = this.alphaCheck;
          tmp = !(__map_reserved[id] != null
            ? _this.existsReserved(id)
            : _this.h.hasOwnProperty(id));
        } else {
          tmp = false;
        }
        if (tmp) {
          var symbol = this.swf.symbols.iterator();
          while (symbol.hasNext()) {
            var symbol1 = symbol.next();
            if (
              js_Boot.__instanceof(
                symbol1,
                openfl__$internal_symbols_BitmapSymbol
              ) &&
              js_Boot.__cast(symbol1, openfl__$internal_symbols_BitmapSymbol)
                .path == id
            ) {
              var bitmapSymbol = [symbol1];
              if (bitmapSymbol[0].alpha != null) {
                var promise = [new lime_app_Promise()];
                this.__loadImage(id)
                  .onError((($_ = promise[0]), $bind($_, $_.error)))
                  .onComplete(
                    (function (promise1, bitmapSymbol1) {
                      return function (image) {
                        _gthis
                          .__loadImage(bitmapSymbol1[0].alpha)
                          .onError((($_ = promise1[0]), $bind($_, $_.error)))
                          .onComplete(
                            (function (promise2) {
                              return function (alpha) {
                                _gthis.__copyChannel(image, alpha);
                                var _this1 = _gthis.cachedImages;
                                if (__map_reserved[id] != null) {
                                  _this1.setReserved(id, image);
                                } else {
                                  _this1.h[id] = image;
                                }
                                var _this2 = _gthis.alphaCheck;
                                if (__map_reserved[id] != null) {
                                  _this2.setReserved(id, true);
                                } else {
                                  _this2.h[id] = true;
                                }
                                promise2[0].complete(image);
                              };
                            })(promise1)
                          );
                      };
                    })(promise, bitmapSymbol)
                  );
                return promise[0].future;
              }
            }
          }
        }
        return openfl_utils_AssetLibrary.prototype.loadImage.call(this, id);
      },
      unload: function () {
        var bitmap;
        var symbol = this.swf.symbols.iterator();
        while (symbol.hasNext()) {
          var symbol1 = symbol.next();
          if (
            js_Boot.__instanceof(
              symbol1,
              openfl__$internal_symbols_BitmapSymbol
            )
          ) {
            bitmap = symbol1;
            openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
          }
        }
      },
      __copyChannel: function (image, alpha) {
        if (alpha != null) {
          image.copyChannel(
            alpha,
            alpha.get_rect(),
            new lime_math_Vector2(),
            lime_graphics_ImageChannel.RED,
            lime_graphics_ImageChannel.ALPHA
          );
        }
        image.buffer.premultiplied = true;
        image.set_premultiplied(false);
      },
      __fromManifest: function (manifest) {
        this.rootPath = manifest.rootPath;
        openfl_utils_AssetLibrary.prototype.__fromManifest.call(this, manifest);
      },
      __load: function () {
        return openfl_utils_AssetLibrary.prototype.load.call(this);
      },
      __loadImage: function (id) {
        return openfl_utils_AssetLibrary.prototype.loadImage.call(this, id);
      },
      __class__: openfl__$internal_swf_SWFLiteLibrary,
    }
  );
  var openfl__$internal_swf_ShapeCommand = ($hxClasses[
    "openfl._internal.swf.ShapeCommand"
  ] = {
    __ename__: ["openfl", "_internal", "swf", "ShapeCommand"],
    __constructs__: [
      "BeginBitmapFill",
      "BeginFill",
      "BeginGradientFill",
      "CurveTo",
      "EndFill",
      "LineStyle",
      "LineTo",
      "MoveTo",
    ],
  });
  openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function (
    bitmap,
    matrix,
    repeat,
    smooth
  ) {
    var $x = ["BeginBitmapFill", 0, bitmap, matrix, repeat, smooth];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.BeginFill = function (color, alpha) {
    var $x = ["BeginFill", 1, color, alpha];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.BeginGradientFill = function (
    fillType,
    colors,
    alphas,
    ratios,
    matrix,
    spreadMethod,
    interpolationMethod,
    focalPointRatio
  ) {
    var $x = [
      "BeginGradientFill",
      2,
      fillType,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio,
    ];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.CurveTo = function (
    controlX,
    controlY,
    anchorX,
    anchorY
  ) {
    var $x = ["CurveTo", 3, controlX, controlY, anchorX, anchorY];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill", 4];
  openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
  openfl__$internal_swf_ShapeCommand.EndFill.__enum__ =
    openfl__$internal_swf_ShapeCommand;
  openfl__$internal_swf_ShapeCommand.LineStyle = function (
    thickness,
    color,
    alpha,
    pixelHinting,
    scaleMode,
    caps,
    joints,
    miterLimit
  ) {
    var $x = [
      "LineStyle",
      5,
      thickness,
      color,
      alpha,
      pixelHinting,
      scaleMode,
      caps,
      joints,
      miterLimit,
    ];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.LineTo = function (x, y) {
    var $x = ["LineTo", 6, x, y];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  openfl__$internal_swf_ShapeCommand.MoveTo = function (x, y) {
    var $x = ["MoveTo", 7, x, y];
    $x.__enum__ = openfl__$internal_swf_ShapeCommand;
    $x.toString = $estr;
    return $x;
  };
  var openfl__$internal_symbols_SWFSymbol = function () {};
  $hxClasses["openfl._internal.symbols.SWFSymbol"] =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_SWFSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "SWFSymbol",
  ];
  openfl__$internal_symbols_SWFSymbol.prototype = {
    className: null,
    id: null,
    __createObject: function (swf) {
      return null;
    },
    __class__: openfl__$internal_symbols_SWFSymbol,
  };
  var openfl__$internal_symbols_BitmapSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.BitmapSymbol"] =
    openfl__$internal_symbols_BitmapSymbol;
  openfl__$internal_symbols_BitmapSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "BitmapSymbol",
  ];
  openfl__$internal_symbols_BitmapSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_BitmapSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      alpha: null,
      path: null,
      smooth: null,
      __createObject: function (swf) {
        return new openfl_display_Bitmap(
          openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),
          1,
          this.smooth != false
        );
      },
      __class__: openfl__$internal_symbols_BitmapSymbol,
    }
  );
  var openfl__$internal_symbols_ButtonSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.ButtonSymbol"] =
    openfl__$internal_symbols_ButtonSymbol;
  openfl__$internal_symbols_ButtonSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "ButtonSymbol",
  ];
  openfl__$internal_symbols_ButtonSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_ButtonSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      downState: null,
      hitState: null,
      overState: null,
      upState: null,
      __createObject: function (swf) {
        var simpleButton = null;
        openfl_display_SimpleButton.__initSWF = swf;
        openfl_display_SimpleButton.__initSymbol = this;
        if (this.className != null) {
          var symbolType = Type.resolveClass(this.className);
          if (symbolType != null) {
            simpleButton = Type.createInstance(symbolType, []);
          }
        }
        if (simpleButton == null) {
          simpleButton = new openfl_display_SimpleButton();
        }
        return simpleButton;
      },
      __class__: openfl__$internal_symbols_ButtonSymbol,
    }
  );
  var openfl__$internal_symbols_DynamicTextSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.DynamicTextSymbol"] =
    openfl__$internal_symbols_DynamicTextSymbol;
  openfl__$internal_symbols_DynamicTextSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "DynamicTextSymbol",
  ];
  openfl__$internal_symbols_DynamicTextSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      align: null,
      border: null,
      color: null,
      fontHeight: null,
      fontID: null,
      fontName: null,
      height: null,
      html: null,
      indent: null,
      input: null,
      leading: null,
      leftMargin: null,
      multiline: null,
      password: null,
      rightMargin: null,
      selectable: null,
      text: null,
      width: null,
      wordWrap: null,
      x: null,
      y: null,
      __createObject: function (swf) {
        var textField = new openfl_text_TextField();
        textField.__fromSymbol(swf, this);
        return textField;
      },
      __class__: openfl__$internal_symbols_DynamicTextSymbol,
    }
  );
  var openfl__$internal_symbols_FontSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.FontSymbol"] =
    openfl__$internal_symbols_FontSymbol;
  openfl__$internal_symbols_FontSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "FontSymbol",
  ];
  openfl__$internal_symbols_FontSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_FontSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      advances: null,
      bold: null,
      codes: null,
      glyphs: null,
      italic: null,
      leading: null,
      name: null,
      __class__: openfl__$internal_symbols_FontSymbol,
    }
  );
  var openfl__$internal_symbols_ShapeSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.ShapeSymbol"] =
    openfl__$internal_symbols_ShapeSymbol;
  openfl__$internal_symbols_ShapeSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "ShapeSymbol",
  ];
  openfl__$internal_symbols_ShapeSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_ShapeSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      commands: null,
      rendered: null,
      __createObject: function (swf) {
        var shape = new openfl_display_Shape();
        var graphics = shape.get_graphics();
        if (this.rendered != null) {
          graphics.copyFrom(this.rendered.get_graphics());
          return shape;
        }
        var _g = 0;
        var _g1 = this.commands;
        while (_g < _g1.length) {
          var command = _g1[_g];
          ++_g;
          switch (command[1]) {
            case 0:
              var smooth = command[5];
              var repeat = command[4];
              var matrix = command[3];
              var bitmapID = command[2];
              var bitmapSymbol = swf.symbols.get(bitmapID);
              var bitmap = swf.library.getImage(bitmapSymbol.path);
              if (bitmap != null) {
                graphics.beginBitmapFill(
                  openfl_display_BitmapData.fromImage(bitmap),
                  matrix,
                  repeat,
                  smooth
                );
              }
              break;
            case 1:
              var alpha = command[3];
              var color = command[2];
              graphics.beginFill(color, alpha);
              break;
            case 2:
              var focalPointRatio = command[9];
              var interpolationMethod = command[8];
              var spreadMethod = command[7];
              var matrix1 = command[6];
              var ratios = command[5];
              var alphas = command[4];
              var colors = command[3];
              var fillType = command[2];
              graphics.beginGradientFill(
                fillType,
                colors,
                alphas,
                ratios,
                matrix1,
                spreadMethod,
                interpolationMethod,
                focalPointRatio
              );
              break;
            case 3:
              var anchorY = command[5];
              var anchorX = command[4];
              var controlY = command[3];
              var controlX = command[2];
              graphics.curveTo(controlX, controlY, anchorX, anchorY);
              break;
            case 4:
              graphics.endFill();
              break;
            case 5:
              var miterLimit = command[9];
              var joints = command[8];
              var caps = command[7];
              var scaleMode = command[6];
              var pixelHinting = command[5];
              var alpha1 = command[4];
              var color1 = command[3];
              var thickness = command[2];
              if (thickness != null) {
                graphics.lineStyle(
                  thickness,
                  color1,
                  alpha1,
                  pixelHinting,
                  scaleMode,
                  caps,
                  joints,
                  miterLimit
                );
              } else {
                graphics.lineStyle();
              }
              break;
            case 6:
              var y = command[3];
              var x = command[2];
              graphics.lineTo(x, y);
              break;
            case 7:
              var y1 = command[3];
              var x1 = command[2];
              graphics.moveTo(x1, y1);
              break;
          }
        }
        this.commands = null;
        this.rendered = new openfl_display_Shape();
        this.rendered.get_graphics().copyFrom(shape.get_graphics());
        return shape;
      },
      __class__: openfl__$internal_symbols_ShapeSymbol,
    }
  );
  var openfl__$internal_symbols_SpriteSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
    this.frames = [];
  };
  $hxClasses["openfl._internal.symbols.SpriteSymbol"] =
    openfl__$internal_symbols_SpriteSymbol;
  openfl__$internal_symbols_SpriteSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "SpriteSymbol",
  ];
  openfl__$internal_symbols_SpriteSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_SpriteSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      frames: null,
      __createObject: function (swf) {
        var movieClip = null;
        openfl_display_MovieClip.__initSWF = swf;
        openfl_display_MovieClip.__initSymbol = this;
        if (this.className != null) {
          var symbolType = Type.resolveClass(this.className);
          if (symbolType != null) {
            movieClip = Type.createInstance(symbolType, []);
          }
        }
        if (movieClip == null) {
          movieClip = new openfl_display_MovieClip();
        }
        return movieClip;
      },
      __class__: openfl__$internal_symbols_SpriteSymbol,
    }
  );
  var openfl__$internal_symbols_StaticTextSymbol = function () {
    openfl__$internal_symbols_SWFSymbol.call(this);
  };
  $hxClasses["openfl._internal.symbols.StaticTextSymbol"] =
    openfl__$internal_symbols_StaticTextSymbol;
  openfl__$internal_symbols_StaticTextSymbol.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "StaticTextSymbol",
  ];
  openfl__$internal_symbols_StaticTextSymbol.__super__ =
    openfl__$internal_symbols_SWFSymbol;
  openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(
    openfl__$internal_symbols_SWFSymbol.prototype,
    {
      matrix: null,
      records: null,
      rendered: null,
      __createObject: function (swf) {
        var shape = new openfl_display_Shape();
        var graphics = shape.get_graphics();
        if (this.rendered != null) {
          graphics.copyFrom(this.rendered.get_graphics());
          return shape;
        }
        if (this.records != null) {
          var font = null;
          var color = 16777215;
          var offsetX = this.matrix.tx;
          var offsetY = this.matrix.ty;
          var _g = 0;
          var _g1 = this.records;
          while (_g < _g1.length) {
            var record = _g1[_g];
            ++_g;
            if (record.fontID != null) {
              font = swf.symbols.h[record.fontID];
            }
            if (record.offsetX != null) {
              offsetX = this.matrix.tx + record.offsetX * 0.05;
            }
            if (record.offsetY != null) {
              offsetY = this.matrix.ty + record.offsetY * 0.05;
            }
            if (record.color != null) {
              color = record.color;
            }
            if (font != null) {
              var scale = (record.fontHeight / 1024) * 0.05;
              var index;
              var code;
              var _g3 = 0;
              var _g2 = record.glyphs.length;
              while (_g3 < _g2) {
                var i = _g3++;
                index = record.glyphs[i];
                var _g4 = 0;
                var _g5 = font.glyphs[index];
                while (_g4 < _g5.length) {
                  var command = _g5[_g4];
                  ++_g4;
                  switch (command[1]) {
                    case 1:
                      var alpha = command[3];
                      graphics.beginFill(
                        color & 16777215,
                        ((color >> 24) & 255) / 255
                      );
                      break;
                    case 3:
                      var anchorY = command[5];
                      var anchorX = command[4];
                      var controlY = command[3];
                      var controlX = command[2];
                      graphics.curveTo(
                        controlX * scale + offsetX,
                        controlY * scale + offsetY,
                        anchorX * scale + offsetX,
                        anchorY * scale + offsetY
                      );
                      break;
                    case 4:
                      graphics.endFill();
                      break;
                    case 5:
                      var miterLimit = command[9];
                      var joints = command[8];
                      var caps = command[7];
                      var scaleMode = command[6];
                      var pixelHinting = command[5];
                      var alpha1 = command[4];
                      var color1 = command[3];
                      var thickness = command[2];
                      if (thickness != null) {
                        graphics.lineStyle(
                          thickness,
                          color1,
                          alpha1,
                          pixelHinting,
                          scaleMode,
                          caps,
                          joints,
                          miterLimit
                        );
                      } else {
                        graphics.lineStyle();
                      }
                      break;
                    case 6:
                      var y = command[3];
                      var x = command[2];
                      graphics.lineTo(x * scale + offsetX, y * scale + offsetY);
                      break;
                    case 7:
                      var y1 = command[3];
                      var x1 = command[2];
                      graphics.moveTo(
                        x1 * scale + offsetX,
                        y1 * scale + offsetY
                      );
                      break;
                    default:
                  }
                }
                offsetX += record.advances[i] * 0.05;
              }
            }
          }
        }
        this.records = null;
        this.rendered = new openfl_display_Shape();
        this.rendered.get_graphics().copyFrom(shape.get_graphics());
        return shape;
      },
      __class__: openfl__$internal_symbols_StaticTextSymbol,
    }
  );
  var openfl__$internal_symbols_StaticTextRecord = function () {};
  $hxClasses["openfl._internal.symbols.StaticTextRecord"] =
    openfl__$internal_symbols_StaticTextRecord;
  openfl__$internal_symbols_StaticTextRecord.__name__ = [
    "openfl",
    "_internal",
    "symbols",
    "StaticTextRecord",
  ];
  openfl__$internal_symbols_StaticTextRecord.prototype = {
    advances: null,
    color: null,
    fontHeight: null,
    fontID: null,
    glyphs: null,
    offsetX: null,
    offsetY: null,
    __class__: openfl__$internal_symbols_StaticTextRecord,
  };
  var openfl__$internal_text_TextEngine = function (textField) {
    this.textField = textField;
    this.width = 100;
    this.height = 100;
    this.set_text("");
    this.bounds = new openfl_geom_Rectangle(0, 0, 0, 0);
    this.type = 0;
    this.autoSize = 2;
    this.embedFonts = false;
    this.selectable = true;
    this.borderColor = 0;
    this.border = false;
    this.backgroundColor = 16777215;
    this.background = false;
    this.gridFitType = 1;
    this.maxChars = 0;
    this.multiline = false;
    this.sharpness = 0;
    this.scrollH = 0;
    this.scrollV = 1;
    this.wordWrap = false;
    this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
    this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
    this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
    openfl__$internal_text_TextEngine.__canvas =
      window.document.createElement("canvas");
    openfl__$internal_text_TextEngine.__context =
      openfl__$internal_text_TextEngine.__canvas.getContext("2d");
  };
  $hxClasses["openfl._internal.text.TextEngine"] =
    openfl__$internal_text_TextEngine;
  openfl__$internal_text_TextEngine.__name__ = [
    "openfl",
    "_internal",
    "text",
    "TextEngine",
  ];
  openfl__$internal_text_TextEngine.findFont = function (name) {
    return null;
  };
  openfl__$internal_text_TextEngine.getFormatHeight = function (format) {
    var ascent;
    var descent;
    var leading;
    openfl__$internal_text_TextEngine.__context.font =
      openfl__$internal_text_TextEngine.getFont(format);
    ascent = format.size;
    descent = format.size * 0.185;
    leading = format.leading;
    return ascent + descent + leading;
  };
  openfl__$internal_text_TextEngine.getFont = function (format) {
    var font = format.italic ? "italic " : "normal ";
    font += "normal ";
    font += format.bold ? "bold " : "normal ";
    font += format.size + "px";
    font += "/" + (format.leading + format.size + 3) + "px ";
    var _g1 = format.font;
    var font1;
    switch (_g1) {
      case "_sans":
        font1 = "sans-serif";
        break;
      case "_serif":
        font1 = "serif";
        break;
      case "_typewriter":
        font1 = "monospace";
        break;
      default:
        var _this_r = new RegExp(
          "^[\\s'\"]+(.*)[\\s'\"]+$",
          "".split("u").join("")
        );
        font1 = "'" + format.font.replace(_this_r, "$1") + "'";
    }
    font += "" + font1;
    return font;
  };
  openfl__$internal_text_TextEngine.getFontInstance = function (format) {
    return null;
  };
  openfl__$internal_text_TextEngine.prototype = {
    antiAliasType: null,
    autoSize: null,
    background: null,
    backgroundColor: null,
    border: null,
    borderColor: null,
    bottomScrollV: null,
    bounds: null,
    caretIndex: null,
    embedFonts: null,
    gridFitType: null,
    height: null,
    layoutGroups: null,
    lineAscents: null,
    lineBreaks: null,
    lineDescents: null,
    lineLeadings: null,
    lineHeights: null,
    lineWidths: null,
    maxChars: null,
    maxScrollH: null,
    maxScrollV: null,
    multiline: null,
    numLines: null,
    restrict: null,
    scrollH: null,
    scrollV: null,
    selectable: null,
    sharpness: null,
    text: null,
    textHeight: null,
    textFormatRanges: null,
    textWidth: null,
    type: null,
    width: null,
    wordWrap: null,
    textField: null,
    __cursorTimer: null,
    __hasFocus: null,
    __isKeyDown: null,
    __measuredHeight: null,
    __measuredWidth: null,
    __restrictRegexp: null,
    __selectionStart: null,
    __showCursor: null,
    __textFormat: null,
    __textLayout: null,
    __texture: null,
    __useIntAdvances: null,
    __cairoFont: null,
    __font: null,
    __hiddenInput: null,
    createRestrictRegexp: function (restrict) {
      var declinedRange = new EReg("\\^(.-.|.)", "gu");
      var declined = "";
      var accepted = declinedRange.map(restrict, function (ereg) {
        declined += ereg.matched(1);
        return "";
      });
      var testRegexpParts = [];
      if (accepted.length > 0) {
        testRegexpParts.push("[^" + restrict + "]");
      }
      if (declined.length > 0) {
        testRegexpParts.push("[" + declined + "]");
      }
      return new EReg("(" + testRegexpParts.join("|") + ")", "g");
    },
    getBounds: function () {
      var padding = this.border ? 1 : 0;
      this.bounds.width = this.width + padding;
      this.bounds.height = this.height + padding;
    },
    getLine: function (index) {
      if (index < 0 || index > this.lineBreaks.get_length() + 1) {
        return null;
      }
      if (this.lineBreaks.get_length() == 0) {
        return this.text;
      } else {
        return this.text.substring(
          index > 0 ? this.lineBreaks.get(index - 1) : 0,
          this.lineBreaks.get(index)
        );
      }
    },
    getLineBreakIndex: function (startIndex) {
      if (startIndex == null) {
        startIndex = 0;
      }
      var cr = this.text.indexOf("\n", startIndex);
      var lf = this.text.indexOf("\r", startIndex);
      if (cr == -1) {
        return lf;
      }
      if (lf == -1) {
        return cr;
      }
      if (cr < lf) {
        return cr;
      } else {
        return lf;
      }
    },
    getLineMeasurements: function () {
      this.lineAscents.set_length(0);
      this.lineDescents.set_length(0);
      this.lineLeadings.set_length(0);
      this.lineHeights.set_length(0);
      this.lineWidths.set_length(0);
      var currentLineAscent = 0.0;
      var currentLineDescent = 0.0;
      var currentLineLeading = null;
      var currentLineHeight = 0.0;
      var currentLineWidth = 0.0;
      this.textWidth = 0;
      this.textHeight = 0;
      this.numLines = 1;
      this.bottomScrollV = 0;
      this.maxScrollH = 0;
      var _g = 0;
      var _g1 = this.layoutGroups;
      while (_g < _g1.get_length()) {
        var group = _g1.get(_g);
        ++_g;
        while (group.lineIndex > this.numLines - 1) {
          this.lineAscents.push(currentLineAscent);
          this.lineDescents.push(currentLineDescent);
          this.lineLeadings.push(
            currentLineLeading != null ? currentLineLeading : 0
          );
          this.lineHeights.push(currentLineHeight);
          this.lineWidths.push(currentLineWidth);
          currentLineAscent = 0;
          currentLineDescent = 0;
          currentLineLeading = null;
          currentLineHeight = 0;
          currentLineWidth = 0;
          this.numLines++;
          if (this.textHeight <= this.height - 2) {
            this.bottomScrollV++;
          }
        }
        currentLineAscent = Math.max(currentLineAscent, group.ascent);
        currentLineDescent = Math.max(currentLineDescent, group.descent);
        if (currentLineLeading == null) {
          currentLineLeading = group.leading;
        } else {
          currentLineLeading = Math.max(currentLineLeading, group.leading) | 0;
        }
        currentLineHeight = Math.max(currentLineHeight, group.height);
        currentLineWidth = group.offsetX - 2 + group.width;
        if (currentLineWidth > this.textWidth) {
          this.textWidth = currentLineWidth;
        }
        this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
      }
      this.lineAscents.push(currentLineAscent);
      this.lineDescents.push(currentLineDescent);
      this.lineLeadings.push(
        currentLineLeading != null ? currentLineLeading : 0
      );
      this.lineHeights.push(currentLineHeight);
      this.lineWidths.push(currentLineWidth);
      if (this.numLines == 1) {
        this.bottomScrollV = 1;
        if (currentLineLeading > 0) {
          this.textHeight += currentLineLeading;
        }
      } else if (this.textHeight <= this.height - 2) {
        this.bottomScrollV++;
      }
      if (this.autoSize != 2) {
        var _g2 = this.autoSize;
        switch (_g2) {
          case 0:
          case 1:
          case 3:
            if (!this.wordWrap) {
              this.width = this.textWidth + 4;
            }
            this.height = this.textHeight + 4;
            this.bottomScrollV = this.numLines;
            break;
          default:
        }
      }
      if (this.textWidth > this.width - 4) {
        this.maxScrollH = (this.textWidth - this.width + 4) | 0;
      } else {
        this.maxScrollH = 0;
      }
      this.maxScrollV = this.numLines - this.bottomScrollV + 1;
    },
    getLayoutGroups: function () {
      var _gthis = this;
      this.layoutGroups.set_length(0);
      var rangeIndex = -1;
      var formatRange = null;
      var font = null;
      var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
      var leading = 0;
      var ascent = 0.0;
      var descent = 0.0;
      var layoutGroup = null;
      var advances = null;
      var widthValue;
      var heightValue = 0.0;
      var previousSpaceIndex = 0;
      var previousBreakIndex = 0;
      var spaceIndex = this.text.indexOf(" ");
      var breakIndex = this.getLineBreakIndex();
      var marginRight = 0.0;
      var offsetX = 2.0;
      var offsetY = 2.0;
      var textIndex = 0;
      var lineIndex = 0;
      var lineFormat = null;
      if (rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
        ++rangeIndex;
        formatRange = _gthis.textFormatRanges.get(rangeIndex);
        currentFormat.__merge(formatRange.format);
        openfl__$internal_text_TextEngine.__context.font =
          openfl__$internal_text_TextEngine.getFont(currentFormat);
        ascent = currentFormat.size;
        descent = currentFormat.size * 0.185;
        leading = currentFormat.leading;
        heightValue = ascent + descent + leading;
      }
      lineFormat = formatRange.format;
      var wrap;
      var maxLoops = this.text.length;
      if (this.multiline) {
        ++maxLoops;
      }
      while (textIndex < maxLoops)
        if (
          breakIndex > -1 &&
          (spaceIndex == -1 || breakIndex < spaceIndex) &&
          formatRange.end >= breakIndex
        ) {
          layoutGroup = new openfl__$internal_text_TextLayoutGroup(
            formatRange.format,
            textIndex,
            breakIndex
          );
          var text = this.text;
          var advances1 = [];
          if (_gthis.__useIntAdvances == null) {
            _gthis.__useIntAdvances = new EReg("Trident/7.0", "").match(
              window.navigator.userAgent
            );
          }
          if (_gthis.__useIntAdvances) {
            var previousWidth = 0.0;
            var width;
            var _g1 = textIndex;
            var _g = breakIndex;
            while (_g1 < _g) {
              var i = _g1++;
              width = openfl__$internal_text_TextEngine.__context.measureText(
                text.substring(textIndex, i + 1)
              ).width;
              advances1.push(width - previousWidth);
              previousWidth = width;
            }
          } else {
            var _g11 = textIndex;
            var _g2 = breakIndex;
            while (_g11 < _g2) {
              var i1 = _g11++;
              advances1.push(
                openfl__$internal_text_TextEngine.__context.measureText(
                  text.charAt(i1)
                ).width
              );
            }
          }
          layoutGroup.advances = advances1;
          layoutGroup.offsetX = offsetX;
          layoutGroup.ascent = ascent;
          layoutGroup.descent = descent;
          layoutGroup.leading = leading;
          layoutGroup.lineIndex = lineIndex;
          layoutGroup.offsetY = offsetY;
          var advances2 = layoutGroup.advances;
          var width1 = 0.0;
          var _g3 = 0;
          while (_g3 < advances2.length) {
            var advance = advances2[_g3];
            ++_g3;
            width1 += advance;
          }
          layoutGroup.width = width1;
          layoutGroup.height = heightValue;
          this.layoutGroups.push(layoutGroup);
          offsetY += heightValue;
          offsetX = 2;
          if (formatRange.end == breakIndex) {
            if (rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
              ++rangeIndex;
              formatRange = _gthis.textFormatRanges.get(rangeIndex);
              currentFormat.__merge(formatRange.format);
              openfl__$internal_text_TextEngine.__context.font =
                openfl__$internal_text_TextEngine.getFont(currentFormat);
              ascent = currentFormat.size;
              descent = currentFormat.size * 0.185;
              leading = currentFormat.leading;
              heightValue = ascent + descent + leading;
            }
            lineFormat = formatRange.format;
          }
          textIndex = breakIndex + 1;
          previousBreakIndex = breakIndex;
          breakIndex = this.getLineBreakIndex(textIndex);
          ++lineIndex;
          layoutGroup = null;
        } else if (
          formatRange.end >= spaceIndex &&
          spaceIndex > -1 &&
          textIndex < formatRange.end
        ) {
          if (
            layoutGroup != null &&
            previousSpaceIndex != previousBreakIndex &&
            previousSpaceIndex == textIndex - 1 &&
            textIndex == formatRange.start &&
            spaceIndex <= formatRange.end
          ) {
            layoutGroup.endIndex = textIndex;
            layoutGroup.width +=
              layoutGroup.advances[layoutGroup.advances.length - 1];
          }
          layoutGroup = null;
          wrap = false;
          while (textIndex != formatRange.end) {
            if (spaceIndex == -1) {
              spaceIndex = formatRange.end;
            }
            var text1 = this.text;
            var endIndex = spaceIndex + 1;
            var advances3 = [];
            if (_gthis.__useIntAdvances == null) {
              _gthis.__useIntAdvances = new EReg("Trident/7.0", "").match(
                window.navigator.userAgent
              );
            }
            if (_gthis.__useIntAdvances) {
              var previousWidth1 = 0.0;
              var width2;
              var _g12 = textIndex;
              var _g4 = endIndex;
              while (_g12 < _g4) {
                var i2 = _g12++;
                width2 =
                  openfl__$internal_text_TextEngine.__context.measureText(
                    text1.substring(textIndex, i2 + 1)
                  ).width;
                advances3.push(width2 - previousWidth1);
                previousWidth1 = width2;
              }
            } else {
              var _g13 = textIndex;
              var _g5 = endIndex;
              while (_g13 < _g5) {
                var i3 = _g13++;
                advances3.push(
                  openfl__$internal_text_TextEngine.__context.measureText(
                    text1.charAt(i3)
                  ).width
                );
              }
            }
            advances = advances3;
            var spaceWidth = advances[advances.length - 1];
            var width3 = 0.0;
            var _g6 = 0;
            while (_g6 < advances.length) {
              var advance1 = advances[_g6];
              ++_g6;
              width3 += advance1;
            }
            widthValue = width3 - spaceWidth;
            if (this.wordWrap) {
              if (offsetX + widthValue > this.width - 2) {
                wrap = true;
              }
            }
            if (wrap) {
              offsetY += heightValue;
              var i4 = this.layoutGroups.get_length() - 1;
              var offsetCount = 0;
              while (true) {
                layoutGroup = this.layoutGroups.get(i4);
                if (i4 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
                  ++offsetCount;
                } else {
                  break;
                }
                --i4;
              }
              ++lineIndex;
              offsetX = 2;
              if (offsetCount > 0) {
                var bumpX = this.layoutGroups.get(
                  this.layoutGroups.get_length() - offsetCount
                ).offsetX;
                var _g14 = this.layoutGroups.get_length() - offsetCount;
                var _g7 = this.layoutGroups.get_length();
                while (_g14 < _g7) {
                  var i5 = _g14++;
                  layoutGroup = this.layoutGroups.get(i5);
                  layoutGroup.offsetX -= bumpX;
                  layoutGroup.offsetY = offsetY;
                  layoutGroup.lineIndex = lineIndex;
                  offsetX += layoutGroup.width;
                }
              }
              layoutGroup = new openfl__$internal_text_TextLayoutGroup(
                formatRange.format,
                textIndex,
                spaceIndex
              );
              layoutGroup.advances = advances;
              layoutGroup.offsetX = offsetX;
              layoutGroup.ascent = ascent;
              layoutGroup.descent = descent;
              layoutGroup.leading = leading;
              layoutGroup.lineIndex = lineIndex;
              layoutGroup.offsetY = offsetY;
              layoutGroup.width = widthValue;
              layoutGroup.height = heightValue;
              this.layoutGroups.push(layoutGroup);
              offsetX = widthValue + spaceWidth;
              marginRight = spaceWidth;
              wrap = false;
            } else {
              if (
                formatRange.start == previousSpaceIndex &&
                textIndex - 1 == previousSpaceIndex
              ) {
                var text2 = this.text;
                var advances4 = [];
                if (_gthis.__useIntAdvances == null) {
                  _gthis.__useIntAdvances = new EReg("Trident/7.0", "").match(
                    window.navigator.userAgent
                  );
                }
                if (_gthis.__useIntAdvances) {
                  var previousWidth2 = 0.0;
                  var width4;
                  var _g15 = previousSpaceIndex;
                  var _g8 = textIndex;
                  while (_g15 < _g8) {
                    var i6 = _g15++;
                    width4 =
                      openfl__$internal_text_TextEngine.__context.measureText(
                        text2.substring(previousSpaceIndex, i6 + 1)
                      ).width;
                    advances4.push(width4 - previousWidth2);
                    previousWidth2 = width4;
                  }
                } else {
                  var _g16 = previousSpaceIndex;
                  var _g9 = textIndex;
                  while (_g16 < _g9) {
                    var i7 = _g16++;
                    advances4.push(
                      openfl__$internal_text_TextEngine.__context.measureText(
                        text2.charAt(i7)
                      ).width
                    );
                  }
                }
                advances = advances4.concat(advances);
                widthValue += advances[0];
                offsetX -= advances[0];
                textIndex = previousSpaceIndex;
              }
              if (layoutGroup != null && textIndex == spaceIndex) {
                if (formatRange.format.align != 2) {
                  layoutGroup.endIndex = spaceIndex;
                }
                marginRight += spaceWidth;
              } else if (layoutGroup == null || lineFormat.align == 2) {
                layoutGroup = new openfl__$internal_text_TextLayoutGroup(
                  formatRange.format,
                  textIndex,
                  spaceIndex
                );
                layoutGroup.advances = advances;
                layoutGroup.offsetX = offsetX;
                layoutGroup.ascent = ascent;
                layoutGroup.descent = descent;
                layoutGroup.leading = leading;
                layoutGroup.lineIndex = lineIndex;
                layoutGroup.offsetY = offsetY;
                layoutGroup.width = widthValue;
                layoutGroup.height = heightValue;
                this.layoutGroups.push(layoutGroup);
                marginRight = spaceWidth;
              } else {
                layoutGroup.endIndex = spaceIndex;
                layoutGroup.advances = layoutGroup.advances.concat(advances);
                var advances5 = layoutGroup.advances;
                var width5 = 0.0;
                var _g10 = 0;
                while (_g10 < advances5.length) {
                  var advance2 = advances5[_g10];
                  ++_g10;
                  width5 += advance2;
                }
                layoutGroup.width = width5;
                marginRight = spaceWidth;
              }
              offsetX += widthValue + spaceWidth;
            }
            textIndex = spaceIndex + 1;
            previousSpaceIndex = spaceIndex;
            var nextSpaceIndex = this.text.indexOf(" ", previousSpaceIndex + 1);
            if (
              previousSpaceIndex != breakIndex &&
              breakIndex > -1 &&
              (nextSpaceIndex == -1 || nextSpaceIndex > breakIndex)
            ) {
              spaceIndex = breakIndex;
            } else {
              if (breakIndex == previousSpaceIndex) {
                textIndex = breakIndex;
              }
              spaceIndex = nextSpaceIndex;
            }
            if (formatRange.end <= previousSpaceIndex) {
              layoutGroup = null;
              if (rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
                ++rangeIndex;
                formatRange = _gthis.textFormatRanges.get(rangeIndex);
                currentFormat.__merge(formatRange.format);
                openfl__$internal_text_TextEngine.__context.font =
                  openfl__$internal_text_TextEngine.getFont(currentFormat);
                ascent = currentFormat.size;
                descent = currentFormat.size * 0.185;
                leading = currentFormat.leading;
                heightValue = ascent + descent + leading;
              }
            }
            if (
              (spaceIndex > breakIndex && breakIndex > -1) ||
              textIndex > this.text.length ||
              spaceIndex > formatRange.end ||
              (spaceIndex == -1 && breakIndex > -1)
            ) {
              break;
            }
          }
        } else {
          if (textIndex > formatRange.end) {
            break;
          } else if (
            textIndex < formatRange.end ||
            textIndex == this.text.length
          ) {
            if (layoutGroup == null) {
              layoutGroup = new openfl__$internal_text_TextLayoutGroup(
                formatRange.format,
                textIndex,
                formatRange.end
              );
              var text3 = this.text;
              var endIndex1 = formatRange.end;
              var advances6 = [];
              if (_gthis.__useIntAdvances == null) {
                _gthis.__useIntAdvances = new EReg("Trident/7.0", "").match(
                  window.navigator.userAgent
                );
              }
              if (_gthis.__useIntAdvances) {
                var previousWidth3 = 0.0;
                var width6;
                var _g17 = textIndex;
                var _g18 = endIndex1;
                while (_g17 < _g18) {
                  var i8 = _g17++;
                  width6 =
                    openfl__$internal_text_TextEngine.__context.measureText(
                      text3.substring(textIndex, i8 + 1)
                    ).width;
                  advances6.push(width6 - previousWidth3);
                  previousWidth3 = width6;
                }
              } else {
                var _g19 = textIndex;
                var _g20 = endIndex1;
                while (_g19 < _g20) {
                  var i9 = _g19++;
                  advances6.push(
                    openfl__$internal_text_TextEngine.__context.measureText(
                      text3.charAt(i9)
                    ).width
                  );
                }
              }
              layoutGroup.advances = advances6;
              layoutGroup.offsetX = offsetX;
              layoutGroup.ascent = ascent;
              layoutGroup.descent = descent;
              layoutGroup.leading = leading;
              layoutGroup.lineIndex = lineIndex;
              layoutGroup.offsetY = offsetY;
              var advances7 = layoutGroup.advances;
              var width7 = 0.0;
              var _g21 = 0;
              while (_g21 < advances7.length) {
                var advance3 = advances7[_g21];
                ++_g21;
                width7 += advance3;
              }
              layoutGroup.width = width7;
              layoutGroup.height = heightValue;
              this.layoutGroups.push(layoutGroup);
              offsetX += layoutGroup.width;
            } else if (layoutGroup.startIndex != layoutGroup.endIndex) {
              var text4 = this.text;
              var endIndex2 = formatRange.end;
              var advances8 = [];
              if (_gthis.__useIntAdvances == null) {
                _gthis.__useIntAdvances = new EReg("Trident/7.0", "").match(
                  window.navigator.userAgent
                );
              }
              if (_gthis.__useIntAdvances) {
                var previousWidth4 = 0.0;
                var width8;
                var _g110 = textIndex;
                var _g22 = endIndex2;
                while (_g110 < _g22) {
                  var i10 = _g110++;
                  width8 =
                    openfl__$internal_text_TextEngine.__context.measureText(
                      text4.substring(textIndex, i10 + 1)
                    ).width;
                  advances8.push(width8 - previousWidth4);
                  previousWidth4 = width8;
                }
              } else {
                var _g111 = textIndex;
                var _g23 = endIndex2;
                while (_g111 < _g23) {
                  var i11 = _g111++;
                  advances8.push(
                    openfl__$internal_text_TextEngine.__context.measureText(
                      text4.charAt(i11)
                    ).width
                  );
                }
              }
              advances = advances8;
              var width9 = 0.0;
              var _g24 = 0;
              while (_g24 < advances.length) {
                var advance4 = advances[_g24];
                ++_g24;
                width9 += advance4;
              }
              widthValue = width9;
              layoutGroup.advances = layoutGroup.advances.concat(advances);
              layoutGroup.width += marginRight + widthValue;
              layoutGroup.endIndex = formatRange.end;
              offsetX += widthValue;
            }
            textIndex = formatRange.end;
          }
          if (rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
            ++rangeIndex;
            formatRange = _gthis.textFormatRanges.get(rangeIndex);
            currentFormat.__merge(formatRange.format);
            openfl__$internal_text_TextEngine.__context.font =
              openfl__$internal_text_TextEngine.getFont(currentFormat);
            ascent = currentFormat.size;
            descent = currentFormat.size * 0.185;
            leading = currentFormat.leading;
            heightValue = ascent + descent + leading;
          }
          if (textIndex == formatRange.end) {
            ++textIndex;
            break;
          }
        }
    },
    setTextAlignment: function () {
      var lineIndex = -1;
      var offsetX = 0.0;
      var group;
      var lineLength;
      var _g1 = 0;
      var _g = this.layoutGroups.get_length();
      while (_g1 < _g) {
        var i = _g1++;
        group = this.layoutGroups.get(i);
        if (group.lineIndex != lineIndex) {
          lineIndex = group.lineIndex;
          var _g2 = group.format.align;
          switch (_g2) {
            case 0:
              if (this.lineWidths.get(lineIndex) < this.width - 4) {
                offsetX = Math.round(
                  (this.width - 4 - this.lineWidths.get(lineIndex)) / 2
                );
              } else {
                offsetX = 0;
              }
              break;
            case 2:
              if (this.lineWidths.get(lineIndex) < this.width - 4) {
                lineLength = 1;
                var _g3 = i + 1;
                var _g21 = this.layoutGroups.get_length();
                while (_g3 < _g21) {
                  var j = _g3++;
                  if (this.layoutGroups.get(j).lineIndex == lineIndex) {
                    ++lineLength;
                  } else {
                    break;
                  }
                }
                if (lineLength > 1) {
                  group = this.layoutGroups.get(i + lineLength - 1);
                  var endChar = this.text.charAt(group.endIndex);
                  if (
                    group.endIndex < this.text.length &&
                    endChar != "\n" &&
                    endChar != "\r"
                  ) {
                    offsetX =
                      (this.width - 4 - this.lineWidths.get(lineIndex)) /
                      (lineLength - 1);
                    var _g31 = 1;
                    var _g22 = lineLength;
                    while (_g31 < _g22) {
                      var j1 = _g31++;
                      this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
                    }
                  }
                }
              }
              offsetX = 0;
              break;
            case 4:
              if (this.lineWidths.get(lineIndex) < this.width - 4) {
                offsetX = Math.round(
                  this.width - 4 - this.lineWidths.get(lineIndex)
                );
              } else {
                offsetX = 0;
              }
              break;
            default:
              offsetX = 0;
          }
        }
        if (offsetX > 0) {
          group.offsetX += offsetX;
        }
      }
    },
    update: function () {
      if (
        this.text == null ||
        (!this.multiline && StringTools.trim(this.text) == "") ||
        this.textFormatRanges.get_length() == 0
      ) {
        this.lineAscents.set_length(0);
        this.lineBreaks.set_length(0);
        this.lineDescents.set_length(0);
        this.lineLeadings.set_length(0);
        this.lineHeights.set_length(0);
        this.lineWidths.set_length(0);
        this.layoutGroups.set_length(0);
        this.textWidth = 0;
        this.textHeight = 0;
        this.numLines = 1;
        this.maxScrollH = 0;
        this.maxScrollV = 1;
        this.bottomScrollV = 1;
      } else {
        this.getLayoutGroups();
        this.getLineMeasurements();
        this.setTextAlignment();
      }
      this.getBounds();
    },
    set_restrict: function (value) {
      if (this.restrict == value) {
        return this.restrict;
      }
      this.restrict = value;
      if (this.restrict == null || this.restrict.length == 0) {
        this.__restrictRegexp = null;
      } else {
        this.__restrictRegexp = this.createRestrictRegexp(value);
      }
      return this.restrict;
    },
    set_text: function (value) {
      if (value == null) {
        return (this.text = value);
      }
      if (this.__restrictRegexp != null) {
        value = this.__restrictRegexp.split(value).join("");
      }
      if (this.maxChars > 0 && value.length > this.maxChars) {
        value = HxOverrides.substr(value, 0, this.maxChars);
      }
      this.text = value;
      return this.text;
    },
    __class__: openfl__$internal_text_TextEngine,
    __properties__: { set_text: "set_text", set_restrict: "set_restrict" },
  };
  var openfl__$internal_text_TextFormatRange = function (format, start, end) {
    this.format = format;
    this.start = start;
    this.end = end;
  };
  $hxClasses["openfl._internal.text.TextFormatRange"] =
    openfl__$internal_text_TextFormatRange;
  openfl__$internal_text_TextFormatRange.__name__ = [
    "openfl",
    "_internal",
    "text",
    "TextFormatRange",
  ];
  openfl__$internal_text_TextFormatRange.prototype = {
    end: null,
    format: null,
    start: null,
    __class__: openfl__$internal_text_TextFormatRange,
  };
  var openfl__$internal_text_TextLayoutGroup = function (
    format,
    startIndex,
    endIndex
  ) {
    this.format = format;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
  };
  $hxClasses["openfl._internal.text.TextLayoutGroup"] =
    openfl__$internal_text_TextLayoutGroup;
  openfl__$internal_text_TextLayoutGroup.__name__ = [
    "openfl",
    "_internal",
    "text",
    "TextLayoutGroup",
  ];
  openfl__$internal_text_TextLayoutGroup.prototype = {
    advances: null,
    ascent: null,
    descent: null,
    endIndex: null,
    format: null,
    height: null,
    leading: null,
    lineIndex: null,
    offsetX: null,
    offsetY: null,
    startIndex: null,
    width: null,
    __class__: openfl__$internal_text_TextLayoutGroup,
  };
  var openfl__$internal_timeline_Frame = function () {
    this.objects = [];
  };
  $hxClasses["openfl._internal.timeline.Frame"] =
    openfl__$internal_timeline_Frame;
  openfl__$internal_timeline_Frame.__name__ = [
    "openfl",
    "_internal",
    "timeline",
    "Frame",
  ];
  openfl__$internal_timeline_Frame.prototype = {
    label: null,
    objects: null,
    __class__: openfl__$internal_timeline_Frame,
  };
  var openfl__$internal_timeline_FrameObject = function () {};
  $hxClasses["openfl._internal.timeline.FrameObject"] =
    openfl__$internal_timeline_FrameObject;
  openfl__$internal_timeline_FrameObject.__name__ = [
    "openfl",
    "_internal",
    "timeline",
    "FrameObject",
  ];
  openfl__$internal_timeline_FrameObject.prototype = {
    clipDepth: null,
    colorTransform: null,
    depth: null,
    filters: null,
    id: null,
    matrix: null,
    name: null,
    symbol: null,
    type: null,
    visible: null,
    __class__: openfl__$internal_timeline_FrameObject,
  };
  var openfl__$internal_timeline_FrameObjectType = ($hxClasses[
    "openfl._internal.timeline.FrameObjectType"
  ] = {
    __ename__: ["openfl", "_internal", "timeline", "FrameObjectType"],
    __constructs__: ["CREATE", "UPDATE", "DESTROY"],
  });
  openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE", 0];
  openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
  openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ =
    openfl__$internal_timeline_FrameObjectType;
  openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE", 1];
  openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
  openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ =
    openfl__$internal_timeline_FrameObjectType;
  openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY", 2];
  openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
  openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ =
    openfl__$internal_timeline_FrameObjectType;
  var openfl__$internal_utils_NullUtils = function () {};
  $hxClasses["openfl._internal.utils.NullUtils"] =
    openfl__$internal_utils_NullUtils;
  openfl__$internal_utils_NullUtils.__name__ = [
    "openfl",
    "_internal",
    "utils",
    "NullUtils",
  ];
  var openfl__$internal_utils_PerlinNoise = function (seed, octaves, falloff) {
    if (seed == null) {
      seed = 123;
    }
    if (falloff == null) {
      falloff = 0.5;
    }
    this.octaves = octaves == null ? 4 : octaves;
    this.baseFactor = 0.015625;
    this.seedOffset(seed);
    this.octFreqPers(falloff);
  };
  $hxClasses["openfl._internal.utils.PerlinNoise"] =
    openfl__$internal_utils_PerlinNoise;
  openfl__$internal_utils_PerlinNoise.__name__ = [
    "openfl",
    "_internal",
    "utils",
    "PerlinNoise",
  ];
  openfl__$internal_utils_PerlinNoise.prototype = {
    octaves: null,
    aOctFreq: null,
    aOctPers: null,
    fPersMax: null,
    iXoffset: null,
    iYoffset: null,
    iZoffset: null,
    baseFactor: null,
    fill: function (bitmap, _x, _y, _z, _) {
      var baseX = _x * this.baseFactor + this.iXoffset;
      _y = _y * this.baseFactor + this.iYoffset;
      _z = _z * this.baseFactor + this.iZoffset;
      var width = bitmap.width;
      var height = bitmap.height;
      var p = openfl__$internal_utils_PerlinNoise.P;
      var octaves = this.octaves;
      var aOctFreq = this.aOctFreq;
      var aOctPers = this.aOctPers;
      var _g1 = 0;
      var _g = height;
      while (_g1 < _g) {
        var py = _g1++;
        _x = baseX;
        var _g3 = 0;
        var _g2 = width;
        while (_g3 < _g2) {
          var px = _g3++;
          var s = 0;
          var _g5 = 0;
          var _g4 = octaves;
          while (_g5 < _g4) {
            var i = _g5++;
            var fFreq = aOctFreq[i];
            var fPers = aOctPers[i];
            var x = _x * fFreq;
            var y = _y * fFreq;
            var z = _z * fFreq;
            var xf = x - (x % 1);
            var yf = y - (y % 1);
            var zf = z - (z % 1);
            var X = (xf | 0) & 255;
            var Y = (yf | 0) & 255;
            var Z = (zf | 0) & 255;
            x -= xf;
            y -= yf;
            z -= zf;
            var u = x * x * x * (x * (x * 6 - 15) + 10);
            var v = y * y * y * (y * (y * 6 - 15) + 10);
            var w = z * z * z * (z * (z * 6 - 15) + 10);
            var A = p[X] + Y;
            var AA = p[A] + Z;
            var AB = p[A + 1] + Z;
            var B = p[X + 1] + Y;
            var BA = p[B] + Z;
            var BB = p[B + 1] + Z;
            var x1 = x - 1;
            var y1 = y - 1;
            var z1 = z - 1;
            var hash = p[BB + 1] & 15;
            var g1 =
              ((hash & 1) == 0 ? (hash < 8 ? x1 : y1) : hash < 8 ? -x1 : -y1) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y1
                  : hash == 12
                  ? x1
                  : z1
                : hash < 4
                ? -y1
                : hash == 14
                ? -x1
                : -z1);
            hash = p[AB + 1] & 15;
            var g2 =
              ((hash & 1) == 0 ? (hash < 8 ? x : y1) : hash < 8 ? -x : -y1) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y1
                  : hash == 12
                  ? x
                  : z1
                : hash < 4
                ? -y1
                : hash == 14
                ? -x
                : -z1);
            hash = p[BA + 1] & 15;
            var g3 =
              ((hash & 1) == 0 ? (hash < 8 ? x1 : y) : hash < 8 ? -x1 : -y) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y
                  : hash == 12
                  ? x1
                  : z1
                : hash < 4
                ? -y
                : hash == 14
                ? -x1
                : -z1);
            hash = p[AA + 1] & 15;
            var g4 =
              ((hash & 1) == 0 ? (hash < 8 ? x : y) : hash < 8 ? -x : -y) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y
                  : hash == 12
                  ? x
                  : z1
                : hash < 4
                ? -y
                : hash == 14
                ? -x
                : -z1);
            hash = p[BB] & 15;
            var g5 =
              ((hash & 1) == 0 ? (hash < 8 ? x1 : y1) : hash < 8 ? -x1 : -y1) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y1
                  : hash == 12
                  ? x1
                  : z
                : hash < 4
                ? -y1
                : hash == 14
                ? -x1
                : -z);
            hash = p[AB] & 15;
            var g6 =
              ((hash & 1) == 0 ? (hash < 8 ? x : y1) : hash < 8 ? -x : -y1) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y1
                  : hash == 12
                  ? x
                  : z
                : hash < 4
                ? -y1
                : hash == 14
                ? -x
                : -z);
            hash = p[BA] & 15;
            var g7 =
              ((hash & 1) == 0 ? (hash < 8 ? x1 : y) : hash < 8 ? -x1 : -y) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y
                  : hash == 12
                  ? x1
                  : z
                : hash < 4
                ? -y
                : hash == 14
                ? -x1
                : -z);
            hash = p[AA] & 15;
            var g8 =
              ((hash & 1) == 0 ? (hash < 8 ? x : y) : hash < 8 ? -x : -y) +
              ((hash & 2) == 0
                ? hash < 4
                  ? y
                  : hash == 12
                  ? x
                  : z
                : hash < 4
                ? -y
                : hash == 14
                ? -x
                : -z);
            g2 += u * (g1 - g2);
            g4 += u * (g3 - g4);
            g6 += u * (g5 - g6);
            g8 += u * (g7 - g8);
            g4 += v * (g2 - g4);
            g8 += v * (g6 - g8);
            s += (g8 + w * (g4 - g8)) * fPers;
          }
          var color = ((s * this.fPersMax + 1) * 128) | 0;
          bitmap.setPixel32(
            px,
            py,
            -16777216 | (color << 16) | (color << 8) | color
          );
          _x += this.baseFactor;
        }
        _y += this.baseFactor;
      }
    },
    octFreqPers: function (fPersistence) {
      var fFreq;
      var fPers;
      this.aOctFreq = [];
      this.aOctPers = [];
      this.fPersMax = 0;
      var _g1 = 0;
      var _g = this.octaves;
      while (_g1 < _g) {
        var i = _g1++;
        fFreq = Math.pow(2, i);
        fPers = Math.pow(fPersistence, i);
        this.fPersMax += fPers;
        this.aOctFreq.push(fFreq);
        this.aOctPers.push(fPers);
      }
      this.fPersMax = 1 / this.fPersMax;
    },
    seedOffset: function (iSeed) {
      iSeed = (iSeed * 16807) % 2147483647 | 0;
      this.iXoffset = iSeed;
      iSeed = (iSeed * 16807) % 2147483647 | 0;
      this.iYoffset = iSeed;
      iSeed = (iSeed * 16807) % 2147483647 | 0;
      this.iZoffset = iSeed;
    },
    __class__: openfl__$internal_utils_PerlinNoise,
  };
  var openfl_desktop_Clipboard = function () {};
  $hxClasses["openfl.desktop.Clipboard"] = openfl_desktop_Clipboard;
  openfl_desktop_Clipboard.__name__ = ["openfl", "desktop", "Clipboard"];
  openfl_desktop_Clipboard.__properties__ = {
    get_generalClipboard: "get_generalClipboard",
  };
  openfl_desktop_Clipboard.get_generalClipboard = function () {
    if (openfl_desktop_Clipboard.__generalClipboard == null) {
      openfl_desktop_Clipboard.__generalClipboard =
        new openfl_desktop_Clipboard();
      openfl_desktop_Clipboard.__generalClipboard.__systemClipboard = true;
    }
    return openfl_desktop_Clipboard.__generalClipboard;
  };
  openfl_desktop_Clipboard.prototype = {
    __htmlText: null,
    __richText: null,
    __systemClipboard: null,
    __text: null,
    clear: function () {
      if (!this.__systemClipboard) {
        this.__htmlText = null;
        this.__richText = null;
        this.__text = null;
      } else {
        lime_system_Clipboard.set_text(null);
      }
    },
    clearData: function (format) {
      if (!this.__systemClipboard) {
        switch (format) {
          case 0:
            this.__htmlText = null;
            break;
          case 1:
            this.__richText = null;
            break;
          case 2:
            this.__text = null;
            break;
          default:
        }
      } else {
        switch (format) {
          case 0:
          case 1:
          case 2:
            lime_system_Clipboard.set_text(null);
            break;
          default:
        }
      }
    },
    getData: function (format, transferMode) {
      if (transferMode == null) {
        transferMode = 3;
      }
      if (!this.__systemClipboard) {
        switch (format) {
          case 0:
            return this.__htmlText;
          case 1:
            return this.__richText;
          case 2:
            return this.__text;
          default:
            return null;
        }
      } else {
        switch (format) {
          case 0:
          case 1:
          case 2:
            return lime_system_Clipboard.get_text();
          default:
            return null;
        }
      }
    },
    hasFormat: function (format) {
      if (!this.__systemClipboard) {
        switch (format) {
          case 0:
            return this.__htmlText != null;
          case 1:
            return this.__richText != null;
          case 2:
            return this.__text != null;
          default:
            return false;
        }
      } else {
        switch (format) {
          case 0:
          case 1:
          case 2:
            return lime_system_Clipboard.get_text() != null;
          default:
            return false;
        }
      }
    },
    setData: function (format, data, serializable) {
      if (serializable == null) {
        serializable = true;
      }
      if (!this.__systemClipboard) {
        switch (format) {
          case 0:
            this.__htmlText = Std.string(data);
            return true;
          case 1:
            this.__richText = Std.string(data);
            return true;
          case 2:
            this.__text = Std.string(data);
            return true;
          default:
            return false;
        }
      } else {
        switch (format) {
          case 0:
          case 1:
          case 2:
            lime_system_Clipboard.set_text(Std.string(data));
            return true;
          default:
            return false;
        }
      }
    },
    setDataHandler: function (format, handler, serializable) {
      if (serializable == null) {
        serializable = true;
      }
      openfl_Lib.notImplemented({
        fileName: "Clipboard.hx",
        lineNumber: 200,
        className: "openfl.desktop.Clipboard",
        methodName: "setDataHandler",
      });
      return false;
    },
    get_formats: function () {
      var formats = [2];
      if (this.hasFormat(0)) {
        formats.push(0);
      }
      if (this.hasFormat(1)) {
        formats.push(1);
      }
      if (this.hasFormat(2)) {
        formats.push(2);
      }
      return formats;
    },
    __class__: openfl_desktop_Clipboard,
    __properties__: { get_formats: "get_formats" },
  };
  var openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$ = {};
  $hxClasses["openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_"] =
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$;
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.__name__ = [
    "openfl",
    "desktop",
    "_ClipboardFormats",
    "ClipboardFormats_Impl_",
  ];
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "air:html":
          return 0;
        case "air:rtf":
          return 1;
        case "air:text":
          return 2;
        default:
          return null;
      }
    };
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "air:html";
        case 1:
          return "air:rtf";
        case 2:
          return "air:text";
        default:
          return null;
      }
    };
  var openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$ = {};
  $hxClasses[
    "openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_"
  ] = openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$;
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.__name__ =
    [
      "openfl",
      "desktop",
      "_ClipboardTransferMode",
      "ClipboardTransferMode_Impl_",
    ];
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "cloneOnly":
          return 0;
        case "clonePreferred":
          return 1;
        case "originalOnly":
          return 2;
        case "originalPreferred":
          return 3;
        default:
          return null;
      }
    };
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "cloneOnly";
        case 1:
          return "clonePreferred";
        case 2:
          return "originalOnly";
        case 3:
          return "originalPreferred";
        default:
          return null;
      }
    };
  var openfl_display_Application = function () {
    lime_app_Application.call(this);
    if (openfl_Lib.application == null) {
      openfl_Lib.application = this;
    }
  };
  $hxClasses["openfl.display.Application"] = openfl_display_Application;
  openfl_display_Application.__name__ = ["openfl", "display", "Application"];
  openfl_display_Application.__super__ = lime_app_Application;
  openfl_display_Application.prototype = $extend(
    lime_app_Application.prototype,
    {
      create: function (config) {
        this.config = config;
        this.backend.create(config);
        openfl_Lib.current.__loaderInfo =
          openfl_display_LoaderInfo.create(null);
        openfl_Lib.current.__loaderInfo.content = openfl_Lib.current;
        if (config != null) {
          if (Object.prototype.hasOwnProperty.call(config, "fps")) {
            this.backend.setFrameRate(config.fps);
          }
          if (Object.prototype.hasOwnProperty.call(config, "windows")) {
            var _g = 0;
            var _g1 = config.windows;
            while (_g < _g1.length) {
              var windowConfig = _g1[_g];
              ++_g;
              var $window = new openfl_display_Window(windowConfig);
              this.createWindow($window);
              break;
            }
          }
          if (this.__preloader == null || this.__preloader.complete) {
            this.onPreloadComplete();
          }
        }
      },
      __class__: openfl_display_Application,
    }
  );
  var openfl_display_Bitmap = function (bitmapData, pixelSnapping, smoothing) {
    if (smoothing == null) {
      smoothing = false;
    }
    openfl_display_DisplayObject.call(this);
    this.set_bitmapData(bitmapData);
    this.pixelSnapping = pixelSnapping;
    this.smoothing = smoothing;
    if (pixelSnapping == null) {
      this.pixelSnapping = 1;
    }
  };
  $hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
  openfl_display_Bitmap.__name__ = ["openfl", "display", "Bitmap"];
  openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
  openfl_display_Bitmap.prototype = $extend(
    openfl_display_DisplayObject.prototype,
    {
      bitmapData: null,
      pixelSnapping: null,
      smoothing: null,
      __image: null,
      __imageVersion: null,
      __getBounds: function (rect, matrix) {
        if (this.bitmapData != null) {
          var bounds = openfl_geom_Rectangle.__temp;
          bounds.setTo(0, 0, this.bitmapData.width, this.bitmapData.height);
          bounds.__transform(bounds, matrix);
          rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
        }
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (
          !hitObject.get_visible() ||
          this.__isMask ||
          this.bitmapData == null
        ) {
          return false;
        }
        if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
          return false;
        }
        this.__getRenderTransform();
        var _this = this.__renderTransform;
        var norm = _this.a * _this.d - _this.b * _this.c;
        var px =
          norm == 0
            ? -_this.tx
            : (1.0 / norm) *
              (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
        var _this1 = this.__renderTransform;
        var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
        var py =
          norm1 == 0
            ? -_this1.ty
            : (1.0 / norm1) *
              (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
        if (
          px > 0 &&
          py > 0 &&
          px <= this.bitmapData.width &&
          py <= this.bitmapData.height
        ) {
          if (
            this.__scrollRect != null &&
            !this.__scrollRect.contains(px, py)
          ) {
            return false;
          }
          if (stack != null && !interactiveOnly) {
            stack.push(hitObject);
          }
          return true;
        }
        return false;
      },
      __hitTestMask: function (x, y) {
        if (this.bitmapData == null) {
          return false;
        }
        this.__getRenderTransform();
        var _this = this.__renderTransform;
        var norm = _this.a * _this.d - _this.b * _this.c;
        var px =
          norm == 0
            ? -_this.tx
            : (1.0 / norm) *
              (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
        var _this1 = this.__renderTransform;
        var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
        var py =
          norm1 == 0
            ? -_this1.ty
            : (1.0 / norm1) *
              (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
        if (
          px > 0 &&
          py > 0 &&
          px <= this.bitmapData.width &&
          py <= this.bitmapData.height
        ) {
          return true;
        }
        return false;
      },
      __renderCairo: function (renderSession) {},
      __renderCairoMask: function (renderSession) {
        renderSession.cairo.rectangle(
          0,
          0,
          this.get_width(),
          this.get_height()
        );
      },
      __renderCanvas: function (renderSession) {
        if (!(!this.__renderable || this.__worldAlpha <= 0)) {
          var context = renderSession.context;
          if (this.bitmapData != null && this.bitmapData.__isValid) {
            renderSession.maskManager.pushObject(this, false);
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
              this.bitmapData.image
            );
            context.globalAlpha = this.__worldAlpha;
            var transform = this.__renderTransform;
            var scrollRect = this.__scrollRect;
            if (renderSession.roundPixels) {
              context.setTransform(
                transform.a,
                transform.b,
                transform.c,
                transform.d,
                transform.tx | 0,
                transform.ty | 0
              );
            } else {
              context.setTransform(
                transform.a,
                transform.b,
                transform.c,
                transform.d,
                transform.tx,
                transform.ty
              );
            }
            if (!renderSession.allowSmoothing || !this.smoothing) {
              context.mozImageSmoothingEnabled = false;
              context.msImageSmoothingEnabled = false;
              context.imageSmoothingEnabled = false;
            }
            if (scrollRect == null) {
              context.drawImage(this.bitmapData.image.get_src(), 0, 0);
            } else {
              context.drawImage(
                this.bitmapData.image.get_src(),
                scrollRect.x,
                scrollRect.y,
                scrollRect.width,
                scrollRect.height,
                scrollRect.x,
                scrollRect.y,
                scrollRect.width,
                scrollRect.height
              );
            }
            if (!renderSession.allowSmoothing || !this.smoothing) {
              context.mozImageSmoothingEnabled = true;
              context.msImageSmoothingEnabled = true;
              context.imageSmoothingEnabled = true;
            }
            renderSession.maskManager.popObject(this, false);
          }
        }
      },
      __renderCanvasMask: function (renderSession) {
        renderSession.context.rect(0, 0, this.get_width(), this.get_height());
      },
      __renderDOM: function (renderSession) {},
      __renderGL: function (renderSession) {
        if (!(!this.__renderable || this.__worldAlpha <= 0)) {
          if (this.bitmapData != null && this.bitmapData.__isValid) {
            var renderer = renderSession.renderer;
            var gl = renderSession.gl;
            renderSession.blendModeManager.setBlendMode(this.get_blendMode());
            renderSession.maskManager.pushObject(this);
            var shader = renderSession.filterManager.pushObject(this);
            shader.get_data().uImage0.input = this.bitmapData;
            var tmp =
              renderSession.allowSmoothing &&
              (this.smoothing || renderSession.upscaled);
            shader.get_data().uImage0.smoothing = tmp;
            shader.get_data().uMatrix.value = renderer.getMatrix(
              this.__renderTransform
            );
            renderSession.shaderManager.setShader(shader);
            var target = gl.ARRAY_BUFFER;
            var buffer = this.bitmapData.getBuffer(gl, this.__worldAlpha);
            gl.__context.bindBuffer(target, buffer);
            var index = shader.get_data().aPosition.index;
            var type = gl.FLOAT;
            var offset =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
            gl.__context.vertexAttribPointer(index, 3, type, false, 24, offset);
            var index1 = shader.get_data().aTexCoord.index;
            var type1 = gl.FLOAT;
            var offset1 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
            gl.__context.vertexAttribPointer(
              index1,
              2,
              type1,
              false,
              24,
              offset1
            );
            var index2 = shader.get_data().aAlpha.index;
            var type2 = gl.FLOAT;
            var offset2 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
            gl.__context.vertexAttribPointer(
              index2,
              1,
              type2,
              false,
              24,
              offset2
            );
            gl.__context.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            renderSession.filterManager.popObject(this);
            renderSession.maskManager.popObject(this);
          }
        }
      },
      __updateMask: function (maskGraphics) {
        if (this.bitmapData == null) {
          return;
        }
        maskGraphics.__commands.overrideMatrix(this.__worldTransform);
        maskGraphics.beginFill(0);
        maskGraphics.drawRect(
          0,
          0,
          this.bitmapData.width,
          this.bitmapData.height
        );
        if (maskGraphics.__bounds == null) {
          maskGraphics.__bounds = new openfl_geom_Rectangle();
        }
        this.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity);
        openfl_display_DisplayObject.prototype.__updateMask.call(
          this,
          maskGraphics
        );
      },
      set_bitmapData: function (value) {
        this.bitmapData = value;
        this.smoothing = false;
        var tmp = this.__filters != null && this.__filters.length > 0;
        return this.bitmapData;
      },
      get_height: function () {
        if (this.bitmapData != null) {
          return this.bitmapData.height * Math.abs(this.get_scaleY());
        }
        return 0;
      },
      set_height: function (value) {
        if (this.bitmapData != null) {
          if (value != this.bitmapData.height) {
            this.set_scaleY(value / this.bitmapData.height);
          }
          return value;
        }
        return 0;
      },
      get_width: function () {
        if (this.bitmapData != null) {
          return this.bitmapData.width * Math.abs(this.__scaleX);
        }
        return 0;
      },
      set_width: function (value) {
        if (this.bitmapData != null) {
          if (value != this.bitmapData.width) {
            this.set_scaleX(value / this.bitmapData.width);
          }
          return value;
        }
        return 0;
      },
      __class__: openfl_display_Bitmap,
      __properties__: $extend(
        openfl_display_DisplayObject.prototype.__properties__,
        { set_bitmapData: "set_bitmapData" }
      ),
    }
  );
  var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
  $hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] =
    openfl_display__$BlendMode_BlendMode_$Impl_$;
  openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_BlendMode",
    "BlendMode_Impl_",
  ];
  openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function (value) {
    switch (value) {
      case "add":
        return 0;
      case "alpha":
        return 1;
      case "darken":
        return 2;
      case "difference":
        return 3;
      case "erase":
        return 4;
      case "hardlight":
        return 5;
      case "invert":
        return 6;
      case "layer":
        return 7;
      case "lighten":
        return 8;
      case "multiply":
        return 9;
      case "normal":
        return 10;
      case "overlay":
        return 11;
      case "screen":
        return 12;
      case "shader":
        return 13;
      case "subtract":
        return 14;
      default:
        return null;
    }
  };
  openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "add";
      case 1:
        return "alpha";
      case 2:
        return "darken";
      case 3:
        return "difference";
      case 4:
        return "erase";
      case 5:
        return "hardlight";
      case 6:
        return "invert";
      case 7:
        return "layer";
      case 8:
        return "lighten";
      case 9:
        return "multiply";
      case 10:
        return "normal";
      case 11:
        return "overlay";
      case 12:
        return "screen";
      case 13:
        return "shader";
      case 14:
        return "subtract";
      default:
        return null;
    }
  };
  var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
  $hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] =
    openfl_display__$CapsStyle_CapsStyle_$Impl_$;
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_CapsStyle",
    "CapsStyle_Impl_",
  ];
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function (value) {
    switch (value) {
      case "none":
        return 0;
      case "round":
        return 1;
      case "square":
        return 2;
      default:
        return null;
    }
  };
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "none";
      case 1:
        return "round";
      case 2:
        return "square";
      default:
        return null;
    }
  };
  var openfl_display_DirectRenderer = function (type) {
    if (type == null) {
      type = "DirectRenderer";
    }
    openfl_display_DisplayObject.call(this);
  };
  $hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
  openfl_display_DirectRenderer.__name__ = [
    "openfl",
    "display",
    "DirectRenderer",
  ];
  openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
  openfl_display_DirectRenderer.prototype = $extend(
    openfl_display_DisplayObject.prototype,
    {
      __render: null,
      get_render: function () {
        return this.__render;
      },
      set_render: function (value) {
        return (this.__render = value);
      },
      __class__: openfl_display_DirectRenderer,
      __properties__: $extend(
        openfl_display_DisplayObject.prototype.__properties__,
        { set_render: "set_render", get_render: "get_render" }
      ),
    }
  );
  var openfl_display_FPS = function (x, y, color) {
    if (color == null) {
      color = 0;
    }
    if (y == null) {
      y = 10;
    }
    if (x == null) {
      x = 10;
    }
    openfl_text_TextField.call(this);
    this.set_x(x);
    this.set_y(y);
    this.currentFPS = 0;
    this.set_selectable(false);
    this.mouseEnabled = false;
    this.set_defaultTextFormat(new openfl_text_TextFormat("_sans", 12, color));
    this.set_text("FPS: ");
    this.cacheCount = 0;
    this.times = [];
    this.addEventListener("enterFrame", $bind(this, this.this_onEnterFrame));
  };
  $hxClasses["openfl.display.FPS"] = openfl_display_FPS;
  openfl_display_FPS.__name__ = ["openfl", "display", "FPS"];
  openfl_display_FPS.__super__ = openfl_text_TextField;
  openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype, {
    currentFPS: null,
    cacheCount: null,
    times: null,
    this_onEnterFrame: function (event) {
      var currentTime = new Date().getTime() / 1000;
      this.times.push(currentTime);
      while (this.times[0] < currentTime - 1) this.times.shift();
      var currentCount = this.times.length;
      this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
      if (currentCount != this.cacheCount) {
        this.set_text("FPS: " + this.currentFPS);
      }
      this.cacheCount = currentCount;
    },
    __class__: openfl_display_FPS,
  });
  var openfl_display_FrameLabel = function (name, frame) {
    openfl_events_EventDispatcher.call(this);
    this.__name = name;
    this.__frame = frame;
  };
  $hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
  openfl_display_FrameLabel.__name__ = ["openfl", "display", "FrameLabel"];
  openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
  openfl_display_FrameLabel.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      __frame: null,
      __name: null,
      get_frame: function () {
        return this.__frame;
      },
      get_name: function () {
        return this.__name;
      },
      __class__: openfl_display_FrameLabel,
      __properties__: { get_name: "get_name", get_frame: "get_frame" },
    }
  );
  var openfl_display__$GradientType_GradientType_$Impl_$ = {};
  $hxClasses["openfl.display._GradientType.GradientType_Impl_"] =
    openfl_display__$GradientType_GradientType_$Impl_$;
  openfl_display__$GradientType_GradientType_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_GradientType",
    "GradientType_Impl_",
  ];
  openfl_display__$GradientType_GradientType_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "linear":
        return 0;
      case "radial":
        return 1;
      default:
        return null;
    }
  };
  openfl_display__$GradientType_GradientType_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "linear";
      case 1:
        return "radial";
      default:
        return null;
    }
  };
  var openfl_display_Graphics = function (owner) {
    this.__dirty = true;
    this.__owner = owner;
    this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
    this.__strokePadding = 0;
    this.__positionX = 0;
    this.__positionY = 0;
    this.__renderTransform = new openfl_geom_Matrix();
    this.__worldTransform = new openfl_geom_Matrix();
    this.__width = 0;
    this.__height = 0;
    this.moveTo(0, 0);
  };
  $hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
  openfl_display_Graphics.__name__ = ["openfl", "display", "Graphics"];
  openfl_display_Graphics.prototype = {
    __bounds: null,
    __commands: null,
    __dirty: null,
    __height: null,
    __managed: null,
    __positionX: null,
    __positionY: null,
    __renderTransform: null,
    __strokePadding: null,
    __transformDirty: null,
    __visible: null,
    __owner: null,
    __width: null,
    __worldTransform: null,
    __canvas: null,
    __context: null,
    __bitmap: null,
    beginBitmapFill: function (bitmap, matrix, repeat, smooth) {
      if (smooth == null) {
        smooth = false;
      }
      if (repeat == null) {
        repeat = true;
      }
      this.__commands.beginBitmapFill(
        bitmap,
        matrix != null ? matrix.clone() : null,
        repeat,
        smooth
      );
      this.__visible = true;
    },
    beginFill: function (color, alpha) {
      if (alpha == null) {
        alpha = 1;
      }
      if (color == null) {
        color = 0;
      }
      this.__commands.beginFill(color & 16777215, alpha);
      if (alpha > 0) {
        this.__visible = true;
      }
    },
    beginGradientFill: function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      if (focalPointRatio == null) {
        focalPointRatio = 0;
      }
      if (interpolationMethod == null) {
        interpolationMethod = 1;
      }
      if (spreadMethod == null) {
        spreadMethod = 0;
      }
      this.__commands.beginGradientFill(
        type,
        colors,
        alphas,
        ratios,
        matrix,
        spreadMethod,
        interpolationMethod,
        focalPointRatio
      );
      var _g = 0;
      while (_g < alphas.length) {
        var alpha = alphas[_g];
        ++_g;
        if (alpha > 0) {
          this.__visible = true;
          break;
        }
      }
    },
    clear: function () {
      this.__commands.clear();
      this.__strokePadding = 0;
      if (this.__bounds != null) {
        this.set___dirty(true);
        this.__transformDirty = true;
        this.__bounds = null;
      }
      this.__visible = false;
      this.moveTo(0, 0);
    },
    copyFrom: function (sourceGraphics) {
      this.__bounds =
        sourceGraphics.__bounds != null
          ? sourceGraphics.__bounds.clone()
          : null;
      this.__commands = sourceGraphics.__commands.copy();
      this.set___dirty(true);
      this.__strokePadding = sourceGraphics.__strokePadding;
      this.__positionX = sourceGraphics.__positionX;
      this.__positionY = sourceGraphics.__positionY;
      this.__transformDirty = true;
      this.__visible = sourceGraphics.__visible;
    },
    cubicCurveTo: function (
      controlX1,
      controlY1,
      controlX2,
      controlY2,
      anchorX,
      anchorY
    ) {
      this.__inflateBounds(
        this.__positionX - this.__strokePadding,
        this.__positionY - this.__strokePadding
      );
      this.__inflateBounds(
        this.__positionX + this.__strokePadding,
        this.__positionY + this.__strokePadding
      );
      var ix1;
      var iy1;
      var ix2;
      var iy2;
      ix1 = anchorX;
      ix2 = anchorX;
      if (
        !(
          ((controlX1 < anchorX && controlX1 > this.__positionX) ||
            (controlX1 > anchorX && controlX1 < this.__positionX)) &&
          ((controlX2 < anchorX && controlX2 > this.__positionX) ||
            (controlX2 > anchorX && controlX2 < this.__positionX))
        )
      ) {
        var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
        var v = controlX1 - this.__positionX;
        var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
        var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
        var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
        if (t1 > 0 && t1 < 1) {
          ix1 = this.__calculateBezierCubicPoint(
            t1,
            this.__positionX,
            controlX1,
            controlX2,
            anchorX
          );
        }
        if (t2 > 0 && t2 < 1) {
          ix2 = this.__calculateBezierCubicPoint(
            t2,
            this.__positionX,
            controlX1,
            controlX2,
            anchorX
          );
        }
      }
      iy1 = anchorY;
      iy2 = anchorY;
      if (
        !(
          ((controlY1 < anchorY && controlY1 > this.__positionX) ||
            (controlY1 > anchorY && controlY1 < this.__positionX)) &&
          ((controlY2 < anchorY && controlY2 > this.__positionX) ||
            (controlY2 > anchorY && controlY2 < this.__positionX))
        )
      ) {
        var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
        var v1 = controlY1 - this.__positionX;
        var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
        var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
        var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
        if (t11 > 0 && t11 < 1) {
          iy1 = this.__calculateBezierCubicPoint(
            t11,
            this.__positionX,
            controlY1,
            controlY2,
            anchorY
          );
        }
        if (t21 > 0 && t21 < 1) {
          iy2 = this.__calculateBezierCubicPoint(
            t21,
            this.__positionX,
            controlY1,
            controlY2,
            anchorY
          );
        }
      }
      this.__inflateBounds(
        ix1 - this.__strokePadding,
        iy1 - this.__strokePadding
      );
      this.__inflateBounds(
        ix1 + this.__strokePadding,
        iy1 + this.__strokePadding
      );
      this.__inflateBounds(
        ix2 - this.__strokePadding,
        iy2 - this.__strokePadding
      );
      this.__inflateBounds(
        ix2 + this.__strokePadding,
        iy2 + this.__strokePadding
      );
      this.__positionX = anchorX;
      this.__positionY = anchorY;
      this.__commands.cubicCurveTo(
        controlX1,
        controlY1,
        controlX2,
        controlY2,
        anchorX,
        anchorY
      );
      this.set___dirty(true);
    },
    curveTo: function (controlX, controlY, anchorX, anchorY) {
      this.__inflateBounds(
        this.__positionX - this.__strokePadding,
        this.__positionY - this.__strokePadding
      );
      this.__inflateBounds(
        this.__positionX + this.__strokePadding,
        this.__positionY + this.__strokePadding
      );
      var ix;
      var iy;
      if (
        (controlX < anchorX && controlX > this.__positionX) ||
        (controlX > anchorX && controlX < this.__positionX)
      ) {
        ix = anchorX;
      } else {
        var tx =
          (this.__positionX - controlX) /
          (this.__positionX - 2 * controlX + anchorX);
        ix = this.__calculateBezierQuadPoint(
          tx,
          this.__positionX,
          controlX,
          anchorX
        );
      }
      if (
        (controlY < anchorY && controlY > this.__positionY) ||
        (controlY > anchorY && controlY < this.__positionY)
      ) {
        iy = anchorY;
      } else {
        var ty =
          (this.__positionY - controlY) /
          (this.__positionY - 2 * controlY + anchorY);
        iy = this.__calculateBezierQuadPoint(
          ty,
          this.__positionY,
          controlY,
          anchorY
        );
      }
      this.__inflateBounds(
        ix - this.__strokePadding,
        iy - this.__strokePadding
      );
      this.__inflateBounds(
        ix + this.__strokePadding,
        iy + this.__strokePadding
      );
      this.__positionX = anchorX;
      this.__positionY = anchorY;
      this.__commands.curveTo(controlX, controlY, anchorX, anchorY);
      this.set___dirty(true);
    },
    drawCircle: function (x, y, radius) {
      if (radius <= 0) {
        return;
      }
      this.__inflateBounds(
        x - radius - this.__strokePadding,
        y - radius - this.__strokePadding
      );
      this.__inflateBounds(
        x + radius + this.__strokePadding,
        y + radius + this.__strokePadding
      );
      this.__commands.drawCircle(x, y, radius);
      this.set___dirty(true);
    },
    drawEllipse: function (x, y, width, height) {
      if (width <= 0 || height <= 0) {
        return;
      }
      this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
      this.__inflateBounds(
        x + width + this.__strokePadding,
        y + height + this.__strokePadding
      );
      this.__commands.drawEllipse(x, y, width, height);
      this.set___dirty(true);
    },
    drawGraphicsData: function (graphicsData) {
      var fill;
      var bitmapFill;
      var gradientFill;
      var stroke;
      var path;
      var _g = 0;
      while (_g < graphicsData.get_length()) {
        var graphics = graphicsData.get(_g);
        ++_g;
        if (js_Boot.__instanceof(graphics, openfl_display_GraphicsSolidFill)) {
          fill = graphics;
          this.beginFill(fill.color, fill.alpha);
        } else if (
          js_Boot.__instanceof(graphics, openfl_display_GraphicsBitmapFill)
        ) {
          bitmapFill = graphics;
          this.beginBitmapFill(
            bitmapFill.bitmapData,
            bitmapFill.matrix,
            bitmapFill.repeat,
            bitmapFill.smooth
          );
        } else if (
          js_Boot.__instanceof(graphics, openfl_display_GraphicsGradientFill)
        ) {
          gradientFill = graphics;
          this.beginGradientFill(
            gradientFill.type,
            gradientFill.colors,
            gradientFill.alphas,
            gradientFill.ratios,
            gradientFill.matrix,
            gradientFill.spreadMethod,
            gradientFill.interpolationMethod,
            gradientFill.focalPointRatio
          );
        } else if (
          js_Boot.__instanceof(graphics, openfl_display_GraphicsStroke)
        ) {
          stroke = graphics;
          if (
            js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsSolidFill)
          ) {
            fill = stroke.fill;
            this.lineStyle(
              stroke.thickness,
              fill.color,
              fill.alpha,
              stroke.pixelHinting,
              stroke.scaleMode,
              stroke.caps,
              stroke.joints,
              stroke.miterLimit
            );
          } else {
            this.lineStyle(
              stroke.thickness,
              0,
              1,
              stroke.pixelHinting,
              stroke.scaleMode,
              stroke.caps,
              stroke.joints,
              stroke.miterLimit
            );
            if (
              js_Boot.__instanceof(
                stroke.fill,
                openfl_display_GraphicsBitmapFill
              )
            ) {
              bitmapFill = stroke.fill;
              this.lineBitmapStyle(
                bitmapFill.bitmapData,
                bitmapFill.matrix,
                bitmapFill.repeat,
                bitmapFill.smooth
              );
            } else if (
              js_Boot.__instanceof(
                stroke.fill,
                openfl_display_GraphicsGradientFill
              )
            ) {
              gradientFill = stroke.fill;
              this.lineGradientStyle(
                gradientFill.type,
                gradientFill.colors,
                gradientFill.alphas,
                gradientFill.ratios,
                gradientFill.matrix,
                gradientFill.spreadMethod,
                gradientFill.interpolationMethod,
                gradientFill.focalPointRatio
              );
            }
          }
        } else if (
          js_Boot.__instanceof(graphics, openfl_display_GraphicsPath)
        ) {
          path = graphics;
          this.drawPath(path.commands, path.data, path.winding);
        } else if (
          js_Boot.__instanceof(graphics, openfl_display_GraphicsEndFill)
        ) {
          this.endFill();
        }
      }
    },
    drawPath: function (commands, data, winding) {
      if (winding == null) {
        winding = 0;
      }
      var dataIndex = 0;
      var _g = 0;
      try {
        while (_g < commands.get_length()) {
          var command = commands.get(_g);
          ++_g;
          switch (command) {
            case 1:
              this.moveTo(data.get(dataIndex), data.get(dataIndex + 1));
              dataIndex += 2;
              break;
            case 2:
              this.lineTo(data.get(dataIndex), data.get(dataIndex + 1));
              dataIndex += 2;
              break;
            case 3:
              this.curveTo(
                data.get(dataIndex),
                data.get(dataIndex + 1),
                data.get(dataIndex + 2),
                data.get(dataIndex + 3)
              );
              dataIndex += 4;
              break;
            case 4:
              this.moveTo(data.get(dataIndex + 2), data.get(dataIndex + 3));
              throw "__break__";
              break;
            case 5:
              this.lineTo(data.get(dataIndex + 2), data.get(dataIndex + 3));
              throw "__break__";
              break;
            case 6:
              this.cubicCurveTo(
                data.get(dataIndex),
                data.get(dataIndex + 1),
                data.get(dataIndex + 2),
                data.get(dataIndex + 3),
                data.get(dataIndex + 4),
                data.get(dataIndex + 5)
              );
              dataIndex += 6;
              break;
            default:
          }
        }
      } catch (e) {
        if (e != "__break__") throw e;
      }
    },
    drawRect: function (x, y, width, height) {
      if (width <= 0 || height <= 0) {
        return;
      }
      this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
      this.__inflateBounds(
        x + width + this.__strokePadding,
        y + height + this.__strokePadding
      );
      this.__commands.drawRect(x, y, width, height);
      this.set___dirty(true);
    },
    drawRoundRect: function (x, y, width, height, ellipseWidth, ellipseHeight) {
      if (width <= 0 || height <= 0) {
        return;
      }
      this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
      this.__inflateBounds(
        x + width + this.__strokePadding,
        y + height + this.__strokePadding
      );
      this.__commands.drawRoundRect(
        x,
        y,
        width,
        height,
        ellipseWidth,
        ellipseHeight
      );
      this.set___dirty(true);
    },
    drawRoundRectComplex: function (
      x,
      y,
      width,
      height,
      topLeftRadius,
      topRightRadius,
      bottomLeftRadius,
      bottomRightRadius
    ) {
      openfl_Lib.notImplemented({
        fileName: "Graphics.hx",
        lineNumber: 450,
        className: "openfl.display.Graphics",
        methodName: "drawRoundRectComplex",
      });
    },
    drawTriangles: function (vertices, indices, uvtData, culling) {
      if (culling == null) {
        culling = 1;
      }
      var vlen = (vertices.get_length() / 2) | 0;
      if (culling == null) {
        culling = 1;
      }
      if (indices == null) {
        if (vlen % 3 != 0) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_ArgumentError(
              "Not enough vertices to close a triangle."
            )
          );
        }
        indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
        var _g1 = 0;
        var _g = vlen;
        while (_g1 < _g) {
          var i = _g1++;
          indices.push(i);
        }
      }
      this.__inflateBounds(0, 0);
      var tmpx = -Infinity;
      var tmpy = -Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var _g11 = 0;
      var _g2 = vlen;
      while (_g11 < _g2) {
        var i1 = _g11++;
        tmpx = vertices.get(i1 * 2);
        tmpy = vertices.get(i1 * 2 + 1);
        if (maxX < tmpx) {
          maxX = tmpx;
        }
        if (maxY < tmpy) {
          maxY = tmpy;
        }
      }
      this.__inflateBounds(maxX, maxY);
      this.__commands.drawTriangles(vertices, indices, uvtData, culling);
      this.set___dirty(true);
      this.__visible = true;
    },
    endFill: function () {
      this.__commands.endFill();
    },
    lineBitmapStyle: function (bitmap, matrix, repeat, smooth) {
      if (smooth == null) {
        smooth = false;
      }
      if (repeat == null) {
        repeat = true;
      }
      this.__commands.lineBitmapStyle(
        bitmap,
        matrix != null ? matrix.clone() : null,
        repeat,
        smooth
      );
    },
    lineGradientStyle: function (
      type,
      colors,
      alphas,
      ratios,
      matrix,
      spreadMethod,
      interpolationMethod,
      focalPointRatio
    ) {
      if (focalPointRatio == null) {
        focalPointRatio = 0;
      }
      if (interpolationMethod == null) {
        interpolationMethod = 1;
      }
      if (spreadMethod == null) {
        spreadMethod = 0;
      }
      this.__commands.lineGradientStyle(
        type,
        colors,
        alphas,
        ratios,
        matrix,
        spreadMethod,
        interpolationMethod,
        focalPointRatio
      );
    },
    lineStyle: function (
      thickness,
      color,
      alpha,
      pixelHinting,
      scaleMode,
      caps,
      joints,
      miterLimit
    ) {
      if (miterLimit == null) {
        miterLimit = 3;
      }
      if (scaleMode == null) {
        scaleMode = 2;
      }
      if (pixelHinting == null) {
        pixelHinting = false;
      }
      if (alpha == null) {
        alpha = 1;
      }
      if (color == null) {
        color = 0;
      }
      if (thickness != null) {
        if (joints == 1) {
          if (thickness > this.__strokePadding) {
            this.__strokePadding = thickness;
          }
        } else if (thickness / 2 > this.__strokePadding) {
          this.__strokePadding = thickness / 2;
        }
      }
      this.__commands.lineStyle(
        thickness,
        color,
        alpha,
        pixelHinting,
        scaleMode,
        caps,
        joints,
        miterLimit
      );
      if (thickness != null) {
        this.__visible = true;
      }
    },
    lineTo: function (x, y) {
      if (!isFinite(x) || !isFinite(y)) {
        return;
      }
      this.__inflateBounds(
        this.__positionX - this.__strokePadding,
        this.__positionY - this.__strokePadding
      );
      this.__inflateBounds(
        this.__positionX + this.__strokePadding,
        this.__positionY + this.__strokePadding
      );
      this.__positionX = x;
      this.__positionY = y;
      this.__inflateBounds(
        this.__positionX - this.__strokePadding,
        this.__positionY - this.__strokePadding
      );
      this.__inflateBounds(
        this.__positionX + this.__strokePadding * 2,
        this.__positionY + this.__strokePadding
      );
      this.__commands.lineTo(x, y);
      this.set___dirty(true);
    },
    moveTo: function (x, y) {
      this.__positionX = x;
      this.__positionY = y;
      this.__commands.moveTo(x, y);
    },
    readGraphicsData: function (recurse) {
      if (recurse == null) {
        recurse = true;
      }
      var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
      this.__owner.__readGraphicsData(graphicsData, recurse);
      return graphicsData;
    },
    __calculateBezierCubicPoint: function (t, p1, p2, p3, p4) {
      var iT = 1 - t;
      return (
        p1 * (iT * iT * iT) +
        3 * p2 * t * (iT * iT) +
        3 * p3 * iT * (t * t) +
        p4 * (t * t * t)
      );
    },
    __calculateBezierQuadPoint: function (t, p1, p2, p3) {
      var iT = 1 - t;
      return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
    },
    __cleanup: function () {
      if (this.__bounds != null) {
        this.set___dirty(true);
        this.__transformDirty = true;
      }
      this.__bitmap = null;
      this.__canvas = null;
      this.__context = null;
    },
    __getBounds: function (rect, matrix) {
      if (this.__bounds == null) {
        return;
      }
      var bounds = openfl_geom_Rectangle.__temp;
      this.__bounds.__transform(bounds, matrix);
      rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
    },
    __hitTest: function (x, y, shapeFlag, matrix) {
      if (this.__bounds == null) {
        return false;
      }
      var norm = matrix.a * matrix.d - matrix.b * matrix.c;
      var px =
        norm == 0
          ? -matrix.tx
          : (1.0 / norm) *
            (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
      var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
      var py =
        norm1 == 0
          ? -matrix.ty
          : (1.0 / norm1) *
            (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
      if (
        px > this.__bounds.x &&
        py > this.__bounds.y &&
        this.__bounds.contains(px, py)
      ) {
        if (shapeFlag) {
          return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(
            this,
            px,
            py
          );
        }
        return true;
      }
      return false;
    },
    __inflateBounds: function (x, y) {
      if (this.__bounds == null) {
        this.__bounds = new openfl_geom_Rectangle(x, y, 0, 0);
        this.__transformDirty = true;
        return;
      }
      if (x < this.__bounds.x) {
        this.__bounds.width += this.__bounds.x - x;
        this.__bounds.x = x;
        this.__transformDirty = true;
      }
      if (y < this.__bounds.y) {
        this.__bounds.height += this.__bounds.y - y;
        this.__bounds.y = y;
        this.__transformDirty = true;
      }
      if (x > this.__bounds.x + this.__bounds.width) {
        this.__bounds.width = x - this.__bounds.x;
      }
      if (y > this.__bounds.y + this.__bounds.height) {
        this.__bounds.height = y - this.__bounds.y;
      }
    },
    __readGraphicsData: function (graphicsData) {
      var data = new openfl__$internal_renderer_DrawCommandReader(
        this.__commands
      );
      var path;
      var _g = 0;
      var _g1 = this.__commands.types;
      while (_g < _g1.length) {
        var type = _g1[_g];
        ++_g;
        switch (type[1]) {
          case 0:
            var _g2 = data.prev;
            switch (_g2[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
            var this1 = data;
            var c = this1;
            graphicsData.push(
              new openfl_display_GraphicsBitmapFill(
                c.buffer.o[c.oPos],
                c.buffer.o[c.oPos + 1],
                c.buffer.b[c.bPos],
                c.buffer.b[c.bPos + 1]
              )
            );
            break;
          case 1:
            var _g3 = data.prev;
            switch (_g3[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
            var this2 = data;
            var c1 = this2;
            graphicsData.push(
              new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos], 1)
            );
            break;
          case 2:
            var _g4 = data.prev;
            switch (_g4[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
            var this3 = data;
            var c2 = this3;
            graphicsData.push(
              new openfl_display_GraphicsGradientFill(
                c2.buffer.o[c2.oPos],
                c2.buffer.ii[c2.iiPos],
                c2.buffer.ff[c2.ffPos],
                c2.buffer.ii[c2.iiPos + 1],
                c2.buffer.o[c2.oPos + 1],
                c2.buffer.o[c2.oPos + 2],
                c2.buffer.o[c2.oPos + 3],
                c2.buffer.f[c2.fPos]
              )
            );
            break;
          case 3:
            var _g5 = data.prev;
            switch (_g5[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            var this4 = data;
            var c3 = this4;
            break;
          case 4:
            var _g6 = data.prev;
            switch (_g6[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            var this5 = data;
            var c4 = this5;
            path = new openfl_display_GraphicsPath();
            path.curveTo(
              c4.buffer.f[c4.fPos],
              c4.buffer.f[c4.fPos + 1],
              c4.buffer.f[c4.fPos + 2],
              c4.buffer.f[c4.fPos + 3]
            );
            graphicsData.push(path);
            break;
          case 5:
            var _g7 = data.prev;
            switch (_g7[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            var this6 = data;
            var c5 = this6;
            break;
          case 6:
            var _g8 = data.prev;
            switch (_g8[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this7 = data;
            var c6 = this7;
            break;
          case 7:
            var _g9 = data.prev;
            switch (_g9[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this8 = data;
            var c7 = this8;
            break;
          case 8:
            var _g10 = data.prev;
            switch (_g10[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            var this9 = data;
            var c8 = this9;
            break;
          case 11:
            var _g11 = data.prev;
            switch (_g11[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
            var this10 = data;
            graphicsData.push(new openfl_display_GraphicsEndFill());
            break;
          case 12:
            var _g12 = data.prev;
            switch (_g12[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
            var this11 = data;
            var c9 = this11;
            break;
          case 13:
            var _g13 = data.prev;
            switch (_g13[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev =
              openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
            var this12 = data;
            var c10 = this12;
            break;
          case 14:
            var _g14 = data.prev;
            switch (_g14[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
            var this13 = data;
            var c11 = this13;
            graphicsData.push(
              new openfl_display_GraphicsStroke(
                c11.buffer.o[c11.oPos],
                c11.buffer.b[c11.bPos],
                c11.buffer.o[c11.oPos + 1],
                c11.buffer.o[c11.oPos + 2],
                c11.buffer.o[c11.oPos + 3],
                c11.buffer.f[c11.fPos + 1]
              )
            );
            break;
          case 15:
            var _g15 = data.prev;
            switch (_g15[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            var this14 = data;
            var c12 = this14;
            path = new openfl_display_GraphicsPath();
            path.lineTo(c12.buffer.f[c12.fPos], c12.buffer.f[c12.fPos + 1]);
            graphicsData.push(path);
            break;
          case 16:
            var _g16 = data.prev;
            switch (_g16[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            var this15 = data;
            var c13 = this15;
            path = new openfl_display_GraphicsPath();
            path.moveTo(c13.buffer.f[c13.fPos], c13.buffer.f[c13.fPos + 1]);
            graphicsData.push(path);
            break;
          default:
            var _g17 = data.prev;
            switch (_g17[1]) {
              case 0:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 1:
                data.iPos += 1;
                data.fPos += 1;
                break;
              case 2:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 3:
                data.fPos += 6;
                break;
              case 4:
                data.fPos += 4;
                break;
              case 5:
                data.fPos += 3;
                break;
              case 6:
                data.fPos += 4;
                break;
              case 7:
                data.fPos += 4;
                break;
              case 8:
                data.fPos += 5;
                data.oPos += 1;
                break;
              case 10:
                data.oPos += 4;
                break;
              case 11:
                break;
              case 12:
                data.oPos += 2;
                data.bPos += 2;
                break;
              case 13:
                data.oPos += 4;
                data.iiPos += 2;
                data.ffPos += 1;
                data.fPos += 1;
                break;
              case 14:
                data.oPos += 4;
                data.iPos += 1;
                data.fPos += 2;
                data.bPos += 1;
                break;
              case 15:
                data.fPos += 2;
                break;
              case 16:
                data.fPos += 2;
                break;
              case 17:
                data.oPos += 1;
                break;
              default:
            }
            data.prev = type;
        }
      }
    },
    __update: function () {
      if (
        this.__bounds == null ||
        this.__bounds.width <= 0 ||
        this.__bounds.height <= 0
      ) {
        return;
      }
      var parentTransform = this.__owner.__renderTransform;
      var scaleX = 1.0;
      var scaleY = 1.0;
      if (parentTransform != null) {
        if (parentTransform.b == 0) {
          scaleX = Math.abs(parentTransform.a);
        } else {
          scaleX = Math.sqrt(
            parentTransform.a * parentTransform.a +
              parentTransform.b * parentTransform.b
          );
        }
        if (parentTransform.c == 0) {
          scaleY = Math.abs(parentTransform.d);
        } else {
          scaleY = Math.sqrt(
            parentTransform.c * parentTransform.c +
              parentTransform.d * parentTransform.d
          );
        }
      } else {
        return;
      }
      var width = this.__bounds.width * scaleX;
      var height = this.__bounds.height * scaleY;
      if (width < 1 || height < 1) {
        if (this.__width >= 1 || this.__height >= 1) {
          this.set___dirty(true);
        }
        this.__width = 0;
        this.__height = 0;
        return;
      }
      this.__renderTransform.a = width / this.__bounds.width;
      this.__renderTransform.d = height / this.__bounds.height;
      var inverseA = 1 / this.__renderTransform.a;
      var inverseD = 1 / this.__renderTransform.d;
      this.__worldTransform.a = inverseA * parentTransform.a;
      this.__worldTransform.b = inverseA * parentTransform.b;
      this.__worldTransform.c = inverseD * parentTransform.c;
      this.__worldTransform.d = inverseD * parentTransform.d;
      var x = this.__bounds.x;
      var y = this.__bounds.y;
      var tx =
        x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
      var ty =
        x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
      this.__worldTransform.tx = Math.floor(tx);
      this.__worldTransform.ty = Math.floor(ty);
      var _this = this.__worldTransform;
      var norm = _this.a * _this.d - _this.b * _this.c;
      this.__renderTransform.tx =
        norm == 0
          ? -_this.tx
          : (1.0 / norm) *
            (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
      var _this1 = this.__worldTransform;
      var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
      this.__renderTransform.ty =
        norm1 == 0
          ? -_this1.ty
          : (1.0 / norm1) *
            (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
      var newWidth = Math.ceil(width + this.__renderTransform.tx);
      var newHeight = Math.ceil(height + this.__renderTransform.ty);
      if (newWidth != this.__width || newHeight != this.__height) {
        this.set___dirty(true);
      }
      this.__width = newWidth;
      this.__height = newHeight;
    },
    set___dirty: function (value) {
      if (value && this.__owner != null) {
        var _this = this.__owner;
        if (!_this.__renderDirty) {
          _this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
      }
      return (this.__dirty = value);
    },
    __class__: openfl_display_Graphics,
    __properties__: { set___dirty: "set___dirty" },
  };
  var openfl_display_IGraphicsFill = function () {};
  $hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
  openfl_display_IGraphicsFill.__name__ = [
    "openfl",
    "display",
    "IGraphicsFill",
  ];
  openfl_display_IGraphicsFill.prototype = {
    __graphicsFillType: null,
    __class__: openfl_display_IGraphicsFill,
  };
  var openfl_display_IGraphicsData = function () {};
  $hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
  openfl_display_IGraphicsData.__name__ = [
    "openfl",
    "display",
    "IGraphicsData",
  ];
  openfl_display_IGraphicsData.prototype = {
    __graphicsDataType: null,
    __class__: openfl_display_IGraphicsData,
  };
  var openfl_display_GraphicsBitmapFill = function (
    bitmapData,
    matrix,
    repeat,
    smooth
  ) {
    if (smooth == null) {
      smooth = false;
    }
    if (repeat == null) {
      repeat = true;
    }
    this.bitmapData = bitmapData;
    this.matrix = matrix;
    this.repeat = repeat;
    this.smooth = smooth;
    this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
    this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
  };
  $hxClasses["openfl.display.GraphicsBitmapFill"] =
    openfl_display_GraphicsBitmapFill;
  openfl_display_GraphicsBitmapFill.__name__ = [
    "openfl",
    "display",
    "GraphicsBitmapFill",
  ];
  openfl_display_GraphicsBitmapFill.__interfaces__ = [
    openfl_display_IGraphicsFill,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsBitmapFill.prototype = {
    bitmapData: null,
    matrix: null,
    repeat: null,
    smooth: null,
    __graphicsDataType: null,
    __graphicsFillType: null,
    __class__: openfl_display_GraphicsBitmapFill,
  };
  var openfl_display_GraphicsEndFill = function () {
    this.__graphicsDataType = openfl_display_GraphicsDataType.END;
    this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
  };
  $hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
  openfl_display_GraphicsEndFill.__name__ = [
    "openfl",
    "display",
    "GraphicsEndFill",
  ];
  openfl_display_GraphicsEndFill.__interfaces__ = [
    openfl_display_IGraphicsFill,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsEndFill.prototype = {
    __graphicsDataType: null,
    __graphicsFillType: null,
    __class__: openfl_display_GraphicsEndFill,
  };
  var openfl_display_GraphicsGradientFill = function (
    type,
    colors,
    alphas,
    ratios,
    matrix,
    spreadMethod,
    interpolationMethod,
    focalPointRatio
  ) {
    if (focalPointRatio == null) {
      focalPointRatio = 0;
    }
    if (type == null) {
      type = 0;
    }
    if (spreadMethod == null) {
      spreadMethod = 0;
    }
    if (interpolationMethod == null) {
      interpolationMethod = 1;
    }
    this.type = type;
    this.colors = colors;
    this.alphas = alphas;
    this.ratios = ratios;
    this.matrix = matrix;
    this.spreadMethod = spreadMethod;
    this.interpolationMethod = interpolationMethod;
    this.focalPointRatio = focalPointRatio;
    this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
    this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
  };
  $hxClasses["openfl.display.GraphicsGradientFill"] =
    openfl_display_GraphicsGradientFill;
  openfl_display_GraphicsGradientFill.__name__ = [
    "openfl",
    "display",
    "GraphicsGradientFill",
  ];
  openfl_display_GraphicsGradientFill.__interfaces__ = [
    openfl_display_IGraphicsFill,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsGradientFill.prototype = {
    alphas: null,
    colors: null,
    focalPointRatio: null,
    interpolationMethod: null,
    matrix: null,
    ratios: null,
    spreadMethod: null,
    type: null,
    __graphicsDataType: null,
    __graphicsFillType: null,
    __class__: openfl_display_GraphicsGradientFill,
  };
  var openfl_display_IGraphicsPath = function () {};
  $hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
  openfl_display_IGraphicsPath.__name__ = [
    "openfl",
    "display",
    "IGraphicsPath",
  ];
  var openfl_display_GraphicsPath = function (commands, data, winding) {
    if (winding == null) {
      winding = 0;
    }
    this.commands = commands;
    this.data = data;
    this.winding = winding;
    this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
  };
  $hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
  openfl_display_GraphicsPath.__name__ = ["openfl", "display", "GraphicsPath"];
  openfl_display_GraphicsPath.__interfaces__ = [
    openfl_display_IGraphicsPath,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsPath.prototype = {
    commands: null,
    data: null,
    winding: null,
    __graphicsDataType: null,
    curveTo: function (controlX, controlY, anchorX, anchorY) {
      if (this.commands != null && this.data != null) {
        this.commands.push(3);
        this.data.push(anchorX);
        this.data.push(anchorY);
        this.data.push(controlX);
        this.data.push(controlY);
      }
    },
    lineTo: function (x, y) {
      if (this.commands != null && this.data != null) {
        this.commands.push(2);
        this.data.push(x);
        this.data.push(y);
      }
    },
    moveTo: function (x, y) {
      if (this.commands != null && this.data != null) {
        this.commands.push(1);
        this.data.push(x);
        this.data.push(y);
      }
    },
    wideLineTo: function (x, y) {
      if (this.commands != null && this.data != null) {
        this.commands.push(2);
        this.data.push(x);
        this.data.push(y);
      }
    },
    wideMoveTo: function (x, y) {
      if (this.commands != null && this.data != null) {
        this.commands.push(1);
        this.data.push(x);
        this.data.push(y);
      }
    },
    __class__: openfl_display_GraphicsPath,
  };
  var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
  $hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] =
    openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
  openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_GraphicsPathWinding",
    "GraphicsPathWinding_Impl_",
  ];
  openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "evenOdd":
          return 0;
        case "nonZero":
          return 1;
        default:
          return null;
      }
    };
  openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "evenOdd";
        case 1:
          return "nonZero";
        default:
          return null;
      }
    };
  var openfl_display_GraphicsSolidFill = function (color, alpha) {
    if (alpha == null) {
      alpha = 1;
    }
    if (color == null) {
      color = 0;
    }
    this.alpha = alpha;
    this.color = color;
    this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
    this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
  };
  $hxClasses["openfl.display.GraphicsSolidFill"] =
    openfl_display_GraphicsSolidFill;
  openfl_display_GraphicsSolidFill.__name__ = [
    "openfl",
    "display",
    "GraphicsSolidFill",
  ];
  openfl_display_GraphicsSolidFill.__interfaces__ = [
    openfl_display_IGraphicsFill,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsSolidFill.prototype = {
    alpha: null,
    color: null,
    __graphicsDataType: null,
    __graphicsFillType: null,
    __class__: openfl_display_GraphicsSolidFill,
  };
  var openfl_display_IGraphicsStroke = function () {};
  $hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
  openfl_display_IGraphicsStroke.__name__ = [
    "openfl",
    "display",
    "IGraphicsStroke",
  ];
  var openfl_display_GraphicsStroke = function (
    thickness,
    pixelHinting,
    scaleMode,
    caps,
    joints,
    miterLimit,
    fill
  ) {
    if (miterLimit == null) {
      miterLimit = 3;
    }
    if (pixelHinting == null) {
      pixelHinting = false;
    }
    if (thickness == null) {
      thickness = 0.0;
    }
    this.caps = caps != null ? caps : 0;
    this.fill = fill;
    this.joints = joints != null ? joints : 2;
    this.miterLimit = miterLimit;
    this.pixelHinting = pixelHinting;
    this.scaleMode = scaleMode != null ? scaleMode : 2;
    this.thickness = thickness;
    this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
  };
  $hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
  openfl_display_GraphicsStroke.__name__ = [
    "openfl",
    "display",
    "GraphicsStroke",
  ];
  openfl_display_GraphicsStroke.__interfaces__ = [
    openfl_display_IGraphicsStroke,
    openfl_display_IGraphicsData,
  ];
  openfl_display_GraphicsStroke.prototype = {
    caps: null,
    fill: null,
    joints: null,
    miterLimit: null,
    pixelHinting: null,
    scaleMode: null,
    thickness: null,
    __graphicsDataType: null,
    __class__: openfl_display_GraphicsStroke,
  };
  var openfl_display_GraphicsDataType = ($hxClasses[
    "openfl.display.GraphicsDataType"
  ] = {
    __ename__: ["openfl", "display", "GraphicsDataType"],
    __constructs__: ["STROKE", "SOLID", "GRADIENT", "PATH", "BITMAP", "END"],
  });
  openfl_display_GraphicsDataType.STROKE = ["STROKE", 0];
  openfl_display_GraphicsDataType.STROKE.toString = $estr;
  openfl_display_GraphicsDataType.STROKE.__enum__ =
    openfl_display_GraphicsDataType;
  openfl_display_GraphicsDataType.SOLID = ["SOLID", 1];
  openfl_display_GraphicsDataType.SOLID.toString = $estr;
  openfl_display_GraphicsDataType.SOLID.__enum__ =
    openfl_display_GraphicsDataType;
  openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT", 2];
  openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
  openfl_display_GraphicsDataType.GRADIENT.__enum__ =
    openfl_display_GraphicsDataType;
  openfl_display_GraphicsDataType.PATH = ["PATH", 3];
  openfl_display_GraphicsDataType.PATH.toString = $estr;
  openfl_display_GraphicsDataType.PATH.__enum__ =
    openfl_display_GraphicsDataType;
  openfl_display_GraphicsDataType.BITMAP = ["BITMAP", 4];
  openfl_display_GraphicsDataType.BITMAP.toString = $estr;
  openfl_display_GraphicsDataType.BITMAP.__enum__ =
    openfl_display_GraphicsDataType;
  openfl_display_GraphicsDataType.END = ["END", 5];
  openfl_display_GraphicsDataType.END.toString = $estr;
  openfl_display_GraphicsDataType.END.__enum__ =
    openfl_display_GraphicsDataType;
  var openfl_display_GraphicsFillType = ($hxClasses[
    "openfl.display.GraphicsFillType"
  ] = {
    __ename__: ["openfl", "display", "GraphicsFillType"],
    __constructs__: ["SOLID_FILL", "GRADIENT_FILL", "BITMAP_FILL", "END_FILL"],
  });
  openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL", 0];
  openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
  openfl_display_GraphicsFillType.SOLID_FILL.__enum__ =
    openfl_display_GraphicsFillType;
  openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL", 1];
  openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
  openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ =
    openfl_display_GraphicsFillType;
  openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL", 2];
  openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
  openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ =
    openfl_display_GraphicsFillType;
  openfl_display_GraphicsFillType.END_FILL = ["END_FILL", 3];
  openfl_display_GraphicsFillType.END_FILL.toString = $estr;
  openfl_display_GraphicsFillType.END_FILL.__enum__ =
    openfl_display_GraphicsFillType;
  var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
  $hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] =
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
  openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_InterpolationMethod",
    "InterpolationMethod_Impl_",
  ];
  openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "linearRGB":
          return 0;
        case "rgb":
          return 1;
        default:
          return null;
      }
    };
  openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "linearRGB";
        case 1:
          return "rgb";
        default:
          return null;
      }
    };
  var openfl_display_JPEGEncoderOptions = function (quality) {
    if (quality == null) {
      quality = 80;
    }
    this.quality = quality;
  };
  $hxClasses["openfl.display.JPEGEncoderOptions"] =
    openfl_display_JPEGEncoderOptions;
  openfl_display_JPEGEncoderOptions.__name__ = [
    "openfl",
    "display",
    "JPEGEncoderOptions",
  ];
  openfl_display_JPEGEncoderOptions.prototype = {
    quality: null,
    __class__: openfl_display_JPEGEncoderOptions,
  };
  var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
  $hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] =
    openfl_display__$JointStyle_JointStyle_$Impl_$;
  openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_JointStyle",
    "JointStyle_Impl_",
  ];
  openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function (value) {
    switch (value) {
      case "bevel":
        return 0;
      case "miter":
        return 1;
      case "round":
        return 2;
      default:
        return null;
    }
  };
  openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "bevel";
      case 1:
        return "miter";
      case 2:
        return "round";
      default:
        return null;
    }
  };
  var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
  $hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] =
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_LineScaleMode",
    "LineScaleMode_Impl_",
  ];
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "horizontal":
        return 0;
      case "none":
        return 1;
      case "normal":
        return 2;
      case "vertical":
        return 3;
      default:
        return null;
    }
  };
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "horizontal";
      case 1:
        return "none";
      case 2:
        return "normal";
      case 3:
        return "vertical";
      default:
        return null;
    }
  };
  var openfl_display_Loader = function () {
    openfl_display_DisplayObjectContainer.call(this);
    this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
  };
  $hxClasses["openfl.display.Loader"] = openfl_display_Loader;
  openfl_display_Loader.__name__ = ["openfl", "display", "Loader"];
  openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
  openfl_display_Loader.prototype = $extend(
    openfl_display_DisplayObjectContainer.prototype,
    {
      content: null,
      contentLoaderInfo: null,
      __path: null,
      close: function () {
        openfl_Lib.notImplemented({
          fileName: "Loader.hx",
          lineNumber: 53,
          className: "openfl.display.Loader",
          methodName: "close",
        });
      },
      load: function (request, context) {
        this.contentLoaderInfo.url = request.url;
        if (request.contentType == null || request.contentType == "") {
          var extension = "";
          this.__path = request.url;
          var queryIndex = this.__path.indexOf("?");
          if (queryIndex > -1) {
            this.__path = this.__path.substring(0, queryIndex);
          }
          while (StringTools.endsWith(this.__path, "/"))
            this.__path = this.__path.substring(0, this.__path.length - 1);
          if (StringTools.endsWith(this.__path, ".bundle")) {
            this.__path += "/library.json";
            if (queryIndex > -1) {
              request.url = this.__path + request.url.substring(queryIndex);
            } else {
              request.url = this.__path;
            }
          }
          var extIndex = this.__path.lastIndexOf(".");
          if (extIndex > -1) {
            extension = this.__path.substring(extIndex + 1);
          }
          var tmp;
          switch (extension) {
            case "gif":
              tmp = "image/gif";
              break;
            case "jpeg":
            case "jpg":
              tmp = "image/jpeg";
              break;
            case "js":
              tmp = "application/javascript";
              break;
            case "json":
              tmp = "application/json";
              break;
            case "png":
              tmp = "image/png";
              break;
            case "swf":
              tmp = "application/x-shockwave-flash";
              break;
            default:
              tmp = "application/x-www-form-urlencoded";
          }
          this.contentLoaderInfo.contentType = tmp;
        } else {
          this.contentLoaderInfo.contentType = request.contentType;
        }
        if (
          this.contentLoaderInfo.contentType.indexOf("image/") > -1 &&
          request.method == "GET" &&
          (request.requestHeaders == null ||
            request.requestHeaders.length == 0) &&
          request.userAgent == null
        ) {
          openfl_display_BitmapData
            .loadFromFile(request.url)
            .onComplete($bind(this, this.BitmapData_onLoad))
            .onError($bind(this, this.BitmapData_onError))
            .onProgress($bind(this, this.BitmapData_onProgress));
          return;
        }
        var loader = new openfl_net_URLLoader();
        loader.dataFormat = 0;
        if (
          this.contentLoaderInfo.contentType.indexOf("/json") > -1 ||
          this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 ||
          this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1
        ) {
          loader.dataFormat = 1;
        }
        loader.addEventListener(
          "complete",
          $bind(this, this.loader_onComplete)
        );
        loader.addEventListener("ioError", $bind(this, this.loader_onError));
        loader.addEventListener(
          "progress",
          $bind(this, this.loader_onProgress)
        );
        loader.load(request);
      },
      loadBytes: function (buffer, context) {
        openfl_display_BitmapData
          .loadFromBytes(buffer)
          .onComplete($bind(this, this.BitmapData_onLoad))
          .onError($bind(this, this.BitmapData_onError));
      },
      unload: function () {
        if (this.get_numChildren() > 0) {
          while (this.get_numChildren() > 0) this.removeChildAt(0);
          this.content = null;
          this.contentLoaderInfo.url = null;
          this.contentLoaderInfo.contentType = null;
          this.contentLoaderInfo.content = null;
          this.contentLoaderInfo.bytesLoaded = 0;
          this.contentLoaderInfo.bytesTotal = 0;
          this.contentLoaderInfo.width = 0;
          this.contentLoaderInfo.height = 0;
          this.dispatchEvent(new openfl_events_Event("unload"));
        }
      },
      unloadAndStop: function (gc) {
        if (gc == null) {
          gc = true;
        }
        if (this.content != null) {
          this.content.__stopAllMovieClips();
        }
        var _g1 = 0;
        var _g = this.get_numChildren();
        while (_g1 < _g) {
          var i = _g1++;
          this.getChildAt(i).__stopAllMovieClips();
        }
        this.unload();
        var gc1 = gc;
      },
      __dispatchError: function (text) {
        var event = new openfl_events_IOErrorEvent("ioError");
        event.text = text;
        this.contentLoaderInfo.dispatchEvent(event);
      },
      BitmapData_onError: function (error) {
        this.__dispatchError(Std.string(error));
      },
      BitmapData_onLoad: function (bitmapData) {
        this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
        this.content = this.contentLoaderInfo.content;
        this.addChild(this.content);
        this.contentLoaderInfo.dispatchEvent(
          new openfl_events_Event("complete")
        );
      },
      BitmapData_onProgress: function (bytesLoaded, bytesTotal) {
        var event = new openfl_events_ProgressEvent("progress");
        event.bytesLoaded = bytesLoaded;
        event.bytesTotal = bytesTotal;
        this.contentLoaderInfo.dispatchEvent(event);
      },
      loader_onComplete: function (event) {
        var _gthis = this;
        var loader = event.target;
        if (this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
          var manifest = lime_utils_AssetManifest.parse(
            loader.data,
            haxe_io_Path.directory(this.__path)
          );
          if (manifest == null) {
            this.__dispatchError("Cannot parse asset manifest");
            return;
          }
          var library = lime_utils_AssetLibrary.fromManifest(manifest);
          if (library == null) {
            this.__dispatchError("Cannot open library");
            return;
          }
          if (js_Boot.__instanceof(library, openfl_utils_AssetLibrary)) {
            library
              .load()
              .onComplete(function (_) {
                _gthis.contentLoaderInfo.content = js_Boot
                  .__cast(library, openfl_utils_AssetLibrary)
                  .getMovieClip("");
                _gthis.addChild(_gthis.contentLoaderInfo.content);
                _gthis.contentLoaderInfo.dispatchEvent(
                  new openfl_events_Event("complete")
                );
              })
              .onError(function (e) {
                _gthis.__dispatchError(e);
              });
          }
        } else if (
          this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 ||
          this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1
        ) {
          this.contentLoaderInfo.content = new openfl_display_Sprite();
          this.addChild(this.contentLoaderInfo.content);
          eval("(function () {" + Std.string(loader.data) + "})()");
          this.contentLoaderInfo.dispatchEvent(
            new openfl_events_Event("complete")
          );
        } else {
          openfl_display_BitmapData
            .loadFromBytes(loader.data)
            .onComplete($bind(this, this.BitmapData_onLoad))
            .onError($bind(this, this.BitmapData_onError));
        }
      },
      loader_onError: function (event) {
        event.target = this.contentLoaderInfo;
        this.contentLoaderInfo.dispatchEvent(event);
      },
      loader_onProgress: function (event) {
        event.target = this.contentLoaderInfo;
        this.contentLoaderInfo.dispatchEvent(event);
      },
      __class__: openfl_display_Loader,
    }
  );
  var openfl_display_LoaderInfo = function () {
    openfl_events_EventDispatcher.call(this);
    this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
    this.bytesLoaded = 0;
    this.bytesTotal = 0;
    this.childAllowsParent = true;
    this.parameters = {};
  };
  $hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
  openfl_display_LoaderInfo.__name__ = ["openfl", "display", "LoaderInfo"];
  openfl_display_LoaderInfo.create = function (loader) {
    var loaderInfo = new openfl_display_LoaderInfo();
    loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
    if (loader != null) {
      loaderInfo.loader = loader;
    } else {
      loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
    }
    return loaderInfo;
  };
  openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
  openfl_display_LoaderInfo.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      applicationDomain: null,
      bytes: null,
      bytesLoaded: null,
      bytesTotal: null,
      childAllowsParent: null,
      content: null,
      contentType: null,
      frameRate: null,
      height: null,
      loader: null,
      loaderURL: null,
      parameters: null,
      parentAllowsChild: null,
      sameDomain: null,
      sharedEvents: null,
      uncaughtErrorEvents: null,
      url: null,
      width: null,
      __completed: null,
      __complete: function () {
        if (!this.__completed) {
          if (this.bytesLoaded < this.bytesTotal) {
            this.bytesLoaded = this.bytesTotal;
          }
          this.__update(this.bytesLoaded, this.bytesTotal);
          this.__completed = true;
          this.dispatchEvent(new openfl_events_Event("complete"));
        }
      },
      __update: function (bytesLoaded, bytesTotal) {
        this.bytesLoaded = bytesLoaded;
        this.bytesTotal = bytesTotal;
        this.dispatchEvent(
          new openfl_events_ProgressEvent(
            "progress",
            false,
            false,
            bytesLoaded,
            bytesTotal
          )
        );
      },
      __class__: openfl_display_LoaderInfo,
    }
  );
  var openfl_display__$MovieClip_TimelineObject = function (
    id,
    depth,
    clipDepth,
    displayObject
  ) {
    this.id = id;
    this.depth = depth;
    this.clipDepth = clipDepth;
    this.displayObject = displayObject;
  };
  $hxClasses["openfl.display._MovieClip.TimelineObject"] =
    openfl_display__$MovieClip_TimelineObject;
  openfl_display__$MovieClip_TimelineObject.__name__ = [
    "openfl",
    "display",
    "_MovieClip",
    "TimelineObject",
  ];
  openfl_display__$MovieClip_TimelineObject.prototype = {
    clipDepth: null,
    depth: null,
    displayObject: null,
    id: null,
    __class__: openfl_display__$MovieClip_TimelineObject,
  };
  var openfl_display_OpenGLView = function () {
    openfl_display_DirectRenderer.call(this, "OpenGLView");
    if (!this.__added) {
      this.__added = true;
      haxe_Log.trace(
        "Warning: OpenGLView is not available in HTML5 canvas rendering mode",
        {
          fileName: "OpenGLView.hx",
          lineNumber: 78,
          className: "openfl.display.OpenGLView",
          methodName: "new",
        }
      );
      haxe_Log.trace(
        "Please compile your project using -Ddom or -Dwebgl (beta) to enable",
        {
          fileName: "OpenGLView.hx",
          lineNumber: 79,
          className: "openfl.display.OpenGLView",
          methodName: "new",
        }
      );
    }
  };
  $hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
  openfl_display_OpenGLView.__name__ = ["openfl", "display", "OpenGLView"];
  openfl_display_OpenGLView.__properties__ = {
    get_isSupported: "get_isSupported",
  };
  openfl_display_OpenGLView.get_isSupported = function () {
    return false;
  };
  openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
  openfl_display_OpenGLView.prototype = $extend(
    openfl_display_DirectRenderer.prototype,
    {
      __added: null,
      __initialized: null,
      __renderCanvas: function (renderSession) {},
      __renderDOM: function (renderSession) {
        if (this.stage != null && this.__worldVisible && this.__renderable) {
          if (!this.__added) {
            renderSession.element.appendChild(this.__canvas);
            this.__added = true;
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(
              this,
              this.__canvas,
              renderSession
            );
          }
          if (this.__context != null) {
            var rect = null;
            if (this.__scrollRect == null) {
              rect = new openfl_geom_Rectangle(
                0,
                0,
                this.stage.stageWidth,
                this.stage.stageHeight
              );
            } else {
              rect = new openfl_geom_Rectangle(
                this.get_x() + this.__scrollRect.x,
                this.get_y() + this.__scrollRect.y,
                this.__scrollRect.width,
                this.__scrollRect.height
              );
            }
            if (this.__render != null) {
              this.__render(rect);
            }
          }
        } else if (this.__added) {
          renderSession.element.removeChild(this.__canvas);
          this.__added = false;
        }
      },
      __renderGL: function (renderSession) {
        if (this.stage != null && this.__renderable) {
          var rect = null;
          if (this.__scrollRect == null) {
            rect = new openfl_geom_Rectangle(
              0,
              0,
              this.stage.stageWidth,
              this.stage.stageHeight
            );
          } else {
            rect = new openfl_geom_Rectangle(
              this.get_x() + this.__scrollRect.x,
              this.get_y() + this.__scrollRect.y,
              this.__scrollRect.width,
              this.__scrollRect.height
            );
          }
          renderSession.shaderManager.setShader(null);
          renderSession.blendModeManager.setBlendMode(null);
          if (this.__render != null) {
            this.__render(rect);
          }
        }
      },
      __class__: openfl_display_OpenGLView,
    }
  );
  var openfl_display_PNGEncoderOptions = function (fastCompression) {
    if (fastCompression == null) {
      fastCompression = false;
    }
    this.fastCompression = fastCompression;
  };
  $hxClasses["openfl.display.PNGEncoderOptions"] =
    openfl_display_PNGEncoderOptions;
  openfl_display_PNGEncoderOptions.__name__ = [
    "openfl",
    "display",
    "PNGEncoderOptions",
  ];
  openfl_display_PNGEncoderOptions.prototype = {
    fastCompression: null,
    __class__: openfl_display_PNGEncoderOptions,
  };
  var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
  $hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] =
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_PixelSnapping",
    "PixelSnapping_Impl_",
  ];
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "always":
        return 0;
      case "auto":
        return 1;
      case "never":
        return 2;
      default:
        return null;
    }
  };
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "always";
      case 1:
        return "auto";
      case 2:
        return "never";
      default:
        return null;
    }
  };
  var openfl_display_Preloader = function (display) {
    lime_app_Preloader.call(this);
    this.display = display;
    if (display != null) {
      display.addEventListener("unload", $bind(this, this.display_onUnload));
      openfl_Lib.current.addChild(display);
    }
  };
  $hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
  openfl_display_Preloader.__name__ = ["openfl", "display", "Preloader"];
  openfl_display_Preloader.__super__ = lime_app_Preloader;
  openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype, {
    display: null,
    ready: null,
    start: function () {
      if (this.simulateProgress) {
        return;
      }
      this.ready = true;
      openfl_Lib.current.get_loaderInfo().__complete();
      if (this.display != null) {
        var complete = new openfl_events_Event("complete", true, true);
        this.display.dispatchEvent(complete);
        if (!complete.isDefaultPrevented()) {
          this.display.dispatchEvent(new openfl_events_Event("unload"));
        }
      } else {
        lime_app_Preloader.prototype.start.call(this);
      }
    },
    update: function (loaded, total) {
      openfl_Lib.current.get_loaderInfo().__update(loaded, total);
      if (this.display != null) {
        this.display.dispatchEvent(
          new openfl_events_ProgressEvent("progress", true, true, loaded, total)
        );
      }
    },
    display_onUnload: function (event) {
      if (this.display != null) {
        this.display.removeEventListener(
          "unload",
          $bind(this, this.display_onUnload)
        );
        if (this.display.parent == openfl_Lib.current) {
          openfl_Lib.current.removeChild(this.display);
        }
        openfl_Lib.current.stage.set_focus(null);
        this.display = null;
      }
      if (this.ready && !this.simulateProgress) {
        lime_app_Preloader.prototype.start.call(this);
      }
    },
    __class__: openfl_display_Preloader,
  });
  var openfl_display_Shader = function (code) {
    this.__data = new openfl_display_ShaderData(null);
    if (this.__glFragmentSource == null) {
      this.__glFragmentSource =
        "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
    }
    if (this.__glVertexSource == null) {
      this.__glVertexSource =
        "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
    }
    this.byteCode = code;
    this.precisionHint = 1;
    this.__glSourceDirty = true;
    this.__numPasses = 1;
  };
  $hxClasses["openfl.display.Shader"] = openfl_display_Shader;
  openfl_display_Shader.__name__ = ["openfl", "display", "Shader"];
  openfl_display_Shader.prototype = {
    byteCode: null,
    glProgram: null,
    precisionHint: null,
    gl: null,
    __data: null,
    __glFragmentSource: null,
    __glSourceDirty: null,
    __glVertexSource: null,
    __isUniform: null,
    __inputBitmapData: null,
    __numPasses: null,
    __paramBool: null,
    __paramFloat: null,
    __paramInt: null,
    __uniformMatrix2: null,
    __uniformMatrix3: null,
    __uniformMatrix4: null,
    __disable: function () {
      if (this.glProgram != null) {
        this.__disableGL();
      }
    },
    __disableGL: function () {
      if (this.get_data().uImage0 != null) {
        this.get_data().uImage0.input = null;
      }
      var _g = 0;
      var _g1 = this.__paramBool;
      while (_g < _g1.length) {
        var parameter = _g1[_g];
        ++_g;
        this.gl.__context.disableVertexAttribArray(parameter.index);
      }
      var _g2 = 0;
      var _g11 = this.__paramFloat;
      while (_g2 < _g11.length) {
        var parameter1 = _g11[_g2];
        ++_g2;
        this.gl.__context.disableVertexAttribArray(parameter1.index);
      }
      var _g3 = 0;
      var _g12 = this.__paramInt;
      while (_g3 < _g12.length) {
        var parameter2 = _g12[_g3];
        ++_g3;
        this.gl.__context.disableVertexAttribArray(parameter2.index);
      }
      this.gl.__context.bindBuffer(this.gl.ARRAY_BUFFER, null);
      this.gl.__context.bindTexture(this.gl.TEXTURE_2D, null);
    },
    __enable: function () {
      this.__init();
      if (this.glProgram != null) {
        this.__enableGL();
      }
    },
    __enableGL: function () {
      var textureCount = 0;
      var _g = 0;
      var _g1 = this.__inputBitmapData;
      while (_g < _g1.length) {
        var input = _g1[_g];
        ++_g;
        this.gl.__context.uniform1i(input.index, textureCount);
        ++textureCount;
      }
    },
    __init: function () {
      if (this.__data == null) {
        this.__data = new openfl_display_ShaderData(null);
      }
      if (
        this.__glFragmentSource != null &&
        this.__glVertexSource != null &&
        (this.glProgram == null || this.__glSourceDirty)
      ) {
        this.__initGL();
      }
    },
    __initGL: function () {
      if (this.__glSourceDirty || this.__isUniform == null) {
        this.__glSourceDirty = false;
        this.glProgram = null;
        this.__isUniform = new haxe_ds_StringMap();
        this.__inputBitmapData = [];
        this.__paramBool = [];
        this.__paramFloat = [];
        this.__paramInt = [];
        var this1 = new Float32Array(4);
        this.__uniformMatrix2 = this1;
        var this2 = new Float32Array(9);
        this.__uniformMatrix3 = this2;
        var this3 = new Float32Array(16);
        this.__uniformMatrix4 = this3;
        this.__processGLData(this.get_glVertexSource(), "attribute");
        this.__processGLData(this.get_glVertexSource(), "uniform");
        this.__processGLData(this.get_glFragmentSource(), "uniform");
      }
      if (this.gl != null && this.glProgram == null) {
        var fragment =
          "#ifdef GL_ES\n\t\t\t\tprecision " +
          (this.precisionHint == 1 ? "mediump" : "lowp") +
          " float;\n\t\t\t\t#endif\n\t\t\t\t" +
          this.get_glFragmentSource();
        this.glProgram = lime_utils_GLUtils.createProgram(
          this.get_glVertexSource(),
          fragment
        );
        if (this.glProgram != null) {
          var _g = 0;
          var _g1 = this.__inputBitmapData;
          while (_g < _g1.length) {
            var input = _g1[_g];
            ++_g;
            var key = input.name;
            var _this = this.__isUniform;
            if (
              __map_reserved[key] != null
                ? _this.getReserved(key)
                : _this.h[key]
            ) {
              input.index = this.gl.__context.getUniformLocation(
                this.glProgram,
                input.name
              );
            } else {
              input.index = this.gl.__context.getAttribLocation(
                this.glProgram,
                input.name
              );
            }
          }
          var _g2 = 0;
          var _g11 = this.__paramBool;
          while (_g2 < _g11.length) {
            var parameter = _g11[_g2];
            ++_g2;
            var key1 = parameter.name;
            var _this1 = this.__isUniform;
            if (
              __map_reserved[key1] != null
                ? _this1.getReserved(key1)
                : _this1.h[key1]
            ) {
              parameter.index = this.gl.__context.getUniformLocation(
                this.glProgram,
                parameter.name
              );
            } else {
              parameter.index = this.gl.__context.getAttribLocation(
                this.glProgram,
                parameter.name
              );
            }
          }
          var _g3 = 0;
          var _g12 = this.__paramFloat;
          while (_g3 < _g12.length) {
            var parameter1 = _g12[_g3];
            ++_g3;
            var key2 = parameter1.name;
            var _this2 = this.__isUniform;
            if (
              __map_reserved[key2] != null
                ? _this2.getReserved(key2)
                : _this2.h[key2]
            ) {
              parameter1.index = this.gl.__context.getUniformLocation(
                this.glProgram,
                parameter1.name
              );
            } else {
              parameter1.index = this.gl.__context.getAttribLocation(
                this.glProgram,
                parameter1.name
              );
            }
          }
          var _g4 = 0;
          var _g13 = this.__paramInt;
          while (_g4 < _g13.length) {
            var parameter2 = _g13[_g4];
            ++_g4;
            var key3 = parameter2.name;
            var _this3 = this.__isUniform;
            if (
              __map_reserved[key3] != null
                ? _this3.getReserved(key3)
                : _this3.h[key3]
            ) {
              parameter2.index = this.gl.__context.getUniformLocation(
                this.glProgram,
                parameter2.name
              );
            } else {
              parameter2.index = this.gl.__context.getAttribLocation(
                this.glProgram,
                parameter2.name
              );
            }
          }
        }
      }
    },
    __processGLData: function (source, storageType) {
      var lastMatch = 0;
      var position;
      var regex;
      var name;
      var type;
      if (storageType == "uniform") {
        regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)", "");
      } else {
        regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)", "");
      }
      while (regex.matchSub(source, lastMatch)) {
        type = regex.matched(1);
        name = regex.matched(2);
        if (StringTools.startsWith(type, "sampler")) {
          var input = new openfl_display_ShaderInput();
          input.name = name;
          this.__inputBitmapData.push(input);
          this.get_data()[name] = input;
        } else {
          var parameterType;
          switch (type) {
            case "bool":
              parameterType = 0;
              break;
            case "bvec2":
              parameterType = 1;
              break;
            case "bvec3":
              parameterType = 2;
              break;
            case "bvec4":
              parameterType = 3;
              break;
            case "dvec2":
            case "vec2":
              parameterType = 5;
              break;
            case "dvec3":
            case "vec3":
              parameterType = 6;
              break;
            case "double":
            case "float":
              parameterType = 4;
              break;
            case "ivec3":
            case "uvec3":
              parameterType = 10;
              break;
            case "ivec4":
            case "uvec4":
              parameterType = 11;
              break;
            case "mat2":
            case "mat2x2":
              parameterType = 12;
              break;
            case "mat2x3":
              parameterType = 13;
              break;
            case "mat2x4":
              parameterType = 14;
              break;
            case "mat3x2":
              parameterType = 15;
              break;
            case "mat3":
            case "mat3x3":
              parameterType = 16;
              break;
            case "mat3x4":
              parameterType = 17;
              break;
            case "mat4":
            case "mat4x4":
              parameterType = 20;
              break;
            case "mat4x2":
              parameterType = 18;
              break;
            case "mat4x3":
              parameterType = 19;
              break;
            case "int":
            case "uint":
              parameterType = 8;
              break;
            case "ivec2":
            case "uvec2":
              parameterType = 9;
              break;
            case "dvec4":
            case "vec4":
              parameterType = 7;
              break;
            default:
              parameterType = null;
          }
          switch (parameterType) {
            case 0:
            case 1:
            case 2:
            case 3:
              var parameter = new openfl_display_ShaderParameter();
              parameter.name = name;
              parameter.type = parameterType;
              this.__paramBool.push(parameter);
              this.get_data()[name] = parameter;
              break;
            case 8:
            case 9:
            case 10:
            case 11:
              var parameter1 = new openfl_display_ShaderParameter();
              parameter1.name = name;
              parameter1.type = parameterType;
              this.__paramInt.push(parameter1);
              this.get_data()[name] = parameter1;
              break;
            default:
              var parameter2 = new openfl_display_ShaderParameter();
              parameter2.name = name;
              parameter2.type = parameterType;
              this.__paramFloat.push(parameter2);
              this.get_data()[name] = parameter2;
          }
        }
        var _this = this.__isUniform;
        var value = storageType == "uniform";
        if (__map_reserved[name] != null) {
          _this.setReserved(name, value);
        } else {
          _this.h[name] = value;
        }
        position = regex.matchedPos();
        lastMatch = position.pos + position.len;
      }
    },
    __update: function () {
      if (this.glProgram != null) {
        this.__updateGL();
      }
    },
    __updateGL: function () {
      var textureCount = 0;
      var _g = 0;
      var _g1 = this.__inputBitmapData;
      while (_g < _g1.length) {
        var input = _g1[_g];
        ++_g;
        if (input.input != null) {
          this.gl.__context.activeTexture(this.gl.TEXTURE0 + textureCount);
          var _this = this.gl;
          var target = this.gl.TEXTURE_2D;
          var texture = input.input.getTexture(this.gl);
          _this.__context.bindTexture(target, texture);
          if (input.smoothing) {
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_MAG_FILTER,
              this.gl.LINEAR
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_MIN_FILTER,
              this.gl.LINEAR
            );
          } else {
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_MAG_FILTER,
              this.gl.NEAREST
            );
            this.gl.__context.texParameteri(
              this.gl.TEXTURE_2D,
              this.gl.TEXTURE_MIN_FILTER,
              this.gl.NEAREST
            );
          }
        }
        ++textureCount;
      }
      var index = 0;
      var _g2 = 0;
      var _g11 = this.__paramBool;
      while (_g2 < _g11.length) {
        var parameter = _g11[_g2];
        ++_g2;
        var value = parameter.value;
        index = parameter.index;
        if (value != null) {
          var _g21 = parameter.type;
          switch (_g21) {
            case 0:
              this.gl.__context.uniform1i(index, value[0] ? 1 : 0);
              break;
            case 1:
              this.gl.__context.uniform2i(
                index,
                value[0] ? 1 : 0,
                value[1] ? 1 : 0
              );
              break;
            case 2:
              this.gl.__context.uniform3i(
                index,
                value[0] ? 1 : 0,
                value[1] ? 1 : 0,
                value[2] ? 1 : 0
              );
              break;
            case 3:
              this.gl.__context.uniform4i(
                index,
                value[0] ? 1 : 0,
                value[1] ? 1 : 0,
                value[2] ? 1 : 0,
                value[3] ? 1 : 0
              );
              break;
            default:
          }
        } else {
          var key = parameter.name;
          var _this1 = this.__isUniform;
          if (
            !(__map_reserved[key] != null
              ? _this1.getReserved(key)
              : _this1.h[key])
          ) {
            this.gl.__context.enableVertexAttribArray(parameter.index);
          }
        }
      }
      var _g3 = 0;
      var _g12 = this.__paramFloat;
      while (_g3 < _g12.length) {
        var parameter1 = _g12[_g3];
        ++_g3;
        var value1 = parameter1.value;
        index = parameter1.index;
        if (value1 != null) {
          var _g22 = parameter1.type;
          switch (_g22) {
            case 4:
              this.gl.__context.uniform1f(index, value1[0]);
              break;
            case 5:
              this.gl.__context.uniform2f(index, value1[0], value1[1]);
              break;
            case 6:
              this.gl.__context.uniform3f(
                index,
                value1[0],
                value1[1],
                value1[2]
              );
              break;
            case 7:
              this.gl.__context.uniform4f(
                index,
                value1[0],
                value1[1],
                value1[2],
                value1[3]
              );
              break;
            case 12:
              var _g23 = 0;
              while (_g23 < 4) {
                var i = _g23++;
                this.__uniformMatrix2[i] = value1[i];
              }
              this.gl.uniformMatrix2fv(index, 1, false, this.__uniformMatrix2);
              break;
            case 16:
              var _g24 = 0;
              while (_g24 < 9) {
                var i1 = _g24++;
                this.__uniformMatrix3[i1] = value1[i1];
              }
              this.gl.uniformMatrix3fv(index, 1, false, this.__uniformMatrix3);
              break;
            case 20:
              var _g25 = 0;
              while (_g25 < 16) {
                var i2 = _g25++;
                this.__uniformMatrix4[i2] = value1[i2];
              }
              this.gl.uniformMatrix4fv(index, 1, false, this.__uniformMatrix4);
              break;
            default:
          }
        } else {
          var key1 = parameter1.name;
          var _this2 = this.__isUniform;
          if (
            !(__map_reserved[key1] != null
              ? _this2.getReserved(key1)
              : _this2.h[key1])
          ) {
            this.gl.__context.enableVertexAttribArray(parameter1.index);
          }
        }
      }
      var _g4 = 0;
      var _g13 = this.__paramInt;
      while (_g4 < _g13.length) {
        var parameter2 = _g13[_g4];
        ++_g4;
        var value2 = parameter2.value;
        if (value2 != null) {
          var _g26 = parameter2.type;
          switch (_g26) {
            case 8:
              this.gl.__context.uniform1i(index, value2[0]);
              break;
            case 9:
              this.gl.__context.uniform2i(index, value2[0], value2[1]);
              break;
            case 10:
              this.gl.__context.uniform3i(
                index,
                value2[0],
                value2[1],
                value2[2]
              );
              break;
            case 11:
              this.gl.__context.uniform4i(
                index,
                value2[0],
                value2[1],
                value2[2],
                value2[3]
              );
              break;
            default:
          }
        } else {
          var key2 = parameter2.name;
          var _this3 = this.__isUniform;
          if (
            !(__map_reserved[key2] != null
              ? _this3.getReserved(key2)
              : _this3.h[key2])
          ) {
            this.gl.__context.enableVertexAttribArray(parameter2.index);
          }
        }
      }
    },
    get_data: function () {
      if (this.__glSourceDirty || this.__data == null) {
        this.__init();
      }
      return this.__data;
    },
    set_data: function (value) {
      return (this.__data = value);
    },
    get_glFragmentSource: function () {
      return this.__glFragmentSource;
    },
    set_glFragmentSource: function (value) {
      if (value != this.__glFragmentSource) {
        this.__glSourceDirty = true;
      }
      return (this.__glFragmentSource = value);
    },
    get_glVertexSource: function () {
      return this.__glVertexSource;
    },
    set_glVertexSource: function (value) {
      if (value != this.__glFragmentSource) {
        this.__glSourceDirty = true;
      }
      return (this.__glFragmentSource = value);
    },
    __class__: openfl_display_Shader,
    __properties__: {
      set_glVertexSource: "set_glVertexSource",
      get_glVertexSource: "get_glVertexSource",
      set_glFragmentSource: "set_glFragmentSource",
      get_glFragmentSource: "get_glFragmentSource",
      set_data: "set_data",
      get_data: "get_data",
    },
  };
  var openfl_display_ShaderData = function (byteArray) {};
  $hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
  openfl_display_ShaderData.__name__ = ["openfl", "display", "ShaderData"];
  openfl_display_ShaderData.prototype = {
    aAlpha: null,
    aPosition: null,
    aTexCoord: null,
    uImage0: null,
    uMatrix: null,
    __class__: openfl_display_ShaderData,
  };
  var openfl_display_ShaderInput = function () {
    this.channels = 0;
    this.height = 0;
    this.index = 0;
    this.width = 0;
  };
  $hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
  openfl_display_ShaderInput.__name__ = ["openfl", "display", "ShaderInput"];
  openfl_display_ShaderInput.prototype = {
    channels: null,
    height: null,
    index: null,
    input: null,
    name: null,
    smoothing: null,
    width: null,
    __class__: openfl_display_ShaderInput,
  };
  var openfl_display_ShaderParameter = function () {
    this.index = 0;
  };
  $hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
  openfl_display_ShaderParameter.__name__ = [
    "openfl",
    "display",
    "ShaderParameter",
  ];
  openfl_display_ShaderParameter.prototype = {
    index: null,
    name: null,
    type: null,
    value: null,
    __class__: openfl_display_ShaderParameter,
  };
  var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
  $hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] =
    openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_ShaderParameterType",
    "ShaderParameterType_Impl_",
  ];
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "bool":
          return 0;
        case "bool2":
          return 1;
        case "bool3":
          return 1;
        case "bool4":
          return 1;
        case "float":
          return 4;
        case "float2":
          return 5;
        case "float3":
          return 6;
        case "float4":
          return 7;
        case "int":
          return 8;
        case "int2":
          return 9;
        case "int3":
          return 10;
        case "int4":
          return 11;
        case "matrix2x2":
          return 12;
        case "matrix2x3":
          return 13;
        case "matrix2x4":
          return 14;
        case "matrix3x2":
          return 15;
        case "matrix3x3":
          return 16;
        case "matrix3x4":
          return 17;
        case "matrix4x2":
          return 18;
        case "matrix4x3":
          return 19;
        case "matrix4x4":
          return 20;
        default:
          return null;
      }
    };
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "bool";
        case 1:
          return "bool2";
        case 2:
          return "bool3";
        case 3:
          return "bool4";
        case 4:
          return "float";
        case 5:
          return "float2";
        case 6:
          return "float3";
        case 7:
          return "float4";
        case 8:
          return "int";
        case 9:
          return "int2";
        case 10:
          return "int3";
        case 11:
          return "int4";
        case 12:
          return "matrix2x2";
        case 13:
          return "matrix2x3";
        case 14:
          return "matrix2x4";
        case 15:
          return "matrix3x2";
        case 16:
          return "matrix3x3";
        case 17:
          return "matrix3x4";
        case 18:
          return "matrix4x2";
        case 19:
          return "matrix4x3";
        case 20:
          return "matrix4x4";
        default:
          return null;
      }
    };
  var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
  $hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] =
    openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
  openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_ShaderPrecision",
    "ShaderPrecision_Impl_",
  ];
  openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "fast":
          return 0;
        case "full":
          return 1;
        default:
          return null;
      }
    };
  openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "fast";
      case 1:
        return "full";
      default:
        return null;
    }
  };
  var openfl_display_Shape = function () {
    openfl_display_DisplayObject.call(this);
  };
  $hxClasses["openfl.display.Shape"] = openfl_display_Shape;
  openfl_display_Shape.__name__ = ["openfl", "display", "Shape"];
  openfl_display_Shape.__super__ = openfl_display_DisplayObject;
  openfl_display_Shape.prototype = $extend(
    openfl_display_DisplayObject.prototype,
    {
      get_graphics: function () {
        if (this.__graphics == null) {
          this.__graphics = new openfl_display_Graphics(this);
        }
        return this.__graphics;
      },
      __class__: openfl_display_Shape,
      __properties__: $extend(
        openfl_display_DisplayObject.prototype.__properties__,
        { get_graphics: "get_graphics" }
      ),
    }
  );
  var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
  $hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] =
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_SpreadMethod",
    "SpreadMethod_Impl_",
  ];
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "pad":
        return 0;
      case "reflect":
        return 1;
      case "repeat":
        return 2;
      default:
        return null;
    }
  };
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "pad";
      case 1:
        return "reflect";
      case 2:
        return "repeat";
      default:
        return null;
    }
  };
  var openfl_display_Stage = function (window, color) {
    openfl_display_DisplayObjectContainer.call(this);
    this.application = window.application;
    this.window = window;
    if (color == null) {
      this.__transparent = true;
      this.set_color(0);
    } else {
      this.set_color(color);
    }
    this.set_name(null);
    this.__deltaTime = 0;
    this.__displayState = 2;
    this.__mouseX = 0;
    this.__mouseY = 0;
    this.__lastClickTime = 0;
    this.__logicalWidth = 0;
    this.__logicalHeight = 0;
    this.__displayMatrix = new openfl_geom_Matrix();
    this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
    this.stage3Ds.push(new openfl_display_Stage3D());
    this.__resize();
    this.stage = this;
    this.align = 6;
    this.allowsFullScreen = false;
    this.allowsFullScreenInteractive = false;
    this.quality = 1;
    this.scaleMode = 2;
    this.showDefaultContextMenu = true;
    this.softKeyboardRect = new openfl_geom_Rectangle();
    this.stageFocusRect = true;
    this.__macKeyboard =
      (/AppleWebKit/.test(navigator.userAgent) &&
        /Mobile\/\w+/.test(navigator.userAgent)) ||
      /Mac/.test(navigator.platform);
    this.__clearBeforeRender = true;
    this.__stack = [];
    this.__rollOutStack = [];
    if (openfl_Lib.current.stage == null) {
      this.stage.addChild(openfl_Lib.current);
    }
  };
  $hxClasses["openfl.display.Stage"] = openfl_display_Stage;
  openfl_display_Stage.__name__ = ["openfl", "display", "Stage"];
  openfl_display_Stage.__interfaces__ = [lime_app_IModule];
  openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
  openfl_display_Stage.prototype = $extend(
    openfl_display_DisplayObjectContainer.prototype,
    {
      align: null,
      allowsFullScreen: null,
      allowsFullScreenInteractive: null,
      application: null,
      quality: null,
      scaleMode: null,
      showDefaultContextMenu: null,
      softKeyboardRect: null,
      stage3Ds: null,
      stageFocusRect: null,
      stageHeight: null,
      stageWidth: null,
      window: null,
      __cacheFocus: null,
      __clearBeforeRender: null,
      __color: null,
      __colorSplit: null,
      __colorString: null,
      __deltaTime: null,
      __dirty: null,
      __displayMatrix: null,
      __displayState: null,
      __dragBounds: null,
      __dragObject: null,
      __dragOffsetX: null,
      __dragOffsetY: null,
      __focus: null,
      __fullscreen: null,
      __invalidated: null,
      __lastClickTime: null,
      __logicalWidth: null,
      __logicalHeight: null,
      __macKeyboard: null,
      __mouseDownLeft: null,
      __mouseDownMiddle: null,
      __mouseDownRight: null,
      __mouseOverTarget: null,
      __mouseX: null,
      __mouseY: null,
      __primaryTouch: null,
      __renderer: null,
      __rendering: null,
      __rollOutStack: null,
      __stack: null,
      __transparent: null,
      __wasDirty: null,
      addRenderer: function (renderer) {
        var f = $bind(this, this.render);
        var a1 = renderer;
        var tmp = function () {
          f(a1);
        };
        renderer.onRender.add(tmp);
        var f1 = $bind(this, this.onRenderContextLost);
        var a11 = renderer;
        var tmp1 = function () {
          f1(a11);
        };
        renderer.onContextLost.add(tmp1);
        var f2 = $bind(this, this.onRenderContextRestored);
        var a12 = renderer;
        var tmp2 = function (a2) {
          f2(a12, a2);
        };
        renderer.onContextRestored.add(tmp2);
      },
      addWindow: function (window) {
        if (this.window != window) {
          return;
        }
        var f = $bind(this, this.onWindowActivate);
        var a1 = window;
        var tmp = function () {
          f(a1);
        };
        window.onActivate.add(tmp);
        var f1 = $bind(this, this.onWindowClose);
        var a11 = window;
        var tmp1 = function () {
          f1(a11);
        };
        window.onClose.add(tmp1, false, -9000);
        var f2 = $bind(this, this.onWindowCreate);
        var a12 = window;
        var tmp2 = function () {
          f2(a12);
        };
        window.onCreate.add(tmp2);
        var f3 = $bind(this, this.onWindowDeactivate);
        var a13 = window;
        var tmp3 = function () {
          f3(a13);
        };
        window.onDeactivate.add(tmp3);
        var f4 = $bind(this, this.onWindowDropFile);
        var a14 = window;
        var tmp4 = function (a2) {
          f4(a14, a2);
        };
        window.onDropFile.add(tmp4);
        var f5 = $bind(this, this.onWindowEnter);
        var a15 = window;
        var tmp5 = function () {
          f5(a15);
        };
        window.onEnter.add(tmp5);
        var f6 = $bind(this, this.onWindowFocusIn);
        var a16 = window;
        var tmp6 = function () {
          f6(a16);
        };
        window.onFocusIn.add(tmp6);
        var f7 = $bind(this, this.onWindowFocusOut);
        var a17 = window;
        var tmp7 = function () {
          f7(a17);
        };
        window.onFocusOut.add(tmp7);
        var f8 = $bind(this, this.onWindowFullscreen);
        var a18 = window;
        var tmp8 = function () {
          f8(a18);
        };
        window.onFullscreen.add(tmp8);
        var f9 = $bind(this, this.onKeyDown);
        var a19 = window;
        var tmp9 = function (a21, a3) {
          f9(a19, a21, a3);
        };
        window.onKeyDown.add(tmp9);
        var f10 = $bind(this, this.onKeyUp);
        var a110 = window;
        var tmp10 = function (a22, a31) {
          f10(a110, a22, a31);
        };
        window.onKeyUp.add(tmp10);
        var f11 = $bind(this, this.onWindowLeave);
        var a111 = window;
        var tmp11 = function () {
          f11(a111);
        };
        window.onLeave.add(tmp11);
        var f12 = $bind(this, this.onWindowMinimize);
        var a112 = window;
        var tmp12 = function () {
          f12(a112);
        };
        window.onMinimize.add(tmp12);
        var f13 = $bind(this, this.onMouseDown);
        var a113 = window;
        var tmp13 = function (x, y, a23) {
          f13(a113, x, y, a23);
        };
        window.onMouseDown.add(tmp13);
        var f14 = $bind(this, this.onMouseMove);
        var a114 = window;
        var tmp14 = function (x1, y1) {
          f14(a114, x1, y1);
        };
        window.onMouseMove.add(tmp14);
        var f15 = $bind(this, this.onMouseMoveRelative);
        var a115 = window;
        var tmp15 = function (x2, y2) {
          f15(a115, x2, y2);
        };
        window.onMouseMoveRelative.add(tmp15);
        var f16 = $bind(this, this.onMouseUp);
        var a116 = window;
        var tmp16 = function (x3, y3, a24) {
          f16(a116, x3, y3, a24);
        };
        window.onMouseUp.add(tmp16);
        var f17 = $bind(this, this.onMouseWheel);
        var a117 = window;
        var tmp17 = function (a25, a32) {
          f17(a117, a25, a32);
        };
        window.onMouseWheel.add(tmp17);
        var f18 = $bind(this, this.onWindowMove);
        var a118 = window;
        var tmp18 = function (x4, y4) {
          f18(a118, x4, y4);
        };
        window.onMove.add(tmp18);
        var f19 = $bind(this, this.onWindowResize);
        var a119 = window;
        var tmp19 = function (a26, a33) {
          f19(a119, a26, a33);
        };
        window.onResize.add(tmp19);
        var f20 = $bind(this, this.onWindowRestore);
        var a120 = window;
        var tmp20 = function () {
          f20(a120);
        };
        window.onRestore.add(tmp20);
        var f21 = $bind(this, this.onTextEdit);
        var a121 = window;
        var tmp21 = function (a27, a34, a4) {
          f21(a121, a27, a34, a4);
        };
        window.onTextEdit.add(tmp21);
        var f22 = $bind(this, this.onTextInput);
        var a122 = window;
        var tmp22 = function (a28) {
          f22(a122, a28);
        };
        window.onTextInput.add(tmp22);
        if (window.id > -1) {
          this.onWindowCreate(window);
        }
      },
      registerModule: function (application) {
        application.onExit.add($bind(this, this.onModuleExit), false, 0);
        application.onUpdate.add($bind(this, this.update));
        var gamepad = lime_ui_Gamepad.devices.iterator();
        while (gamepad.hasNext()) {
          var gamepad1 = gamepad.next();
          this.__onGamepadConnect(gamepad1);
        }
        lime_ui_Gamepad.onConnect.add($bind(this, this.__onGamepadConnect));
        lime_ui_Touch.onStart.add($bind(this, this.onTouchStart));
        lime_ui_Touch.onMove.add($bind(this, this.onTouchMove));
        lime_ui_Touch.onEnd.add($bind(this, this.onTouchEnd));
      },
      removeRenderer: function (renderer) {},
      removeWindow: function (window) {},
      setPreloader: function (preloader) {},
      unregisterModule: function (application) {
        application.onExit.remove($bind(this, this.onModuleExit));
        application.onUpdate.remove($bind(this, this.update));
        lime_ui_Gamepad.onConnect.remove($bind(this, this.__onGamepadConnect));
        lime_ui_Touch.onStart.remove($bind(this, this.onTouchStart));
        lime_ui_Touch.onMove.remove($bind(this, this.onTouchMove));
        lime_ui_Touch.onEnd.remove($bind(this, this.onTouchEnd));
      },
      globalToLocal: function (pos) {
        return pos.clone();
      },
      invalidate: function () {
        this.__invalidated = true;
      },
      localToGlobal: function (pos) {
        return pos.clone();
      },
      onGamepadAxisMove: function (gamepad, axis, value) {
        try {
          openfl_ui_GameInput.__onGamepadAxisMove(gamepad, axis, value);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onGamepadButtonDown: function (gamepad, button) {
        try {
          openfl_ui_GameInput.__onGamepadButtonDown(gamepad, button);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onGamepadButtonUp: function (gamepad, button) {
        try {
          openfl_ui_GameInput.__onGamepadButtonUp(gamepad, button);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onGamepadConnect: function (gamepad) {
        try {
          openfl_ui_GameInput.__onGamepadConnect(gamepad);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onGamepadDisconnect: function (gamepad) {
        try {
          openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onJoystickAxisMove: function (joystick, axis, value) {},
      onJoystickButtonDown: function (joystick, button) {},
      onJoystickButtonUp: function (joystick, button) {},
      onJoystickConnect: function (joystick) {},
      onJoystickDisconnect: function (joystick) {},
      onJoystickHatMove: function (joystick, hat, position) {},
      onJoystickTrackballMove: function (joystick, trackball, value) {},
      onKeyDown: function (window, keyCode, modifier) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__onKey("keyDown", keyCode, modifier);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onKeyUp: function (window, keyCode, modifier) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__onKey("keyUp", keyCode, modifier);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onModuleExit: function (code) {
        if (this.window != null) {
          try {
            this.__broadcastEvent(new openfl_events_Event("deactivate"));
          } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            this.__handleError(e);
          }
        }
      },
      onMouseDown: function (window, x, y, button) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          var type;
          switch (button) {
            case 1:
              type = "middleMouseDown";
              break;
            case 2:
              type = "rightMouseDown";
              break;
            default:
              type = "mouseDown";
          }
          this.__onMouse(
            type,
            (x * window.__scale) | 0,
            (y * window.__scale) | 0,
            button
          );
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onMouseMove: function (window, x, y) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__onMouse(
            "mouseMove",
            (x * window.__scale) | 0,
            (y * window.__scale) | 0,
            0
          );
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onMouseMoveRelative: function (window, x, y) {},
      onMouseUp: function (window, x, y, button) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          var type;
          switch (button) {
            case 1:
              type = "middleMouseUp";
              break;
            case 2:
              type = "rightMouseUp";
              break;
            default:
              type = "mouseUp";
          }
          this.__onMouse(
            type,
            (x * window.__scale) | 0,
            (y * window.__scale) | 0,
            button
          );
          if (!this.showDefaultContextMenu && button == 2) {
            window.onMouseUp.cancel();
          }
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onMouseWheel: function (window, deltaX, deltaY) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__onMouseWheel(
            (deltaX * window.__scale) | 0,
            (deltaY * window.__scale) | 0
          );
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onPreloadComplete: function () {},
      onPreloadProgress: function (loaded, total) {},
      onRenderContextLost: function (renderer) {
        this.__renderer = null;
      },
      onRenderContextRestored: function (renderer, context) {
        this.__createRenderer();
      },
      onTextEdit: function (window, text, start, length) {},
      onTextInput: function (window, text) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          var stack = [];
          if (this.__focus == null) {
            this.__getInteractive(stack);
          } else {
            this.__focus.__getInteractive(stack);
          }
          var event = new openfl_events_TextEvent(
            "textInput",
            true,
            false,
            text
          );
          if (stack.length > 0) {
            stack.reverse();
            this.__fireEvent(event, stack);
          } else {
            this.__dispatchEvent(event);
          }
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onTouchMove: function (touch) {
        try {
          this.__onTouch("touchMove", touch);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onTouchEnd: function (touch) {
        try {
          if (this.__primaryTouch == touch) {
            this.__primaryTouch = null;
          }
          this.__onTouch("touchEnd", touch);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onTouchStart: function (touch) {
        try {
          if (this.__primaryTouch == null) {
            this.__primaryTouch = touch;
          }
          this.__onTouch("touchBegin", touch);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowActivate: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
      },
      onWindowClose: function (window) {
        if (this.window == window) {
          this.window = null;
        }
        try {
          this.__primaryTouch = null;
          this.__broadcastEvent(new openfl_events_Event("deactivate"));
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowCreate: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          if (window.renderer != null) {
            this.__createRenderer();
          }
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowDeactivate: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
      },
      onWindowDropFile: function (window, file) {},
      onWindowEnter: function (window) {},
      onWindowFocusIn: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__broadcastEvent(new openfl_events_Event("activate"));
          this.set_focus(this.__cacheFocus);
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowFocusOut: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__primaryTouch = null;
          this.__broadcastEvent(new openfl_events_Event("deactivate"));
          var currentFocus = this.get_focus();
          this.set_focus(null);
          this.__cacheFocus = currentFocus;
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowFullscreen: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__resize();
          if (this.__displayState == 2) {
            this.__displayState = 1;
            this.__dispatchEvent(
              new openfl_events_FullScreenEvent(
                "fullScreen",
                false,
                false,
                false,
                true
              )
            );
          }
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowLeave: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowMinimize: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
      },
      onWindowMove: function (window, x, y) {},
      onWindowResize: function (window, width, height) {
        if (this.window == null || this.window != window) {
          return;
        }
        try {
          this.__resize();
          if (this.__displayState != 2 && !window.__fullscreen) {
            this.__displayState = 2;
            this.__dispatchEvent(
              new openfl_events_FullScreenEvent(
                "fullScreen",
                false,
                false,
                true,
                true
              )
            );
          }
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      onWindowRestore: function (window) {
        if (this.window == null || this.window != window) {
          return;
        }
      },
      render: function (renderer) {
        if (renderer.window == null || renderer.window != this.window) {
          return;
        }
        try {
          if (
            this.application != null &&
            this.application.__windows.length > 0
          ) {
            if (!this.__transformDirty) {
              this.__transformDirty = true;
              openfl_display_DisplayObject.__worldTransformDirty++;
            }
            if (!this.__renderDirty) {
              this.__renderDirty = true;
              openfl_display_DisplayObject.__worldRenderDirty++;
            }
          }
          if (this.__rendering) {
            return;
          }
          this.__rendering = true;
          if (this.__renderer != null) {
            this.__renderer.clear();
          }
          this.__broadcastEvent(new openfl_events_Event("enterFrame"));
          this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
          this.__broadcastEvent(new openfl_events_Event("exitFrame"));
          if (this.__invalidated) {
            this.__invalidated = false;
            this.__broadcastEvent(new openfl_events_Event("render"));
          }
          this.__renderable = true;
          this.__enterFrame(this.__deltaTime);
          this.__deltaTime = 0;
          this.__update(false, true);
          if (this.__renderer != null) {
            if (renderer.type == lime_graphics_RendererType.CAIRO) {
              var _g = renderer.context;
              if (_g[1] == 4) {
                var cairo = _g[2];
              }
            }
            this.__renderer.render();
          }
          this.__rendering = false;
        } catch (e) {
          haxe_CallStack.lastException = e;
          if (e instanceof js__$Boot_HaxeError) e = e.val;
          this.__handleError(e);
        }
      },
      update: function (deltaTime) {
        this.__deltaTime = deltaTime;
      },
      __broadcastEvent: function (event) {
        var key = event.type;
        var _this = openfl_display_DisplayObject.__broadcastEvents;
        if (
          __map_reserved[key] != null
            ? _this.existsReserved(key)
            : _this.h.hasOwnProperty(key)
        ) {
          var key1 = event.type;
          var _this1 = openfl_display_DisplayObject.__broadcastEvents;
          var dispatchers =
            __map_reserved[key1] != null
              ? _this1.getReserved(key1)
              : _this1.h[key1];
          var _g = 0;
          while (_g < dispatchers.length) {
            var dispatcher = dispatchers[_g];
            ++_g;
            dispatcher.__dispatch(event);
          }
        }
      },
      __createRenderer: function () {
        var _g = this.window.renderer.context;
        switch (_g[1]) {
          case 0:
            var gl = _g[2];
            break;
          case 1:
            var context = _g[2];
            this.__renderer =
              new openfl__$internal_renderer_canvas_CanvasRenderer(
                this,
                context
              );
            break;
          case 2:
            var element = _g[2];
            break;
          case 4:
            var cairo = _g[2];
            break;
          case 5:
            var ctx = _g[2];
            break;
          default:
        }
      },
      __drag: function (mouse) {
        var parent = this.__dragObject.parent;
        if (parent != null) {
          var _this = parent.__getWorldTransform();
          var norm = _this.a * _this.d - _this.b * _this.c;
          if (norm == 0) {
            mouse.x = -_this.tx;
            mouse.y = -_this.ty;
          } else {
            var px =
              (1.0 / norm) *
              (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
            mouse.y =
              (1.0 / norm) *
              (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
            mouse.x = px;
          }
        }
        var x = mouse.x + this.__dragOffsetX;
        var y = mouse.y + this.__dragOffsetY;
        if (this.__dragBounds != null) {
          if (x < this.__dragBounds.x) {
            x = this.__dragBounds.x;
          } else if (x > this.__dragBounds.get_right()) {
            x = this.__dragBounds.get_right();
          }
          if (y < this.__dragBounds.y) {
            y = this.__dragBounds.y;
          } else if (y > this.__dragBounds.get_bottom()) {
            y = this.__dragBounds.get_bottom();
          }
        }
        this.__dragObject.set_x(x);
        this.__dragObject.set_y(y);
      },
      __fireEvent: function (event, stack) {
        var target;
        var length = stack.length;
        if (length == 0) {
          event.eventPhase = 2;
          target = event.target;
          target.__dispatch(event);
        } else {
          event.eventPhase = 1;
          event.target = stack[stack.length - 1];
          var _g1 = 0;
          var _g = length - 1;
          while (_g1 < _g) {
            var i = _g1++;
            stack[i].__dispatch(event);
            if (event.__isCanceled) {
              return;
            }
          }
          event.eventPhase = 2;
          target = event.target;
          target.__dispatch(event);
          if (event.__isCanceled) {
            return;
          }
          if (event.bubbles) {
            event.eventPhase = 3;
            var i1 = length - 2;
            while (i1 >= 0) {
              stack[i1].__dispatch(event);
              if (event.__isCanceled) {
                return;
              }
              --i1;
            }
          }
        }
      },
      __getInteractive: function (stack) {
        if (stack != null) {
          stack.push(this);
        }
        return true;
      },
      __handleError: function (e) {
        var event = new openfl_events_UncaughtErrorEvent(
          "uncaughtError",
          true,
          true,
          e
        );
        openfl_Lib.current.__loaderInfo.uncaughtErrorEvents.dispatchEvent(
          event
        );
        if (!event.__preventDefault) {
          throw e;
        }
      },
      __onKey: function (type, keyCode, modifier) {
        openfl_events_MouseEvent.__altKey =
          lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
        openfl_events_MouseEvent.__commandKey =
          lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
        openfl_events_MouseEvent.__ctrlKey =
          lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
        openfl_events_MouseEvent.__shiftKey =
          lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
        var stack = [];
        if (this.__focus == null) {
          this.__getInteractive(stack);
        } else {
          this.__focus.__getInteractive(stack);
        }
        if (stack.length > 0) {
          var keyLocation;
          switch (keyCode) {
            case 1073741908:
            case 1073741909:
            case 1073741910:
            case 1073741911:
            case 1073741912:
            case 1073741913:
            case 1073741914:
            case 1073741915:
            case 1073741916:
            case 1073741917:
            case 1073741918:
            case 1073741919:
            case 1073741920:
            case 1073741921:
            case 1073741922:
            case 1073741923:
            case 1073742044:
              keyLocation = 3;
              break;
            case 1073742048:
            case 1073742049:
            case 1073742050:
            case 1073742051:
              keyLocation = 1;
              break;
            case 1073742052:
            case 1073742053:
            case 1073742054:
            case 1073742055:
              keyLocation = 2;
              break;
            default:
              keyLocation = 0;
          }
          var keyCode1;
          switch (keyCode) {
            case 8:
              keyCode1 = 8;
              break;
            case 9:
              keyCode1 = 9;
              break;
            case 13:
              keyCode1 = 13;
              break;
            case 27:
              keyCode1 = 27;
              break;
            case 32:
              keyCode1 = 32;
              break;
            case 33:
              keyCode1 = 49;
              break;
            case 34:
              keyCode1 = 222;
              break;
            case 35:
              keyCode1 = 51;
              break;
            case 36:
              keyCode1 = 52;
              break;
            case 37:
              keyCode1 = 53;
              break;
            case 38:
              keyCode1 = 55;
              break;
            case 39:
              keyCode1 = 222;
              break;
            case 40:
              keyCode1 = 57;
              break;
            case 41:
              keyCode1 = 48;
              break;
            case 42:
              keyCode1 = 56;
              break;
            case 44:
              keyCode1 = 188;
              break;
            case 45:
              keyCode1 = 189;
              break;
            case 46:
              keyCode1 = 190;
              break;
            case 47:
              keyCode1 = 191;
              break;
            case 48:
              keyCode1 = 48;
              break;
            case 49:
              keyCode1 = 49;
              break;
            case 50:
              keyCode1 = 50;
              break;
            case 51:
              keyCode1 = 51;
              break;
            case 52:
              keyCode1 = 52;
              break;
            case 53:
              keyCode1 = 53;
              break;
            case 54:
              keyCode1 = 54;
              break;
            case 55:
              keyCode1 = 55;
              break;
            case 56:
              keyCode1 = 56;
              break;
            case 57:
              keyCode1 = 57;
              break;
            case 58:
              keyCode1 = 186;
              break;
            case 59:
              keyCode1 = 186;
              break;
            case 60:
              keyCode1 = 60;
              break;
            case 61:
              keyCode1 = 187;
              break;
            case 62:
              keyCode1 = 190;
              break;
            case 63:
              keyCode1 = 191;
              break;
            case 64:
              keyCode1 = 50;
              break;
            case 91:
              keyCode1 = 219;
              break;
            case 92:
              keyCode1 = 220;
              break;
            case 93:
              keyCode1 = 221;
              break;
            case 94:
              keyCode1 = 54;
              break;
            case 95:
              keyCode1 = 189;
              break;
            case 96:
              keyCode1 = 192;
              break;
            case 97:
              keyCode1 = 65;
              break;
            case 98:
              keyCode1 = 66;
              break;
            case 99:
              keyCode1 = 67;
              break;
            case 100:
              keyCode1 = 68;
              break;
            case 101:
              keyCode1 = 69;
              break;
            case 102:
              keyCode1 = 70;
              break;
            case 103:
              keyCode1 = 71;
              break;
            case 104:
              keyCode1 = 72;
              break;
            case 105:
              keyCode1 = 73;
              break;
            case 106:
              keyCode1 = 74;
              break;
            case 107:
              keyCode1 = 75;
              break;
            case 108:
              keyCode1 = 76;
              break;
            case 109:
              keyCode1 = 77;
              break;
            case 110:
              keyCode1 = 78;
              break;
            case 111:
              keyCode1 = 79;
              break;
            case 112:
              keyCode1 = 80;
              break;
            case 113:
              keyCode1 = 81;
              break;
            case 114:
              keyCode1 = 82;
              break;
            case 115:
              keyCode1 = 83;
              break;
            case 116:
              keyCode1 = 84;
              break;
            case 117:
              keyCode1 = 85;
              break;
            case 118:
              keyCode1 = 86;
              break;
            case 119:
              keyCode1 = 87;
              break;
            case 120:
              keyCode1 = 88;
              break;
            case 121:
              keyCode1 = 89;
              break;
            case 122:
              keyCode1 = 90;
              break;
            case 127:
              keyCode1 = 46;
              break;
            case 1073741881:
              keyCode1 = 20;
              break;
            case 1073741882:
              keyCode1 = 112;
              break;
            case 1073741883:
              keyCode1 = 113;
              break;
            case 1073741884:
              keyCode1 = 114;
              break;
            case 1073741885:
              keyCode1 = 115;
              break;
            case 1073741886:
              keyCode1 = 116;
              break;
            case 1073741887:
              keyCode1 = 117;
              break;
            case 1073741888:
              keyCode1 = 118;
              break;
            case 1073741889:
              keyCode1 = 119;
              break;
            case 1073741890:
              keyCode1 = 120;
              break;
            case 1073741891:
              keyCode1 = 121;
              break;
            case 1073741892:
              keyCode1 = 122;
              break;
            case 1073741893:
              keyCode1 = 123;
              break;
            case 1073741894:
              keyCode1 = 301;
              break;
            case 1073741895:
              keyCode1 = 145;
              break;
            case 1073741896:
              keyCode1 = 19;
              break;
            case 1073741897:
              keyCode1 = 45;
              break;
            case 1073741898:
              keyCode1 = 36;
              break;
            case 1073741899:
              keyCode1 = 33;
              break;
            case 1073741901:
              keyCode1 = 35;
              break;
            case 1073741902:
              keyCode1 = 34;
              break;
            case 1073741903:
              keyCode1 = 39;
              break;
            case 1073741904:
              keyCode1 = 37;
              break;
            case 1073741905:
              keyCode1 = 40;
              break;
            case 1073741906:
              keyCode1 = 38;
              break;
            case 1073741907:
              keyCode1 = 144;
              break;
            case 1073741908:
              keyCode1 = 111;
              break;
            case 1073741909:
              keyCode1 = 106;
              break;
            case 1073741910:
              keyCode1 = 109;
              break;
            case 1073741911:
              keyCode1 = 107;
              break;
            case 1073741912:
              keyCode1 = 108;
              break;
            case 1073741913:
              keyCode1 = 97;
              break;
            case 1073741914:
              keyCode1 = 98;
              break;
            case 1073741915:
              keyCode1 = 99;
              break;
            case 1073741916:
              keyCode1 = 100;
              break;
            case 1073741917:
              keyCode1 = 101;
              break;
            case 1073741918:
              keyCode1 = 102;
              break;
            case 1073741919:
              keyCode1 = 103;
              break;
            case 1073741920:
              keyCode1 = 104;
              break;
            case 1073741921:
              keyCode1 = 105;
              break;
            case 1073741922:
              keyCode1 = 96;
              break;
            case 1073741923:
              keyCode1 = 110;
              break;
            case 1073741925:
              keyCode1 = 302;
              break;
            case 1073741928:
              keyCode1 = 124;
              break;
            case 1073741929:
              keyCode1 = 125;
              break;
            case 1073741930:
              keyCode1 = 126;
              break;
            case 1073741982:
              keyCode1 = 13;
              break;
            case 1073742044:
              keyCode1 = 110;
              break;
            case 1073742048:
              keyCode1 = 17;
              break;
            case 1073742049:
              keyCode1 = 16;
              break;
            case 1073742050:
              keyCode1 = 18;
              break;
            case 1073742051:
              keyCode1 = 15;
              break;
            case 1073742052:
              keyCode1 = 17;
              break;
            case 1073742053:
              keyCode1 = 16;
              break;
            case 1073742054:
              keyCode1 = 18;
              break;
            case 1073742055:
              keyCode1 = 15;
              break;
            default:
              keyCode1 = keyCode;
          }
          var charCode = openfl_ui_Keyboard.__getCharCode(
            keyCode1,
            lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)
          );
          var event = new openfl_events_KeyboardEvent(
            type,
            true,
            true,
            charCode,
            keyCode1,
            keyLocation,
            this.__macKeyboard
              ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(
                  modifier
                ) ||
                lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)
              : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),
            lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),
            lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),
            lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),
            lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)
          );
          stack.reverse();
          this.__fireEvent(event, stack);
          if (event.__preventDefault) {
            if (type == "keyDown") {
              this.window.onKeyDown.cancel();
            } else {
              this.window.onKeyUp.cancel();
            }
          }
        }
      },
      __onGamepadConnect: function (gamepad) {
        this.onGamepadConnect(gamepad);
        var f = $bind(this, this.onGamepadAxisMove);
        var a1 = gamepad;
        var tmp = function (a2, a3) {
          f(a1, a2, a3);
        };
        gamepad.onAxisMove.add(tmp);
        var f1 = $bind(this, this.onGamepadButtonDown);
        var a11 = gamepad;
        var tmp1 = function (a21) {
          f1(a11, a21);
        };
        gamepad.onButtonDown.add(tmp1);
        var f2 = $bind(this, this.onGamepadButtonUp);
        var a12 = gamepad;
        var tmp2 = function (a22) {
          f2(a12, a22);
        };
        gamepad.onButtonUp.add(tmp2);
        var f3 = $bind(this, this.onGamepadDisconnect);
        var a13 = gamepad;
        var tmp3 = function () {
          f3(a13);
        };
        gamepad.onDisconnect.add(tmp3);
      },
      __onMouse: function (type, x, y, button) {
        if (button > 2) {
          return;
        }
        var targetPoint = new openfl_geom_Point(x, y);
        var _this = this.__displayMatrix;
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          targetPoint.x = -_this.tx;
          targetPoint.y = -_this.ty;
        } else {
          var px =
            (1.0 / norm) *
            (_this.c * (_this.ty - targetPoint.y) +
              _this.d * (targetPoint.x - _this.tx));
          targetPoint.y =
            (1.0 / norm) *
            (_this.a * (targetPoint.y - _this.ty) +
              _this.b * (_this.tx - targetPoint.x));
          targetPoint.x = px;
        }
        this.__mouseX = targetPoint.x;
        this.__mouseY = targetPoint.y;
        var stack = [];
        var target = null;
        if (
          this.__hitTest(this.__mouseX, this.__mouseY, true, stack, true, this)
        ) {
          target = stack[stack.length - 1];
        } else {
          target = this;
          stack = [this];
        }
        if (target == null) {
          target = this;
        }
        var clickType = null;
        switch (type) {
          case "middleMouseDown":
            this.__mouseDownMiddle = target;
            break;
          case "middleMouseUp":
            if (this.__mouseDownMiddle == target) {
              clickType = "middleClick";
            }
            this.__mouseDownMiddle = null;
            break;
          case "mouseDown":
            if (target.get_tabEnabled()) {
              this.set_focus(target);
            } else {
              this.set_focus(null);
            }
            this.__mouseDownLeft = target;
            break;
          case "mouseUp":
            if (this.__mouseDownLeft == target) {
              clickType = "click";
            }
            this.__mouseDownLeft = null;
            break;
          case "rightMouseDown":
            this.__mouseDownRight = target;
            break;
          case "rightMouseUp":
            if (this.__mouseDownRight == target) {
              clickType = "rightClick";
            }
            this.__mouseDownRight = null;
            break;
          default:
        }
        this.__fireEvent(
          openfl_events_MouseEvent.__create(
            type,
            button,
            this.__mouseX,
            this.__mouseY,
            target == this ? targetPoint : target.globalToLocal(targetPoint),
            target
          ),
          stack
        );
        if (clickType != null) {
          this.__fireEvent(
            openfl_events_MouseEvent.__create(
              clickType,
              button,
              this.__mouseX,
              this.__mouseY,
              target == this ? targetPoint : target.globalToLocal(targetPoint),
              target
            ),
            stack
          );
          if (
            type == "mouseUp" &&
            js_Boot.__cast(target, openfl_display_InteractiveObject)
              .doubleClickEnabled
          ) {
            var currentTime = openfl_Lib.getTimer();
            if (currentTime - this.__lastClickTime < 500) {
              this.__fireEvent(
                openfl_events_MouseEvent.__create(
                  "doubleClick",
                  button,
                  this.__mouseX,
                  this.__mouseY,
                  target == this
                    ? targetPoint
                    : target.globalToLocal(targetPoint),
                  target
                ),
                stack
              );
              this.__lastClickTime = 0;
            } else {
              this.__lastClickTime = currentTime;
            }
          }
        }
        if (openfl_ui_Mouse.__cursor == "auto") {
          var cursor = null;
          if (this.__mouseDownLeft != null) {
            cursor = this.__mouseDownLeft.__getCursor();
          } else {
            var _g = 0;
            while (_g < stack.length) {
              var target1 = stack[_g];
              ++_g;
              cursor = target1.__getCursor();
              if (cursor != null) {
                lime_ui_Mouse.set_cursor(cursor);
                break;
              }
            }
          }
          if (cursor == null) {
            lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
          }
        }
        var event;
        var localPoint;
        if (target != this.__mouseOverTarget) {
          if (this.__mouseOverTarget != null) {
            if (this.__mouseOverTarget == this) {
              localPoint = targetPoint;
            } else {
              localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
            }
            event = openfl_events_MouseEvent.__create(
              "mouseOut",
              button,
              this.__mouseX,
              this.__mouseY,
              localPoint,
              this.__mouseOverTarget
            );
            this.__mouseOverTarget.__dispatchEvent(event);
          }
        }
        var _g1 = 0;
        var _g11 = this.__rollOutStack;
        while (_g1 < _g11.length) {
          var target2 = _g11[_g1];
          ++_g1;
          if (stack.indexOf(target2) == -1) {
            HxOverrides.remove(this.__rollOutStack, target2);
            localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
            event = openfl_events_MouseEvent.__create(
              "rollOut",
              button,
              this.__mouseX,
              this.__mouseY,
              localPoint,
              this.__mouseOverTarget
            );
            event.bubbles = false;
            target2.__dispatchEvent(event);
          }
        }
        var _g2 = 0;
        while (_g2 < stack.length) {
          var target3 = stack[_g2];
          ++_g2;
          if (this.__rollOutStack.indexOf(target3) == -1) {
            if (target3.hasEventListener("rollOver")) {
              localPoint = target3.globalToLocal(targetPoint);
              event = openfl_events_MouseEvent.__create(
                "rollOver",
                button,
                this.__mouseX,
                this.__mouseY,
                localPoint,
                target3
              );
              event.bubbles = false;
              target3.__dispatchEvent(event);
            }
            if (target3.hasEventListener("rollOut")) {
              this.__rollOutStack.push(target3);
            }
          }
        }
        if (target != this.__mouseOverTarget) {
          if (target != null) {
            if (target == this) {
              localPoint = targetPoint;
            } else {
              localPoint = target.globalToLocal(targetPoint);
            }
            event = openfl_events_MouseEvent.__create(
              "mouseOver",
              button,
              this.__mouseX,
              this.__mouseY,
              localPoint,
              target
            );
            event.bubbles = true;
            target.__dispatchEvent(event);
          }
          this.__mouseOverTarget = target;
        }
        if (this.__dragObject != null) {
          this.__drag(targetPoint);
          var dropTarget = null;
          if (this.__mouseOverTarget == this.__dragObject) {
            var cacheMouseEnabled = this.__dragObject.mouseEnabled;
            var cacheMouseChildren = this.__dragObject.mouseChildren;
            this.__dragObject.mouseEnabled = false;
            this.__dragObject.mouseChildren = false;
            var stack1 = [];
            if (
              this.__hitTest(
                this.__mouseX,
                this.__mouseY,
                true,
                stack1,
                true,
                this
              )
            ) {
              dropTarget = stack1[stack1.length - 1];
            }
            this.__dragObject.mouseEnabled = cacheMouseEnabled;
            this.__dragObject.mouseChildren = cacheMouseChildren;
          } else if (this.__mouseOverTarget != this) {
            dropTarget = this.__mouseOverTarget;
          }
          this.__dragObject.dropTarget = dropTarget;
        }
      },
      __onMouseWheel: function (deltaX, deltaY) {
        var x = this.__mouseX;
        var y = this.__mouseY;
        var stack = [];
        var target = null;
        if (
          this.__hitTest(this.__mouseX, this.__mouseY, true, stack, true, this)
        ) {
          target = stack[stack.length - 1];
        } else {
          target = this;
          stack = [this];
        }
        if (target == null) {
          target = this;
        }
        var targetPoint = new openfl_geom_Point(x, y);
        var _this = this.__displayMatrix;
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          targetPoint.x = -_this.tx;
          targetPoint.y = -_this.ty;
        } else {
          var px =
            (1.0 / norm) *
            (_this.c * (_this.ty - targetPoint.y) +
              _this.d * (targetPoint.x - _this.tx));
          targetPoint.y =
            (1.0 / norm) *
            (_this.a * (targetPoint.y - _this.ty) +
              _this.b * (_this.tx - targetPoint.x));
          targetPoint.x = px;
        }
        var delta = deltaY | 0;
        this.__fireEvent(
          openfl_events_MouseEvent.__create(
            "mouseWheel",
            0,
            this.__mouseX,
            this.__mouseY,
            target == this ? targetPoint : target.globalToLocal(targetPoint),
            target,
            delta
          ),
          stack
        );
      },
      __onTouch: function (type, touch) {
        var point = new openfl_geom_Point(
          Math.round(touch.x * this.window.__width * this.window.__scale),
          Math.round(touch.y * this.window.__height * this.window.__scale)
        );
        var _this = this.__displayMatrix;
        var norm = _this.a * _this.d - _this.b * _this.c;
        if (norm == 0) {
          point.x = -_this.tx;
          point.y = -_this.ty;
        } else {
          var px =
            (1.0 / norm) *
            (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
          point.y =
            (1.0 / norm) *
            (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
          point.x = px;
        }
        var touchX = point.x;
        var touchY = point.y;
        var __stack = [];
        if (this.__hitTest(touchX, touchY, false, __stack, true, this)) {
          var target = __stack[__stack.length - 1];
          if (target == null) {
            target = this;
          }
          var localPoint = target.globalToLocal(point);
          var touchEvent = openfl_events_TouchEvent.__create(
            type,
            null,
            touchX,
            touchY,
            localPoint,
            target
          );
          touchEvent.touchPointID = touch.id;
          touchEvent.isPrimaryTouchPoint = this.__primaryTouch == touch;
          this.__fireEvent(touchEvent, __stack);
        } else {
          var touchEvent1 = openfl_events_TouchEvent.__create(
            type,
            null,
            touchX,
            touchY,
            point,
            this
          );
          touchEvent1.touchPointID = touch.id;
          touchEvent1.isPrimaryTouchPoint = this.__primaryTouch == touch;
          this.__fireEvent(touchEvent1, [this.stage]);
        }
      },
      __resize: function () {
        var cacheWidth = this.stageWidth;
        var cacheHeight = this.stageHeight;
        var windowWidth = (this.window.__width * this.window.__scale) | 0;
        var windowHeight = (this.window.__height * this.window.__scale) | 0;
        this.__logicalWidth = windowWidth;
        this.__logicalHeight = windowHeight;
        this.__displayMatrix.identity();
        if (this.__logicalWidth == 0 && this.__logicalHeight == 0) {
          this.stageWidth = windowWidth;
          this.stageHeight = windowHeight;
        } else {
          this.stageWidth = this.__logicalWidth;
          this.stageHeight = this.__logicalHeight;
          var scaleX = windowWidth / this.stageWidth;
          var scaleY = windowHeight / this.stageHeight;
          var targetScale = Math.min(scaleX, scaleY);
          var offsetX = Math.round(
            (windowWidth - this.stageWidth * targetScale) / 2
          );
          var offsetY = Math.round(
            (windowHeight - this.stageHeight * targetScale) / 2
          );
          this.__displayMatrix.scale(targetScale, targetScale);
          this.__displayMatrix.translate(offsetX, offsetY);
        }
        var _g = 0;
        var _g1 = this.stage3Ds;
        while (_g < _g1.get_length()) {
          var stage3D = _g1.get(_g);
          ++_g;
          stage3D.__resize(this.stageWidth, this.stageHeight);
        }
        if (this.__renderer != null) {
          this.__renderer.resize(windowWidth, windowHeight);
        }
        if (this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
          this.__dispatchEvent(new openfl_events_Event("resize"));
        }
      },
      __setLogicalSize: function (width, height) {
        this.__logicalWidth = width;
        this.__logicalHeight = height;
        this.__resize();
      },
      __startDrag: function (sprite, lockCenter, bounds) {
        this.__dragBounds = bounds == null ? null : bounds.clone();
        this.__dragObject = sprite;
        if (this.__dragObject != null) {
          if (lockCenter) {
            this.__dragOffsetX = 0;
            this.__dragOffsetY = 0;
          } else {
            var mouse = new openfl_geom_Point(
              this.get_mouseX(),
              this.get_mouseY()
            );
            var parent = this.__dragObject.parent;
            if (parent != null) {
              var _this = parent.__getWorldTransform();
              var norm = _this.a * _this.d - _this.b * _this.c;
              if (norm == 0) {
                mouse.x = -_this.tx;
                mouse.y = -_this.ty;
              } else {
                var px =
                  (1.0 / norm) *
                  (_this.c * (_this.ty - mouse.y) +
                    _this.d * (mouse.x - _this.tx));
                mouse.y =
                  (1.0 / norm) *
                  (_this.a * (mouse.y - _this.ty) +
                    _this.b * (_this.tx - mouse.x));
                mouse.x = px;
              }
            }
            this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
            this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
          }
        }
      },
      __stopDrag: function (sprite) {
        this.__dragBounds = null;
        this.__dragObject = null;
      },
      __update: function (transformOnly, updateChildren, maskGrahpics) {
        if (transformOnly) {
          if (openfl_display_DisplayObject.__worldTransformDirty > 0) {
            openfl_display_DisplayObjectContainer.prototype.__update.call(
              this,
              true,
              updateChildren,
              maskGrahpics
            );
            if (updateChildren) {
              openfl_display_DisplayObject.__worldTransformDirty = 0;
              this.__dirty = true;
            }
          }
        } else if (
          openfl_display_DisplayObject.__worldTransformDirty > 0 ||
          this.__dirty ||
          openfl_display_DisplayObject.__worldRenderDirty > 0
        ) {
          openfl_display_DisplayObjectContainer.prototype.__update.call(
            this,
            false,
            updateChildren,
            maskGrahpics
          );
          if (updateChildren) {
            openfl_display_DisplayObject.__worldTransformDirty = 0;
            openfl_display_DisplayObject.__worldRenderDirty = 0;
            this.__dirty = false;
          }
        }
      },
      get_color: function () {
        return this.__color;
      },
      set_color: function (value) {
        var r = (value & 16711680) >>> 16;
        var g = (value & 65280) >>> 8;
        var b = value & 255;
        this.__colorSplit = [r / 255, g / 255, b / 255];
        this.__colorString = "#" + StringTools.hex(value & 16777215, 6);
        return (this.__color = value);
      },
      get_displayState: function () {
        return this.__displayState;
      },
      set_displayState: function (value) {
        if (this.window != null) {
          if (value == 2) {
            if (this.window.__fullscreen) {
              this.window.set_fullscreen(false);
            }
          } else if (!this.window.__fullscreen) {
            this.window.set_fullscreen(true);
          }
        }
        return (this.__displayState = value);
      },
      get_focus: function () {
        return this.__focus;
      },
      set_focus: function (value) {
        if (value != this.__focus) {
          var oldFocus = this.__focus;
          this.__focus = value;
          this.__cacheFocus = value;
          if (oldFocus != null) {
            var event = new openfl_events_FocusEvent(
              "focusOut",
              true,
              false,
              this.__focus,
              false,
              0
            );
            var stack = [];
            oldFocus.__getInteractive(stack);
            stack.reverse();
            this.__fireEvent(event, stack);
          }
          if (this.__focus != null) {
            var event1 = new openfl_events_FocusEvent(
              "focusIn",
              true,
              false,
              oldFocus,
              false,
              0
            );
            var stack1 = [];
            value.__getInteractive(stack1);
            stack1.reverse();
            this.__fireEvent(event1, stack1);
          }
        }
        return this.__focus;
      },
      get_frameRate: function () {
        if (this.application != null) {
          return this.application.backend.getFrameRate();
        }
        return 0;
      },
      set_frameRate: function (value) {
        if (this.application != null) {
          return this.application.backend.setFrameRate(value);
        }
        return value;
      },
      get_fullScreenHeight: function () {
        return this.window.get_display().currentMode.height;
      },
      get_fullScreenWidth: function () {
        return this.window.get_display().currentMode.width;
      },
      set_height: function (value) {
        return this.get_height();
      },
      get_mouseX: function () {
        return this.__mouseX;
      },
      get_mouseY: function () {
        return this.__mouseY;
      },
      set_rotation: function (value) {
        return 0;
      },
      set_scaleX: function (value) {
        return 0;
      },
      set_scaleY: function (value) {
        return 0;
      },
      set_transform: function (value) {
        return this.get_transform();
      },
      set_width: function (value) {
        return this.get_width();
      },
      set_x: function (value) {
        return 0;
      },
      set_y: function (value) {
        return 0;
      },
      __class__: openfl_display_Stage,
      __properties__: $extend(
        openfl_display_DisplayObjectContainer.prototype.__properties__,
        {
          get_fullScreenWidth: "get_fullScreenWidth",
          get_fullScreenHeight: "get_fullScreenHeight",
          set_frameRate: "set_frameRate",
          get_frameRate: "get_frameRate",
          set_focus: "set_focus",
          get_focus: "get_focus",
          set_displayState: "set_displayState",
          get_displayState: "get_displayState",
          set_color: "set_color",
          get_color: "get_color",
        }
      ),
    }
  );
  var openfl_display_Stage3D = function () {
    openfl_events_EventDispatcher.call(this);
    this.set_x(0);
    this.set_y(0);
    this.visible = true;
  };
  $hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
  openfl_display_Stage3D.__name__ = ["openfl", "display", "Stage3D"];
  openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
  openfl_display_Stage3D.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      context3D: null,
      visible: null,
      x: null,
      y: null,
      __contextRequested: null,
      __canvas: null,
      __style: null,
      __webgl: null,
      requestContext3D: function (context3DRenderMode, profile) {
        if (profile == null) {
          profile = 0;
        }
        if (context3DRenderMode == null) {
          context3DRenderMode = 0;
        }
        this.__contextRequested = true;
        if (this.context3D != null) {
          haxe_Timer.delay($bind(this, this.__dispatchCreate), 1);
        }
      },
      requestContext3DMatchingProfiles: function (profiles) {
        this.requestContext3D();
      },
      __createContext: function (stage, renderSession) {
        if (renderSession.gl != null) {
          this.context3D = new openfl_display3D_Context3D(this, renderSession);
          this.__dispatchCreate();
        } else {
          this.__canvas = window.document.createElement("canvas");
          this.__canvas.width = stage.stageWidth;
          this.__canvas.height = stage.stageHeight;
          var $window = stage.window;
          var options = {
            alpha:
              Object.prototype.hasOwnProperty.call(
                $window.config,
                "background"
              ) && $window.config.background == null,
            antialias:
              Object.prototype.hasOwnProperty.call(
                $window.config,
                "antialiasing"
              ) && $window.config.antialiasing > 0,
            depth: Object.prototype.hasOwnProperty.call(
              $window.config,
              "depthBuffer"
            )
              ? $window.config.depthBuffer
              : true,
            premultipliedAlpha: true,
            stencil:
              Object.prototype.hasOwnProperty.call(
                $window.config,
                "stencilBuffer"
              ) && $window.config.stencilBuffer,
            preserveDrawingBuffer: false,
          };
          this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(
            this.__canvas,
            options
          );
          if (this.__webgl != null) {
            lime_graphics_opengl_GL.context = this.__webgl;
            this.context3D = new openfl_display3D_Context3D(
              this,
              renderSession
            );
            renderSession.element.appendChild(this.__canvas);
            this.__style = this.__canvas.style;
            this.__style.setProperty("position", "absolute", null);
            this.__style.setProperty("top", "0", null);
            this.__style.setProperty("left", "0", null);
            this.__style.setProperty(
              renderSession.transformOriginProperty,
              "0 0 0",
              null
            );
            this.__style.setProperty("z-index", "-1", null);
            this.__dispatchCreate();
          } else {
            this.__dispatchError();
          }
        }
      },
      __dispatchError: function () {
        this.__contextRequested = false;
        this.dispatchEvent(
          new openfl_events_ErrorEvent(
            "error",
            false,
            false,
            "Context3D not available"
          )
        );
      },
      __dispatchCreate: function () {
        if (this.__contextRequested) {
          this.__contextRequested = false;
          this.dispatchEvent(new openfl_events_Event("context3DCreate"));
        }
      },
      __renderCairo: function (stage, renderSession) {
        if (!this.visible) {
          return;
        }
        if (this.__contextRequested) {
          this.__dispatchError();
          this.__contextRequested = false;
        }
      },
      __renderCanvas: function (stage, renderSession) {
        if (!this.visible) {
          return;
        }
        if (this.__contextRequested) {
          this.__dispatchError();
          this.__contextRequested = false;
        }
      },
      __renderDOM: function (stage, renderSession) {
        if (!this.visible) {
          return;
        }
        if (this.__contextRequested && this.context3D == null) {
          this.__createContext(stage, renderSession);
        }
        if (this.context3D != null) {
          lime_graphics_opengl_GL.context = this.__webgl;
          this.__resetContext3DStates();
        }
      },
      __renderGL: function (stage, renderSession) {
        if (!this.visible) {
          return;
        }
        if (this.__contextRequested && this.context3D == null) {
          this.__createContext(stage, renderSession);
        }
        if (this.context3D != null) {
          this.__resetContext3DStates();
          if (this.context3D != null) {
            renderSession.blendModeManager.setBlendMode(null);
            if (renderSession.shaderManager.currentShader != null) {
              renderSession.shaderManager.setShader(null);
              if (this.context3D.__program != null) {
                this.context3D.__program.__use();
              }
            }
          }
          renderSession.gl.__context.getError();
        }
      },
      __resize: function (width, height) {
        if (this.__canvas != null) {
          this.__canvas.width = width;
          this.__canvas.height = height;
        }
      },
      __resetContext3DStates: function () {
        this.context3D.__updateBlendFactors();
        this.context3D.__updateBackbufferViewport();
      },
      set_x: function (value) {
        if (this.x == value) {
          return value;
        }
        this.x = value;
        if (this.context3D != null) {
          this.context3D.__updateBackbufferViewport();
        }
        return value;
      },
      set_y: function (value) {
        if (this.y == value) {
          return value;
        }
        this.y = value;
        if (this.context3D != null) {
          this.context3D.__updateBackbufferViewport();
        }
        return value;
      },
      __class__: openfl_display_Stage3D,
      __properties__: { set_y: "set_y", set_x: "set_x" },
    }
  );
  var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
  $hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] =
    openfl_display__$StageAlign_StageAlign_$Impl_$;
  openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_StageAlign",
    "StageAlign_Impl_",
  ];
  openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function (value) {
    switch (value) {
      case "bottom":
        return 0;
      case "bottomLeft":
        return 1;
      case "bottomRight":
        return 2;
      case "left":
        return 3;
      case "right":
        return 4;
      case "top":
        return 5;
      case "topLeft":
        return 6;
      case "topRight":
        return 7;
      default:
        return null;
    }
  };
  openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "bottom";
      case 1:
        return "bottomLeft";
      case 2:
        return "bottomRight";
      case 3:
        return "left";
      case 4:
        return "right";
      case 5:
        return "top";
      case 6:
        return "topLeft";
      case 7:
        return "topRight";
      default:
        return null;
    }
  };
  var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
  $hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] =
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_StageDisplayState",
    "StageDisplayState_Impl_",
  ];
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "fullScreen":
          return 0;
        case "fullScreenInteractive":
          return 1;
        case "normal":
          return 2;
        default:
          return null;
      }
    };
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "fullScreen";
        case 1:
          return "fullScreenInteractive";
        case 2:
          return "normal";
        default:
          return null;
      }
    };
  var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
  $hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] =
    openfl_display__$StageQuality_StageQuality_$Impl_$;
  openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_StageQuality",
    "StageQuality_Impl_",
  ];
  openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "best":
        return 0;
      case "high":
        return 1;
      case "low":
        return 2;
      case "medium":
        return 3;
      default:
        return null;
    }
  };
  openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "best";
      case 1:
        return "high";
      case 2:
        return "low";
      case 3:
        return "medium";
      default:
        return null;
    }
  };
  var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
  $hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] =
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_StageScaleMode",
    "StageScaleMode_Impl_",
  ];
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "exactFit":
        return 0;
      case "noBorder":
        return 1;
      case "noScale":
        return 2;
      case "showAll":
        return 3;
      default:
        return null;
    }
  };
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "exactFit";
      case 1:
        return "noBorder";
      case 2:
        return "noScale";
      case 3:
        return "showAll";
      default:
        return null;
    }
  };
  var openfl_display_Tile = function (
    id,
    x,
    y,
    scaleX,
    scaleY,
    rotation,
    originX,
    originY
  ) {
    if (originY == null) {
      originY = 0;
    }
    if (originX == null) {
      originX = 0;
    }
    if (rotation == null) {
      rotation = 0;
    }
    if (scaleY == null) {
      scaleY = 1;
    }
    if (scaleX == null) {
      scaleX = 1;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    if (id == null) {
      id = 0;
    }
    this.set_id(id);
    this.set_matrix(new openfl_geom_Matrix());
    if (x != 0) {
      this.set_x(x);
    }
    if (y != 0) {
      this.set_y(y);
    }
    if (scaleX != 1) {
      this.set_scaleX(scaleX);
    }
    if (scaleY != 1) {
      this.set_scaleY(scaleY);
    }
    if (rotation != 0) {
      this.set_rotation(rotation);
    }
    this.set_originX(originX);
    this.set_originY(originY);
    this.set_alpha(1);
    this.visible = true;
    this.__alphaDirty = true;
    this.__sourceDirty = true;
    this.__transformDirty = true;
    this.__transform = [];
  };
  $hxClasses["openfl.display.Tile"] = openfl_display_Tile;
  openfl_display_Tile.__name__ = ["openfl", "display", "Tile"];
  openfl_display_Tile.prototype = {
    alpha: null,
    data: null,
    id: null,
    matrix: null,
    originX: null,
    originY: null,
    tileset: null,
    visible: null,
    __alphaDirty: null,
    __rotation: null,
    __rotationCosine: null,
    __rotationSine: null,
    __scaleX: null,
    __scaleY: null,
    __sourceDirty: null,
    __transform: null,
    __transformDirty: null,
    clone: function () {
      var tile = new openfl_display_Tile(this.id);
      tile.set_matrix(this.matrix.clone());
      tile.set_tileset(this.tileset);
      return tile;
    },
    set_alpha: function (value) {
      this.__alphaDirty = true;
      return (this.alpha = value);
    },
    set_id: function (value) {
      this.__sourceDirty = true;
      return (this.id = value);
    },
    set_matrix: function (value) {
      this.__rotation = null;
      this.__scaleX = null;
      this.__scaleY = null;
      this.__transformDirty = true;
      return (this.matrix = value);
    },
    set_originX: function (value) {
      this.__transformDirty = true;
      return (this.originX = value);
    },
    set_originY: function (value) {
      this.__transformDirty = true;
      return (this.originY = value);
    },
    get_rotation: function () {
      if (this.__rotation == null) {
        if (this.matrix.b == 0 && this.matrix.c == 0) {
          this.__rotation = 0;
          this.__rotationSine = 0;
          this.__rotationCosine = 1;
        } else {
          var radians = Math.atan2(this.matrix.d, this.matrix.c) - Math.PI / 2;
          this.__rotation = radians * (180 / Math.PI);
          this.__rotationSine = Math.sin(radians);
          this.__rotationCosine = Math.cos(radians);
        }
      }
      return this.__rotation;
    },
    set_rotation: function (value) {
      if (value != this.__rotation) {
        this.__rotation = value;
        var radians = value * (Math.PI / 180);
        this.__rotationSine = Math.sin(radians);
        this.__rotationCosine = Math.cos(radians);
        var __scaleX = this.get_scaleX();
        var __scaleY = this.get_scaleY();
        this.matrix.a = this.__rotationCosine * __scaleX;
        this.matrix.b = this.__rotationSine * __scaleX;
        this.matrix.c = -this.__rotationSine * __scaleY;
        this.matrix.d = this.__rotationCosine * __scaleY;
        this.__transformDirty = true;
      }
      return value;
    },
    get_scaleX: function () {
      if (this.__scaleX == null) {
        if (this.matrix.b == 0) {
          this.__scaleX = this.matrix.a;
        } else {
          this.__scaleX = Math.sqrt(
            this.matrix.a * this.matrix.a + this.matrix.b * this.matrix.b
          );
        }
      }
      return this.__scaleX;
    },
    set_scaleX: function (value) {
      if (this.__scaleX != value) {
        this.__scaleX = value;
        if (this.matrix.b == 0) {
          this.matrix.a = value;
        } else {
          var rotation = this.get_rotation();
          var a = this.__rotationCosine * value;
          var b = this.__rotationSine * value;
          this.matrix.a = a;
          this.matrix.b = b;
        }
        this.__transformDirty = true;
      }
      return value;
    },
    get_scaleY: function () {
      if (this.__scaleY == null) {
        if (this.matrix.c == 0) {
          this.__scaleY = this.matrix.d;
        } else {
          this.__scaleY = Math.sqrt(
            this.matrix.c * this.matrix.c + this.matrix.d * this.matrix.d
          );
        }
      }
      return this.__scaleY;
    },
    set_scaleY: function (value) {
      if (this.__scaleY != value) {
        this.__scaleY = value;
        if (this.matrix.c == 0) {
          this.matrix.d = value;
        } else {
          var rotation = this.get_rotation();
          var c = -this.__rotationSine * value;
          var d = this.__rotationCosine * value;
          this.matrix.c = c;
          this.matrix.d = d;
        }
        this.__transformDirty = true;
      }
      return value;
    },
    set_tileset: function (value) {
      this.__sourceDirty = true;
      return (this.tileset = value);
    },
    get_x: function () {
      return this.matrix.tx;
    },
    get_y: function () {
      return this.matrix.ty;
    },
    set_x: function (value) {
      this.__transformDirty = true;
      return (this.matrix.tx = value);
    },
    set_y: function (value) {
      this.__transformDirty = true;
      return (this.matrix.ty = value);
    },
    __class__: openfl_display_Tile,
    __properties__: {
      set_y: "set_y",
      get_y: "get_y",
      set_x: "set_x",
      get_x: "get_x",
      set_tileset: "set_tileset",
      set_scaleY: "set_scaleY",
      get_scaleY: "get_scaleY",
      set_scaleX: "set_scaleX",
      get_scaleX: "get_scaleX",
      set_rotation: "set_rotation",
      get_rotation: "get_rotation",
      set_originY: "set_originY",
      set_originX: "set_originX",
      set_matrix: "set_matrix",
      set_id: "set_id",
      set_alpha: "set_alpha",
    },
  };
  var openfl_display_Tilemap = function (width, height, tileset, smoothing) {
    if (smoothing == null) {
      smoothing = true;
    }
    openfl_display_DisplayObject.call(this);
    this.set_tileset(tileset);
    this.smoothing = smoothing;
    this.__tiles = [];
    this.numTiles = 0;
    this.__width = width;
    this.__height = height;
  };
  $hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
  openfl_display_Tilemap.__name__ = ["openfl", "display", "Tilemap"];
  openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
  openfl_display_Tilemap.prototype = $extend(
    openfl_display_DisplayObject.prototype,
    {
      numTiles: null,
      tileset: null,
      smoothing: null,
      __buffer: null,
      __bufferContext: null,
      __bufferData: null,
      __cacheAlpha: null,
      __dirty: null,
      __tiles: null,
      __height: null,
      __width: null,
      addTile: function (tile) {
        this.__tiles.push(tile);
        this.__dirty = true;
        this.numTiles++;
        return tile;
      },
      addTiles: function (tiles) {
        this.__tiles = this.__tiles.concat(tiles);
        this.__dirty = true;
        this.numTiles = this.__tiles.length;
        return tiles;
      },
      addTileAt: function (tile, index) {
        HxOverrides.remove(this.__tiles, tile);
        this.__tiles.splice(index, 0, tile);
        this.__dirty = true;
        this.numTiles = this.__tiles.length;
        return tile;
      },
      contains: function (tile) {
        return this.__tiles.indexOf(tile) > -1;
      },
      getTileAt: function (index) {
        if (index >= 0 && index < this.numTiles) {
          return this.__tiles[index];
        }
        return null;
      },
      getTileIndex: function (tile) {
        var _g1 = 0;
        var _g = this.__tiles.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (this.__tiles[i] == tile) {
            return i;
          }
        }
        return -1;
      },
      removeTile: function (tile) {
        HxOverrides.remove(this.__tiles, tile);
        this.__dirty = true;
        this.numTiles = this.__tiles.length;
        return tile;
      },
      removeTileAt: function (index) {
        if (index >= 0 && index < this.numTiles) {
          return this.removeTile(this.__tiles[index]);
        }
        return null;
      },
      removeTiles: function (beginIndex, endIndex) {
        if (endIndex == null) {
          endIndex = 2147483647;
        }
        if (beginIndex == null) {
          beginIndex = 0;
        }
        if (beginIndex < 0) {
          beginIndex = 0;
        }
        if (endIndex > this.__tiles.length - 1) {
          endIndex = this.__tiles.length - 1;
        }
        this.__tiles.splice(beginIndex, endIndex - beginIndex + 1);
        this.__dirty = true;
        this.numTiles = this.__tiles.length;
      },
      __getBounds: function (rect, matrix) {
        var bounds = openfl_geom_Rectangle.__temp;
        bounds.setTo(0, 0, this.__width, this.__height);
        bounds.__transform(bounds, matrix);
        rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
      },
      __hitTest: function (x, y, shapeFlag, stack, interactiveOnly, hitObject) {
        if (!hitObject.get_visible() || this.__isMask) {
          return false;
        }
        if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
          return false;
        }
        this.__getRenderTransform();
        var _this = this.__renderTransform;
        var norm = _this.a * _this.d - _this.b * _this.c;
        var px =
          norm == 0
            ? -_this.tx
            : (1.0 / norm) *
              (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
        var _this1 = this.__renderTransform;
        var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
        var py =
          norm1 == 0
            ? -_this1.ty
            : (1.0 / norm1) *
              (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
        if (px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
          if (stack != null && !interactiveOnly) {
            stack.push(hitObject);
          }
          return true;
        }
        return false;
      },
      __renderCairo: function (renderSession) {},
      __renderCanvas: function (renderSession) {
        if (
          !(
            !this.__renderable ||
            this.__tiles.length == 0 ||
            this.__worldAlpha <= 0
          )
        ) {
          var context = renderSession.context;
          renderSession.maskManager.pushObject(this);
          var rect = openfl_geom_Rectangle.__temp;
          rect.setTo(0, 0, this.__width, this.__height);
          renderSession.maskManager.pushRect(rect, this.__renderTransform);
          var transform = this.__renderTransform;
          var roundPixels = renderSession.roundPixels;
          if (!renderSession.allowSmoothing || !this.smoothing) {
            context.mozImageSmoothingEnabled = false;
            context.msImageSmoothingEnabled = false;
            context.imageSmoothingEnabled = false;
          }
          var defaultTileset = this.tileset;
          var cacheBitmapData = null;
          var source = null;
          var tiles;
          var count;
          var tile;
          var alpha;
          var visible;
          var tileset;
          var tileData;
          var bitmapData;
          tiles = this.__tiles;
          count = tiles.length;
          var tileTransform = openfl_geom_Matrix.__temp;
          var _g1 = 0;
          var _g = count;
          while (_g1 < _g) {
            var i = _g1++;
            tile = tiles[i];
            alpha = tile.alpha;
            visible = tile.visible;
            if (!visible || alpha <= 0) {
              continue;
            }
            if (tile.tileset != null) {
              tileset = tile.tileset;
            } else {
              tileset = defaultTileset;
            }
            if (tileset == null) {
              continue;
            }
            tileData = tileset.__data[tile.id];
            if (tileData == null) {
              continue;
            }
            bitmapData = tileset.bitmapData;
            if (bitmapData == null) {
              continue;
            }
            if (bitmapData != cacheBitmapData) {
              if (bitmapData.image.buffer.__srcImage == null) {
                lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
                  bitmapData.image
                );
              }
              source = bitmapData.image.get_src();
              cacheBitmapData = bitmapData;
            }
            context.globalAlpha = this.__worldAlpha * alpha;
            tileTransform.setTo(1, 0, 0, 1, -tile.originX, -tile.originY);
            tileTransform.concat(tile.matrix);
            tileTransform.concat(transform);
            if (roundPixels) {
              context.setTransform(
                tileTransform.a,
                tileTransform.b,
                tileTransform.c,
                tileTransform.d,
                tileTransform.tx | 0,
                tileTransform.ty | 0
              );
            } else {
              context.setTransform(
                tileTransform.a,
                tileTransform.b,
                tileTransform.c,
                tileTransform.d,
                tileTransform.tx,
                tileTransform.ty
              );
            }
            context.drawImage(
              source,
              tileData.x,
              tileData.y,
              tileData.width,
              tileData.height,
              0,
              0,
              tileData.width,
              tileData.height
            );
          }
          if (!renderSession.allowSmoothing || !this.smoothing) {
            context.mozImageSmoothingEnabled = true;
            context.msImageSmoothingEnabled = true;
            context.imageSmoothingEnabled = true;
          }
          renderSession.maskManager.popRect();
          renderSession.maskManager.popObject(this);
        }
      },
      __renderDOM: function (renderSession) {},
      __renderFlash: function () {},
      __renderGL: function (renderSession) {
        openfl__$internal_renderer_opengl_GLTilemap.render(this, renderSession);
      },
      get_height: function () {
        return this.__height * Math.abs(this.get_scaleY());
      },
      set_height: function (value) {
        this.__height = value | 0;
        return this.__height * Math.abs(this.get_scaleY());
      },
      set_tileset: function (value) {
        this.__dirty = true;
        return (this.tileset = value);
      },
      get_width: function () {
        return this.__width * Math.abs(this.__scaleX);
      },
      set_width: function (value) {
        this.__width = value | 0;
        return this.__width * Math.abs(this.__scaleX);
      },
      __class__: openfl_display_Tilemap,
      __properties__: $extend(
        openfl_display_DisplayObject.prototype.__properties__,
        { set_tileset: "set_tileset" }
      ),
    }
  );
  var openfl_display_Tileset = function (bitmapData, rects) {
    this.__data = [];
    this.set_bitmapData(bitmapData);
    if (rects != null) {
      var _g = 0;
      while (_g < rects.length) {
        var rect = rects[_g];
        ++_g;
        this.addRect(rect);
      }
    }
  };
  $hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
  openfl_display_Tileset.__name__ = ["openfl", "display", "Tileset"];
  openfl_display_Tileset.prototype = {
    bitmapData: null,
    __data: null,
    addRect: function (rect) {
      if (rect == null) {
        return -1;
      }
      var tileData = new openfl_display__$Tileset_TileData(rect);
      tileData.__update(this.bitmapData);
      this.__data.push(tileData);
      return this.__data.length - 1;
    },
    clone: function () {
      var tileset = new openfl_display_Tileset(this.bitmapData, null);
      var rect = new openfl_geom_Rectangle();
      var _g = 0;
      var _g1 = this.__data;
      while (_g < _g1.length) {
        var tileData = _g1[_g];
        ++_g;
        rect.setTo(tileData.x, tileData.y, tileData.width, tileData.height);
        tileset.addRect(rect);
      }
      return tileset;
    },
    getRect: function (id) {
      if (id < this.__data.length && id >= 0) {
        return new openfl_geom_Rectangle(
          this.__data[id].x,
          this.__data[id].y,
          this.__data[id].width,
          this.__data[id].height
        );
      }
      return null;
    },
    set_bitmapData: function (value) {
      this.bitmapData = value;
      var _g = 0;
      var _g1 = this.__data;
      while (_g < _g1.length) {
        var data = _g1[_g];
        ++_g;
        data.__update(this.bitmapData);
      }
      return value;
    },
    __class__: openfl_display_Tileset,
    __properties__: { set_bitmapData: "set_bitmapData" },
  };
  var openfl_display__$Tileset_TileData = function (rect) {
    if (rect != null) {
      this.x = rect.x | 0;
      this.y = rect.y | 0;
      this.width = rect.width | 0;
      this.height = rect.height | 0;
    }
  };
  $hxClasses["openfl.display._Tileset.TileData"] =
    openfl_display__$Tileset_TileData;
  openfl_display__$Tileset_TileData.__name__ = [
    "openfl",
    "display",
    "_Tileset",
    "TileData",
  ];
  openfl_display__$Tileset_TileData.prototype = {
    height: null,
    width: null,
    x: null,
    y: null,
    __bitmapData: null,
    __uvHeight: null,
    __uvWidth: null,
    __uvX: null,
    __uvY: null,
    __update: function (bitmapData) {
      if (bitmapData != null) {
        this.__uvX = this.x / bitmapData.width;
        this.__uvY = this.y / bitmapData.height;
        this.__uvWidth = (this.x + this.width) / bitmapData.width;
        this.__uvHeight = (this.y + this.height) / bitmapData.height;
      }
    },
    __class__: openfl_display__$Tileset_TileData,
  };
  var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
  $hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] =
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = [
    "openfl",
    "display",
    "_TriangleCulling",
    "TriangleCulling_Impl_",
  ];
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "negative":
          return 0;
        case "none":
          return 1;
        case "positive":
          return 2;
        default:
          return null;
      }
    };
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "negative";
      case 1:
        return "none";
      case 2:
        return "positive";
      default:
        return null;
    }
  };
  var openfl_display_Window = function (config) {
    lime_ui_Window.call(this, config);
  };
  $hxClasses["openfl.display.Window"] = openfl_display_Window;
  openfl_display_Window.__name__ = ["openfl", "display", "Window"];
  openfl_display_Window.__super__ = lime_ui_Window;
  openfl_display_Window.prototype = $extend(lime_ui_Window.prototype, {
    create: function (application) {
      lime_ui_Window.prototype.create.call(this, application);
      this.stage = new openfl_display_Stage(
        this,
        Object.prototype.hasOwnProperty.call(this.config, "background")
          ? this.config.background
          : 16777215
      );
      if (Object.prototype.hasOwnProperty.call(this.config, "parameters")) {
        this.stage.get_loaderInfo().parameters = this.config.parameters;
      }
      if (
        Object.prototype.hasOwnProperty.call(this.config, "resizable") &&
        !this.config.resizable
      ) {
        this.stage.__setLogicalSize(this.config.width, this.config.height);
      }
      application.addModule(this.stage);
    },
    __class__: openfl_display_Window,
  });
  var openfl_display3D_Context3D = function (stage3D, renderSession) {
    this.totalGPUMemory = 0;
    this.profile = 0;
    this.enableErrorChecking = false;
    this.driverInfo = "OpenGL (Direct blitting)";
    this.backBufferWidth = 0;
    this.backBufferHeight = 0;
    openfl_events_EventDispatcher.call(this);
    this.__stage3D = stage3D;
    this.__renderSession = renderSession;
    var this1 = new Float32Array(512);
    this.__vertexConstants = this1;
    var this2 = new Float32Array(512);
    this.__fragmentConstants = this2;
    var array = [1.0, 1.0, 1.0, 1.0];
    var this3;
    if (array != null) {
      this3 = new Float32Array(array);
    } else {
      this3 = null;
    }
    this.__positionScale = this3;
    this.__samplerDirty = 0;
    this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(
      null,
      8
    );
    this.__samplerStates = [];
    var _g = 0;
    while (_g < 8) {
      var i = _g++;
      this.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(
        9729,
        9729,
        33071,
        33071
      );
    }
    this.maxBackBufferHeight = this.maxBackBufferWidth =
      lime_graphics_opengl_GL.context.__context.getParameter(3386);
    this.__backBufferAntiAlias = 0;
    this.__backBufferEnableDepthAndStencil = true;
    this.__backBufferWantsBestResolution = false;
    this.__frameCount = 0;
    this.__rttDepthAndStencil = false;
    this.__samplerDirty = 0;
    this.__stencilCompareMode = 0;
    this.__stencilRef = 0;
    this.__stencilReadMask = 255;
    var anisoExtension = lime_graphics_opengl_GL.context.__context.getExtension(
      "EXT_texture_filter_anisotropic"
    );
    if (
      anisoExtension == null ||
      !Object.prototype.hasOwnProperty.call(
        anisoExtension,
        "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
      )
    ) {
      anisoExtension = lime_graphics_opengl_GL.context.__context.getExtension(
        "MOZ_EXT_texture_filter_anisotropic"
      );
    }
    if (
      anisoExtension == null ||
      !Object.prototype.hasOwnProperty.call(
        anisoExtension,
        "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
      )
    ) {
      anisoExtension = lime_graphics_opengl_GL.context.__context.getExtension(
        "WEBKIT_EXT_texture_filter_anisotropic"
      );
    }
    this.__supportsPackedDepthStencil = true;
    openfl_display3D_Context3D.DEPTH_STENCIL = 34041;
    this.__supportsAnisotropicFiltering = anisoExtension != null;
    if (this.__supportsAnisotropicFiltering) {
      openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT =
        anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
      var maxAnisotropy =
        lime_graphics_opengl_GL.context.__context.getParameter(
          anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT
        );
      this.__maxAnisotropyTexture2D = maxAnisotropy;
      this.__maxAnisotropyTexture2D = maxAnisotropy;
    }
    this.__stats = openfl__$Vector_Vector_$Impl_$.toIntVector(null, 11);
    this.__statsCache = openfl__$Vector_Vector_$Impl_$.toIntVector(null, 11);
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    var vendor = lime_graphics_opengl_GL.context.__context.getParameter(7936);
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    var version = lime_graphics_opengl_GL.context.__context.getParameter(7938);
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    var renderer = lime_graphics_opengl_GL.context.__context.getParameter(7937);
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    var glslVersion =
      lime_graphics_opengl_GL.context.__context.getParameter(35724);
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    this.driverInfo =
      "OpenGL" +
      " Vendor=" +
      vendor +
      " Version=" +
      version +
      " Renderer=" +
      renderer +
      " GLSL=" +
      glslVersion;
    var _g1 = 0;
    var _g2 = this.__stats.get_length();
    while (_g1 < _g2) {
      var i1 = _g1++;
      this.__stats.set(i1, 0);
    }
    openfl_display3D_Context3D.__stateCache.clearSettings();
  };
  $hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
  openfl_display3D_Context3D.__name__ = ["openfl", "display3D", "Context3D"];
  openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
  openfl_display3D_Context3D.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      backBufferHeight: null,
      backBufferWidth: null,
      driverInfo: null,
      enableErrorChecking: null,
      maxBackBufferHeight: null,
      maxBackBufferWidth: null,
      profile: null,
      totalGPUMemory: null,
      __backBufferAntiAlias: null,
      __backBufferEnableDepthAndStencil: null,
      __backBufferWantsBestResolution: null,
      __depthRenderBuffer: null,
      __depthStencilRenderBuffer: null,
      __fragmentConstants: null,
      __framebuffer: null,
      __frameCount: null,
      __maxAnisotropyCubeTexture: null,
      __maxAnisotropyTexture2D: null,
      __positionScale: null,
      __program: null,
      __renderSession: null,
      __renderToTexture: null,
      __rttDepthAndStencil: null,
      __samplerDirty: null,
      __samplerTextures: null,
      __samplerStates: null,
      __scissorRectangle: null,
      __stage3D: null,
      __stats: null,
      __statsCache: null,
      __stencilCompareMode: null,
      __stencilRef: null,
      __stencilReadMask: null,
      __stencilRenderBuffer: null,
      __supportsAnisotropicFiltering: null,
      __supportsPackedDepthStencil: null,
      __vertexConstants: null,
      clear: function (red, green, blue, alpha, depth, stencil, mask) {
        if (mask == null) {
          mask = 7;
        }
        if (stencil == null) {
          stencil = 0;
        }
        if (depth == null) {
          depth = 1;
        }
        if (alpha == null) {
          alpha = 1;
        }
        if (blue == null) {
          blue = 0;
        }
        if (green == null) {
          green = 0;
        }
        if (red == null) {
          red = 0;
        }
        var clearMask = 0;
        if ((mask & 1) != 0) {
          clearMask |= 16384;
          lime_graphics_opengl_GL.context.__context.clearColor(
            red,
            green,
            blue,
            alpha
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        if ((mask & 2) != 0) {
          clearMask |= 256;
          lime_graphics_opengl_GL.context.__context.depthMask(true);
          lime_graphics_opengl_GL.context.__context.clearDepth(depth);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        if ((mask & 4) != 0) {
          clearMask |= 1024;
          lime_graphics_opengl_GL.context.__context.clearStencil(stencil);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        lime_graphics_opengl_GL.context.__context.clear(clearMask);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
      },
      configureBackBuffer: function (
        width,
        height,
        antiAlias,
        enableDepthAndStencil,
        wantsBestResolution,
        wantsBestResolutionOnBrowserZoom
      ) {
        if (wantsBestResolutionOnBrowserZoom == null) {
          wantsBestResolutionOnBrowserZoom = false;
        }
        if (wantsBestResolution == null) {
          wantsBestResolution = false;
        }
        if (enableDepthAndStencil == null) {
          enableDepthAndStencil = true;
        }
        this.__updateBackbufferViewport();
        this.backBufferWidth = width;
        this.backBufferHeight = height;
        this.__backBufferAntiAlias = antiAlias;
        this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
        this.__backBufferWantsBestResolution = wantsBestResolution;
        openfl_display3D_Context3D.__stateCache.clearSettings();
      },
      createCubeTexture: function (
        size,
        format,
        optimizeForRenderToTexture,
        streamingLevels
      ) {
        if (streamingLevels == null) {
          streamingLevels = 0;
        }
        return new openfl_display3D_textures_CubeTexture(
          this,
          size,
          format,
          optimizeForRenderToTexture,
          streamingLevels
        );
      },
      createIndexBuffer: function (numIndices, bufferUsage) {
        if (bufferUsage == null) {
          bufferUsage = 1;
        }
        return new openfl_display3D_IndexBuffer3D(
          this,
          numIndices,
          openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(
            bufferUsage
          )
        );
      },
      createProgram: function () {
        return new openfl_display3D_Program3D(this);
      },
      createRectangleTexture: function (
        width,
        height,
        format,
        optimizeForRenderToTexture
      ) {
        return new openfl_display3D_textures_RectangleTexture(
          this,
          width,
          height,
          openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(
            format
          ),
          optimizeForRenderToTexture
        );
      },
      createTexture: function (
        width,
        height,
        format,
        optimizeForRenderToTexture,
        streamingLevels
      ) {
        if (streamingLevels == null) {
          streamingLevels = 0;
        }
        return new openfl_display3D_textures_Texture(
          this,
          width,
          height,
          format,
          optimizeForRenderToTexture,
          streamingLevels
        );
      },
      createVertexBuffer: function (numVertices, data32PerVertex, bufferUsage) {
        if (bufferUsage == null) {
          bufferUsage = 1;
        }
        return new openfl_display3D_VertexBuffer3D(
          this,
          numVertices,
          data32PerVertex,
          openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(
            bufferUsage
          )
        );
      },
      createVideoTexture: function () {
        return new openfl_display3D_textures_VideoTexture(this);
      },
      dispose: function () {},
      drawToBitmapData: function (destination) {},
      drawTriangles: function (indexBuffer, firstIndex, numTriangles) {
        if (numTriangles == null) {
          numTriangles = -1;
        }
        if (firstIndex == null) {
          firstIndex = 0;
        }
        if (this.__program == null) {
          return;
        }
        this.__flushSamplerState();
        this.__program.__flush();
        var count =
          numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
        lime_graphics_opengl_GL.context.__context.bindBuffer(
          34963,
          indexBuffer.__id
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var type = indexBuffer.__elementType;
        var _this = lime_graphics_opengl_GL.context;
        var offset =
          lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(firstIndex);
        _this.__context.drawElements(4, count, type, offset);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__statsIncrement(0);
      },
      present: function () {
        this.__statsSendToTelemetry();
        this.__statsClear(0);
        this.__frameCount++;
      },
      setBlendFactors: function (sourceFactor, destinationFactor) {
        var updateSrc =
          openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(
            sourceFactor
          );
        var updateDest =
          openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(
            destinationFactor
          );
        if (updateSrc || updateDest) {
          this.__updateBlendFactors();
        }
      },
      setColorMask: function (red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.__context.colorMask(
          red,
          green,
          blue,
          alpha
        );
      },
      setCulling: function (triangleFaceToCull) {
        if (
          openfl_display3D_Context3D.__stateCache.updateCullingMode(
            triangleFaceToCull
          )
        ) {
          switch (triangleFaceToCull) {
            case 0:
              lime_graphics_opengl_GL.context.__context.enable(2884);
              lime_graphics_opengl_GL.context.__context.cullFace(1028);
              break;
            case 1:
              lime_graphics_opengl_GL.context.__context.enable(2884);
              lime_graphics_opengl_GL.context.__context.cullFace(1029);
              break;
            case 2:
              lime_graphics_opengl_GL.context.__context.enable(2884);
              lime_graphics_opengl_GL.context.__context.cullFace(1032);
              break;
            case 3:
              lime_graphics_opengl_GL.context.__context.disable(2884);
              break;
            default:
              throw new js__$Boot_HaxeError(
                new openfl_errors_IllegalOperationError()
              );
          }
        }
      },
      setDepthTest: function (depthMask, passCompareMode) {
        var depthTestEnabled = this.__backBufferEnableDepthAndStencil;
        if (
          openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(
            depthTestEnabled
          )
        ) {
          if (depthTestEnabled) {
            lime_graphics_opengl_GL.context.__context.enable(2929);
          } else {
            lime_graphics_opengl_GL.context.__context.disable(2929);
          }
        }
        if (
          openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)
        ) {
          lime_graphics_opengl_GL.context.__context.depthMask(depthMask);
        }
        if (
          openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(
            passCompareMode
          )
        ) {
          switch (passCompareMode) {
            case 0:
              lime_graphics_opengl_GL.context.__context.depthFunc(519);
              break;
            case 1:
              lime_graphics_opengl_GL.context.__context.depthFunc(514);
              break;
            case 2:
              lime_graphics_opengl_GL.context.__context.depthFunc(516);
              break;
            case 3:
              lime_graphics_opengl_GL.context.__context.depthFunc(518);
              break;
            case 4:
              lime_graphics_opengl_GL.context.__context.depthFunc(513);
              break;
            case 5:
              lime_graphics_opengl_GL.context.__context.depthFunc(515);
              break;
            case 6:
              lime_graphics_opengl_GL.context.__context.depthFunc(512);
              break;
            case 7:
              lime_graphics_opengl_GL.context.__context.depthFunc(517);
              break;
            default:
              throw new js__$Boot_HaxeError(
                new openfl_errors_IllegalOperationError()
              );
          }
        }
      },
      setProgram: function (program) {
        if (program == null) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError()
          );
        }
        if (openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
          program.__use();
          program.__setPositionScale(this.__positionScale);
          this.__program = program;
          this.__samplerDirty |= this.__program.__samplerUsageMask;
          var _g = 0;
          while (_g < 8) {
            var i = _g++;
            this.__samplerStates[i].copyFrom(
              this.__program.__getSamplerState(i)
            );
          }
        }
      },
      setProgramConstantsFromByteArray: function (
        programType,
        firstRegister,
        numRegisters,
        data,
        byteArrayOffset
      ) {
        if (numRegisters == 0) {
          return;
        }
        if (numRegisters == -1) {
          numRegisters =
            (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) -
            byteArrayOffset;
        }
        var isVertex = programType == 1;
        var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
        var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
        var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
        var floatData =
          len == null
            ? new Float32Array(bytes.b.bufferValue, 0)
            : new Float32Array(bytes.b.bufferValue, 0, len);
        var outOffset = firstRegister * 4;
        var inOffset =
          (_$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) /
            _$UInt_UInt_$Impl_$.toFloat(4)) |
          0;
        var _g1 = 0;
        var _g = numRegisters * 4;
        while (_g1 < _g) {
          var i = _g1++;
          dest[outOffset + i] = floatData[inOffset + i];
        }
        if (this.__program != null) {
          this.__program.__markDirty(isVertex, firstRegister, numRegisters);
        }
      },
      setProgramConstantsFromMatrix: function (
        programType,
        firstRegister,
        matrix,
        transposedMatrix
      ) {
        if (transposedMatrix == null) {
          transposedMatrix = false;
        }
        var isVertex = programType == 1;
        var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
        var source = matrix.rawData;
        var i = firstRegister * 4;
        if (transposedMatrix) {
          dest[i++] = source.get(0);
          dest[i++] = source.get(4);
          dest[i++] = source.get(8);
          dest[i++] = source.get(12);
          dest[i++] = source.get(1);
          dest[i++] = source.get(5);
          dest[i++] = source.get(9);
          dest[i++] = source.get(13);
          dest[i++] = source.get(2);
          dest[i++] = source.get(6);
          dest[i++] = source.get(10);
          dest[i++] = source.get(14);
          dest[i++] = source.get(3);
          dest[i++] = source.get(7);
          dest[i++] = source.get(11);
          dest[i++] = source.get(15);
        } else {
          dest[i++] = source.get(0);
          dest[i++] = source.get(1);
          dest[i++] = source.get(2);
          dest[i++] = source.get(3);
          dest[i++] = source.get(4);
          dest[i++] = source.get(5);
          dest[i++] = source.get(6);
          dest[i++] = source.get(7);
          dest[i++] = source.get(8);
          dest[i++] = source.get(9);
          dest[i++] = source.get(10);
          dest[i++] = source.get(11);
          dest[i++] = source.get(12);
          dest[i++] = source.get(13);
          dest[i++] = source.get(14);
          dest[i++] = source.get(15);
        }
        if (this.__program != null) {
          this.__program.__markDirty(isVertex, firstRegister, 4);
        }
      },
      setProgramConstantsFromVector: function (
        programType,
        firstRegister,
        data,
        numRegisters
      ) {
        if (numRegisters == null) {
          numRegisters = -1;
        }
        if (numRegisters == 0) {
          return;
        }
        if (numRegisters == -1) {
          numRegisters = data.get_length() >> 2;
        }
        var isVertex = programType == 1;
        var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
        var source = data;
        var sourceIndex = 0;
        var destIndex = firstRegister * 4;
        var _g1 = 0;
        var _g = numRegisters;
        while (_g1 < _g) {
          var i = _g1++;
          dest[destIndex++] = source.get(sourceIndex++);
          dest[destIndex++] = source.get(sourceIndex++);
          dest[destIndex++] = source.get(sourceIndex++);
          dest[destIndex++] = source.get(sourceIndex++);
        }
        if (this.__program != null) {
          this.__program.__markDirty(isVertex, firstRegister, numRegisters);
        }
      },
      setRenderToBackBuffer: function () {
        lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160, null);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.frontFace(2305);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__renderToTexture = null;
        this.__scissorRectangle = null;
        this.__updateBackbufferViewport();
        this.__updateScissorRectangle();
        this.__updateDepthAndStencilState();
        this.__positionScale[1] = 1.0;
        if (this.__program != null) {
          this.__program.__setPositionScale(this.__positionScale);
        }
      },
      setRenderToTexture: function (
        texture,
        enableDepthAndStencil,
        antiAlias,
        surfaceSelector
      ) {
        if (surfaceSelector == null) {
          surfaceSelector = 0;
        }
        if (antiAlias == null) {
          antiAlias = 0;
        }
        if (enableDepthAndStencil == null) {
          enableDepthAndStencil = false;
        }
        var width = 0;
        var height = 0;
        if (this.__framebuffer == null) {
          this.__framebuffer =
            lime_graphics_opengl_GL.context.__context.createFramebuffer();
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        lime_graphics_opengl_GL.context.__context.bindFramebuffer(
          36160,
          this.__framebuffer
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        if (js_Boot.__instanceof(texture, openfl_display3D_textures_Texture)) {
          var texture2D = texture;
          width = texture2D.__width;
          height = texture2D.__height;
          lime_graphics_opengl_GL.context.__context.framebufferTexture2D(
            36160,
            36064,
            3553,
            texture.__textureID,
            0
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else if (
          js_Boot.__instanceof(
            texture,
            openfl_display3D_textures_RectangleTexture
          )
        ) {
          var rectTexture = texture;
          width = rectTexture.__width;
          height = rectTexture.__height;
          lime_graphics_opengl_GL.context.__context.framebufferTexture2D(
            36160,
            36064,
            3553,
            texture.__textureID,
            0
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else if (
          js_Boot.__instanceof(texture, openfl_display3D_textures_CubeTexture)
        ) {
          var cubeTexture = texture;
          width = cubeTexture.__size;
          height = cubeTexture.__size;
          var _g = 0;
          while (_g < 6) {
            var i = _g++;
            lime_graphics_opengl_GL.context.__context.framebufferTexture2D(
              36160,
              36064,
              34069 + i,
              texture.__textureID,
              0
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          }
        } else {
          throw new js__$Boot_HaxeError(
            new openfl_errors_Error("Invalid texture")
          );
        }
        if (enableDepthAndStencil) {
          if (this.__supportsPackedDepthStencil) {
            if (this.__depthStencilRenderBuffer == null) {
              this.__depthStencilRenderBuffer =
                lime_graphics_opengl_GL.context.__context.createRenderbuffer();
              openfl__$internal_stage3D_GLUtils.CheckGLError();
            }
            lime_graphics_opengl_GL.context.__context.bindRenderbuffer(
              36161,
              this.__depthStencilRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.renderbufferStorage(
              36161,
              openfl_display3D_Context3D.DEPTH_STENCIL,
              width,
              height
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(
              36160,
              33306,
              36161,
              this.__depthStencilRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          } else {
            if (this.__depthRenderBuffer == null) {
              this.__depthRenderBuffer =
                lime_graphics_opengl_GL.context.__context.createRenderbuffer();
              openfl__$internal_stage3D_GLUtils.CheckGLError();
            }
            if (this.__stencilRenderBuffer == null) {
              this.__stencilRenderBuffer =
                lime_graphics_opengl_GL.context.__context.createRenderbuffer();
              openfl__$internal_stage3D_GLUtils.CheckGLError();
            }
            lime_graphics_opengl_GL.context.__context.bindRenderbuffer(
              36161,
              this.__depthRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.renderbufferStorage(
              36161,
              33189,
              width,
              height
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.bindRenderbuffer(
              36161,
              this.__stencilRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.renderbufferStorage(
              36161,
              36168,
              width,
              height
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(
              36160,
              36096,
              36161,
              this.__depthRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(
              36160,
              36128,
              36161,
              this.__stencilRenderBuffer
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          }
          lime_graphics_opengl_GL.context.__context.bindRenderbuffer(
            36161,
            null
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        this.__setViewport(0, 0, width, height);
        if (this.enableErrorChecking) {
          var code =
            lime_graphics_opengl_GL.context.__context.checkFramebufferStatus(
              36160
            );
          if (code != 36053) {
            haxe_Log.trace(
              "Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",
              {
                fileName: "Context3D.hx",
                lineNumber: 791,
                className: "openfl.display3D.Context3D",
                methodName: "setRenderToTexture",
              }
            );
          }
        }
        this.__positionScale[1] = -1.0;
        if (this.__program != null) {
          this.__program.__setPositionScale(this.__positionScale);
        }
        lime_graphics_opengl_GL.context.__context.frontFace(2304);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__renderToTexture = texture;
        this.__scissorRectangle = null;
        this.__rttDepthAndStencil = enableDepthAndStencil;
        this.__updateScissorRectangle();
        this.__updateDepthAndStencilState();
      },
      setSamplerStateAt: function (sampler, wrap, filter, mipfilter) {
        if (sampler < 0 || sampler > 8) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_Error("sampler out of range")
          );
        }
        var state = this.__samplerStates[sampler];
        switch (wrap) {
          case 0:
            state.set_wrapModeS(33071);
            state.set_wrapModeT(33071);
            break;
          case 1:
            state.set_wrapModeS(33071);
            state.set_wrapModeT(10497);
            break;
          case 2:
            state.set_wrapModeS(10497);
            state.set_wrapModeT(10497);
            break;
          case 3:
            state.set_wrapModeS(10497);
            state.set_wrapModeT(33071);
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_Error("wrap bad enum")
            );
        }
        switch (filter) {
          case 0:
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(
                this.__maxAnisotropyTexture2D < 16
                  ? this.__maxAnisotropyTexture2D
                  : 16
              );
            }
            break;
          case 1:
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(
                this.__maxAnisotropyTexture2D < 2
                  ? this.__maxAnisotropyTexture2D
                  : 2
              );
            }
            break;
          case 2:
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(
                this.__maxAnisotropyTexture2D < 4
                  ? this.__maxAnisotropyTexture2D
                  : 4
              );
            }
            break;
          case 3:
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(
                this.__maxAnisotropyTexture2D < 8
                  ? this.__maxAnisotropyTexture2D
                  : 8
              );
            }
            break;
          case 4:
            state.set_magFilter(9729);
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(1);
            }
            break;
          case 5:
            state.set_magFilter(9728);
            if (this.__supportsAnisotropicFiltering) {
              state.set_maxAniso(1);
            }
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_Error("filter bad enum")
            );
        }
        switch (mipfilter) {
          case 0:
            state.set_minFilter(9987);
            break;
          case 1:
            state.set_minFilter(9984);
            break;
          case 2:
            state.set_minFilter(filter == 5 ? 9728 : 9729);
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_Error("mipfiter bad enum")
            );
        }
      },
      setScissorRectangle: function (rectangle) {
        this.__scissorRectangle = rectangle != null ? rectangle.clone() : null;
        this.__updateScissorRectangle();
      },
      setStencilActions: function (
        triangleFace,
        compareMode,
        actionOnBothPass,
        actionOnDepthFail,
        actionOnDepthPassStencilFail
      ) {
        if (actionOnDepthPassStencilFail == null) {
          actionOnDepthPassStencilFail = 5;
        }
        if (actionOnDepthFail == null) {
          actionOnDepthFail = 5;
        }
        if (actionOnBothPass == null) {
          actionOnBothPass = 5;
        }
        if (compareMode == null) {
          compareMode = 0;
        }
        if (triangleFace == null) {
          triangleFace = 2;
        }
        this.__stencilCompareMode = compareMode;
        var fail = this.__getGLStencilAction(actionOnDepthFail);
        var zfail = this.__getGLStencilAction(actionOnDepthPassStencilFail);
        var zpass = this.__getGLStencilAction(actionOnBothPass);
        lime_graphics_opengl_GL.context.__context.stencilOp(fail, zfail, zpass);
        var func = this.__getGLCompareMode(this.__stencilCompareMode);
        lime_graphics_opengl_GL.context.__context.stencilFunc(
          func,
          this.__stencilRef,
          this.__stencilReadMask
        );
      },
      setStencilReferenceValue: function (referenceValue, readMask, writeMask) {
        if (writeMask == null) {
          writeMask = 255;
        }
        if (readMask == null) {
          readMask = 255;
        }
        this.__stencilReadMask = readMask;
        this.__stencilRef = referenceValue;
        var func = this.__getGLCompareMode(this.__stencilCompareMode);
        lime_graphics_opengl_GL.context.__context.stencilFunc(
          func,
          this.__stencilRef,
          this.__stencilReadMask
        );
        lime_graphics_opengl_GL.context.__context.stencilMask(writeMask);
      },
      setTextureAt: function (sampler, texture) {
        if (this.__samplerTextures.get(sampler) != texture) {
          this.__samplerTextures.set(sampler, texture);
          this.__samplerDirty |= 1 << sampler;
        }
      },
      setVertexBufferAt: function (index, buffer, bufferOffset, format) {
        if (format == null) {
          format = 4;
        }
        if (bufferOffset == null) {
          bufferOffset = 0;
        }
        if (buffer == null) {
          lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(
            index
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.bindBuffer(34962, null);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          return;
        }
        lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(
          index
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.bindBuffer(
          34962,
          buffer.__id
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var byteOffset = bufferOffset * 4;
        switch (format) {
          case 0:
            var stride = buffer.__stride;
            var offset =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
            lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
              index,
              4,
              5121,
              true,
              stride,
              offset
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            break;
          case 1:
            var stride1 = buffer.__stride;
            var offset1 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
            lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
              index,
              1,
              5126,
              false,
              stride1,
              offset1
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            break;
          case 2:
            var stride2 = buffer.__stride;
            var offset2 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
            lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
              index,
              2,
              5126,
              false,
              stride2,
              offset2
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            break;
          case 3:
            var stride3 = buffer.__stride;
            var offset3 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
            lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
              index,
              3,
              5126,
              false,
              stride3,
              offset3
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            break;
          case 4:
            var stride4 = buffer.__stride;
            var offset4 =
              lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
            lime_graphics_opengl_GL.context.__context.vertexAttribPointer(
              index,
              4,
              5126,
              false,
              stride4,
              offset4
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError()
            );
        }
      },
      __flushSamplerState: function () {
        var sampler = 0;
        while (this.__samplerDirty != 0) {
          if ((this.__samplerDirty & (1 << sampler)) != 0) {
            if (
              openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(
                sampler
              )
            ) {
              lime_graphics_opengl_GL.context.__context.activeTexture(
                33984 + sampler
              );
              openfl__$internal_stage3D_GLUtils.CheckGLError();
            }
            var texture = this.__samplerTextures.get(sampler);
            if (texture != null) {
              var target = texture.__textureTarget;
              var texture1 = texture.__getTexture();
              lime_graphics_opengl_GL.context.__context.bindTexture(
                target,
                texture1
              );
              openfl__$internal_stage3D_GLUtils.CheckGLError();
              texture.__setSamplerState(this.__samplerStates[sampler]);
            } else {
              lime_graphics_opengl_GL.context.__context.bindTexture(3553, null);
              openfl__$internal_stage3D_GLUtils.CheckGLError();
            }
            this.__samplerDirty &= ~(1 << sampler);
          }
          ++sampler;
        }
      },
      __getGLCompareMode: function (compareMode) {
        switch (compareMode) {
          case 0:
            return 519;
          case 1:
            return 514;
          case 2:
            return 516;
          case 3:
            return 518;
          case 4:
            return 513;
          case 5:
            return 515;
          case 6:
            return 512;
          case 7:
            return 517;
          default:
            return 514;
        }
      },
      __getGLStencilAction: function (stencilAction) {
        switch (stencilAction) {
          case 0:
            return 7683;
          case 1:
            return 34056;
          case 2:
            return 7682;
          case 3:
            return 34055;
          case 4:
            return 5386;
          case 5:
            return 7680;
          case 6:
            return 7681;
          case 7:
            return 0;
          default:
            return 7680;
        }
      },
      __hasGLExtension: function (name) {
        return (
          lime_graphics_opengl_GL.context.__context
            .getSupportedExtensions()
            .indexOf(name) != -1
        );
      },
      __setViewport: function (originX, originY, width, height) {
        if (this.__renderToTexture != null) {
          originY *= -1;
        }
        if (
          openfl_display3D_Context3D.__stateCache.updateViewport(
            originX,
            originY,
            width,
            height
          )
        ) {
          lime_graphics_opengl_GL.context.__context.viewport(
            originX,
            originY,
            width,
            height
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
      },
      __statsAdd: function (stat, value) {
        var _g = stat;
        var _g1 = this.__stats;
        _g1.set(_g, _g1.get(_g) + value);
        return this.__stats.get(stat);
      },
      __statsClear: function (stat) {
        this.__stats.set(stat, 0);
      },
      __statsDecrement: function (stat) {
        var _g = stat;
        var _g1 = this.__stats;
        _g1.set(_g, _g1.get(_g) - 1);
      },
      __statsIncrement: function (stat) {
        var _g = stat;
        var _g1 = this.__stats;
        _g1.set(_g, _g1.get(_g) + 1);
      },
      __statsSendToTelemetry: function () {},
      __statsSubtract: function (stat, value) {
        var _g = stat;
        var _g1 = this.__stats;
        _g1.set(_g, _g1.get(_g) - value);
        return this.__stats.get(stat);
      },
      __updateDepthAndStencilState: function () {
        var depthAndStencil =
          this.__renderToTexture != null
            ? this.__rttDepthAndStencil
            : this.__backBufferEnableDepthAndStencil;
        if (depthAndStencil) {
          lime_graphics_opengl_GL.context.__context.enable(2929);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.enable(2960);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else {
          lime_graphics_opengl_GL.context.__context.disable(2929);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.disable(2960);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
      },
      __updateBlendFactors: function () {
        if (
          openfl_display3D_Context3D.__stateCache._srcBlendFactor == null ||
          openfl_display3D_Context3D.__stateCache._destBlendFactor == null
        ) {
          return;
        }
        var src = 1;
        var dest = 0;
        var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
        switch (_g) {
          case 0:
            src = 772;
            break;
          case 1:
            src = 774;
            break;
          case 2:
            src = 1;
            break;
          case 3:
            src = 773;
            break;
          case 4:
            src = 775;
            break;
          case 5:
            src = 771;
            break;
          case 7:
            src = 770;
            break;
          case 9:
            src = 0;
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError()
            );
        }
        var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
        switch (_g1) {
          case 0:
            dest = 772;
            break;
          case 2:
            dest = 1;
            break;
          case 3:
            dest = 773;
            break;
          case 5:
            dest = 771;
            break;
          case 6:
            dest = 769;
            break;
          case 7:
            dest = 770;
            break;
          case 8:
            dest = 768;
            break;
          case 9:
            dest = 0;
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError()
            );
        }
        lime_graphics_opengl_GL.context.__context.enable(3042);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.blendFunc(src, dest);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
      },
      __updateScissorRectangle: function () {
        if (this.__scissorRectangle == null) {
          lime_graphics_opengl_GL.context.__context.disable(3089);
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          return;
        }
        lime_graphics_opengl_GL.context.__context.enable(3089);
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var height = 0;
        if (this.__renderToTexture != null) {
          if (
            js_Boot.__instanceof(
              this.__renderToTexture,
              openfl_display3D_textures_Texture
            )
          ) {
            var texture2D = this.__renderToTexture;
            height = texture2D.__height;
          } else if (
            js_Boot.__instanceof(
              this.__renderToTexture,
              openfl_display3D_textures_RectangleTexture
            )
          ) {
            var rectTexture = this.__renderToTexture;
            height = rectTexture.__height;
          }
        } else {
          height = this.backBufferHeight;
        }
        lime_graphics_opengl_GL.context.__context.scissor(
          this.__scissorRectangle.x | 0,
          (height -
            (this.__scissorRectangle.y | 0) -
            (this.__scissorRectangle.height | 0)) |
            0,
          this.__scissorRectangle.width | 0,
          this.__scissorRectangle.height | 0
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
      },
      __updateBackbufferViewport: function () {
        if (
          this.__renderToTexture == null &&
          this.backBufferWidth > 0 &&
          this.backBufferHeight > 0
        ) {
          this.__setViewport(
            this.__stage3D.x | 0,
            this.__stage3D.y | 0,
            this.backBufferWidth,
            this.backBufferHeight
          );
        }
      },
      set_enableErrorChecking: function (value) {
        return (this.enableErrorChecking =
          openfl__$internal_stage3D_GLUtils.debug =
            value);
      },
      __class__: openfl_display3D_Context3D,
      __properties__: { set_enableErrorChecking: "set_enableErrorChecking" },
    }
  );
  var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
  $hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] =
    openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = [
    "openfl",
    "display3D",
    "_Context3D",
    "Context3DTelemetry_Impl_",
  ];
  var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
  $hxClasses[
    "openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"
  ] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DBlendFactor",
      "Context3DBlendFactor_Impl_",
    ];
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "destinationAlpha":
          return 0;
        case "destinationColor":
          return 1;
        case "one":
          return 2;
        case "oneMinusDestinationAlpha":
          return 3;
        case "oneMinusDestinationColor":
          return 4;
        case "oneMinusSourceAlpha":
          return 5;
        case "oneMinusSourceColor":
          return 6;
        case "sourceAlpha":
          return 7;
        case "sourceColor":
          return 8;
        case "zero":
          return 9;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "destinationAlpha";
        case 1:
          return "destinationColor";
        case 2:
          return "one";
        case 3:
          return "oneMinusDestinationAlpha";
        case 4:
          return "oneMinusDestinationColor";
        case 5:
          return "oneMinusSourceAlpha";
        case 6:
          return "oneMinusSourceColor";
        case 7:
          return "sourceAlpha";
        case 8:
          return "sourceColor";
        case 9:
          return "zero";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
  $hxClasses[
    "openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"
  ] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
  openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DBufferUsage",
      "Context3DBufferUsage_Impl_",
    ];
  openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "dynamicDraw":
          return 0;
        case "staticDraw":
          return 1;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "dynamicDraw";
        case 1:
          return "staticDraw";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
  $hxClasses[
    "openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"
  ] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DCompareMode",
      "Context3DCompareMode_Impl_",
    ];
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "always":
          return 0;
        case "equal":
          return 1;
        case "greater":
          return 2;
        case "greaterEqual":
          return 3;
        case "less":
          return 4;
        case "lessEqual":
          return 5;
        case "never":
          return 6;
        case "notEqual":
          return 7;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "always";
        case 1:
          return "equal";
        case 2:
          return "greater";
        case 3:
          return "greaterEqual";
        case 4:
          return "less";
        case 5:
          return "lessEqual";
        case 6:
          return "never";
        case 7:
          return "notEqual";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
  $hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] =
    openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = [
    "openfl",
    "display3D",
    "_Context3DMipFilter",
    "Context3DMipFilter_Impl_",
  ];
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "miplinear":
          return 0;
        case "mipnearest":
          return 1;
        case "mipnone":
          return 2;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "miplinear";
        case 1:
          return "mipnearest";
        case 2:
          return "mipnone";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
  $hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] =
    openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = [
    "openfl",
    "display3D",
    "_Context3DProfile",
    "Context3DProfile_Impl_",
  ];
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "baseline":
          return 0;
        case "baselineConstrained":
          return 1;
        case "baselineExtended":
          return 2;
        case "standard":
          return 3;
        case "standardConstrained":
          return 4;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "baseline";
        case 1:
          return "baselineConstrained";
        case 2:
          return "baselineExtended";
        case 3:
          return "standard";
        case 4:
          return "standardConstrained";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
  $hxClasses[
    "openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"
  ] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
  openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DProgramType",
      "Context3DProgramType_Impl_",
    ];
  openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "fragment":
          return 0;
        case "vertex":
          return 1;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "fragment";
        case 1:
          return "vertex";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
  $hxClasses[
    "openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"
  ] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
  openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DRenderMode",
      "Context3DRenderMode_Impl_",
    ];
  openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "auto":
          return 0;
        case "software":
          return 1;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "auto";
        case 1:
          return "software";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ =
    {};
  $hxClasses[
    "openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"
  ] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DStencilAction",
      "Context3DStencilAction_Impl_",
    ];
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "decrementSaturate":
          return 0;
        case "decrementWrap":
          return 1;
        case "incrementSaturate":
          return 2;
        case "incrementWrap":
          return 3;
        case "invert":
          return 4;
        case "keep":
          return 5;
        case "set":
          return 6;
        case "zero":
          return 7;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "decrementSaturate";
        case 1:
          return "decrementWrap";
        case 2:
          return "incrementSaturate";
        case 3:
          return "incrementWrap";
        case 4:
          return "invert";
        case 5:
          return "keep";
        case 6:
          return "set";
        case 7:
          return "zero";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ =
    {};
  $hxClasses[
    "openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"
  ] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DTextureFilter",
      "Context3DTextureFilter_Impl_",
    ];
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "anisotropic16x":
          return 0;
        case "anisotropic2x":
          return 1;
        case "anisotropic4x":
          return 2;
        case "anisotropic8x":
          return 3;
        case "linear":
          return 4;
        case "nearest":
          return 5;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "anisotropic16x";
        case 1:
          return "anisotropic2x";
        case 2:
          return "anisotropic4x";
        case 3:
          return "anisotropic8x";
        case 4:
          return "linear";
        case 5:
          return "nearest";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ =
    {};
  $hxClasses[
    "openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"
  ] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DTextureFormat",
      "Context3DTextureFormat_Impl_",
    ];
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "bgrPacked565":
          return 0;
        case "bgra":
          return 1;
        case "bgraPacked4444":
          return 2;
        case "compressed":
          return 3;
        case "compressedAlpha":
          return 4;
        case "rgbaHalfFloat":
          return 5;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "bgrPacked565";
        case 1:
          return "bgra";
        case 2:
          return "bgraPacked4444";
        case 3:
          return "compressed";
        case 4:
          return "compressedAlpha";
        case 5:
          return "rgbaHalfFloat";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ =
    {};
  $hxClasses[
    "openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"
  ] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DTriangleFace",
      "Context3DTriangleFace_Impl_",
    ];
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "back":
          return 0;
        case "front":
          return 1;
        case "frontAndBack":
          return 2;
        case "none":
          return 3;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "back";
        case 1:
          return "front";
        case 2:
          return "frontAndBack";
        case 3:
          return "none";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ =
    {};
  $hxClasses[
    "openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"
  ] =
    openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ =
    [
      "openfl",
      "display3D",
      "_Context3DVertexBufferFormat",
      "Context3DVertexBufferFormat_Impl_",
    ];
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "bytes4":
          return 0;
        case "float1":
          return 1;
        case "float2":
          return 2;
        case "float3":
          return 3;
        case "float4":
          return 4;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "bytes4";
        case 1:
          return "float1";
        case 2:
          return "float2";
        case 3:
          return "float3";
        case 4:
          return "float4";
        default:
          return null;
      }
    };
  var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
  $hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] =
    openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = [
    "openfl",
    "display3D",
    "_Context3DWrapMode",
    "Context3DWrapMode_Impl_",
  ];
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "clamp":
          return 0;
        case "clamp_u_repeat_y":
          return 1;
        case "repeat":
          return 2;
        case "repeat_u_clamp_y":
          return 3;
        default:
          return null;
      }
    };
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "clamp";
        case 1:
          return "clamp_u_repeat_y";
        case 2:
          return "repeat";
        case 3:
          return "repeat_u_clamp_y";
        default:
          return null;
      }
    };
  var openfl_display3D_IndexBuffer3D = function (
    context3D,
    numIndices,
    bufferUsage
  ) {
    this.__context = context3D;
    this.__numIndices = numIndices;
    this.__elementType = 5123;
    this.__id = lime_graphics_opengl_GL.context.__context.createBuffer();
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    this.__usage =
      openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(
        bufferUsage
      ) == 0
        ? 35048
        : 35044;
    this.__context.__statsIncrement(1);
    this.__memoryUsage = 0;
  };
  $hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
  openfl_display3D_IndexBuffer3D.__name__ = [
    "openfl",
    "display3D",
    "IndexBuffer3D",
  ];
  openfl_display3D_IndexBuffer3D.prototype = {
    __context: null,
    __elementType: null,
    __id: null,
    __memoryUsage: null,
    __numIndices: null,
    __usage: null,
    dispose: function () {
      lime_graphics_opengl_GL.context.__context.deleteBuffer(this.__id);
      this.__context.__statsDecrement(1);
      this.__context.__statsSubtract(6, this.__memoryUsage);
      this.__memoryUsage = 0;
    },
    uploadFromByteArray: function (data, byteArrayOffset, startOffset, count) {
      var offset = byteArrayOffset + startOffset * 2;
      var buffer =
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
      var this1;
      if (buffer != null) {
        if (count == null) {
          this1 = new Int16Array(buffer, offset);
        } else {
          this1 = new Int16Array(buffer, offset, count);
        }
      } else {
        this1 = null;
      }
      this.uploadFromTypedArray(this1);
    },
    uploadFromTypedArray: function (data) {
      if (data == null) {
        return;
      }
      lime_graphics_opengl_GL.context.__context.bindBuffer(34963, this.__id);
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      lime_graphics_opengl_GL.context.bufferData(
        34963,
        data.byteLength,
        data,
        this.__usage,
        null,
        null
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      if (data.byteLength != this.__memoryUsage) {
        this.__context.__statsAdd(6, data.byteLength - this.__memoryUsage);
        this.__memoryUsage = data.byteLength;
      }
    },
    uploadFromVector: function (data, startOffset, count) {
      var length = startOffset + count;
      var this1;
      if (count != null) {
        this1 = new Int16Array(count);
      } else {
        this1 = null;
      }
      var buffer = this1;
      var _g1 = startOffset;
      var _g = length;
      while (_g1 < _g) {
        var i = _g1++;
        buffer[i - startOffset] = data.get(i);
      }
      this.uploadFromTypedArray(buffer);
    },
    __class__: openfl_display3D_IndexBuffer3D,
  };
  var openfl_display3D_Program3D = function (context3D) {
    this.__context = context3D;
    this.__memUsage = 0;
    this.__samplerUsageMask = 0;
    this.__uniforms = new List();
    this.__samplerUniforms = new List();
    this.__alphaSamplerUniforms = new List();
    this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(
      null,
      8
    );
  };
  $hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
  openfl_display3D_Program3D.__name__ = ["openfl", "display3D", "Program3D"];
  openfl_display3D_Program3D.prototype = {
    __alphaSamplerUniforms: null,
    __context: null,
    __fragmentShaderID: null,
    __fragmentSource: null,
    __fragmentUniformMap: null,
    __memUsage: null,
    __positionScale: null,
    __programID: null,
    __samplerStates: null,
    __samplerUniforms: null,
    __samplerUsageMask: null,
    __uniforms: null,
    __vertexShaderID: null,
    __vertexSource: null,
    __vertexUniformMap: null,
    dispose: function () {
      this.__deleteShaders();
    },
    upload: function (vertexProgram, fragmentProgram) {
      var samplerStates = [];
      var glslVertex = openfl__$internal_stage3D_AGALConverter.convertToGLSL(
        vertexProgram,
        null
      );
      var glslFragment = openfl__$internal_stage3D_AGALConverter.convertToGLSL(
        fragmentProgram,
        samplerStates
      );
      this.__uploadFromGLSL(glslVertex, glslFragment);
      var _g1 = 0;
      var _g = samplerStates.length;
      while (_g1 < _g) {
        var i = _g1++;
        this.__setSamplerState(i, samplerStates[i]);
      }
    },
    __buildUniformList: function () {
      this.__uniforms.clear();
      this.__samplerUniforms.clear();
      this.__alphaSamplerUniforms.clear();
      this.__samplerUsageMask = 0;
      var numActive = 0;
      numActive = lime_graphics_opengl_GL.context.__context.getProgramParameter(
        this.__programID,
        35718
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      var vertexUniforms = new List();
      var fragmentUniforms = new List();
      var _g1 = 0;
      var _g = numActive;
      while (_g1 < _g) {
        var i = _g1++;
        var info = lime_graphics_opengl_GL.context.__context.getActiveUniform(
          this.__programID,
          i
        );
        var name = info.name;
        var size = info.size;
        var uniformType = info.type;
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var uniform = new openfl_display3D__$Program3D_Uniform();
        uniform.name = name;
        uniform.size = size;
        uniform.type = uniformType;
        uniform.location =
          lime_graphics_opengl_GL.context.__context.getUniformLocation(
            this.__programID,
            uniform.name
          );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var indexBracket = uniform.name.indexOf("[");
        if (indexBracket >= 0) {
          uniform.name = uniform.name.substring(0, indexBracket);
        }
        var _g2 = uniform.type;
        switch (_g2) {
          case 35674:
            uniform.regCount = 2;
            break;
          case 35675:
            uniform.regCount = 3;
            break;
          case 35676:
            uniform.regCount = 4;
            break;
          default:
            uniform.regCount = 1;
        }
        uniform.regCount *= uniform.size;
        this.__uniforms.add(uniform);
        if (uniform.name == "vcPositionScale") {
          this.__positionScale = uniform;
        } else if (StringTools.startsWith(uniform.name, "vc")) {
          uniform.regIndex = Std.parseInt(uniform.name.substring(2));
          uniform.regData = this.__context.__vertexConstants;
          vertexUniforms.add(uniform);
        } else if (StringTools.startsWith(uniform.name, "fc")) {
          uniform.regIndex = Std.parseInt(uniform.name.substring(2));
          uniform.regData = this.__context.__fragmentConstants;
          fragmentUniforms.add(uniform);
        } else if (
          StringTools.startsWith(uniform.name, "sampler") &&
          !StringTools.endsWith(uniform.name, "_alpha")
        ) {
          uniform.regIndex = Std.parseInt(uniform.name.substring(7));
          this.__samplerUniforms.add(uniform);
          var _g4 = 0;
          var _g3 = uniform.regCount;
          while (_g4 < _g3) {
            var reg = _g4++;
            this.__samplerUsageMask |= 1 << (uniform.regIndex + reg);
          }
        } else if (
          StringTools.startsWith(uniform.name, "sampler") &&
          StringTools.endsWith(uniform.name, "_alpha")
        ) {
          var len = uniform.name.indexOf("_") - 7;
          uniform.regIndex =
            Std.parseInt(uniform.name.substring(7, 7 + len)) + 4;
          this.__alphaSamplerUniforms.add(uniform);
        }
        if (openfl_display3D_Program3D.verbose) {
          haxe_Log.trace(
            "" +
              i +
              " name:" +
              uniform.name +
              " type:" +
              uniform.type +
              " size:" +
              uniform.size +
              " location:" +
              Std.string(uniform.location),
            {
              fileName: "Program3D.hx",
              lineNumber: 180,
              className: "openfl.display3D.Program3D",
              methodName: "__buildUniformList",
            }
          );
        }
      }
      this.__vertexUniformMap = new openfl_display3D__$Program3D_UniformMap(
        Lambda.array(vertexUniforms)
      );
      this.__fragmentUniformMap = new openfl_display3D__$Program3D_UniformMap(
        Lambda.array(fragmentUniforms)
      );
    },
    __deleteShaders: function () {
      if (this.__programID != null) {
        this.__programID = null;
      }
      if (this.__vertexShaderID != null) {
        lime_graphics_opengl_GL.context.__context.deleteShader(
          this.__vertexShaderID
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__vertexShaderID = null;
      }
      if (this.__fragmentShaderID != null) {
        lime_graphics_opengl_GL.context.__context.deleteShader(
          this.__fragmentShaderID
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__fragmentShaderID = null;
      }
      if (this.__memUsage != 0) {
        this.__context.__statsDecrement(5);
        this.__context.__statsSubtract(10, this.__memUsage);
        this.__memUsage = 0;
      }
    },
    __flush: function () {
      this.__vertexUniformMap.flush();
      this.__fragmentUniformMap.flush();
    },
    __getSamplerState: function (sampler) {
      return this.__samplerStates.get(sampler);
    },
    __markDirty: function (isVertex, index, count) {
      if (isVertex) {
        this.__vertexUniformMap.markDirty(index, count);
      } else {
        this.__fragmentUniformMap.markDirty(index, count);
      }
    },
    __setPositionScale: function (positionScale) {
      if (this.__positionScale != null) {
        lime_graphics_opengl_GL.context.uniform4fv(
          this.__positionScale.location,
          1,
          positionScale,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
      }
    },
    __setSamplerState: function (sampler, state) {
      this.__samplerStates.set(sampler, state);
    },
    __uploadFromGLSL: function (vertexShaderSource, fragmentShaderSource) {
      this.__deleteShaders();
      if (openfl_display3D_Program3D.verbose) {
        lime_utils_Log.info(vertexShaderSource, {
          fileName: "Program3D.hx",
          lineNumber: 284,
          className: "openfl.display3D.Program3D",
          methodName: "__uploadFromGLSL",
        });
        lime_utils_Log.info(fragmentShaderSource, {
          fileName: "Program3D.hx",
          lineNumber: 285,
          className: "openfl.display3D.Program3D",
          methodName: "__uploadFromGLSL",
        });
      }
      this.__vertexSource = vertexShaderSource;
      this.__fragmentSource = fragmentShaderSource;
      this.__vertexShaderID =
        lime_graphics_opengl_GL.context.__context.createShader(35633);
      lime_graphics_opengl_GL.context.__context.shaderSource(
        this.__vertexShaderID,
        vertexShaderSource
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      lime_graphics_opengl_GL.context.__context.compileShader(
        this.__vertexShaderID
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      var shaderCompiled =
        lime_graphics_opengl_GL.context.__context.getShaderParameter(
          this.__vertexShaderID,
          35713
        );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      if (shaderCompiled == 0) {
        var vertexInfoLog =
          lime_graphics_opengl_GL.context.__context.getShaderInfoLog(
            this.__vertexShaderID
          );
        if (vertexInfoLog != null && vertexInfoLog.length != 0) {
          haxe_Log.trace("vertex: " + vertexInfoLog, {
            fileName: "Program3D.hx",
            lineNumber: 309,
            className: "openfl.display3D.Program3D",
            methodName: "__uploadFromGLSL",
          });
        }
        throw new js__$Boot_HaxeError(
          new openfl_errors_Error(
            "Error compiling vertex shader: " + vertexInfoLog
          )
        );
      }
      this.__fragmentShaderID =
        lime_graphics_opengl_GL.context.__context.createShader(35632);
      lime_graphics_opengl_GL.context.__context.shaderSource(
        this.__fragmentShaderID,
        fragmentShaderSource
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      lime_graphics_opengl_GL.context.__context.compileShader(
        this.__fragmentShaderID
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      var fragmentCompiled =
        lime_graphics_opengl_GL.context.__context.getShaderParameter(
          this.__fragmentShaderID,
          35713
        );
      if (fragmentCompiled == 0) {
        var fragmentInfoLog =
          lime_graphics_opengl_GL.context.__context.getShaderInfoLog(
            this.__fragmentShaderID
          );
        if (fragmentInfoLog != null && fragmentInfoLog.length != 0) {
          haxe_Log.trace("fragment: " + fragmentInfoLog, {
            fileName: "Program3D.hx",
            lineNumber: 332,
            className: "openfl.display3D.Program3D",
            methodName: "__uploadFromGLSL",
          });
        }
        throw new js__$Boot_HaxeError(
          new openfl_errors_Error(
            "Error compiling fragment shader: " + fragmentInfoLog
          )
        );
      }
      this.__programID =
        lime_graphics_opengl_GL.context.__context.createProgram();
      lime_graphics_opengl_GL.context.__context.attachShader(
        this.__programID,
        this.__vertexShaderID
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      lime_graphics_opengl_GL.context.__context.attachShader(
        this.__programID,
        this.__fragmentShaderID
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      var _g = 0;
      while (_g < 16) {
        var i = _g++;
        var name = "va" + i;
        if (vertexShaderSource.indexOf(" " + name) != -1) {
          lime_graphics_opengl_GL.context.__context.bindAttribLocation(
            this.__programID,
            i,
            name
          );
        }
      }
      lime_graphics_opengl_GL.context.__context.linkProgram(this.__programID);
      var infoLog = lime_graphics_opengl_GL.context.__context.getProgramInfoLog(
        this.__programID
      );
      if (infoLog != null && infoLog.length != 0) {
        haxe_Log.trace("program: " + infoLog, {
          fileName: "Program3D.hx",
          lineNumber: 365,
          className: "openfl.display3D.Program3D",
          methodName: "__uploadFromGLSL",
        });
      }
      this.__buildUniformList();
      this.__memUsage = 1;
      this.__context.__statsIncrement(5);
      this.__context.__statsAdd(10, this.__memUsage);
    },
    __use: function () {
      var program = this.__programID;
      lime_graphics_opengl_GL.__currentProgram = program;
      lime_graphics_opengl_GL.context.__context.useProgram(program);
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      this.__vertexUniformMap.markAllDirty();
      this.__fragmentUniformMap.markAllDirty();
      var _g_head = this.__samplerUniforms.h;
      while (_g_head != null) {
        var val = _g_head.item;
        _g_head = _g_head.next;
        var sampler = val;
        if (sampler.regCount == 1) {
          lime_graphics_opengl_GL.context.__context.uniform1i(
            sampler.location,
            sampler.regIndex
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError(
              "!!! TODO: uniform location on webgl"
            )
          );
        }
      }
      var _g_head1 = this.__alphaSamplerUniforms.h;
      while (_g_head1 != null) {
        var val1 = _g_head1.item;
        _g_head1 = _g_head1.next;
        var sampler1 = val1;
        if (sampler1.regCount == 1) {
          lime_graphics_opengl_GL.context.__context.uniform1i(
            sampler1.location,
            sampler1.regIndex
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError(
              "!!! TODO: uniform location on webgl"
            )
          );
        }
      }
    },
    __class__: openfl_display3D_Program3D,
  };
  var openfl_display3D__$Program3D_Uniform = function () {
    this.isDirty = true;
    var this1 = new lime_utils_BytePointerData(null, 0);
    this.regDataPointer = this1;
  };
  $hxClasses["openfl.display3D._Program3D.Uniform"] =
    openfl_display3D__$Program3D_Uniform;
  openfl_display3D__$Program3D_Uniform.__name__ = [
    "openfl",
    "display3D",
    "_Program3D",
    "Uniform",
  ];
  openfl_display3D__$Program3D_Uniform.prototype = {
    name: null,
    location: null,
    type: null,
    size: null,
    regData: null,
    regIndex: null,
    regCount: null,
    isDirty: null,
    regDataPointer: null,
    flush: function () {
      var index = this.regIndex * 4;
      var _g = this.type;
      switch (_g) {
        case 35664:
          var location = this.location;
          var count = this.regCount;
          var data = this.__getRegisters(index, this.regCount * 2);
          lime_graphics_opengl_GL.context.uniform2fv(
            location,
            count,
            data,
            null
          );
          break;
        case 35665:
          var location1 = this.location;
          var count1 = this.regCount;
          var data1 = this.__getRegisters(index, this.regCount * 3);
          lime_graphics_opengl_GL.context.uniform3fv(
            location1,
            count1,
            data1,
            null
          );
          break;
        case 35666:
          var location2 = this.location;
          var count2 = this.regCount;
          var data2 = this.__getRegisters(index, this.regCount * 4);
          lime_graphics_opengl_GL.context.uniform4fv(
            location2,
            count2,
            data2,
            null
          );
          break;
        case 35674:
          var location3 = this.location;
          var count3 = this.size;
          var v = this.__getRegisters(index, this.size * 2 * 2);
          lime_graphics_opengl_GL.context.uniformMatrix2fv(
            location3,
            count3,
            false,
            v,
            null
          );
          break;
        case 35675:
          var location4 = this.location;
          var count4 = this.size;
          var v1 = this.__getRegisters(index, this.size * 3 * 3);
          lime_graphics_opengl_GL.context.uniformMatrix3fv(
            location4,
            count4,
            false,
            v1,
            null
          );
          break;
        case 35676:
          var location5 = this.location;
          var count5 = this.size;
          var v2 = this.__getRegisters(index, this.size * 4 * 4);
          lime_graphics_opengl_GL.context.uniformMatrix4fv(
            location5,
            count5,
            false,
            v2,
            null
          );
          break;
        default:
          var location6 = this.location;
          var count6 = this.regCount;
          var data3 = this.__getRegisters(index, this.regCount * 4);
          lime_graphics_opengl_GL.context.uniform4fv(
            location6,
            count6,
            data3,
            null
          );
      }
      openfl__$internal_stage3D_GLUtils.CheckGLError();
    },
    __getRegisters: function (index, size) {
      return this.regData.subarray(index, index + size);
    },
    __class__: openfl_display3D__$Program3D_Uniform,
  };
  var openfl_display3D__$Program3D_UniformMap = function (list) {
    this.__uniforms = list;
    this.__uniforms.sort(function (a, b) {
      return Reflect.compare(a.regIndex, b.regIndex);
    });
    var total = 0;
    var _g = 0;
    var _g1 = this.__uniforms;
    while (_g < _g1.length) {
      var uniform = _g1[_g];
      ++_g;
      if (uniform.regIndex + uniform.regCount > total) {
        total = uniform.regIndex + uniform.regCount;
      }
    }
    this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(
      null,
      total
    );
    var _g2 = 0;
    var _g11 = this.__uniforms;
    while (_g2 < _g11.length) {
      var uniform1 = _g11[_g2];
      ++_g2;
      var _g3 = 0;
      var _g21 = uniform1.regCount;
      while (_g3 < _g21) {
        var i = _g3++;
        this.__registerLookup.set(uniform1.regIndex + i, uniform1);
      }
    }
    this.__anyDirty = this.__allDirty = true;
  };
  $hxClasses["openfl.display3D._Program3D.UniformMap"] =
    openfl_display3D__$Program3D_UniformMap;
  openfl_display3D__$Program3D_UniformMap.__name__ = [
    "openfl",
    "display3D",
    "_Program3D",
    "UniformMap",
  ];
  openfl_display3D__$Program3D_UniformMap.prototype = {
    __allDirty: null,
    __anyDirty: null,
    __registerLookup: null,
    __uniforms: null,
    flush: function () {
      if (this.__anyDirty) {
        var _g = 0;
        var _g1 = this.__uniforms;
        while (_g < _g1.length) {
          var uniform = _g1[_g];
          ++_g;
          if (this.__allDirty || uniform.isDirty) {
            uniform.flush();
            uniform.isDirty = false;
          }
        }
        this.__anyDirty = this.__allDirty = false;
      }
    },
    markAllDirty: function () {
      this.__allDirty = true;
      this.__anyDirty = true;
    },
    markDirty: function (start, count) {
      if (this.__allDirty) {
        return;
      }
      var end = start + count;
      if (end > this.__registerLookup.get_length()) {
        end = this.__registerLookup.get_length();
      }
      var index = start;
      while (index < end) {
        var uniform = this.__registerLookup.get(index);
        if (uniform != null) {
          uniform.isDirty = true;
          this.__anyDirty = true;
          index = uniform.regIndex + uniform.regCount;
        } else {
          ++index;
        }
      }
    },
    __class__: openfl_display3D__$Program3D_UniformMap,
  };
  var openfl_display3D_VertexBuffer3D = function (
    context3D,
    numVertices,
    dataPerVertex,
    bufferUsage
  ) {
    this.__context = context3D;
    this.__numVertices = numVertices;
    this.__vertexSize = dataPerVertex;
    this.__id = lime_graphics_opengl_GL.context.__context.createBuffer();
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    this.__stride = this.__vertexSize * 4;
    this.__memoryUsage = 0;
    this.__usage =
      openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(
        bufferUsage
      ) == 0
        ? 35048
        : 35044;
    this.__context.__statsIncrement(2);
  };
  $hxClasses["openfl.display3D.VertexBuffer3D"] =
    openfl_display3D_VertexBuffer3D;
  openfl_display3D_VertexBuffer3D.__name__ = [
    "openfl",
    "display3D",
    "VertexBuffer3D",
  ];
  openfl_display3D_VertexBuffer3D.prototype = {
    __context: null,
    __data: null,
    __id: null,
    __memoryUsage: null,
    __numVertices: null,
    __stride: null,
    __tempBytes: null,
    __usage: null,
    __vertexSize: null,
    dispose: function () {
      lime_graphics_opengl_GL.context.__context.deleteBuffer(this.__id);
      this.__context.__statsDecrement(2);
      this.__context.__statsSubtract(7, this.__memoryUsage);
      this.__memoryUsage = 0;
    },
    uploadFromByteArray: function (
      data,
      byteArrayOffset,
      startVertex,
      numVertices
    ) {
      var offset = byteArrayOffset + startVertex * this.__stride;
      var length = numVertices * this.__vertexSize;
      var buffer =
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
      var this1;
      if (buffer != null) {
        if (length == null) {
          this1 = new Float32Array(buffer, offset);
        } else {
          this1 = new Float32Array(buffer, offset, length);
        }
      } else {
        this1 = null;
      }
      this.uploadFromTypedArray(this1);
    },
    uploadFromTypedArray: function (data) {
      if (data == null) {
        return;
      }
      lime_graphics_opengl_GL.context.__context.bindBuffer(34962, this.__id);
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      lime_graphics_opengl_GL.context.bufferData(
        34962,
        data.byteLength,
        data,
        this.__usage,
        null,
        null
      );
      openfl__$internal_stage3D_GLUtils.CheckGLError();
      if (data.byteLength != this.__memoryUsage) {
        this.__context.__statsAdd(7, data.byteLength - this.__memoryUsage);
        this.__memoryUsage = data.byteLength;
      }
    },
    uploadFromVector: function (data, startVertex, numVertices) {
      if (data == null) {
        return;
      }
      var start = startVertex * this.__vertexSize;
      var count = numVertices * this.__vertexSize;
      var length = start + count;
      var this1;
      if (count != null) {
        this1 = new Float32Array(count);
      } else {
        this1 = null;
      }
      var buffer = this1;
      var _g1 = start;
      var _g = length;
      while (_g1 < _g) {
        var i = _g1++;
        buffer[i - start] = data.get(i);
      }
      this.uploadFromTypedArray(buffer);
    },
    __class__: openfl_display3D_VertexBuffer3D,
  };
  var openfl_display3D_textures_TextureBase = function (context, target) {
    this.__outputTextureMemoryUsage = false;
    openfl_events_EventDispatcher.call(this);
    this.__context = context;
    this.__textureTarget = target;
    this.__textureID =
      lime_graphics_opengl_GL.context.__context.createTexture();
    this.__textureContext = lime_graphics_opengl_GL.context;
    if (openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
      openfl_display3D_textures_TextureBase.__textureInternalFormat = 6408;
      var bgraExtension = null;
      if (bgraExtension != null) {
        openfl_display3D_textures_TextureBase.__supportsBGRA = true;
        openfl_display3D_textures_TextureBase.__textureFormat =
          bgraExtension.BGRA_EXT;
        if (
          lime_graphics_opengl_GL.get_type() ==
          lime_graphics_opengl_GLContextType.GLES
        ) {
          openfl_display3D_textures_TextureBase.__textureInternalFormat =
            bgraExtension.BGRA_EXT;
        }
      } else {
        openfl_display3D_textures_TextureBase.__supportsBGRA = false;
        openfl_display3D_textures_TextureBase.__textureFormat = 6408;
      }
    }
    this.__internalFormat =
      openfl_display3D_textures_TextureBase.__textureInternalFormat;
    this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
    this.__memoryUsage = 0;
    this.__compressedMemoryUsage = 0;
  };
  $hxClasses["openfl.display3D.textures.TextureBase"] =
    openfl_display3D_textures_TextureBase;
  openfl_display3D_textures_TextureBase.__name__ = [
    "openfl",
    "display3D",
    "textures",
    "TextureBase",
  ];
  openfl_display3D_textures_TextureBase.__super__ =
    openfl_events_EventDispatcher;
  openfl_display3D_textures_TextureBase.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      __alphaTexture: null,
      __compressedMemoryUsage: null,
      __context: null,
      __format: null,
      __height: null,
      __internalFormat: null,
      __memoryUsage: null,
      __optimizeForRenderToTexture: null,
      __outputTextureMemoryUsage: null,
      __samplerState: null,
      __streamingLevels: null,
      __textureContext: null,
      __textureID: null,
      __textureTarget: null,
      __width: null,
      dispose: function () {
        if (this.__alphaTexture != null) {
          this.__alphaTexture.dispose();
        }
        lime_graphics_opengl_GL.context.__context.deleteTexture(
          this.__textureID
        );
        if (this.__compressedMemoryUsage > 0) {
          this.__context.__statsDecrement(4);
          var currentCompressedMemory = this.__context.__statsSubtract(
            9,
            this.__compressedMemoryUsage
          );
          this.__compressedMemoryUsage = 0;
        }
        if (this.__memoryUsage > 0) {
          this.__context.__statsDecrement(3);
          var currentMemory = this.__context.__statsSubtract(
            8,
            this.__memoryUsage
          );
          this.__memoryUsage = 0;
        }
      },
      __getATFVersion: function (data) {
        var signature = data.readUTFBytes(3);
        if (signature != "ATF") {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError("ATF signature not found")
          );
        }
        var position = data.position;
        var version = 0;
        if (_$UInt_UInt_$Impl_$.gte(data.length - data.position, 5)) {
          var sig = this.__readUInt32(data);
          if (sig == 255) {
            version = data.readUnsignedByte();
          } else {
            data.position = position;
          }
        }
        return version;
      },
      __getImage: function (bitmapData) {
        var image = bitmapData.image;
        if (!bitmapData.__isValid || image == null) {
          return null;
        }
        lime_graphics_utils_ImageCanvasUtil.sync(image, false);
        if (
          image.type != lime_graphics_ImageType.DATA &&
          !image.get_premultiplied()
        ) {
          lime_graphics_opengl_GL.context.__context.pixelStorei(37441, 1);
        } else if (!image.get_premultiplied() && image.get_transparent()) {
          lime_graphics_opengl_GL.context.__context.pixelStorei(37441, 0);
          image = image.clone();
          image.set_premultiplied(true);
        }
        if (image.get_format() != 0) {
          image = image.clone();
          image.set_format(0);
          image.buffer.premultiplied = true;
        }
        return image;
      },
      __getTexture: function () {
        return this.__textureID;
      },
      __readUInt24: function (data) {
        var value = data.readUnsignedByte() << 16;
        value = value | (data.readUnsignedByte() << 8);
        value = value | data.readUnsignedByte();
        return value;
      },
      __readUInt32: function (data) {
        var value = data.readUnsignedByte() << 24;
        value = value | (data.readUnsignedByte() << 16);
        value = value | (data.readUnsignedByte() << 8);
        value = value | data.readUnsignedByte();
        return value;
      },
      __setSamplerState: function (state) {
        if (!state.equals(this.__samplerState)) {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            this.__textureID
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.texParameteri(
            this.__textureTarget,
            10241,
            state.minFilter
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.texParameteri(
            this.__textureTarget,
            10240,
            state.magFilter
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.texParameteri(
            this.__textureTarget,
            10242,
            state.wrapModeS
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.__context.texParameteri(
            this.__textureTarget,
            10243,
            state.wrapModeT
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          var tmp = state.lodBias != 0.0;
          this.__samplerState = state;
          this.__samplerState.__samplerDirty = false;
        }
      },
      __trackCompressedMemoryUsage: function (memory) {
        if (this.__compressedMemoryUsage == 0) {
          this.__context.__statsIncrement(4);
        }
        this.__compressedMemoryUsage += memory;
        var currentCompressedMemory = this.__context.__statsAdd(9, memory);
        this.__trackMemoryUsage(memory);
      },
      __trackMemoryUsage: function (memory) {
        if (this.__memoryUsage == 0) {
          this.__context.__statsIncrement(3);
        }
        this.__memoryUsage += memory;
        var currentMemory = this.__context.__statsAdd(8, memory);
      },
      __class__: openfl_display3D_textures_TextureBase,
    }
  );
  var openfl_display3D_textures_CubeTexture = function (
    context,
    size,
    format,
    optimizeForRenderToTexture,
    streamingLevels
  ) {
    openfl_display3D_textures_TextureBase.call(this, context, 34067);
    this.__size = size;
    this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
    this.__streamingLevels = streamingLevels;
    this.__uploadedSides = 0;
  };
  $hxClasses["openfl.display3D.textures.CubeTexture"] =
    openfl_display3D_textures_CubeTexture;
  openfl_display3D_textures_CubeTexture.__name__ = [
    "openfl",
    "display3D",
    "textures",
    "CubeTexture",
  ];
  openfl_display3D_textures_CubeTexture.__super__ =
    openfl_display3D_textures_TextureBase;
  openfl_display3D_textures_CubeTexture.prototype = $extend(
    openfl_display3D_textures_TextureBase.prototype,
    {
      __size: null,
      __uploadedSides: null,
      uploadCompressedTextureFromByteArray: function (
        data,
        byteArrayOffset,
        async
      ) {
        if (async == null) {
          async = false;
        }
        var _gthis = this;
        data.position = byteArrayOffset;
        var signature = data.readUTFBytes(3);
        data.position = byteArrayOffset;
        if (signature == "ATF") {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            this.__textureID
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          this.__uploadATFTextureFromByteArray(data, byteArrayOffset);
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            null
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            null
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        if (async) {
          haxe_Timer.delay(function () {
            _gthis.dispatchEvent(new openfl_events_Event("textureReady"));
          }, 1);
        }
      },
      uploadFromBitmapData: function (source, side, miplevel, generateMipmap) {
        if (generateMipmap == null) {
          generateMipmap = false;
        }
        if (miplevel == null) {
          miplevel = 0;
        }
        if (source == null) {
          return;
        }
        var size = this.__size >> miplevel;
        if (size == 0) {
          return;
        }
        var image = this.__getImage(source);
        this.uploadFromTypedArray(image.get_data(), side, miplevel);
      },
      uploadFromByteArray: function (data, byteArrayOffset, side, miplevel) {
        if (miplevel == null) {
          miplevel = 0;
        }
        if (byteArrayOffset == 0) {
          this.uploadFromTypedArray(data.b, side);
          return;
        }
        var buffer =
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
        var this1;
        if (buffer != null) {
          this1 = new Uint8Array(buffer, byteArrayOffset);
        } else {
          this1 = null;
        }
        this.uploadFromTypedArray(this1, side, miplevel);
      },
      uploadFromTypedArray: function (data, side, miplevel) {
        if (miplevel == null) {
          miplevel = 0;
        }
        if (data == null) {
          return;
        }
        var size = this.__size >> miplevel;
        if (size == 0) {
          return;
        }
        var target;
        switch (side) {
          case 0:
            target = 34069;
            break;
          case 1:
            target = 34070;
            break;
          case 2:
            target = 34071;
            break;
          case 3:
            target = 34072;
            break;
          case 4:
            target = 34073;
            break;
          case 5:
            target = 34074;
            break;
          default:
            throw new js__$Boot_HaxeError(
              new openfl_errors_IllegalOperationError()
            );
        }
        lime_graphics_opengl_GL.context.__context.bindTexture(
          34067,
          this.__textureID
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.texImage2D(
          target,
          miplevel,
          this.__internalFormat,
          size,
          size,
          0,
          this.__format,
          5121,
          data,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.bindTexture(
          this.__textureTarget,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        this.__uploadedSides |= 1 << side;
        var memUsage = this.__size * this.__size * 4;
        this.__trackMemoryUsage(memUsage);
      },
      __setSamplerState: function (state) {
        if (!state.equals(this.__samplerState)) {
          if (
            (state.minFilter == 9987 || state.minFilter == 9984) &&
            !state.mipmapGenerated
          ) {
            lime_graphics_opengl_GL.context.__context.generateMipmap(34067);
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            state.mipmapGenerated = true;
          }
          if (state.maxAniso != 0.0) {
            lime_graphics_opengl_GL.context.__context.texParameterf(
              34067,
              openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,
              state.maxAniso
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          }
        }
        openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(
          this,
          state
        );
      },
      __uploadATFTextureFromByteArray: function (data, byteArrayOffset) {},
      __class__: openfl_display3D_textures_CubeTexture,
    }
  );
  var openfl_display3D_textures_RectangleTexture = function (
    context,
    width,
    height,
    format,
    optimizeForRenderToTexture
  ) {
    openfl_display3D_textures_TextureBase.call(this, context, 3553);
    this.__width = width;
    this.__height = height;
    this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
    this.uploadFromTypedArray(null);
  };
  $hxClasses["openfl.display3D.textures.RectangleTexture"] =
    openfl_display3D_textures_RectangleTexture;
  openfl_display3D_textures_RectangleTexture.__name__ = [
    "openfl",
    "display3D",
    "textures",
    "RectangleTexture",
  ];
  openfl_display3D_textures_RectangleTexture.__super__ =
    openfl_display3D_textures_TextureBase;
  openfl_display3D_textures_RectangleTexture.prototype = $extend(
    openfl_display3D_textures_TextureBase.prototype,
    {
      uploadFromBitmapData: function (source) {
        if (source == null) {
          return;
        }
        var image = this.__getImage(source);
        if (image == null) {
          return;
        }
        this.uploadFromTypedArray(image.get_data());
      },
      uploadFromByteArray: function (data, byteArrayOffset) {
        if (byteArrayOffset == 0) {
          this.uploadFromTypedArray(data.b);
          return;
        }
        var buffer =
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
        var this1;
        if (buffer != null) {
          this1 = new Uint8Array(buffer, byteArrayOffset);
        } else {
          this1 = null;
        }
        this.uploadFromTypedArray(this1);
      },
      uploadFromTypedArray: function (data) {
        lime_graphics_opengl_GL.context.__context.bindTexture(
          this.__textureTarget,
          this.__textureID
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.texImage2D(
          this.__textureTarget,
          0,
          this.__internalFormat,
          this.__width,
          this.__height,
          0,
          this.__format,
          5121,
          data,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.bindTexture(
          this.__textureTarget,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var memUsage = this.__width * this.__height * 4;
        this.__trackMemoryUsage(memUsage);
      },
      __setSamplerState: function (state) {
        if (!state.equals(this.__samplerState)) {
          if (state.maxAniso != 0.0) {
            lime_graphics_opengl_GL.context.__context.texParameterf(
              3553,
              openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,
              state.maxAniso
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          }
        }
        openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(
          this,
          state
        );
      },
      __class__: openfl_display3D_textures_RectangleTexture,
    }
  );
  var openfl_display3D_textures_Texture = function (
    context,
    width,
    height,
    format,
    optimizeForRenderToTexture,
    streamingLevels
  ) {
    openfl_display3D_textures_TextureBase.call(this, context, 3553);
    this.__width = width;
    this.__height = height;
    this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
    this.__streamingLevels = streamingLevels;
    lime_graphics_opengl_GL.context.__context.bindTexture(
      this.__textureTarget,
      this.__textureID
    );
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    lime_graphics_opengl_GL.context.texImage2D(
      this.__textureTarget,
      0,
      this.__internalFormat,
      width,
      height,
      0,
      this.__format,
      5121,
      0,
      null
    );
    openfl__$internal_stage3D_GLUtils.CheckGLError();
    lime_graphics_opengl_GL.context.__context.bindTexture(
      this.__textureTarget,
      null
    );
    this.uploadFromTypedArray(null);
  };
  $hxClasses["openfl.display3D.textures.Texture"] =
    openfl_display3D_textures_Texture;
  openfl_display3D_textures_Texture.__name__ = [
    "openfl",
    "display3D",
    "textures",
    "Texture",
  ];
  openfl_display3D_textures_Texture.__super__ =
    openfl_display3D_textures_TextureBase;
  openfl_display3D_textures_Texture.prototype = $extend(
    openfl_display3D_textures_TextureBase.prototype,
    {
      uploadCompressedTextureFromByteArray: function (
        data,
        byteArrayOffset,
        async
      ) {
        if (async == null) {
          async = false;
        }
        var _gthis = this;
        data.position = byteArrayOffset;
        var signature = data.readUTFBytes(3);
        data.position = byteArrayOffset;
        if (signature == "ATF") {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            this.__textureID
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          this.__uploadATFTextureFromByteArray(data, byteArrayOffset);
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            null
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        } else {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            null
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        if (async) {
          haxe_Timer.delay(function () {
            _gthis.dispatchEvent(new openfl_events_Event("textureReady"));
          }, 1);
        }
      },
      uploadFromBitmapData: function (source, miplevel, generateMipmap) {
        if (generateMipmap == null) {
          generateMipmap = false;
        }
        if (miplevel == null) {
          miplevel = 0;
        }
        if (source == null) {
          return;
        }
        var width = this.__width >> miplevel;
        var height = this.__height >> miplevel;
        if (width == 0 && height == 0) {
          return;
        }
        if (width == 0) {
          width = 1;
        }
        if (height == 0) {
          height = 1;
        }
        if (source.width != width || source.height != height) {
          var copy = new openfl_display_BitmapData(width, height, true, 0);
          copy.draw(source);
          source = copy;
        }
        var image = this.__getImage(source);
        this.uploadFromTypedArray(image.get_data(), miplevel);
      },
      uploadFromByteArray: function (data, byteArrayOffset, miplevel) {
        if (miplevel == null) {
          miplevel = 0;
        }
        if (byteArrayOffset == 0) {
          this.uploadFromTypedArray(data.b, miplevel);
          return;
        }
        var buffer =
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
        var this1;
        if (buffer != null) {
          this1 = new Uint8Array(buffer, byteArrayOffset);
        } else {
          this1 = null;
        }
        this.uploadFromTypedArray(this1, miplevel);
      },
      uploadFromTypedArray: function (data, miplevel) {
        if (miplevel == null) {
          miplevel = 0;
        }
        if (data == null) {
          return;
        }
        var width = this.__width >> miplevel;
        var height = this.__height >> miplevel;
        if (width == 0 && height == 0) {
          return;
        }
        if (width == 0) {
          width = 1;
        }
        if (height == 0) {
          height = 1;
        }
        lime_graphics_opengl_GL.context.__context.bindTexture(
          this.__textureTarget,
          this.__textureID
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.texImage2D(
          this.__textureTarget,
          miplevel,
          this.__internalFormat,
          width,
          height,
          0,
          this.__format,
          5121,
          data,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        lime_graphics_opengl_GL.context.__context.bindTexture(
          this.__textureTarget,
          null
        );
        openfl__$internal_stage3D_GLUtils.CheckGLError();
        var memUsage = width * height * 4;
        this.__trackMemoryUsage(memUsage);
      },
      __setSamplerState: function (state) {
        if (!state.equals(this.__samplerState)) {
          if (
            (state.minFilter == 9987 || state.minFilter == 9984) &&
            !state.mipmapGenerated
          ) {
            lime_graphics_opengl_GL.context.__context.generateMipmap(3553);
            openfl__$internal_stage3D_GLUtils.CheckGLError();
            state.mipmapGenerated = true;
          }
          if (state.maxAniso != 0.0) {
            lime_graphics_opengl_GL.context.__context.texParameterf(
              3553,
              openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,
              state.maxAniso
            );
            openfl__$internal_stage3D_GLUtils.CheckGLError();
          }
        }
        openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(
          this,
          state
        );
      },
      __uploadATFTextureFromByteArray: function (data, byteArrayOffset) {
        data.position = byteArrayOffset;
        var version = this.__getATFVersion(data);
        var length =
          version == 0 ? this.__readUInt24(data) : this.__readUInt32(data);
        if (
          js_Boot.__cast(byteArrayOffset + length, Int) >
          openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)
        ) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError(
              "ATF length exceeds byte array length"
            )
          );
        }
        var tdata = data.readUnsignedByte();
        var type = tdata >> 7;
        if (type != 0) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError(
              "ATF Cube maps are not supported"
            )
          );
        }
        var width = 1 << data.readUnsignedByte();
        var height = 1 << data.readUnsignedByte();
        if (width != this.__width || height != this.__height) {
          throw new js__$Boot_HaxeError(
            new openfl_errors_IllegalOperationError(
              "ATF width and height dont match"
            )
          );
        }
        var mipCount = data.readUnsignedByte();
        var _g1 = 0;
        var _g = mipCount;
        while (_g1 < _g) {
          var level = _g1++;
          var _g2 = 0;
          while (_g2 < 3) {
            var gpuFormat = _g2++;
            var blockLength =
              version == 0 ? this.__readUInt24(data) : this.__readUInt32(data);
            if (_$UInt_UInt_$Impl_$.gt(blockLength, 0)) {
              if (gpuFormat != 1) {
                var tmp = gpuFormat == 2;
              }
            }
            data.position = data.position + blockLength;
          }
        }
      },
      __class__: openfl_display3D_textures_Texture,
    }
  );
  var openfl_display3D_textures_VideoTexture = function (context) {
    openfl_display3D_textures_TextureBase.call(this, context, 3553);
  };
  $hxClasses["openfl.display3D.textures.VideoTexture"] =
    openfl_display3D_textures_VideoTexture;
  openfl_display3D_textures_VideoTexture.__name__ = [
    "openfl",
    "display3D",
    "textures",
    "VideoTexture",
  ];
  openfl_display3D_textures_VideoTexture.__super__ =
    openfl_display3D_textures_TextureBase;
  openfl_display3D_textures_VideoTexture.prototype = $extend(
    openfl_display3D_textures_TextureBase.prototype,
    {
      videoHeight: null,
      videoWidth: null,
      __netStream: null,
      attachNetStream: function (netStream) {
        var _gthis = this;
        this.__netStream = netStream;
        if (this.__netStream.__video.readyState == 4) {
          haxe_Timer.delay(function () {
            _gthis.__textureReady();
          }, 0);
        } else {
          this.__netStream.__video.addEventListener(
            "canplay",
            function (_) {
              _gthis.__textureReady();
            },
            false
          );
        }
      },
      __getTexture: function () {
        if (!this.__netStream.__video.paused) {
          lime_graphics_opengl_GL.context.__context.bindTexture(
            this.__textureTarget,
            this.__textureID
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
          lime_graphics_opengl_GL.context.texImage2D(
            3553,
            0,
            6408,
            6408,
            5121,
            this.__netStream.__video
          );
          openfl__$internal_stage3D_GLUtils.CheckGLError();
        }
        return this.__textureID;
      },
      __textureReady: function () {
        this.videoWidth = this.__netStream.__video.videoWidth;
        this.videoHeight = this.__netStream.__video.videoHeight;
        this.dispatchEvent(new openfl_events_Event("textureReady"));
      },
      __class__: openfl_display3D_textures_VideoTexture,
    }
  );
  var openfl_errors_Error = function (message, id) {
    if (id == null) {
      id = 0;
    }
    if (message == null) {
      message = "";
    }
    this.message = message;
    this.errorID = id;
    this.name = "Error";
  };
  $hxClasses["openfl.errors.Error"] = openfl_errors_Error;
  openfl_errors_Error.__name__ = ["openfl", "errors", "Error"];
  openfl_errors_Error.prototype = {
    errorID: null,
    message: null,
    name: null,
    getStackTrace: function () {
      return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
    },
    toString: function () {
      if (this.message != null) {
        return this.message;
      } else {
        return "Error";
      }
    },
    __class__: openfl_errors_Error,
  };
  var openfl_errors_ArgumentError = function (message) {
    if (message == null) {
      message = "";
    }
    openfl_errors_Error.call(this, message);
    this.name = "ArgumentError";
  };
  $hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
  openfl_errors_ArgumentError.__name__ = ["openfl", "errors", "ArgumentError"];
  openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
  openfl_errors_ArgumentError.prototype = $extend(
    openfl_errors_Error.prototype,
    {
      __class__: openfl_errors_ArgumentError,
    }
  );
  var openfl_errors_IOError = function (message) {
    if (message == null) {
      message = "";
    }
    openfl_errors_Error.call(this, message);
    this.name = "IOError";
  };
  $hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
  openfl_errors_IOError.__name__ = ["openfl", "errors", "IOError"];
  openfl_errors_IOError.__super__ = openfl_errors_Error;
  openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype, {
    __class__: openfl_errors_IOError,
  });
  var openfl_errors_EOFError = function () {
    openfl_errors_IOError.call(this, "End of file was encountered");
    this.name = "EOFError";
    this.errorID = 2030;
  };
  $hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
  openfl_errors_EOFError.__name__ = ["openfl", "errors", "EOFError"];
  openfl_errors_EOFError.__super__ = openfl_errors_IOError;
  openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype, {
    __class__: openfl_errors_EOFError,
  });
  var openfl_errors_IllegalOperationError = function (message) {
    if (message == null) {
      message = "";
    }
    openfl_errors_Error.call(this, message, 0);
    this.name = "IllegalOperationError";
  };
  $hxClasses["openfl.errors.IllegalOperationError"] =
    openfl_errors_IllegalOperationError;
  openfl_errors_IllegalOperationError.__name__ = [
    "openfl",
    "errors",
    "IllegalOperationError",
  ];
  openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
  openfl_errors_IllegalOperationError.prototype = $extend(
    openfl_errors_Error.prototype,
    {
      __class__: openfl_errors_IllegalOperationError,
    }
  );
  var openfl_errors_RangeError = function (message) {
    if (message == null) {
      message = "";
    }
    openfl_errors_Error.call(this, message, 0);
    this.name = "RangeError";
  };
  $hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
  openfl_errors_RangeError.__name__ = ["openfl", "errors", "RangeError"];
  openfl_errors_RangeError.__super__ = openfl_errors_Error;
  openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype, {
    __class__: openfl_errors_RangeError,
  });
  var openfl_errors_TypeError = function (message) {
    if (message == null) {
      message = "";
    }
    openfl_errors_Error.call(this, message, 0);
    this.name = "TypeError";
  };
  $hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
  openfl_errors_TypeError.__name__ = ["openfl", "errors", "TypeError"];
  openfl_errors_TypeError.__super__ = openfl_errors_Error;
  openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype, {
    __class__: openfl_errors_TypeError,
  });
  var openfl_events_ActivityEvent = function (
    type,
    bubbles,
    cancelable,
    activating
  ) {
    if (activating == null) {
      activating = false;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.activating = activating;
  };
  $hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
  openfl_events_ActivityEvent.__name__ = ["openfl", "events", "ActivityEvent"];
  openfl_events_ActivityEvent.__super__ = openfl_events_Event;
  openfl_events_ActivityEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      activating: null,
      clone: function () {
        var event = new openfl_events_ActivityEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.activating
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("ActivityEvent", [
          "type",
          "bubbles",
          "cancelable",
          "activating",
        ]);
      },
      __class__: openfl_events_ActivityEvent,
    }
  );
  var openfl_events_TextEvent = function (type, bubbles, cancelable, text) {
    if (text == null) {
      text = "";
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.text = text;
  };
  $hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
  openfl_events_TextEvent.__name__ = ["openfl", "events", "TextEvent"];
  openfl_events_TextEvent.__super__ = openfl_events_Event;
  openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype, {
    text: null,
    clone: function () {
      var event = new openfl_events_TextEvent(
        this.type,
        this.bubbles,
        this.cancelable,
        this.text
      );
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      event.eventPhase = this.eventPhase;
      return event;
    },
    toString: function () {
      return this.__formatToString("TextEvent", [
        "type",
        "bubbles",
        "cancelable",
        "text",
      ]);
    },
    __class__: openfl_events_TextEvent,
  });
  var openfl_events_ErrorEvent = function (
    type,
    bubbles,
    cancelable,
    text,
    id
  ) {
    if (id == null) {
      id = 0;
    }
    if (text == null) {
      text = "";
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_TextEvent.call(this, type, bubbles, cancelable, text);
    this.errorID = id;
  };
  $hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
  openfl_events_ErrorEvent.__name__ = ["openfl", "events", "ErrorEvent"];
  openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
  openfl_events_ErrorEvent.prototype = $extend(
    openfl_events_TextEvent.prototype,
    {
      errorID: null,
      clone: function () {
        var event = new openfl_events_ErrorEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.text,
          this.errorID
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("ErrorEvent", [
          "type",
          "bubbles",
          "cancelable",
          "text",
          "errorID",
        ]);
      },
      __class__: openfl_events_ErrorEvent,
    }
  );
  var openfl_events__$EventDispatcher_DispatchIterator = function (list) {
    this.list = list;
    this.index = list.length;
  };
  $hxClasses["openfl.events._EventDispatcher.DispatchIterator"] =
    openfl_events__$EventDispatcher_DispatchIterator;
  openfl_events__$EventDispatcher_DispatchIterator.__name__ = [
    "openfl",
    "events",
    "_EventDispatcher",
    "DispatchIterator",
  ];
  openfl_events__$EventDispatcher_DispatchIterator.prototype = {
    active: null,
    index: null,
    isCopy: null,
    list: null,
    copy: function () {
      if (this.index < this.list.length && !this.isCopy) {
        this.list = this.list.slice();
        this.isCopy = true;
      }
    },
    hasNext: function () {
      if (this.index < this.list.length) {
        return true;
      } else {
        this.active = false;
        return false;
      }
    },
    next: function () {
      return this.list[this.index++];
    },
    remove: function (listener, listIndex) {
      if (this.active) {
        if (!this.isCopy) {
          if (listIndex < this.index) {
            this.index--;
          }
        } else {
          var _g1 = this.index;
          var _g = this.list.length;
          while (_g1 < _g) {
            var i = _g1++;
            if (this.list[i] == listener) {
              this.list.splice(i, 1);
              break;
            }
          }
        }
      }
    },
    reset: function (list) {
      this.list = list;
      this.active = true;
      this.index = 0;
    },
    __class__: openfl_events__$EventDispatcher_DispatchIterator,
  };
  var openfl_events__$EventDispatcher_Listener = function (
    callback,
    useCapture,
    priority
  ) {
    this.callback = callback;
    this.useCapture = useCapture;
    this.priority = priority;
  };
  $hxClasses["openfl.events._EventDispatcher.Listener"] =
    openfl_events__$EventDispatcher_Listener;
  openfl_events__$EventDispatcher_Listener.__name__ = [
    "openfl",
    "events",
    "_EventDispatcher",
    "Listener",
  ];
  openfl_events__$EventDispatcher_Listener.prototype = {
    callback: null,
    priority: null,
    useCapture: null,
    match: function (callback, useCapture) {
      if (Reflect.compareMethods(this.callback, callback)) {
        return this.useCapture == useCapture;
      } else {
        return false;
      }
    },
    __class__: openfl_events__$EventDispatcher_Listener,
  };
  var openfl_events_FocusEvent = function (
    type,
    bubbles,
    cancelable,
    relatedObject,
    shiftKey,
    keyCode
  ) {
    if (keyCode == null) {
      keyCode = 0;
    }
    if (shiftKey == null) {
      shiftKey = false;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.keyCode = keyCode;
    this.shiftKey = shiftKey;
    this.relatedObject = relatedObject;
  };
  $hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
  openfl_events_FocusEvent.__name__ = ["openfl", "events", "FocusEvent"];
  openfl_events_FocusEvent.__super__ = openfl_events_Event;
  openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype, {
    keyCode: null,
    relatedObject: null,
    shiftKey: null,
    clone: function () {
      var event = new openfl_events_FocusEvent(
        this.type,
        this.bubbles,
        this.cancelable,
        this.relatedObject,
        this.shiftKey,
        this.keyCode
      );
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      event.eventPhase = this.eventPhase;
      return event;
    },
    toString: function () {
      return this.__formatToString("FocusEvent", [
        "type",
        "bubbles",
        "cancelable",
        "relatedObject",
        "shiftKey",
        "keyCode",
      ]);
    },
    __class__: openfl_events_FocusEvent,
  });
  var openfl_events_FullScreenEvent = function (
    type,
    bubbles,
    cancelable,
    fullScreen,
    interactive
  ) {
    if (interactive == null) {
      interactive = false;
    }
    if (fullScreen == null) {
      fullScreen = false;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_ActivityEvent.call(this, type, bubbles, cancelable);
    this.fullScreen = fullScreen;
    this.interactive = interactive;
  };
  $hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
  openfl_events_FullScreenEvent.__name__ = [
    "openfl",
    "events",
    "FullScreenEvent",
  ];
  openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
  openfl_events_FullScreenEvent.prototype = $extend(
    openfl_events_ActivityEvent.prototype,
    {
      fullScreen: null,
      interactive: null,
      clone: function () {
        var event = new openfl_events_FullScreenEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.fullScreen,
          this.interactive
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("FullscreenEvent", [
          "type",
          "bubbles",
          "cancelable",
          "fullscreen",
          "interactive",
        ]);
      },
      __class__: openfl_events_FullScreenEvent,
    }
  );
  var openfl_events_GameInputEvent = function (
    type,
    bubbles,
    cancelable,
    device
  ) {
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = true;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.device = device;
  };
  $hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
  openfl_events_GameInputEvent.__name__ = [
    "openfl",
    "events",
    "GameInputEvent",
  ];
  openfl_events_GameInputEvent.__super__ = openfl_events_Event;
  openfl_events_GameInputEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      device: null,
      clone: function () {
        var event = new openfl_events_GameInputEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.device
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("GameInputEvent", [
          "type",
          "bubbles",
          "cancelable",
          "device",
        ]);
      },
      __class__: openfl_events_GameInputEvent,
    }
  );
  var openfl_events_HTTPStatusEvent = function (
    type,
    bubbles,
    cancelable,
    status,
    redirected
  ) {
    if (redirected == null) {
      redirected = false;
    }
    if (status == null) {
      status = 0;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    this.status = status;
    this.redirected = redirected;
    openfl_events_Event.call(this, type, bubbles, cancelable);
  };
  $hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
  openfl_events_HTTPStatusEvent.__name__ = [
    "openfl",
    "events",
    "HTTPStatusEvent",
  ];
  openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
  openfl_events_HTTPStatusEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      redirected: null,
      responseHeaders: null,
      responseURL: null,
      status: null,
      clone: function () {
        var event = new openfl_events_HTTPStatusEvent(
          this.type,
          this.bubbles,
          null,
          this.status,
          this.redirected
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("HTTPStatusEvent", [
          "type",
          "bubbles",
          "cancelable",
          "status",
          "redirected",
        ]);
      },
      __class__: openfl_events_HTTPStatusEvent,
    }
  );
  var openfl_events_IOErrorEvent = function (
    type,
    bubbles,
    cancelable,
    text,
    id
  ) {
    if (id == null) {
      id = 0;
    }
    if (text == null) {
      text = "";
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = true;
    }
    openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
  };
  $hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
  openfl_events_IOErrorEvent.__name__ = ["openfl", "events", "IOErrorEvent"];
  openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
  openfl_events_IOErrorEvent.prototype = $extend(
    openfl_events_ErrorEvent.prototype,
    {
      clone: function () {
        var event = new openfl_events_IOErrorEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.text,
          this.errorID
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("IOErrorEvent", [
          "type",
          "bubbles",
          "cancelable",
          "text",
          "errorID",
        ]);
      },
      __class__: openfl_events_IOErrorEvent,
    }
  );
  var openfl_events_KeyboardEvent = function (
    type,
    bubbles,
    cancelable,
    charCodeValue,
    keyCodeValue,
    keyLocationValue,
    ctrlKeyValue,
    altKeyValue,
    shiftKeyValue,
    controlKeyValue,
    commandKeyValue
  ) {
    if (commandKeyValue == null) {
      commandKeyValue = false;
    }
    if (controlKeyValue == null) {
      controlKeyValue = false;
    }
    if (shiftKeyValue == null) {
      shiftKeyValue = false;
    }
    if (altKeyValue == null) {
      altKeyValue = false;
    }
    if (ctrlKeyValue == null) {
      ctrlKeyValue = false;
    }
    if (keyCodeValue == null) {
      keyCodeValue = 0;
    }
    if (charCodeValue == null) {
      charCodeValue = 0;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.charCode = charCodeValue;
    this.keyCode = keyCodeValue;
    this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
    this.ctrlKey = ctrlKeyValue;
    this.altKey = altKeyValue;
    this.shiftKey = shiftKeyValue;
    this.controlKey = controlKeyValue;
    this.commandKey = commandKeyValue;
  };
  $hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
  openfl_events_KeyboardEvent.__name__ = ["openfl", "events", "KeyboardEvent"];
  openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
  openfl_events_KeyboardEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      altKey: null,
      charCode: null,
      ctrlKey: null,
      commandKey: null,
      controlKey: null,
      keyCode: null,
      keyLocation: null,
      shiftKey: null,
      clone: function () {
        var event = new openfl_events_KeyboardEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.charCode,
          this.keyCode,
          this.keyLocation,
          this.ctrlKey,
          this.altKey,
          this.shiftKey,
          this.controlKey,
          this.commandKey
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("KeyboardEvent", [
          "type",
          "bubbles",
          "cancelable",
          "charCode",
          "keyCode",
          "keyLocation",
          "ctrlKey",
          "altKey",
          "shiftKey",
        ]);
      },
      __class__: openfl_events_KeyboardEvent,
    }
  );
  var openfl_events_MouseEvent = function (
    type,
    bubbles,
    cancelable,
    localX,
    localY,
    relatedObject,
    ctrlKey,
    altKey,
    shiftKey,
    buttonDown,
    delta,
    commandKey,
    clickCount
  ) {
    if (clickCount == null) {
      clickCount = 0;
    }
    if (commandKey == null) {
      commandKey = false;
    }
    if (delta == null) {
      delta = 0;
    }
    if (buttonDown == null) {
      buttonDown = false;
    }
    if (shiftKey == null) {
      shiftKey = false;
    }
    if (altKey == null) {
      altKey = false;
    }
    if (ctrlKey == null) {
      ctrlKey = false;
    }
    if (localY == null) {
      localY = 0;
    }
    if (localX == null) {
      localX = 0;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = true;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.shiftKey = shiftKey;
    this.altKey = altKey;
    this.ctrlKey = ctrlKey;
    this.bubbles = bubbles;
    this.relatedObject = relatedObject;
    this.delta = delta;
    this.localX = localX;
    this.localY = localY;
    this.buttonDown = buttonDown;
    this.commandKey = commandKey;
    this.clickCount = clickCount;
    this.stageX = NaN;
    this.stageY = NaN;
  };
  $hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
  openfl_events_MouseEvent.__name__ = ["openfl", "events", "MouseEvent"];
  openfl_events_MouseEvent.__create = function (
    type,
    button,
    stageX,
    stageY,
    local,
    target,
    delta
  ) {
    if (delta == null) {
      delta = 0;
    }
    switch (type) {
      case "mouseDown":
        openfl_events_MouseEvent.__buttonDown = true;
        break;
      case "mouseUp":
        openfl_events_MouseEvent.__buttonDown = false;
        break;
      default:
    }
    var event = new openfl_events_MouseEvent(
      type,
      true,
      false,
      local.x,
      local.y,
      null,
      openfl_events_MouseEvent.__ctrlKey,
      openfl_events_MouseEvent.__altKey,
      openfl_events_MouseEvent.__shiftKey,
      openfl_events_MouseEvent.__buttonDown,
      delta,
      openfl_events_MouseEvent.__commandKey
    );
    event.stageX = stageX;
    event.stageY = stageY;
    event.target = target;
    return event;
  };
  openfl_events_MouseEvent.__super__ = openfl_events_Event;
  openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype, {
    altKey: null,
    buttonDown: null,
    commandKey: null,
    clickCount: null,
    ctrlKey: null,
    delta: null,
    localX: null,
    localY: null,
    relatedObject: null,
    shiftKey: null,
    stageX: null,
    stageY: null,
    clone: function () {
      var event = new openfl_events_MouseEvent(
        this.type,
        this.bubbles,
        this.cancelable,
        this.localX,
        this.localY,
        this.relatedObject,
        this.ctrlKey,
        this.altKey,
        this.shiftKey,
        this.buttonDown,
        this.delta,
        this.commandKey,
        this.clickCount
      );
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      event.eventPhase = this.eventPhase;
      return event;
    },
    toString: function () {
      return this.__formatToString("MouseEvent", [
        "type",
        "bubbles",
        "cancelable",
        "localX",
        "localY",
        "relatedObject",
        "ctrlKey",
        "altKey",
        "shiftKey",
        "buttonDown",
        "delta",
      ]);
    },
    updateAfterEvent: function () {},
    __class__: openfl_events_MouseEvent,
  });
  var openfl_events_NetStatusEvent = function (
    type,
    bubbles,
    cancelable,
    info
  ) {
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    this.info = info;
    openfl_events_Event.call(this, type, bubbles, cancelable);
  };
  $hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
  openfl_events_NetStatusEvent.__name__ = [
    "openfl",
    "events",
    "NetStatusEvent",
  ];
  openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
  openfl_events_NetStatusEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      info: null,
      clone: function () {
        var event = new openfl_events_NetStatusEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.info
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("NetStatusEvent", [
          "type",
          "bubbles",
          "cancelable",
          "info",
        ]);
      },
      __class__: openfl_events_NetStatusEvent,
    }
  );
  var openfl_events_ProgressEvent = function (
    type,
    bubbles,
    cancelable,
    bytesLoaded,
    bytesTotal
  ) {
    if (bytesTotal == null) {
      bytesTotal = 0;
    }
    if (bytesLoaded == null) {
      bytesLoaded = 0;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.bytesLoaded = bytesLoaded;
    this.bytesTotal = bytesTotal;
  };
  $hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
  openfl_events_ProgressEvent.__name__ = ["openfl", "events", "ProgressEvent"];
  openfl_events_ProgressEvent.__super__ = openfl_events_Event;
  openfl_events_ProgressEvent.prototype = $extend(
    openfl_events_Event.prototype,
    {
      bytesLoaded: null,
      bytesTotal: null,
      clone: function () {
        var event = new openfl_events_ProgressEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.bytesLoaded,
          this.bytesTotal
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("ProgressEvent", [
          "type",
          "bubbles",
          "cancelable",
          "bytesLoaded",
          "bytesTotal",
        ]);
      },
      __class__: openfl_events_ProgressEvent,
    }
  );
  var openfl_events_SecurityErrorEvent = function (
    type,
    bubbles,
    cancelable,
    text,
    id
  ) {
    if (id == null) {
      id = 0;
    }
    if (text == null) {
      text = "";
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
  };
  $hxClasses["openfl.events.SecurityErrorEvent"] =
    openfl_events_SecurityErrorEvent;
  openfl_events_SecurityErrorEvent.__name__ = [
    "openfl",
    "events",
    "SecurityErrorEvent",
  ];
  openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
  openfl_events_SecurityErrorEvent.prototype = $extend(
    openfl_events_ErrorEvent.prototype,
    {
      clone: function () {
        var event = new openfl_events_SecurityErrorEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.text,
          this.errorID
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("SecurityErrorEvent", [
          "type",
          "bubbles",
          "cancelable",
          "text",
          "errorID",
        ]);
      },
      __class__: openfl_events_SecurityErrorEvent,
    }
  );
  var openfl_events_TimerEvent = function (type, bubbles, cancelable) {
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = false;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
  };
  $hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
  openfl_events_TimerEvent.__name__ = ["openfl", "events", "TimerEvent"];
  openfl_events_TimerEvent.__super__ = openfl_events_Event;
  openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype, {
    clone: function () {
      var event = new openfl_events_TimerEvent(
        this.type,
        this.bubbles,
        this.cancelable
      );
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      event.eventPhase = this.eventPhase;
      return event;
    },
    toString: function () {
      return this.__formatToString("TimerEvent", [
        "type",
        "bubbles",
        "cancelable",
      ]);
    },
    updateAfterEvent: function () {},
    __class__: openfl_events_TimerEvent,
  });
  var openfl_events_TouchEvent = function (
    type,
    bubbles,
    cancelable,
    touchPointID,
    isPrimaryTouchPoint,
    localX,
    localY,
    sizeX,
    sizeY,
    pressure,
    relatedObject,
    ctrlKey,
    altKey,
    shiftKey,
    commandKey,
    controlKey,
    timestamp,
    touchIntent,
    samples,
    isTouchPointCanceled
  ) {
    if (isTouchPointCanceled == null) {
      isTouchPointCanceled = false;
    }
    if (timestamp == null) {
      timestamp = 0;
    }
    if (controlKey == null) {
      controlKey = false;
    }
    if (commandKey == null) {
      commandKey = false;
    }
    if (shiftKey == null) {
      shiftKey = false;
    }
    if (altKey == null) {
      altKey = false;
    }
    if (ctrlKey == null) {
      ctrlKey = false;
    }
    if (pressure == null) {
      pressure = 0;
    }
    if (sizeY == null) {
      sizeY = 0;
    }
    if (sizeX == null) {
      sizeX = 0;
    }
    if (localY == null) {
      localY = 0;
    }
    if (localX == null) {
      localX = 0;
    }
    if (isPrimaryTouchPoint == null) {
      isPrimaryTouchPoint = false;
    }
    if (touchPointID == null) {
      touchPointID = 0;
    }
    if (cancelable == null) {
      cancelable = false;
    }
    if (bubbles == null) {
      bubbles = true;
    }
    openfl_events_Event.call(this, type, bubbles, cancelable);
    this.touchPointID = touchPointID;
    this.isPrimaryTouchPoint = isPrimaryTouchPoint;
    this.localX = localX;
    this.localY = localY;
    this.sizeX = sizeX;
    this.sizeY = sizeY;
    this.pressure = pressure;
    this.relatedObject = relatedObject;
    this.ctrlKey = ctrlKey;
    this.altKey = altKey;
    this.shiftKey = shiftKey;
    this.commandKey = commandKey;
    this.controlKey = controlKey;
    this.stageX = NaN;
    this.stageY = NaN;
  };
  $hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
  openfl_events_TouchEvent.__name__ = ["openfl", "events", "TouchEvent"];
  openfl_events_TouchEvent.__create = function (
    type,
    touch,
    stageX,
    stageY,
    local,
    target
  ) {
    var evt = new openfl_events_TouchEvent(
      type,
      true,
      false,
      0,
      true,
      local.x,
      local.y,
      1,
      1,
      1
    );
    evt.stageX = stageX;
    evt.stageY = stageY;
    evt.target = target;
    return evt;
  };
  openfl_events_TouchEvent.__super__ = openfl_events_Event;
  openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype, {
    altKey: null,
    commandKey: null,
    controlKey: null,
    ctrlKey: null,
    delta: null,
    isPrimaryTouchPoint: null,
    localX: null,
    localY: null,
    pressure: null,
    relatedObject: null,
    shiftKey: null,
    sizeX: null,
    sizeY: null,
    stageX: null,
    stageY: null,
    touchPointID: null,
    clone: function () {
      var event = new openfl_events_TouchEvent(
        this.type,
        this.bubbles,
        this.cancelable,
        this.touchPointID,
        this.isPrimaryTouchPoint,
        this.localX,
        this.localY,
        this.sizeX,
        this.sizeY,
        this.pressure,
        this.relatedObject,
        this.ctrlKey,
        this.altKey,
        this.shiftKey,
        this.commandKey,
        this.controlKey
      );
      event.target = this.target;
      event.currentTarget = this.currentTarget;
      event.eventPhase = this.eventPhase;
      return event;
    },
    toString: function () {
      return this.__formatToString("TouchEvent", [
        "type",
        "bubbles",
        "cancelable",
        "touchPointID",
        "isPrimaryTouchPoint",
        "localX",
        "localY",
        "sizeX",
        "sizeY",
        "pressure",
        "relatedObject",
        "ctrlKey",
        "altKey",
        "shiftKey",
        "commandKey",
        "controlKey",
      ]);
    },
    updateAfterEvent: function () {},
    __class__: openfl_events_TouchEvent,
  });
  var openfl_events_UncaughtErrorEvent = function (
    type,
    bubbles,
    cancelable,
    error
  ) {
    if (cancelable == null) {
      cancelable = true;
    }
    if (bubbles == null) {
      bubbles = true;
    }
    openfl_events_ErrorEvent.call(this, type, bubbles, cancelable);
    this.error = error;
  };
  $hxClasses["openfl.events.UncaughtErrorEvent"] =
    openfl_events_UncaughtErrorEvent;
  openfl_events_UncaughtErrorEvent.__name__ = [
    "openfl",
    "events",
    "UncaughtErrorEvent",
  ];
  openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
  openfl_events_UncaughtErrorEvent.prototype = $extend(
    openfl_events_ErrorEvent.prototype,
    {
      error: null,
      clone: function () {
        var event = new openfl_events_UncaughtErrorEvent(
          this.type,
          this.bubbles,
          this.cancelable,
          this.error
        );
        event.target = this.target;
        event.currentTarget = this.currentTarget;
        event.eventPhase = this.eventPhase;
        return event;
      },
      toString: function () {
        return this.__formatToString("UncaughtErrorEvent", [
          "type",
          "bubbles",
          "cancelable",
          "error",
        ]);
      },
      __class__: openfl_events_UncaughtErrorEvent,
    }
  );
  var openfl_events_UncaughtErrorEvents = function () {
    openfl_events_EventDispatcher.call(this);
  };
  $hxClasses["openfl.events.UncaughtErrorEvents"] =
    openfl_events_UncaughtErrorEvents;
  openfl_events_UncaughtErrorEvents.__name__ = [
    "openfl",
    "events",
    "UncaughtErrorEvents",
  ];
  openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
  openfl_events_UncaughtErrorEvents.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      __class__: openfl_events_UncaughtErrorEvents,
    }
  );
  var openfl_external_ExternalInterface = function () {};
  $hxClasses["openfl.external.ExternalInterface"] =
    openfl_external_ExternalInterface;
  openfl_external_ExternalInterface.__name__ = [
    "openfl",
    "external",
    "ExternalInterface",
  ];
  openfl_external_ExternalInterface.addCallback = function (
    functionName,
    closure
  ) {
    if (openfl_Lib.application.__windows[0].backend.element != null) {
      openfl_Lib.application.__windows[0].backend.element[functionName] =
        closure;
    }
  };
  openfl_external_ExternalInterface.call = function (
    functionName,
    p1,
    p2,
    p3,
    p4,
    p5
  ) {
    var callResponse = null;
    if (!new EReg("^\\(.+\\)$", "").match(functionName)) {
      var thisArg = functionName.split(".").slice(0, -1).join(".");
      if (thisArg.length > 0) {
        functionName += ".bind(" + thisArg + ")";
      }
    }
    if (p1 == null) {
      callResponse = eval(functionName)();
    } else if (p2 == null) {
      callResponse = eval(functionName)(p1);
    } else if (p3 == null) {
      callResponse = eval(functionName)(p1, p2);
    } else if (p4 == null) {
      callResponse = eval(functionName)(p1, p2, p3);
    } else if (p5 == null) {
      callResponse = eval(functionName)(p1, p2, p3, p4);
    } else {
      callResponse = eval(functionName)(p1, p2, p3, p4, p5);
    }
    return callResponse;
  };
  var openfl_filters_BitmapFilter = function () {
    this.__numPasses = 0;
  };
  $hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
  openfl_filters_BitmapFilter.__name__ = ["openfl", "filters", "BitmapFilter"];
  openfl_filters_BitmapFilter.prototype = {
    __cacheObject: null,
    __numPasses: null,
    clone: function () {
      return new openfl_filters_BitmapFilter();
    },
    __applyFilter: function (
      sourceBitmapData,
      destBitmapData,
      sourceRect,
      destPoint
    ) {},
    __initShader: function (renderSession, pass) {
      return renderSession.shaderManager.defaultShader;
    },
    __class__: openfl_filters_BitmapFilter,
  };
  var openfl_filters__$BlurFilter_BlurShader = function () {
    if (this.__glFragmentSource == null) {
      this.__glFragmentSource =
        "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
    }
    if (this.__glVertexSource == null) {
      this.__glVertexSource =
        "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
    }
    openfl_display_Shader.call(this);
    this.get_data().uRadius.value = [0, 0];
  };
  $hxClasses["openfl.filters._BlurFilter.BlurShader"] =
    openfl_filters__$BlurFilter_BlurShader;
  openfl_filters__$BlurFilter_BlurShader.__name__ = [
    "openfl",
    "filters",
    "_BlurFilter",
    "BlurShader",
  ];
  openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
  openfl_filters__$BlurFilter_BlurShader.prototype = $extend(
    openfl_display_Shader.prototype,
    {
      __update: function () {
        var tmp = this.get_data().uImage0.input.width;
        this.get_data().uTextureSize.value = [
          tmp,
          this.get_data().uImage0.input.height,
        ];
        openfl_display_Shader.prototype.__update.call(this);
      },
      __class__: openfl_filters__$BlurFilter_BlurShader,
    }
  );
  var openfl_filters_BlurFilter = function (blurX, blurY, quality) {
    if (quality == null) {
      quality = 1;
    }
    if (blurY == null) {
      blurY = 4;
    }
    if (blurX == null) {
      blurX = 4;
    }
    openfl_filters_BitmapFilter.call(this);
    this.blurX = blurX;
    this.blurY = blurY;
    this.set_quality(quality);
  };
  $hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
  openfl_filters_BlurFilter.__name__ = ["openfl", "filters", "BlurFilter"];
  openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
  openfl_filters_BlurFilter.prototype = $extend(
    openfl_filters_BitmapFilter.prototype,
    {
      blurX: null,
      blurY: null,
      quality: null,
      horizontalPasses: null,
      verticalPasses: null,
      clone: function () {
        return new openfl_filters_BlurFilter(
          this.blurX,
          this.blurY,
          this.quality
        );
      },
      __initShader: function (renderSession, pass) {
        var data = openfl_filters_BlurFilter.__blurShader.get_data();
        if (pass <= this.horizontalPasses) {
          var scale = Math.pow(0.5, pass >> 1);
          data.uRadius.value[0] = this.blurX * scale;
          data.uRadius.value[1] = 0;
        } else {
          var scale1 = Math.pow(0.5, (pass - this.horizontalPasses) >> 1);
          data.uRadius.value[0] = 0;
          data.uRadius.value[1] = this.blurY * scale1;
        }
        return openfl_filters_BlurFilter.__blurShader;
      },
      set_quality: function (value) {
        this.horizontalPasses =
          this.blurX <= 0 ? 0 : Math.round(this.blurX * (value / 4)) + 1;
        this.verticalPasses =
          this.blurY <= 0 ? 0 : Math.round(this.blurY * (value / 4)) + 1;
        this.__numPasses = this.horizontalPasses + this.verticalPasses;
        return (this.quality = value);
      },
      __class__: openfl_filters_BlurFilter,
      __properties__: { set_quality: "set_quality" },
    }
  );
  var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function () {
    if (this.__glFragmentSource == null) {
      this.__glFragmentSource =
        "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
    }
    openfl_display_Shader.call(this);
    this.get_data().uMultipliers.value = [
      1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    ];
    this.get_data().uOffsets.value = [0, 0, 0, 0];
  };
  $hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] =
    openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
  openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = [
    "openfl",
    "filters",
    "_ColorMatrixFilter",
    "ColorMatrixShader",
  ];
  openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ =
    openfl_display_Shader;
  openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(
    openfl_display_Shader.prototype,
    {
      init: function (matrix) {
        var multipliers = this.get_data().uMultipliers.value;
        var offsets = this.get_data().uOffsets.value;
        multipliers[0] = matrix[0];
        multipliers[1] = matrix[1];
        multipliers[2] = matrix[2];
        multipliers[3] = matrix[3];
        multipliers[4] = matrix[5];
        multipliers[5] = matrix[6];
        multipliers[6] = matrix[7];
        multipliers[7] = matrix[8];
        multipliers[8] = matrix[10];
        multipliers[9] = matrix[11];
        multipliers[10] = matrix[12];
        multipliers[11] = matrix[13];
        multipliers[12] = matrix[15];
        multipliers[13] = matrix[16];
        multipliers[14] = matrix[17];
        multipliers[15] = matrix[18];
        offsets[0] = matrix[4] / 255.0;
        offsets[1] = matrix[9] / 255.0;
        offsets[2] = matrix[14] / 255.0;
        offsets[3] = matrix[19] / 255.0;
      },
      __class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader,
    }
  );
  var openfl_filters_ColorMatrixFilter = function (matrix) {
    openfl_filters_BitmapFilter.call(this);
    this.set_matrix(matrix);
    this.__numPasses = 0;
  };
  $hxClasses["openfl.filters.ColorMatrixFilter"] =
    openfl_filters_ColorMatrixFilter;
  openfl_filters_ColorMatrixFilter.__name__ = [
    "openfl",
    "filters",
    "ColorMatrixFilter",
  ];
  openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
  openfl_filters_ColorMatrixFilter.prototype = $extend(
    openfl_filters_BitmapFilter.prototype,
    {
      matrix: null,
      clone: function () {
        return new openfl_filters_ColorMatrixFilter(this.matrix);
      },
      __applyFilter: function (
        sourceBitmapData,
        destBitmapData,
        sourceRect,
        destPoint
      ) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
          sourceBitmapData.image
        );
        lime_graphics_utils_ImageCanvasUtil.createImageData(
          sourceBitmapData.image
        );
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(
          destBitmapData.image
        );
        lime_graphics_utils_ImageCanvasUtil.createImageData(
          destBitmapData.image
        );
        var source = sourceBitmapData.image.get_data();
        var target = destBitmapData.image.get_data();
        var offsetX = (destPoint.x - sourceRect.x) | 0;
        var offsetY = (destPoint.y - sourceRect.y) | 0;
        var sourceStride = sourceBitmapData.width * 4;
        var targetStride = destBitmapData.width * 4;
        var sourceOffset;
        var targetOffset;
        var _g1 = sourceRect.y | 0;
        var _g = sourceRect.height | 0;
        while (_g1 < _g) {
          var row = _g1++;
          var _g3 = sourceRect.x | 0;
          var _g2 = sourceRect.width | 0;
          while (_g3 < _g2) {
            var column = _g3++;
            sourceOffset = row * sourceStride + column * 4;
            targetOffset =
              (row + offsetX) * targetStride + (column + offsetY) * 4;
            var srcR = source[sourceOffset];
            var srcG = source[sourceOffset + 1];
            var srcB = source[sourceOffset + 2];
            var srcA = source[sourceOffset + 3];
            var b = this.matrix[0];
            var x = _$UInt_UInt_$Impl_$.toFloat(srcR) * b;
            var b1 = this.matrix[1];
            var x1 = x + _$UInt_UInt_$Impl_$.toFloat(srcG) * b1;
            var b2 = this.matrix[2];
            var x2 = x1 + _$UInt_UInt_$Impl_$.toFloat(srcB) * b2;
            var b3 = this.matrix[3];
            target[targetOffset] =
              (x2 + _$UInt_UInt_$Impl_$.toFloat(srcA) * b3 + this.matrix[4]) |
              0;
            var b4 = this.matrix[5];
            var x3 = _$UInt_UInt_$Impl_$.toFloat(srcR) * b4;
            var b5 = this.matrix[6];
            var x4 = x3 + _$UInt_UInt_$Impl_$.toFloat(srcG) * b5;
            var b6 = this.matrix[7];
            var x5 = x4 + _$UInt_UInt_$Impl_$.toFloat(srcB) * b6;
            var b7 = this.matrix[8];
            target[targetOffset + 1] =
              (x5 + _$UInt_UInt_$Impl_$.toFloat(srcA) * b7 + this.matrix[9]) |
              0;
            var b8 = this.matrix[10];
            var x6 = _$UInt_UInt_$Impl_$.toFloat(srcR) * b8;
            var b9 = this.matrix[11];
            var x7 = x6 + _$UInt_UInt_$Impl_$.toFloat(srcG) * b9;
            var b10 = this.matrix[12];
            var x8 = x7 + _$UInt_UInt_$Impl_$.toFloat(srcB) * b10;
            var b11 = this.matrix[13];
            target[targetOffset + 2] =
              (x8 + _$UInt_UInt_$Impl_$.toFloat(srcA) * b11 + this.matrix[14]) |
              0;
            var b12 = this.matrix[15];
            var x9 = _$UInt_UInt_$Impl_$.toFloat(srcR) * b12;
            var b13 = this.matrix[16];
            var x10 = x9 + _$UInt_UInt_$Impl_$.toFloat(srcG) * b13;
            var b14 = this.matrix[17];
            var x11 = x10 + _$UInt_UInt_$Impl_$.toFloat(srcB) * b14;
            var b15 = this.matrix[18];
            target[targetOffset + 3] =
              (x11 +
                _$UInt_UInt_$Impl_$.toFloat(srcA) * b15 +
                this.matrix[19]) |
              0;
          }
        }
        destBitmapData.image.dirty = true;
      },
      __initShader: function (renderSession, pass) {
        openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.matrix);
        return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
      },
      set_matrix: function (value) {
        if (value == null) {
          value = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
        }
        return (this.matrix = value);
      },
      __class__: openfl_filters_ColorMatrixFilter,
      __properties__: { set_matrix: "set_matrix" },
    }
  );
  var openfl_filters_DropShadowFilter = function (
    distance,
    angle,
    color,
    alpha,
    blurX,
    blurY,
    strength,
    quality,
    inner,
    knockout,
    hideObject
  ) {
    if (hideObject == null) {
      hideObject = false;
    }
    if (knockout == null) {
      knockout = false;
    }
    if (inner == null) {
      inner = false;
    }
    if (quality == null) {
      quality = 1;
    }
    if (strength == null) {
      strength = 1;
    }
    if (blurY == null) {
      blurY = 4;
    }
    if (blurX == null) {
      blurX = 4;
    }
    if (alpha == null) {
      alpha = 1;
    }
    if (color == null) {
      color = 0;
    }
    if (angle == null) {
      angle = 45;
    }
    if (distance == null) {
      distance = 4;
    }
    openfl_filters_BitmapFilter.call(this);
    this.distance = distance;
    this.angle = angle;
    this.color = color;
    this.alpha = alpha;
    this.blurX = blurX;
    this.blurY = blurY;
    this.strength = strength;
    this.set_quality(quality);
    this.inner = inner;
    this.set_knockout(knockout);
    this.set_hideObject(hideObject);
  };
  $hxClasses["openfl.filters.DropShadowFilter"] =
    openfl_filters_DropShadowFilter;
  openfl_filters_DropShadowFilter.__name__ = [
    "openfl",
    "filters",
    "DropShadowFilter",
  ];
  openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
  openfl_filters_DropShadowFilter.prototype = $extend(
    openfl_filters_BitmapFilter.prototype,
    {
      alpha: null,
      angle: null,
      blurX: null,
      blurY: null,
      color: null,
      distance: null,
      hideObject: null,
      inner: null,
      knockout: null,
      quality: null,
      strength: null,
      clone: function () {
        return new openfl_filters_DropShadowFilter(
          this.distance,
          this.angle,
          this.color,
          this.alpha,
          this.blurX,
          this.blurY,
          this.strength,
          this.quality,
          this.inner,
          this.knockout,
          this.hideObject
        );
      },
      set_knockout: function (value) {
        return (this.knockout = value);
      },
      set_hideObject: function (value) {
        return (this.hideObject = value);
      },
      set_quality: function (value) {
        return (this.quality = value);
      },
      __class__: openfl_filters_DropShadowFilter,
      __properties__: {
        set_quality: "set_quality",
        set_knockout: "set_knockout",
        set_hideObject: "set_hideObject",
      },
    }
  );
  var openfl_filters__$GlowFilter_GlowShader = function () {
    if (this.__glFragmentSource == null) {
      this.__glFragmentSource =
        "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
    }
    if (this.__glVertexSource == null) {
      this.__glVertexSource =
        "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
    }
    openfl_display_Shader.call(this);
    this.get_data().uRadius.value = [0, 0];
    this.get_data().uColor.value = [0, 0, 0, 0];
  };
  $hxClasses["openfl.filters._GlowFilter.GlowShader"] =
    openfl_filters__$GlowFilter_GlowShader;
  openfl_filters__$GlowFilter_GlowShader.__name__ = [
    "openfl",
    "filters",
    "_GlowFilter",
    "GlowShader",
  ];
  openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
  openfl_filters__$GlowFilter_GlowShader.prototype = $extend(
    openfl_display_Shader.prototype,
    {
      __update: function () {
        var tmp = this.get_data().uImage0.input.width;
        this.get_data().uTextureSize.value = [
          tmp,
          this.get_data().uImage0.input.height,
        ];
        openfl_display_Shader.prototype.__update.call(this);
      },
      __class__: openfl_filters__$GlowFilter_GlowShader,
    }
  );
  var openfl_filters_GlowFilter = function (
    color,
    alpha,
    blurX,
    blurY,
    strength,
    quality,
    inner,
    knockout
  ) {
    if (knockout == null) {
      knockout = false;
    }
    if (inner == null) {
      inner = false;
    }
    if (quality == null) {
      quality = 1;
    }
    if (strength == null) {
      strength = 2;
    }
    if (blurY == null) {
      blurY = 6;
    }
    if (blurX == null) {
      blurX = 6;
    }
    if (alpha == null) {
      alpha = 1;
    }
    if (color == null) {
      color = 16711680;
    }
    openfl_filters_BitmapFilter.call(this);
    this.color = color;
    this.alpha = alpha;
    this.blurX = blurX;
    this.blurY = blurY;
    this.strength = strength;
    this.set_quality(quality);
    this.inner = inner;
    this.set_knockout(knockout);
    this.__cacheObject = true;
  };
  $hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
  openfl_filters_GlowFilter.__name__ = ["openfl", "filters", "GlowFilter"];
  openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
  openfl_filters_GlowFilter.prototype = $extend(
    openfl_filters_BitmapFilter.prototype,
    {
      alpha: null,
      blurX: null,
      blurY: null,
      color: null,
      inner: null,
      knockout: null,
      quality: null,
      strength: null,
      horizontalPasses: null,
      verticalPasses: null,
      clone: function () {
        return new openfl_filters_GlowFilter(
          this.color,
          this.alpha,
          this.blurX,
          this.blurY,
          this.strength,
          this.quality,
          this.inner,
          this.knockout
        );
      },
      __initShader: function (renderSession, pass) {
        var data = openfl_filters_GlowFilter.__glowShader.get_data();
        if (pass <= this.horizontalPasses) {
          var scale = Math.pow(0.5, pass >> 1);
          data.uRadius.value[0] = this.blurX * scale;
          data.uRadius.value[1] = 0;
        } else {
          var scale1 = Math.pow(0.5, (pass - this.horizontalPasses) >> 1);
          data.uRadius.value[0] = 0;
          data.uRadius.value[1] = this.blurY * scale1;
        }
        data.uColor.value[0] = ((this.color >> 16) & 255) / 255;
        data.uColor.value[1] = ((this.color >> 8) & 255) / 255;
        data.uColor.value[2] = (this.color & 255) / 255;
        data.uColor.value[3] = this.alpha;
        return openfl_filters_GlowFilter.__glowShader;
      },
      set_knockout: function (value) {
        return (this.knockout = value);
      },
      set_quality: function (value) {
        this.horizontalPasses =
          this.blurX <= 0 ? 0 : Math.round(this.blurX * (value / 4)) + 1;
        this.verticalPasses =
          this.blurY <= 0 ? 0 : Math.round(this.blurY * (value / 4)) + 1;
        this.__numPasses = this.horizontalPasses + this.verticalPasses;
        return (this.quality = value);
      },
      __class__: openfl_filters_GlowFilter,
      __properties__: {
        set_quality: "set_quality",
        set_knockout: "set_knockout",
      },
    }
  );
  var openfl_filters__$BlurShader_$ShaderData = function (byteArray) {
    openfl_display_ShaderData.call(this, byteArray);
  };
  $hxClasses["openfl.filters._BlurShader_ShaderData"] =
    openfl_filters__$BlurShader_$ShaderData;
  openfl_filters__$BlurShader_$ShaderData.__name__ = [
    "openfl",
    "filters",
    "_BlurShader_ShaderData",
  ];
  openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
  openfl_filters__$BlurShader_$ShaderData.prototype = $extend(
    openfl_display_ShaderData.prototype,
    {
      uRadius: null,
      uTextureSize: null,
      __class__: openfl_filters__$BlurShader_$ShaderData,
    }
  );
  var openfl_filters__$ColorMatrixShader_$ShaderData = function (byteArray) {
    openfl_display_ShaderData.call(this, byteArray);
  };
  $hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] =
    openfl_filters__$ColorMatrixShader_$ShaderData;
  openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = [
    "openfl",
    "filters",
    "_ColorMatrixShader_ShaderData",
  ];
  openfl_filters__$ColorMatrixShader_$ShaderData.__super__ =
    openfl_display_ShaderData;
  openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(
    openfl_display_ShaderData.prototype,
    {
      uMultipliers: null,
      uOffsets: null,
      __class__: openfl_filters__$ColorMatrixShader_$ShaderData,
    }
  );
  var openfl_filters__$GlowShader_$ShaderData = function (byteArray) {
    openfl_display_ShaderData.call(this, byteArray);
  };
  $hxClasses["openfl.filters._GlowShader_ShaderData"] =
    openfl_filters__$GlowShader_$ShaderData;
  openfl_filters__$GlowShader_$ShaderData.__name__ = [
    "openfl",
    "filters",
    "_GlowShader_ShaderData",
  ];
  openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
  openfl_filters__$GlowShader_$ShaderData.prototype = $extend(
    openfl_display_ShaderData.prototype,
    {
      uRadius: null,
      uTextureSize: null,
      uColor: null,
      __class__: openfl_filters__$GlowShader_$ShaderData,
    }
  );
  var openfl_geom_Matrix3D = function (v) {
    if (v != null && v.get_length() == 16) {
      this.rawData = v.concat(null);
    } else {
      var a = [
        1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
        0.0, 1.0,
      ];
      var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
      var _g1 = 0;
      var _g = a.length;
      while (_g1 < _g) {
        var i = _g1++;
        vector.set(i, a[i]);
      }
      this.rawData = vector;
    }
  };
  $hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
  openfl_geom_Matrix3D.__name__ = ["openfl", "geom", "Matrix3D"];
  openfl_geom_Matrix3D.create2D = function (x, y, scale, rotation) {
    if (rotation == null) {
      rotation = 0;
    }
    if (scale == null) {
      scale = 1;
    }
    var theta = (rotation * Math.PI) / 180.0;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var a = [
      c * scale,
      -s * scale,
      0,
      0,
      s * scale,
      c * scale,
      0,
      0,
      0,
      0,
      1,
      0,
      x,
      y,
      0,
      1,
    ];
    var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    var _g1 = 0;
    var _g = a.length;
    while (_g1 < _g) {
      var i = _g1++;
      vector.set(i, a[i]);
    }
    return new openfl_geom_Matrix3D(vector);
  };
  openfl_geom_Matrix3D.createABCD = function (a, b, c, d, tx, ty) {
    var a1 = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
    var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    var _g1 = 0;
    var _g = a1.length;
    while (_g1 < _g) {
      var i = _g1++;
      vector.set(i, a1[i]);
    }
    return new openfl_geom_Matrix3D(vector);
  };
  openfl_geom_Matrix3D.createOrtho = function (x0, x1, y0, y1, zNear, zFar) {
    var sx = 1.0 / (x1 - x0);
    var sy = 1.0 / (y1 - y0);
    var sz = 1.0 / (zFar - zNear);
    var a = [
      2.0 * sx,
      0,
      0,
      0,
      0,
      2.0 * sy,
      0,
      0,
      0,
      0,
      -2.0 * sz,
      0,
      -(x0 + x1) * sx,
      -(y0 + y1) * sy,
      -(zNear + zFar) * sz,
      1,
    ];
    var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
    var _g1 = 0;
    var _g = a.length;
    while (_g1 < _g) {
      var i = _g1++;
      vector.set(i, a[i]);
    }
    return new openfl_geom_Matrix3D(vector);
  };
  openfl_geom_Matrix3D.interpolate = function (thisMat, toMat, percent) {
    var m = new openfl_geom_Matrix3D();
    var _g = 0;
    while (_g < 16) {
      var i = _g++;
      m.rawData.set(
        i,
        thisMat.rawData.get(i) +
          (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent
      );
    }
    return m;
  };
  openfl_geom_Matrix3D.__getAxisRotation = function (x, y, z, degrees) {
    var m = new openfl_geom_Matrix3D();
    var a1 = new openfl_geom_Vector3D(x, y, z);
    var rad = -degrees * (Math.PI / 180);
    var c = Math.cos(rad);
    var s = Math.sin(rad);
    var t = 1.0 - c;
    m.rawData.set(0, c + a1.x * a1.x * t);
    m.rawData.set(5, c + a1.y * a1.y * t);
    m.rawData.set(10, c + a1.z * a1.z * t);
    var tmp1 = a1.x * a1.y * t;
    var tmp2 = a1.z * s;
    m.rawData.set(4, tmp1 + tmp2);
    m.rawData.set(1, tmp1 - tmp2);
    tmp1 = a1.x * a1.z * t;
    tmp2 = a1.y * s;
    m.rawData.set(8, tmp1 - tmp2);
    m.rawData.set(2, tmp1 + tmp2);
    tmp1 = a1.y * a1.z * t;
    tmp2 = a1.x * s;
    m.rawData.set(9, tmp1 + tmp2);
    m.rawData.set(6, tmp1 - tmp2);
    return m;
  };
  openfl_geom_Matrix3D.prototype = {
    rawData: null,
    append: function (lhs) {
      var m111 = this.rawData.get(0);
      var m121 = this.rawData.get(4);
      var m131 = this.rawData.get(8);
      var m141 = this.rawData.get(12);
      var m112 = this.rawData.get(1);
      var m122 = this.rawData.get(5);
      var m132 = this.rawData.get(9);
      var m142 = this.rawData.get(13);
      var m113 = this.rawData.get(2);
      var m123 = this.rawData.get(6);
      var m133 = this.rawData.get(10);
      var m143 = this.rawData.get(14);
      var m114 = this.rawData.get(3);
      var m124 = this.rawData.get(7);
      var m134 = this.rawData.get(11);
      var m144 = this.rawData.get(15);
      var m211 = lhs.rawData.get(0);
      var m221 = lhs.rawData.get(4);
      var m231 = lhs.rawData.get(8);
      var m241 = lhs.rawData.get(12);
      var m212 = lhs.rawData.get(1);
      var m222 = lhs.rawData.get(5);
      var m232 = lhs.rawData.get(9);
      var m242 = lhs.rawData.get(13);
      var m213 = lhs.rawData.get(2);
      var m223 = lhs.rawData.get(6);
      var m233 = lhs.rawData.get(10);
      var m243 = lhs.rawData.get(14);
      var m214 = lhs.rawData.get(3);
      var m224 = lhs.rawData.get(7);
      var m234 = lhs.rawData.get(11);
      var m244 = lhs.rawData.get(15);
      this.rawData.set(
        0,
        m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241
      );
      this.rawData.set(
        1,
        m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242
      );
      this.rawData.set(
        2,
        m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243
      );
      this.rawData.set(
        3,
        m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244
      );
      this.rawData.set(
        4,
        m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241
      );
      this.rawData.set(
        5,
        m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242
      );
      this.rawData.set(
        6,
        m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243
      );
      this.rawData.set(
        7,
        m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244
      );
      this.rawData.set(
        8,
        m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241
      );
      this.rawData.set(
        9,
        m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242
      );
      this.rawData.set(
        10,
        m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243
      );
      this.rawData.set(
        11,
        m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244
      );
      this.rawData.set(
        12,
        m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241
      );
      this.rawData.set(
        13,
        m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242
      );
      this.rawData.set(
        14,
        m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243
      );
      this.rawData.set(
        15,
        m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244
      );
    },
    appendRotation: function (degrees, axis, pivotPoint) {
      var tx;
      var ty;
      var tz = 0;
      ty = tz;
      tx = ty;
      if (pivotPoint != null) {
        tx = pivotPoint.x;
        ty = pivotPoint.y;
        tz = pivotPoint.z;
      }
      var radian = (degrees * Math.PI) / 180;
      var cos = Math.cos(radian);
      var sin = Math.sin(radian);
      var x = axis.x;
      var y = axis.y;
      var z = axis.z;
      var x2 = x * x;
      var y2 = y * y;
      var z2 = z * z;
      var ls = x2 + y2 + z2;
      if (ls != 0) {
        var l = Math.sqrt(ls);
        x /= l;
        y /= l;
        z /= l;
        x2 /= ls;
        y2 /= ls;
        z2 /= ls;
      }
      var ccos = 1 - cos;
      var m = new openfl_geom_Matrix3D();
      var d = m.rawData;
      d.set(0, x2 + (y2 + z2) * cos);
      d.set(1, x * y * ccos + z * sin);
      d.set(2, x * z * ccos - y * sin);
      d.set(4, x * y * ccos - z * sin);
      d.set(5, y2 + (x2 + z2) * cos);
      d.set(6, y * z * ccos + x * sin);
      d.set(8, x * z * ccos + y * sin);
      d.set(9, y * z * ccos - x * sin);
      d.set(10, z2 + (x2 + y2) * cos);
      d.set(
        12,
        (tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos +
          (ty * z - tz * y) * sin
      );
      d.set(
        13,
        (ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos +
          (tz * x - tx * z) * sin
      );
      d.set(
        14,
        (tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos +
          (tx * y - ty * x) * sin
      );
      this.append(m);
    },
    appendScale: function (xScale, yScale, zScale) {
      var a = [
        xScale,
        0.0,
        0.0,
        0.0,
        0.0,
        yScale,
        0.0,
        0.0,
        0.0,
        0.0,
        zScale,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
      ];
      var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
      var _g1 = 0;
      var _g = a.length;
      while (_g1 < _g) {
        var i = _g1++;
        vector.set(i, a[i]);
      }
      this.append(new openfl_geom_Matrix3D(vector));
    },
    appendTranslation: function (x, y, z) {
      var _g = this.rawData;
      _g.set(12, _g.get(12) + x);
      var _g1 = this.rawData;
      _g1.set(13, _g1.get(13) + y);
      var _g2 = this.rawData;
      _g2.set(14, _g2.get(14) + z);
    },
    clone: function () {
      return new openfl_geom_Matrix3D(this.rawData.copy());
    },
    copyColumnFrom: function (column, vector3D) {
      switch (column) {
        case 0:
          this.rawData.set(0, vector3D.x);
          this.rawData.set(1, vector3D.y);
          this.rawData.set(2, vector3D.z);
          this.rawData.set(3, vector3D.w);
          break;
        case 1:
          this.rawData.set(4, vector3D.x);
          this.rawData.set(5, vector3D.y);
          this.rawData.set(6, vector3D.z);
          this.rawData.set(7, vector3D.w);
          break;
        case 2:
          this.rawData.set(8, vector3D.x);
          this.rawData.set(9, vector3D.y);
          this.rawData.set(10, vector3D.z);
          this.rawData.set(11, vector3D.w);
          break;
        case 3:
          this.rawData.set(12, vector3D.x);
          this.rawData.set(13, vector3D.y);
          this.rawData.set(14, vector3D.z);
          this.rawData.set(15, vector3D.w);
          break;
        default:
      }
    },
    copyColumnTo: function (column, vector3D) {
      switch (column) {
        case 0:
          vector3D.x = this.rawData.get(0);
          vector3D.y = this.rawData.get(1);
          vector3D.z = this.rawData.get(2);
          vector3D.w = this.rawData.get(3);
          break;
        case 1:
          vector3D.x = this.rawData.get(4);
          vector3D.y = this.rawData.get(5);
          vector3D.z = this.rawData.get(6);
          vector3D.w = this.rawData.get(7);
          break;
        case 2:
          vector3D.x = this.rawData.get(8);
          vector3D.y = this.rawData.get(9);
          vector3D.z = this.rawData.get(10);
          vector3D.w = this.rawData.get(11);
          break;
        case 3:
          vector3D.x = this.rawData.get(12);
          vector3D.y = this.rawData.get(13);
          vector3D.z = this.rawData.get(14);
          vector3D.w = this.rawData.get(15);
          break;
        default:
      }
    },
    copyFrom: function (other) {
      this.rawData = other.rawData.copy();
    },
    copyRawDataFrom: function (vector, index, transpose) {
      if (transpose == null) {
        transpose = false;
      }
      if (index == null) {
        index = 0;
      }
      if (transpose) {
        this.transpose();
      }
      var length = vector.get_length() - index;
      var _g1 = 0;
      var _g = length;
      while (_g1 < _g) {
        var i = _g1++;
        this.rawData.set(i, vector.get(i + index));
      }
      if (transpose) {
        this.transpose();
      }
    },
    copyRawDataTo: function (vector, index, transpose) {
      if (transpose == null) {
        transpose = false;
      }
      if (index == null) {
        index = 0;
      }
      if (transpose) {
        this.transpose();
      }
      var _g1 = 0;
      var _g = this.rawData.get_length();
      while (_g1 < _g) {
        var i = _g1++;
        vector.set(i + index, this.rawData.get(i));
      }
      if (transpose) {
        this.transpose();
      }
    },
    copyRowFrom: function (row, vector3D) {
      switch (row) {
        case 0:
          this.rawData.set(0, vector3D.x);
          this.rawData.set(4, vector3D.y);
          this.rawData.set(8, vector3D.z);
          this.rawData.set(12, vector3D.w);
          break;
        case 1:
          this.rawData.set(1, vector3D.x);
          this.rawData.set(5, vector3D.y);
          this.rawData.set(9, vector3D.z);
          this.rawData.set(13, vector3D.w);
          break;
        case 2:
          this.rawData.set(2, vector3D.x);
          this.rawData.set(6, vector3D.y);
          this.rawData.set(10, vector3D.z);
          this.rawData.set(14, vector3D.w);
          break;
        case 3:
          this.rawData.set(3, vector3D.x);
          this.rawData.set(7, vector3D.y);
          this.rawData.set(11, vector3D.z);
          this.rawData.set(15, vector3D.w);
          break;
        default:
      }
    },
    copyRowTo: function (row, vector3D) {
      switch (row) {
        case 0:
          vector3D.x = this.rawData.get(0);
          vector3D.y = this.rawData.get(4);
          vector3D.z = this.rawData.get(8);
          vector3D.w = this.rawData.get(12);
          break;
        case 1:
          vector3D.x = this.rawData.get(1);
          vector3D.y = this.rawData.get(5);
          vector3D.z = this.rawData.get(9);
          vector3D.w = this.rawData.get(13);
          break;
        case 2:
          vector3D.x = this.rawData.get(2);
          vector3D.y = this.rawData.get(6);
          vector3D.z = this.rawData.get(10);
          vector3D.w = this.rawData.get(14);
          break;
        case 3:
          vector3D.x = this.rawData.get(3);
          vector3D.y = this.rawData.get(7);
          vector3D.z = this.rawData.get(11);
          vector3D.w = this.rawData.get(15);
          break;
        default:
      }
    },
    copyToMatrix3D: function (other) {
      other.rawData = this.rawData.copy();
    },
    decompose: function (orientationStyle) {
      if (orientationStyle == null) {
        orientationStyle = 1;
      }
      var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
      var m = this.clone();
      var mr = m.rawData.copy();
      var pos = new openfl_geom_Vector3D(mr.get(12), mr.get(13), mr.get(14));
      mr.set(12, 0);
      mr.set(13, 0);
      mr.set(14, 0);
      var scale = new openfl_geom_Vector3D();
      scale.x = Math.sqrt(
        mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2)
      );
      scale.y = Math.sqrt(
        mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6)
      );
      scale.z = Math.sqrt(
        mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10)
      );
      if (
        mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) -
          mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) +
          mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) <
        0
      ) {
        scale.z = -scale.z;
      }
      var _g = mr;
      _g.set(0, _g.get(0) / scale.x);
      var _g1 = mr;
      _g1.set(1, _g1.get(1) / scale.x);
      var _g2 = mr;
      _g2.set(2, _g2.get(2) / scale.x);
      var _g3 = mr;
      _g3.set(4, _g3.get(4) / scale.y);
      var _g4 = mr;
      _g4.set(5, _g4.get(5) / scale.y);
      var _g5 = mr;
      _g5.set(6, _g5.get(6) / scale.y);
      var _g6 = mr;
      _g6.set(8, _g6.get(8) / scale.z);
      var _g7 = mr;
      _g7.set(9, _g7.get(9) / scale.z);
      var _g8 = mr;
      _g8.set(10, _g8.get(10) / scale.z);
      var rot = new openfl_geom_Vector3D();
      switch (orientationStyle) {
        case 0:
          rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
          var len = Math.sqrt(
            (mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) +
              (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) +
              (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4))
          );
          if (len != 0) {
            rot.x = (mr.get(6) - mr.get(9)) / len;
            rot.y = (mr.get(8) - mr.get(2)) / len;
            rot.z = (mr.get(1) - mr.get(4)) / len;
          } else {
            rot.x = rot.y = rot.z = 0;
          }
          break;
        case 1:
          rot.y = Math.asin(-mr.get(2));
          if (mr.get(2) != 1 && mr.get(2) != -1) {
            rot.x = Math.atan2(mr.get(6), mr.get(10));
            rot.z = Math.atan2(mr.get(1), mr.get(0));
          } else {
            rot.z = 0;
            rot.x = Math.atan2(mr.get(4), mr.get(5));
          }
          break;
        case 2:
          var tr = mr.get(0) + mr.get(5) + mr.get(10);
          if (tr > 0) {
            rot.w = Math.sqrt(1 + tr) / 2;
            rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
            rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
            rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
          } else if (mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
            rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
            rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
            rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
            rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
          } else if (mr.get(5) > mr.get(10)) {
            rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
            rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
            rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
            rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
          } else {
            rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
            rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
            rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
            rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
          }
          break;
      }
      vec.push(pos);
      vec.push(rot);
      vec.push(scale);
      return vec;
    },
    deltaTransformVector: function (v) {
      var x = v.x;
      var y = v.y;
      var z = v.z;
      return new openfl_geom_Vector3D(
        x * this.rawData.get(0) +
          y * this.rawData.get(4) +
          z * this.rawData.get(8) +
          this.rawData.get(3),
        x * this.rawData.get(1) +
          y * this.rawData.get(5) +
          z * this.rawData.get(9) +
          this.rawData.get(7),
        x * this.rawData.get(2) +
          y * this.rawData.get(6) +
          z * this.rawData.get(10) +
          this.rawData.get(11),
        0
      );
    },
    identity: function () {
      var a = [
        1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
        0.0, 1.0,
      ];
      var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
      var _g1 = 0;
      var _g = a.length;
      while (_g1 < _g) {
        var i = _g1++;
        vector.set(i, a[i]);
      }
      this.rawData = vector;
    },
    interpolateTo: function (toMat, percent) {
      var _g = 0;
      while (_g < 16) {
        var i = _g++;
        this.rawData.set(
          i,
          this.rawData.get(i) +
            (toMat.rawData.get(i) - this.rawData.get(i)) * percent
        );
      }
    },
    invert: function () {
      var d = this.get_determinant();
      var invertable = Math.abs(d) > 0.00000000001;
      if (invertable) {
        d = 1 / d;
        var m11 = this.rawData.get(0);
        var m21 = this.rawData.get(4);
        var m31 = this.rawData.get(8);
        var m41 = this.rawData.get(12);
        var m12 = this.rawData.get(1);
        var m22 = this.rawData.get(5);
        var m32 = this.rawData.get(9);
        var m42 = this.rawData.get(13);
        var m13 = this.rawData.get(2);
        var m23 = this.rawData.get(6);
        var m33 = this.rawData.get(10);
        var m43 = this.rawData.get(14);
        var m14 = this.rawData.get(3);
        var m24 = this.rawData.get(7);
        var m34 = this.rawData.get(11);
        var m44 = this.rawData.get(15);
        this.rawData.set(
          0,
          d *
            (m22 * (m33 * m44 - m43 * m34) -
              m32 * (m23 * m44 - m43 * m24) +
              m42 * (m23 * m34 - m33 * m24))
        );
        this.rawData.set(
          1,
          -d *
            (m12 * (m33 * m44 - m43 * m34) -
              m32 * (m13 * m44 - m43 * m14) +
              m42 * (m13 * m34 - m33 * m14))
        );
        this.rawData.set(
          2,
          d *
            (m12 * (m23 * m44 - m43 * m24) -
              m22 * (m13 * m44 - m43 * m14) +
              m42 * (m13 * m24 - m23 * m14))
        );
        this.rawData.set(
          3,
          -d *
            (m12 * (m23 * m34 - m33 * m24) -
              m22 * (m13 * m34 - m33 * m14) +
              m32 * (m13 * m24 - m23 * m14))
        );
        this.rawData.set(
          4,
          -d *
            (m21 * (m33 * m44 - m43 * m34) -
              m31 * (m23 * m44 - m43 * m24) +
              m41 * (m23 * m34 - m33 * m24))
        );
        this.rawData.set(
          5,
          d *
            (m11 * (m33 * m44 - m43 * m34) -
              m31 * (m13 * m44 - m43 * m14) +
              m41 * (m13 * m34 - m33 * m14))
        );
        this.rawData.set(
          6,
          -d *
            (m11 * (m23 * m44 - m43 * m24) -
              m21 * (m13 * m44 - m43 * m14) +
              m41 * (m13 * m24 - m23 * m14))
        );
        this.rawData.set(
          7,
          d *
            (m11 * (m23 * m34 - m33 * m24) -
              m21 * (m13 * m34 - m33 * m14) +
              m31 * (m13 * m24 - m23 * m14))
        );
        this.rawData.set(
          8,
          d *
            (m21 * (m32 * m44 - m42 * m34) -
              m31 * (m22 * m44 - m42 * m24) +
              m41 * (m22 * m34 - m32 * m24))
        );
        this.rawData.set(
          9,
          -d *
            (m11 * (m32 * m44 - m42 * m34) -
              m31 * (m12 * m44 - m42 * m14) +
              m41 * (m12 * m34 - m32 * m14))
        );
        this.rawData.set(
          10,
          d *
            (m11 * (m22 * m44 - m42 * m24) -
              m21 * (m12 * m44 - m42 * m14) +
              m41 * (m12 * m24 - m22 * m14))
        );
        this.rawData.set(
          11,
          -d *
            (m11 * (m22 * m34 - m32 * m24) -
              m21 * (m12 * m34 - m32 * m14) +
              m31 * (m12 * m24 - m22 * m14))
        );
        this.rawData.set(
          12,
          -d *
            (m21 * (m32 * m43 - m42 * m33) -
              m31 * (m22 * m43 - m42 * m23) +
              m41 * (m22 * m33 - m32 * m23))
        );
        this.rawData.set(
          13,
          d *
            (m11 * (m32 * m43 - m42 * m33) -
              m31 * (m12 * m43 - m42 * m13) +
              m41 * (m12 * m33 - m32 * m13))
        );
        this.rawData.set(
          14,
          -d *
            (m11 * (m22 * m43 - m42 * m23) -
              m21 * (m12 * m43 - m42 * m13) +
              m41 * (m12 * m23 - m22 * m13))
        );
        this.rawData.set(
          15,
          d *
            (m11 * (m22 * m33 - m32 * m23) -
              m21 * (m12 * m33 - m32 * m13) +
              m31 * (m12 * m23 - m22 * m13))
        );
      }
      return invertable;
    },
    pointAt: function (pos, at, up) {
      if (at == null) {
        at = new openfl_geom_Vector3D(0, 0, -1);
      }
      if (up == null) {
        up = new openfl_geom_Vector3D(0, -1, 0);
      }
      var dir = at.subtract(pos);
      var vup = up.clone();
      var right;
      dir.normalize();
      vup.normalize();
      var dir2 = dir.clone();
      dir2.scaleBy(vup.dotProduct(dir));
      vup = vup.subtract(dir2);
      if (vup.get_length() > 0) {
        vup.normalize();
      } else if (dir.x != 0) {
        vup = new openfl_geom_Vector3D(-dir.y, dir.x, 0);
      } else {
        vup = new openfl_geom_Vector3D(1, 0, 0);
      }
      right = vup.crossProduct(dir);
      right.normalize();
      this.rawData.set(0, right.x);
      this.rawData.set(4, right.y);
      this.rawData.set(8, right.z);
      this.rawData.set(12, 0.0);
      this.rawData.set(1, vup.x);
      this.rawData.set(5, vup.y);
      this.rawData.set(9, vup.z);
      this.rawData.set(13, 0.0);
      this.rawData.set(2, dir.x);
      this.rawData.set(6, dir.y);
      this.rawData.set(10, dir.z);
      this.rawData.set(14, 0.0);
      this.rawData.set(3, pos.x);
      this.rawData.set(7, pos.y);
      this.rawData.set(11, pos.z);
      this.rawData.set(15, 1.0);
    },
    prepend: function (rhs) {
      var m111 = rhs.rawData.get(0);
      var m121 = rhs.rawData.get(4);
      var m131 = rhs.rawData.get(8);
      var m141 = rhs.rawData.get(12);
      var m112 = rhs.rawData.get(1);
      var m122 = rhs.rawData.get(5);
      var m132 = rhs.rawData.get(9);
      var m142 = rhs.rawData.get(13);
      var m113 = rhs.rawData.get(2);
      var m123 = rhs.rawData.get(6);
      var m133 = rhs.rawData.get(10);
      var m143 = rhs.rawData.get(14);
      var m114 = rhs.rawData.get(3);
      var m124 = rhs.rawData.get(7);
      var m134 = rhs.rawData.get(11);
      var m144 = rhs.rawData.get(15);
      var m211 = this.rawData.get(0);
      var m221 = this.rawData.get(4);
      var m231 = this.rawData.get(8);
      var m241 = this.rawData.get(12);
      var m212 = this.rawData.get(1);
      var m222 = this.rawData.get(5);
      var m232 = this.rawData.get(9);
      var m242 = this.rawData.get(13);
      var m213 = this.rawData.get(2);
      var m223 = this.rawData.get(6);
      var m233 = this.rawData.get(10);
      var m243 = this.rawData.get(14);
      var m214 = this.rawData.get(3);
      var m224 = this.rawData.get(7);
      var m234 = this.rawData.get(11);
      var m244 = this.rawData.get(15);
      this.rawData.set(
        0,
        m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241
      );
      this.rawData.set(
        1,
        m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242
      );
      this.rawData.set(
        2,
        m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243
      );
      this.rawData.set(
        3,
        m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244
      );
      this.rawData.set(
        4,
        m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241
      );
      this.rawData.set(
        5,
        m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242
      );
      this.rawData.set(
        6,
        m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243
      );
      this.rawData.set(
        7,
        m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244
      );
      this.rawData.set(
        8,
        m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241
      );
      this.rawData.set(
        9,
        m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242
      );
      this.rawData.set(
        10,
        m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243
      );
      this.rawData.set(
        11,
        m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244
      );
      this.rawData.set(
        12,
        m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241
      );
      this.rawData.set(
        13,
        m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242
      );
      this.rawData.set(
        14,
        m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243
      );
      this.rawData.set(
        15,
        m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244
      );
    },
    prependRotation: function (degrees, axis, pivotPoint) {
      var tx;
      var ty;
      var tz = 0;
      ty = tz;
      tx = ty;
      if (pivotPoint != null) {
        tx = pivotPoint.x;
        ty = pivotPoint.y;
        tz = pivotPoint.z;
      }
      var radian = (degrees * Math.PI) / 180;
      var cos = Math.cos(radian);
      var sin = Math.sin(radian);
      var x = axis.x;
      var y = axis.y;
      var z = axis.z;
      var x2 = x * x;
      var y2 = y * y;
      var z2 = z * z;
      var ls = x2 + y2 + z2;
      if (ls != 0) {
        var l = Math.sqrt(ls);
        x /= l;
        y /= l;
        z /= l;
        x2 /= ls;
        y2 /= ls;
        z2 /= ls;
      }
      var ccos = 1 - cos;
      var m = new openfl_geom_Matrix3D();
      var d = m.rawData;
      d.set(0, x2 + (y2 + z2) * cos);
      d.set(1, x * y * ccos + z * sin);
      d.set(2, x * z * ccos - y * sin);
      d.set(4, x * y * ccos - z * sin);
      d.set(5, y2 + (x2 + z2) * cos);
      d.set(6, y * z * ccos + x * sin);
      d.set(8, x * z * ccos + y * sin);
      d.set(9, y * z * ccos - x * sin);
      d.set(10, z2 + (x2 + y2) * cos);
      d.set(
        12,
        (tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos +
          (ty * z - tz * y) * sin
      );
      d.set(
        13,
        (ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos +
          (tz * x - tx * z) * sin
      );
      d.set(
        14,
        (tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos +
          (tx * y - ty * x) * sin
      );
      this.prepend(m);
    },
    prependScale: function (xScale, yScale, zScale) {
      var a = [
        xScale,
        0.0,
        0.0,
        0.0,
        0.0,
        yScale,
        0.0,
        0.0,
        0.0,
        0.0,
        zScale,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
      ];
      var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
      var _g1 = 0;
      var _g = a.length;
      while (_g1 < _g) {
        var i = _g1++;
        vector.set(i, a[i]);
      }
      this.prepend(new openfl_geom_Matrix3D(vector));
    },
    prependTranslation: function (x, y, z) {
      var m = new openfl_geom_Matrix3D();
      m.set_position(new openfl_geom_Vector3D(x, y, z));
      this.prepend(m);
    },
    recompose: function (components, orientationStyle) {
      if (
        components.get_length() < 3 ||
        components.get(2).x == 0 ||
        components.get(2).y == 0 ||
        components.get(2).z == 0
      ) {
        return false;
      }
      if (orientationStyle == null) {
        orientationStyle = 1;
      }
      this.identity();
      var scale = [];
      scale[0] = scale[1] = scale[2] = components.get(2).x;
      scale[4] = scale[5] = scale[6] = components.get(2).y;
      scale[8] = scale[9] = scale[10] = components.get(2).z;
      if (orientationStyle == null) {
        var x = components.get(1).x;
        var y = components.get(1).y;
        var z = components.get(1).z;
        var w = components.get(1).w;
        if (orientationStyle == 0) {
          x *= Math.sin(w / 2);
          y *= Math.sin(w / 2);
          z *= Math.sin(w / 2);
          w = Math.cos(w / 2);
        }
        this.rawData.set(0, (1 - 2 * y * y - 2 * z * z) * scale[0]);
        this.rawData.set(1, (2 * x * y + 2 * w * z) * scale[1]);
        this.rawData.set(2, (2 * x * z - 2 * w * y) * scale[2]);
        this.rawData.set(3, 0);
        this.rawData.set(4, (2 * x * y - 2 * w * z) * scale[4]);
        this.rawData.set(5, (1 - 2 * x * x - 2 * z * z) * scale[5]);
        this.rawData.set(6, (2 * y * z + 2 * w * x) * scale[6]);
        this.rawData.set(7, 0);
        this.rawData.set(8, (2 * x * z + 2 * w * y) * scale[8]);
        this.rawData.set(9, (2 * y * z - 2 * w * x) * scale[9]);
        this.rawData.set(10, (1 - 2 * x * x - 2 * y * y) * scale[10]);
        this.rawData.set(11, 0);
        this.rawData.set(12, components.get(0).x);
        this.rawData.set(13, components.get(0).y);
        this.rawData.set(14, components.get(0).z);
        this.rawData.set(15, 1);
      } else if (orientationStyle == 1) {
        var cx = Math.cos(components.get(1).x);
        var cy = Math.cos(components.get(1).y);
        var cz = Math.cos(components.get(1).z);
        var sx = Math.sin(components.get(1).x);
        var sy = Math.sin(components.get(1).y);
        var sz = Math.sin(components.get(1).z);
        this.rawData.set(0, cy * cz * scale[0]);
        this.rawData.set(1, cy * sz * scale[1]);
        this.rawData.set(2, -sy * scale[2]);
        this.rawData.set(3, 0);
        this.rawData.set(4, (sx * sy * cz - cx * sz) * scale[4]);
        this.rawData.set(5, (sx * sy * sz + cx * cz) * scale[5]);
        this.rawData.set(6, sx * cy * scale[6]);
        this.rawData.set(7, 0);
        this.rawData.set(8, (cx * sy * cz + sx * sz) * scale[8]);
        this.rawData.set(9, (cx * sy * sz - sx * cz) * scale[9]);
        this.rawData.set(10, cx * cy * scale[10]);
        this.rawData.set(11, 0);
        this.rawData.set(12, components.get(0).x);
        this.rawData.set(13, components.get(0).y);
        this.rawData.set(14, components.get(0).z);
        this.rawData.set(15, 1);
      } else {
        var x1 = components.get(1).x;
        var y1 = components.get(1).y;
        var z1 = components.get(1).z;
        var w1 = components.get(1).w;
        if (orientationStyle == 0) {
          x1 *= Math.sin(w1 / 2);
          y1 *= Math.sin(w1 / 2);
          z1 *= Math.sin(w1 / 2);
          w1 = Math.cos(w1 / 2);
        }
        this.rawData.set(0, (1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
        this.rawData.set(1, (2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
        this.rawData.set(2, (2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
        this.rawData.set(3, 0);
        this.rawData.set(4, (2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
        this.rawData.set(5, (1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
        this.rawData.set(6, (2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
        this.rawData.set(7, 0);
        this.rawData.set(8, (2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
        this.rawData.set(9, (2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
        this.rawData.set(10, (1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
        this.rawData.set(11, 0);
        this.rawData.set(12, components.get(0).x);
        this.rawData.set(13, components.get(0).y);
        this.rawData.set(14, components.get(0).z);
        this.rawData.set(15, 1);
      }
      if (components.get(2).x == 0) {
        this.rawData.set(0, 1e-15);
      }
      if (components.get(2).y == 0) {
        this.rawData.set(5, 1e-15);
      }
      if (components.get(2).z == 0) {
        this.rawData.set(10, 1e-15);
      }
      return !(
        components.get(2).x == 0 ||
        components.get(2).y == 0 ||
        components.get(2).y == 0
      );
    },
    transformVector: function (v) {
      var x = v.x;
      var y = v.y;
      var z = v.z;
      return new openfl_geom_Vector3D(
        x * this.rawData.get(0) +
          y * this.rawData.get(4) +
          z * this.rawData.get(8) +
          this.rawData.get(12),
        x * this.rawData.get(1) +
          y * this.rawData.get(5) +
          z * this.rawData.get(9) +
          this.rawData.get(13),
        x * this.rawData.get(2) +
          y * this.rawData.get(6) +
          z * this.rawData.get(10) +
          this.rawData.get(14),
        x * this.rawData.get(3) +
          y * this.rawData.get(7) +
          z * this.rawData.get(11) +
          this.rawData.get(15)
      );
    },
    transformVectors: function (vin, vout) {
      var i = 0;
      var x;
      var y;
      var z;
      while (i + 3 <= vin.get_length()) {
        x = vin.get(i);
        y = vin.get(i + 1);
        z = vin.get(i + 2);
        vout.set(
          i,
          x * this.rawData.get(0) +
            y * this.rawData.get(4) +
            z * this.rawData.get(8) +
            this.rawData.get(12)
        );
        vout.set(
          i + 1,
          x * this.rawData.get(1) +
            y * this.rawData.get(5) +
            z * this.rawData.get(9) +
            this.rawData.get(13)
        );
        vout.set(
          i + 2,
          x * this.rawData.get(2) +
            y * this.rawData.get(6) +
            z * this.rawData.get(10) +
            this.rawData.get(14)
        );
        i += 3;
      }
    },
    transpose: function () {
      var oRawData = this.rawData.copy();
      this.rawData.set(1, oRawData.get(4));
      this.rawData.set(2, oRawData.get(8));
      this.rawData.set(3, oRawData.get(12));
      this.rawData.set(4, oRawData.get(1));
      this.rawData.set(6, oRawData.get(9));
      this.rawData.set(7, oRawData.get(13));
      this.rawData.set(8, oRawData.get(2));
      this.rawData.set(9, oRawData.get(6));
      this.rawData.set(11, oRawData.get(14));
      this.rawData.set(12, oRawData.get(3));
      this.rawData.set(13, oRawData.get(7));
      this.rawData.set(14, oRawData.get(11));
    },
    get_determinant: function () {
      return (
        (this.rawData.get(0) * this.rawData.get(5) -
          this.rawData.get(4) * this.rawData.get(1)) *
          (this.rawData.get(10) * this.rawData.get(15) -
            this.rawData.get(14) * this.rawData.get(11)) -
        (this.rawData.get(0) * this.rawData.get(9) -
          this.rawData.get(8) * this.rawData.get(1)) *
          (this.rawData.get(6) * this.rawData.get(15) -
            this.rawData.get(14) * this.rawData.get(7)) +
        (this.rawData.get(0) * this.rawData.get(13) -
          this.rawData.get(12) * this.rawData.get(1)) *
          (this.rawData.get(6) * this.rawData.get(11) -
            this.rawData.get(10) * this.rawData.get(7)) +
        (this.rawData.get(4) * this.rawData.get(9) -
          this.rawData.get(8) * this.rawData.get(5)) *
          (this.rawData.get(2) * this.rawData.get(15) -
            this.rawData.get(14) * this.rawData.get(3)) -
        (this.rawData.get(4) * this.rawData.get(13) -
          this.rawData.get(12) * this.rawData.get(5)) *
          (this.rawData.get(2) * this.rawData.get(11) -
            this.rawData.get(10) * this.rawData.get(3)) +
        (this.rawData.get(8) * this.rawData.get(13) -
          this.rawData.get(12) * this.rawData.get(9)) *
          (this.rawData.get(2) * this.rawData.get(7) -
            this.rawData.get(6) * this.rawData.get(3))
      );
    },
    get_position: function () {
      return new openfl_geom_Vector3D(
        this.rawData.get(12),
        this.rawData.get(13),
        this.rawData.get(14)
      );
    },
    set_position: function (val) {
      this.rawData.set(12, val.x);
      this.rawData.set(13, val.y);
      this.rawData.set(14, val.z);
      return val;
    },
    __class__: openfl_geom_Matrix3D,
    __properties__: {
      set_position: "set_position",
      get_position: "get_position",
      get_determinant: "get_determinant",
    },
  };
  var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
  $hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] =
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = [
    "openfl",
    "geom",
    "_Orientation3D",
    "Orientation3D_Impl_",
  ];
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "axisAngle":
        return 0;
      case "eulerAngles":
        return 1;
      case "quaternion":
        return 2;
      default:
        return null;
    }
  };
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "axisAngle";
      case 1:
        return "eulerAngles";
      case 2:
        return "quaternion";
      default:
        return null;
    }
  };
  var openfl_geom_Transform = function (displayObject) {
    this.__colorTransform = new openfl_geom_ColorTransform();
    this.concatenatedColorTransform = new openfl_geom_ColorTransform();
    this.pixelBounds = new openfl_geom_Rectangle();
    this.__displayObject = displayObject;
    this.__hasMatrix = true;
  };
  $hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
  openfl_geom_Transform.__name__ = ["openfl", "geom", "Transform"];
  openfl_geom_Transform.prototype = {
    concatenatedColorTransform: null,
    pixelBounds: null,
    __colorTransform: null,
    __displayObject: null,
    __hasMatrix: null,
    __hasMatrix3D: null,
    get_colorTransform: function () {
      return this.__colorTransform;
    },
    set_colorTransform: function (value) {
      if (!this.__colorTransform.__equals(value)) {
        this.__colorTransform = value;
        if (value != null) {
          this.__displayObject.set_alpha(value.alphaMultiplier);
        }
        var _this = this.__displayObject;
        if (!_this.__renderDirty) {
          _this.__renderDirty = true;
          openfl_display_DisplayObject.__worldRenderDirty++;
        }
      }
      return this.__colorTransform;
    },
    get_concatenatedMatrix: function () {
      if (this.__hasMatrix) {
        return this.__displayObject.__getWorldTransform().clone();
      }
      return null;
    },
    get_matrix: function () {
      if (this.__hasMatrix) {
        return this.__displayObject.__transform.clone();
      }
      return null;
    },
    set_matrix: function (value) {
      if (value == null) {
        this.__hasMatrix = false;
        return null;
      }
      this.__hasMatrix = true;
      this.__hasMatrix3D = false;
      if (this.__displayObject != null) {
        this.__setTransform(
          value.a,
          value.b,
          value.c,
          value.d,
          value.tx,
          value.ty
        );
      }
      return value;
    },
    get_matrix3D: function () {
      if (this.__hasMatrix3D) {
        var matrix = this.__displayObject.__transform;
        var a = [
          matrix.a,
          matrix.b,
          0.0,
          0.0,
          matrix.c,
          matrix.d,
          0.0,
          0.0,
          0.0,
          0.0,
          1.0,
          0.0,
          matrix.tx,
          matrix.ty,
          0.0,
          1.0,
        ];
        var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
        var _g1 = 0;
        var _g = a.length;
        while (_g1 < _g) {
          var i = _g1++;
          vector.set(i, a[i]);
        }
        return new openfl_geom_Matrix3D(vector);
      }
      return null;
    },
    set_matrix3D: function (value) {
      if (value == null) {
        this.__hasMatrix3D = false;
        return null;
      }
      this.__hasMatrix = false;
      this.__hasMatrix3D = true;
      this.__setTransform(
        value.rawData.get(0),
        value.rawData.get(1),
        value.rawData.get(5),
        value.rawData.get(6),
        value.rawData.get(12),
        value.rawData.get(13)
      );
      return value;
    },
    __setTransform: function (a, b, c, d, tx, ty) {
      if (this.__displayObject != null) {
        var scaleX = 0.0;
        var scaleY = 0.0;
        if (b == 0) {
          scaleX = a;
        } else {
          scaleX = Math.sqrt(a * a + b * b);
        }
        if (c == 0) {
          scaleY = a;
        } else {
          scaleY = Math.sqrt(c * c + d * d);
        }
        this.__displayObject.__scaleX = scaleX;
        this.__displayObject.__scaleY = scaleY;
        var rotation = (180 / Math.PI) * Math.atan2(d, c) - 90;
        if (rotation != this.__displayObject.__rotation) {
          this.__displayObject.__rotation = rotation;
          var radians = rotation * (Math.PI / 180);
          this.__displayObject.__rotationSine = Math.sin(radians);
          this.__displayObject.__rotationCosine = Math.cos(radians);
        }
        this.__displayObject.__transform.a = a;
        this.__displayObject.__transform.b = b;
        this.__displayObject.__transform.c = c;
        this.__displayObject.__transform.d = d;
        this.__displayObject.__transform.tx = tx;
        this.__displayObject.__transform.ty = ty;
        var _this = this.__displayObject;
        if (!_this.__transformDirty) {
          _this.__transformDirty = true;
          openfl_display_DisplayObject.__worldTransformDirty++;
        }
      }
    },
    __class__: openfl_geom_Transform,
    __properties__: {
      set_matrix3D: "set_matrix3D",
      get_matrix3D: "get_matrix3D",
      set_matrix: "set_matrix",
      get_matrix: "get_matrix",
      get_concatenatedMatrix: "get_concatenatedMatrix",
      set_colorTransform: "set_colorTransform",
      get_colorTransform: "get_colorTransform",
    },
  };
  var openfl_geom_Vector3D = function (x, y, z, w) {
    if (w == null) {
      w = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.w = w;
    this.x = x;
    this.y = y;
    this.z = z;
  };
  $hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
  openfl_geom_Vector3D.__name__ = ["openfl", "geom", "Vector3D"];
  openfl_geom_Vector3D.__properties__ = {
    get_Z_AXIS: "get_Z_AXIS",
    get_Y_AXIS: "get_Y_AXIS",
    get_X_AXIS: "get_X_AXIS",
  };
  openfl_geom_Vector3D.angleBetween = function (a, b) {
    var la = a.get_length();
    var lb = b.get_length();
    var dot = a.dotProduct(b);
    if (la != 0) {
      dot /= la;
    }
    if (lb != 0) {
      dot /= lb;
    }
    return Math.acos(dot);
  };
  openfl_geom_Vector3D.distance = function (pt1, pt2) {
    var x = pt2.x - pt1.x;
    var y = pt2.y - pt1.y;
    var z = pt2.z - pt1.z;
    return Math.sqrt(x * x + y * y + z * z);
  };
  openfl_geom_Vector3D.get_X_AXIS = function () {
    return new openfl_geom_Vector3D(1, 0, 0);
  };
  openfl_geom_Vector3D.get_Y_AXIS = function () {
    return new openfl_geom_Vector3D(0, 1, 0);
  };
  openfl_geom_Vector3D.get_Z_AXIS = function () {
    return new openfl_geom_Vector3D(0, 0, 1);
  };
  openfl_geom_Vector3D.prototype = {
    w: null,
    x: null,
    y: null,
    z: null,
    add: function (a) {
      return new openfl_geom_Vector3D(this.x + a.x, this.y + a.y, this.z + a.z);
    },
    clone: function () {
      return new openfl_geom_Vector3D(this.x, this.y, this.z, this.w);
    },
    copyFrom: function (sourceVector3D) {
      this.x = sourceVector3D.x;
      this.y = sourceVector3D.y;
      this.z = sourceVector3D.z;
    },
    crossProduct: function (a) {
      return new openfl_geom_Vector3D(
        this.y * a.z - this.z * a.y,
        this.z * a.x - this.x * a.z,
        this.x * a.y - this.y * a.x,
        1
      );
    },
    decrementBy: function (a) {
      this.x -= a.x;
      this.y -= a.y;
      this.z -= a.z;
    },
    dotProduct: function (a) {
      return this.x * a.x + this.y * a.y + this.z * a.z;
    },
    equals: function (toCompare, allFour) {
      if (allFour == null) {
        allFour = false;
      }
      if (
        this.x == toCompare.x &&
        this.y == toCompare.y &&
        this.z == toCompare.z
      ) {
        if (!!allFour) {
          return this.w == toCompare.w;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    incrementBy: function (a) {
      this.x += a.x;
      this.y += a.y;
      this.z += a.z;
    },
    nearEquals: function (toCompare, tolerance, allFour) {
      if (allFour == null) {
        allFour = false;
      }
      if (
        Math.abs(this.x - toCompare.x) < tolerance &&
        Math.abs(this.y - toCompare.y) < tolerance &&
        Math.abs(this.z - toCompare.z) < tolerance
      ) {
        if (!!allFour) {
          return Math.abs(this.w - toCompare.w) < tolerance;
        } else {
          return true;
        }
      } else {
        return false;
      }
    },
    negate: function () {
      this.x *= -1;
      this.y *= -1;
      this.z *= -1;
    },
    normalize: function () {
      var l = this.get_length();
      if (l != 0) {
        this.x /= l;
        this.y /= l;
        this.z /= l;
      }
      return l;
    },
    project: function () {
      this.x /= this.w;
      this.y /= this.w;
      this.z /= this.w;
    },
    scaleBy: function (s) {
      this.x *= s;
      this.y *= s;
      this.z *= s;
    },
    setTo: function (xa, ya, za) {
      this.x = xa;
      this.y = ya;
      this.z = za;
    },
    subtract: function (a) {
      return new openfl_geom_Vector3D(this.x - a.x, this.y - a.y, this.z - a.z);
    },
    toString: function () {
      return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
    },
    get_length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    get_lengthSquared: function () {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    __class__: openfl_geom_Vector3D,
    __properties__: {
      get_lengthSquared: "get_lengthSquared",
      get_length: "get_length",
    },
  };
  var openfl_media_ID3Info = function () {};
  $hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
  openfl_media_ID3Info.__name__ = ["openfl", "media", "ID3Info"];
  openfl_media_ID3Info.prototype = {
    album: null,
    artist: null,
    comment: null,
    genre: null,
    songName: null,
    track: null,
    year: null,
    __class__: openfl_media_ID3Info,
  };
  var openfl_media_Sound = function (stream, context) {
    openfl_events_EventDispatcher.call(this, this);
    this.bytesLoaded = 0;
    this.bytesTotal = 0;
    this.isBuffering = false;
    this.url = null;
    if (stream != null) {
      this.load(stream, context);
    }
  };
  $hxClasses["openfl.media.Sound"] = openfl_media_Sound;
  openfl_media_Sound.__name__ = ["openfl", "media", "Sound"];
  openfl_media_Sound.fromAudioBuffer = function (buffer) {
    var sound = new openfl_media_Sound();
    sound.__buffer = buffer;
    return sound;
  };
  openfl_media_Sound.fromFile = function (path) {
    return openfl_media_Sound.fromAudioBuffer(
      lime_media_AudioBuffer.fromFile(path)
    );
  };
  openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
  openfl_media_Sound.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      bytesLoaded: null,
      bytesTotal: null,
      isBuffering: null,
      url: null,
      __buffer: null,
      close: function () {
        if (this.__buffer != null) {
          this.__buffer.dispose();
        }
      },
      load: function (stream, context) {
        var _gthis = this;
        this.url = stream.url;
        var defaultLibrary = lime_utils_Assets.getLibrary("default");
        var tmp;
        if (defaultLibrary != null) {
          var key = this.url;
          var _this = defaultLibrary.cachedAudioBuffers;
          if (__map_reserved[key] != null) {
            tmp = _this.existsReserved(key);
          } else {
            tmp = _this.h.hasOwnProperty(key);
          }
        } else {
          tmp = false;
        }
        if (tmp) {
          var key1 = this.url;
          var _this1 = defaultLibrary.cachedAudioBuffers;
          this.AudioBuffer_onURLLoad(
            __map_reserved[key1] != null
              ? _this1.getReserved(key1)
              : _this1.h[key1]
          );
        } else {
          lime_media_AudioBuffer
            .loadFromFile(this.url)
            .onComplete($bind(this, this.AudioBuffer_onURLLoad))
            .onError(function (_) {
              _gthis.AudioBuffer_onURLLoad(null);
            });
        }
      },
      loadCompressedDataFromByteArray: function (
        bytes,
        bytesLength,
        forcePlayAsMusic
      ) {
        if (forcePlayAsMusic == null) {
          forcePlayAsMusic = false;
        }
        if (bytes == null || bytesLength <= 0) {
          this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
          return;
        }
        if (
          openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) >
          bytesLength
        ) {
          var this1 = new openfl_utils_ByteArrayData(bytesLength);
          var copy = this1;
          copy.writeBytes(bytes, 0, bytesLength);
          bytes = copy;
        }
        this.__buffer = lime_media_AudioBuffer.fromBytes(
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)
        );
        if (this.__buffer == null) {
          this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
        } else {
          this.dispatchEvent(new openfl_events_Event("complete"));
        }
      },
      loadPCMFromByteArray: function (
        bytes,
        samples,
        format,
        stereo,
        sampleRate
      ) {
        if (sampleRate == null) {
          sampleRate = 44100;
        }
        if (stereo == null) {
          stereo = true;
        }
        if (format == null) {
          format = "float";
        }
        if (bytes == null) {
          this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
          return;
        }
        var audioBuffer = new lime_media_AudioBuffer();
        audioBuffer.bitsPerSample = format == "float" ? 16 : 8;
        audioBuffer.channels = stereo ? 2 : 1;
        var buffer =
          openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(bytes);
        var this1;
        if (buffer != null) {
          this1 = new Uint8Array(buffer, 0);
        } else {
          this1 = null;
        }
        audioBuffer.data = this1;
        audioBuffer.sampleRate = sampleRate | 0;
        this.__buffer = audioBuffer;
        this.dispatchEvent(new openfl_events_Event("complete"));
      },
      play: function (startTime, loops, sndTransform) {
        if (loops == null) {
          loops = 0;
        }
        if (startTime == null) {
          startTime = 0.0;
        }
        if (openfl_media_SoundMixer.__soundChannels.length >= 32) {
          return null;
        }
        if (sndTransform == null) {
          sndTransform = new openfl_media_SoundTransform();
        } else {
          sndTransform = sndTransform.clone();
        }
        var pan =
          openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
        if (pan > 1) {
          pan = 1;
        }
        if (pan < -1) {
          pan = -1;
        }
        var volume =
          openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
        var source = new lime_media_AudioSource(this.__buffer);
        source.offset = startTime | 0;
        if (loops > 1) {
          source.set_loops(loops - 1);
        }
        source.set_gain(volume);
        var position = source.get_position();
        position.x = pan;
        position.z = -1 * Math.sqrt(1 - Math.pow(pan, 2));
        source.set_position(position);
        return new openfl_media_SoundChannel(source, sndTransform);
      },
      get_id3: function () {
        return new openfl_media_ID3Info();
      },
      get_length: function () {
        if (this.__buffer != null) {
          return (this.__buffer.get_src().duration() * 1000) | 0;
        }
        return 0;
      },
      AudioBuffer_onURLLoad: function (buffer) {
        if (buffer == null) {
          this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
        } else {
          this.__buffer = buffer;
          this.dispatchEvent(new openfl_events_Event("complete"));
        }
      },
      __class__: openfl_media_Sound,
      __properties__: { get_length: "get_length", get_id3: "get_id3" },
    }
  );
  var openfl_media_SoundChannel = function (source, soundTransform) {
    openfl_events_EventDispatcher.call(this, this);
    this.leftPeak = 1;
    this.rightPeak = 1;
    if (soundTransform != null) {
      this.__soundTransform = soundTransform;
    } else {
      this.__soundTransform = new openfl_media_SoundTransform();
    }
    if (source != null) {
      this.__source = source;
      this.__source.onComplete.add($bind(this, this.source_onComplete));
      this.__isValid = true;
      this.__source.play();
    }
    openfl_media_SoundMixer.__registerSoundChannel(this);
  };
  $hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
  openfl_media_SoundChannel.__name__ = ["openfl", "media", "SoundChannel"];
  openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
  openfl_media_SoundChannel.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      leftPeak: null,
      rightPeak: null,
      __isValid: null,
      __soundTransform: null,
      __source: null,
      stop: function () {
        openfl_media_SoundMixer.__unregisterSoundChannel(this);
        if (!this.__isValid) {
          return;
        }
        this.__source.stop();
        this.__dispose();
      },
      __dispose: function () {
        if (!this.__isValid) {
          return;
        }
        this.__source.onComplete.remove($bind(this, this.source_onComplete));
        this.__source.dispose();
        this.__isValid = false;
      },
      __updateTransform: function () {
        this.set_soundTransform(this.get_soundTransform());
      },
      get_position: function () {
        if (!this.__isValid) {
          return 0;
        }
        return this.__source.get_currentTime() + this.__source.offset;
      },
      set_position: function (value) {
        if (!this.__isValid) {
          return 0;
        }
        this.__source.set_currentTime((value | 0) - this.__source.offset);
        return value;
      },
      get_soundTransform: function () {
        return this.__soundTransform.clone();
      },
      set_soundTransform: function (value) {
        if (value != null) {
          this.__soundTransform.pan = value.pan;
          this.__soundTransform.volume = value.volume;
          var pan =
            openfl_media_SoundMixer.__soundTransform.pan +
            this.__soundTransform.pan;
          if (pan < -1) {
            pan = -1;
          }
          if (pan > 1) {
            pan = 1;
          }
          var volume =
            openfl_media_SoundMixer.__soundTransform.volume *
            this.__soundTransform.volume;
          if (this.__isValid) {
            this.__source.set_gain(volume);
            var position = this.__source.get_position();
            position.x = pan;
            position.z = -1 * Math.sqrt(1 - Math.pow(pan, 2));
            this.__source.set_position(position);
            return value;
          }
        }
        return value;
      },
      source_onComplete: function () {
        openfl_media_SoundMixer.__unregisterSoundChannel(this);
        this.__dispose();
        this.dispatchEvent(new openfl_events_Event("soundComplete"));
      },
      __class__: openfl_media_SoundChannel,
      __properties__: {
        set_soundTransform: "set_soundTransform",
        get_soundTransform: "get_soundTransform",
        set_position: "set_position",
        get_position: "get_position",
      },
    }
  );
  var openfl_media_SoundLoaderContext = function (bufferTime, checkPolicyFile) {
    if (checkPolicyFile == null) {
      checkPolicyFile = false;
    }
    if (bufferTime == null) {
      bufferTime = 1000;
    }
    this.bufferTime = bufferTime;
    this.checkPolicyFile = checkPolicyFile;
  };
  $hxClasses["openfl.media.SoundLoaderContext"] =
    openfl_media_SoundLoaderContext;
  openfl_media_SoundLoaderContext.__name__ = [
    "openfl",
    "media",
    "SoundLoaderContext",
  ];
  openfl_media_SoundLoaderContext.prototype = {
    bufferTime: null,
    checkPolicyFile: null,
    __class__: openfl_media_SoundLoaderContext,
  };
  var openfl_media_SoundTransform = function (vol, panning) {
    if (panning == null) {
      panning = 0;
    }
    if (vol == null) {
      vol = 1;
    }
    this.volume = vol;
    this.pan = panning;
    this.leftToLeft = 0;
    this.leftToRight = 0;
    this.rightToLeft = 0;
    this.rightToRight = 0;
  };
  $hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
  openfl_media_SoundTransform.__name__ = ["openfl", "media", "SoundTransform"];
  openfl_media_SoundTransform.prototype = {
    leftToLeft: null,
    leftToRight: null,
    pan: null,
    rightToLeft: null,
    rightToRight: null,
    volume: null,
    clone: function () {
      return new openfl_media_SoundTransform(this.volume, this.pan);
    },
    __class__: openfl_media_SoundTransform,
  };
  var openfl_media_SoundMixer = function () {};
  $hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
  openfl_media_SoundMixer.__name__ = ["openfl", "media", "SoundMixer"];
  openfl_media_SoundMixer.__properties__ = {
    set_soundTransform: "set_soundTransform",
    get_soundTransform: "get_soundTransform",
  };
  openfl_media_SoundMixer.areSoundsInaccessible = function () {
    return false;
  };
  openfl_media_SoundMixer.stopAll = function () {
    var _g = 0;
    var _g1 = openfl_media_SoundMixer.__soundChannels;
    while (_g < _g1.length) {
      var channel = _g1[_g];
      ++_g;
      channel.stop();
    }
  };
  openfl_media_SoundMixer.__registerSoundChannel = function (soundChannel) {
    openfl_media_SoundMixer.__soundChannels.push(soundChannel);
  };
  openfl_media_SoundMixer.__unregisterSoundChannel = function (soundChannel) {
    HxOverrides.remove(openfl_media_SoundMixer.__soundChannels, soundChannel);
  };
  openfl_media_SoundMixer.get_soundTransform = function () {
    return openfl_media_SoundMixer.__soundTransform;
  };
  openfl_media_SoundMixer.set_soundTransform = function (value) {
    openfl_media_SoundMixer.__soundTransform = value.clone();
    var _g = 0;
    var _g1 = openfl_media_SoundMixer.__soundChannels;
    while (_g < _g1.length) {
      var channel = _g1[_g];
      ++_g;
      channel.__updateTransform();
    }
    return value;
  };
  var openfl_net_NetConnection = function () {
    openfl_events_EventDispatcher.call(this);
  };
  $hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
  openfl_net_NetConnection.__name__ = ["openfl", "net", "NetConnection"];
  openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
  openfl_net_NetConnection.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      connect: function (command, _, _1, _2, _3, _4) {
        if (command != null) {
          throw new js__$Boot_HaxeError(
            'Error: Can only connect in "HTTP streaming" mode'
          );
        }
        this.dispatchEvent(
          new openfl_events_NetStatusEvent("netStatus", false, true, {
            code: "connectSuccess",
          })
        );
      },
      __class__: openfl_net_NetConnection,
    }
  );
  var openfl_net_NetStream = function (connection, peerID) {
    openfl_events_EventDispatcher.call(this);
    this.__connection = connection;
    this.__video = window.document.createElement("video");
    this.__video.addEventListener(
      "error",
      $bind(this, this.video_onError),
      false
    );
    this.__video.addEventListener(
      "waiting",
      $bind(this, this.video_onWaiting),
      false
    );
    this.__video.addEventListener(
      "ended",
      $bind(this, this.video_onEnd),
      false
    );
    this.__video.addEventListener(
      "pause",
      $bind(this, this.video_onPause),
      false
    );
    this.__video.addEventListener(
      "seeking",
      $bind(this, this.video_onSeeking),
      false
    );
    this.__video.addEventListener(
      "playing",
      $bind(this, this.video_onPlaying),
      false
    );
    this.__video.addEventListener(
      "timeupdate",
      $bind(this, this.video_onTimeUpdate),
      false
    );
    this.__video.addEventListener(
      "loadstart",
      $bind(this, this.video_onLoadStart),
      false
    );
    this.__video.addEventListener(
      "stalled",
      $bind(this, this.video_onStalled),
      false
    );
    this.__video.addEventListener(
      "durationchanged",
      $bind(this, this.video_onDurationChanged),
      false
    );
    this.__video.addEventListener(
      "canplay",
      $bind(this, this.video_onCanPlay),
      false
    );
    this.__video.addEventListener(
      "canplaythrough",
      $bind(this, this.video_onCanPlayThrough),
      false
    );
    this.__video.addEventListener(
      "loadedmetadata",
      $bind(this, this.video_onLoadMetaData),
      false
    );
  };
  $hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
  openfl_net_NetStream.__name__ = ["openfl", "net", "NetStream"];
  openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
  openfl_net_NetStream.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      audioCodec: null,
      bufferLength: null,
      bufferTime: null,
      bytesLoaded: null,
      bytesTotal: null,
      checkPolicyFile: null,
      client: null,
      currentFPS: null,
      decodedFrames: null,
      liveDelay: null,
      objectEncoding: null,
      soundTransform: null,
      time: null,
      videoCode: null,
      __connection: null,
      __timer: null,
      __video: null,
      close: function () {
        this.__video.pause();
        this.__video.src = "";
        this.time = 0;
      },
      pause: function () {
        this.__video.pause();
      },
      play: function (url, _, _1, _2, _3, _4) {
        this.__video.src = url;
        this.__video.play();
      },
      requestVideoStatus: function () {
        var _gthis = this;
        if (this.__timer == null) {
          this.__timer = new haxe_Timer(1);
        }
        this.__timer.run = function () {
          if (_gthis.__video.paused) {
            _gthis.__playStatus("NetStream.Play.pause");
          } else {
            _gthis.__playStatus("NetStream.Play.playing");
          }
          _gthis.__timer.stop();
        };
      },
      resume: function () {
        this.__video.play();
      },
      seek: function (time) {
        if (time < 0) {
          time = 0;
        } else if (time > this.__video.duration) {
          time = this.__video.duration;
        }
        this.__video.currentTime = time;
      },
      togglePause: function () {
        if (this.__video.paused) {
          this.__video.play();
        } else {
          this.__video.pause();
        }
      },
      __playStatus: function (code) {
        if (this.client != null) {
          try {
            var handler = this.client.onPlayStatus;
            handler({
              code: code,
              duration: this.__video.duration,
              position: this.__video.currentTime,
              speed: this.__video.playbackRate,
              start: this.__video.startTime,
            });
          } catch (e) {
            haxe_CallStack.lastException = e;
          }
        }
      },
      video_onCanPlay: function (event) {
        this.__playStatus("NetStream.Play.canplay");
      },
      video_onCanPlayThrough: function (event) {
        this.__playStatus("NetStream.Play.canplaythrough");
      },
      video_onDurationChanged: function (event) {
        this.__playStatus("NetStream.Play.durationchanged");
      },
      video_onEnd: function (event) {
        this.__connection.dispatchEvent(
          new openfl_events_NetStatusEvent("netStatus", false, false, {
            code: "NetStream.Play.Stop",
          })
        );
        this.__playStatus("NetStream.Play.Complete");
      },
      video_onError: function (event) {
        this.__connection.dispatchEvent(
          new openfl_events_NetStatusEvent("netStatus", false, false, {
            code: "NetStream.Play.Stop",
          })
        );
        this.__playStatus("NetStream.Play.error");
      },
      video_onLoadMetaData: function (event) {
        if (this.client != null) {
          try {
            var handler = this.client.onMetaData;
            handler({
              width: this.__video.videoWidth,
              height: this.__video.videoHeight,
              duration: this.__video.duration,
            });
          } catch (e) {
            haxe_CallStack.lastException = e;
          }
        }
      },
      video_onLoadStart: function (event) {
        this.__playStatus("NetStream.Play.loadstart");
      },
      video_onPause: function (event) {
        this.__playStatus("NetStream.Play.pause");
      },
      video_onPlaying: function (event) {
        this.__connection.dispatchEvent(
          new openfl_events_NetStatusEvent("netStatus", false, false, {
            code: "NetStream.Play.Start",
          })
        );
        this.__playStatus("NetStream.Play.playing");
      },
      video_onSeeking: function (event) {
        this.__playStatus("NetStream.Play.seeking");
      },
      video_onStalled: function (event) {
        this.__playStatus("NetStream.Play.stalled");
      },
      video_onTimeUpdate: function (event) {
        this.time = this.__video.currentTime;
        this.__playStatus("NetStream.Play.timeupdate");
      },
      video_onWaiting: function (event) {
        this.__playStatus("NetStream.Play.waiting");
      },
      get_speed: function () {
        return this.__video.playbackRate;
      },
      set_speed: function (value) {
        return (this.__video.playbackRate = value);
      },
      __class__: openfl_net_NetStream,
      __properties__: { set_speed: "set_speed", get_speed: "get_speed" },
    }
  );
  var openfl_net_URLLoader = function (request) {
    openfl_events_EventDispatcher.call(this);
    this.bytesLoaded = 0;
    this.bytesTotal = 0;
    this.dataFormat = 1;
    if (request != null) {
      this.load(request);
    }
  };
  $hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
  openfl_net_URLLoader.__name__ = ["openfl", "net", "URLLoader"];
  openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
  openfl_net_URLLoader.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      bytesLoaded: null,
      bytesTotal: null,
      data: null,
      dataFormat: null,
      __httpRequest: null,
      close: function () {
        if (this.__httpRequest != null) {
          this.__httpRequest.cancel();
        }
      },
      load: function (request) {
        var _gthis = this;
        if (this.dataFormat == 0) {
          var httpRequest =
            new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
          this.__prepareRequest(httpRequest, request);
          httpRequest
            .load()
            .onProgress($bind(this, this.httpRequest_onProgress))
            .onError($bind(this, this.httpRequest_onError))
            .onComplete(function (data) {
              _gthis.data = data;
              var event = new openfl_events_Event("complete");
              _gthis.dispatchEvent(event);
            });
        } else {
          var httpRequest1 = new lime_net__$HTTPRequest_$String();
          this.__prepareRequest(httpRequest1, request);
          httpRequest1
            .load()
            .onProgress($bind(this, this.httpRequest_onProgress))
            .onError($bind(this, this.httpRequest_onError))
            .onComplete(function (data1) {
              _gthis.data = data1;
              var event1 = new openfl_events_Event("complete");
              _gthis.dispatchEvent(event1);
            });
        }
      },
      __prepareRequest: function (httpRequest, request) {
        this.__httpRequest = httpRequest;
        this.__httpRequest.uri = request.url;
        var _g = request.method;
        var tmp;
        switch (_g) {
          case "DELETE":
            tmp = "DELETE";
            break;
          case "HEAD":
            tmp = "HEAD";
            break;
          case "OPTIONS":
            tmp = "OPTIONS";
            break;
          case "POST":
            tmp = "POST";
            break;
          case "PUT":
            tmp = "PUT";
            break;
          default:
            tmp = "GET";
        }
        this.__httpRequest.method = tmp;
        if (request.data != null) {
          if (js_Boot.__instanceof(request.data, openfl_net_URLVariables)) {
            var fields = Reflect.fields(request.data);
            var _g1 = 0;
            while (_g1 < fields.length) {
              var field = fields[_g1];
              ++_g1;
              var _this = this.__httpRequest.formData;
              var value = Reflect.field(request.data, field);
              if (__map_reserved[field] != null) {
                _this.setReserved(field, value);
              } else {
                _this.h[field] = value;
              }
            }
          } else if (js_Boot.__instanceof(request.data, haxe_io_Bytes)) {
            this.__httpRequest.data = request.data;
          } else {
            this.__httpRequest.data = haxe_io_Bytes.ofString(
              Std.string(request.data)
            );
          }
        }
        this.__httpRequest.contentType = request.contentType;
        if (request.requestHeaders != null) {
          var _g11 = 0;
          var _g2 = request.requestHeaders;
          while (_g11 < _g2.length) {
            var header = _g2[_g11];
            ++_g11;
            this.__httpRequest.headers.push(
              new lime_net_HTTPRequestHeader(header.name, header.value)
            );
          }
        }
        this.__httpRequest.userAgent = request.userAgent;
      },
      httpRequest_onError: function (error) {
        if (error == 403) {
          var event = new openfl_events_SecurityErrorEvent("securityError");
          event.text = Std.string(error);
          this.dispatchEvent(event);
        } else {
          var event1 = new openfl_events_IOErrorEvent("ioError");
          event1.text = Std.string(error);
          this.dispatchEvent(event1);
        }
      },
      httpRequest_onProgress: function (bytesLoaded, bytesTotal) {
        var event = new openfl_events_ProgressEvent("progress");
        event.bytesLoaded = bytesLoaded;
        event.bytesTotal = bytesTotal;
        this.dispatchEvent(event);
      },
      __class__: openfl_net_URLLoader,
    }
  );
  var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
  $hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] =
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = [
    "openfl",
    "net",
    "_URLLoaderDataFormat",
    "URLLoaderDataFormat_Impl_",
  ];
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "binary":
          return 0;
        case "text":
          return 1;
        case "variables":
          return 2;
        default:
          return null;
      }
    };
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "binary";
        case 1:
          return "text";
        case 2:
          return "variables";
        default:
          return null;
      }
    };
  var openfl_net_URLRequest = function (url) {
    if (url != null) {
      this.url = url;
    }
    this.requestHeaders = [];
    this.method = "GET";
    this.contentType = null;
  };
  $hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
  openfl_net_URLRequest.__name__ = ["openfl", "net", "URLRequest"];
  openfl_net_URLRequest.prototype = {
    contentType: null,
    data: null,
    method: null,
    requestHeaders: null,
    url: null,
    userAgent: null,
    __class__: openfl_net_URLRequest,
  };
  var openfl_net_URLRequestHeader = function (name, value) {
    if (value == null) {
      value = "";
    }
    if (name == null) {
      name = "";
    }
    this.name = name;
    this.value = value;
  };
  $hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
  openfl_net_URLRequestHeader.__name__ = ["openfl", "net", "URLRequestHeader"];
  openfl_net_URLRequestHeader.prototype = {
    name: null,
    value: null,
    __class__: openfl_net_URLRequestHeader,
  };
  var openfl_net_URLVariables = function (source) {
    if (source != null) {
      this.decode(source);
    }
  };
  $hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
  openfl_net_URLVariables.__name__ = ["openfl", "net", "URLVariables"];
  openfl_net_URLVariables.prototype = {
    decode: function (source) {
      var fields = Reflect.fields(this);
      var _g = 0;
      while (_g < fields.length) {
        var f = fields[_g];
        ++_g;
        Reflect.deleteField(this, f);
      }
      var fields1 = source.split(";").join("&").split("&");
      var _g1 = 0;
      while (_g1 < fields1.length) {
        var f1 = fields1[_g1];
        ++_g1;
        var eq = f1.indexOf("=");
        if (eq > 0) {
          var s = HxOverrides.substr(f1, 0, eq);
          var field = decodeURIComponent(s.split("+").join(" "));
          var s1 = HxOverrides.substr(f1, eq + 1, null);
          this[field] = decodeURIComponent(s1.split("+").join(" "));
        } else if (eq != 0) {
          this[decodeURIComponent(f1.split("+").join(" "))] = "";
        }
      }
    },
    toString: function () {
      var result = [];
      var fields = Reflect.fields(this);
      var _g = 0;
      while (_g < fields.length) {
        var f = fields[_g];
        ++_g;
        var tmp = encodeURIComponent(f) + "=";
        var s = Reflect.field(this, f);
        result.push(tmp + encodeURIComponent(s));
      }
      return result.join("&");
    },
    __class__: openfl_net_URLVariables,
  };
  var openfl_system_ApplicationDomain = function (parentDomain) {
    if (parentDomain != null) {
      this.parentDomain = parentDomain;
    } else {
      this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
    }
  };
  $hxClasses["openfl.system.ApplicationDomain"] =
    openfl_system_ApplicationDomain;
  openfl_system_ApplicationDomain.__name__ = [
    "openfl",
    "system",
    "ApplicationDomain",
  ];
  openfl_system_ApplicationDomain.prototype = {
    parentDomain: null,
    getDefinition: function (name) {
      return Type.resolveClass(name);
    },
    hasDefinition: function (name) {
      return Type.resolveClass(name) != null;
    },
    __class__: openfl_system_ApplicationDomain,
  };
  var openfl_system_LoaderContext = function (
    checkPolicyFile,
    applicationDomain,
    securityDomain
  ) {
    if (checkPolicyFile == null) {
      checkPolicyFile = false;
    }
    this.checkPolicyFile = checkPolicyFile;
    this.securityDomain = securityDomain;
    this.applicationDomain = applicationDomain;
    this.allowCodeImport = true;
    this.allowLoadBytesCodeExecution = true;
  };
  $hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
  openfl_system_LoaderContext.__name__ = ["openfl", "system", "LoaderContext"];
  openfl_system_LoaderContext.prototype = {
    allowCodeImport: null,
    allowLoadBytesCodeExecution: null,
    applicationDomain: null,
    checkPolicyFile: null,
    securityDomain: null,
    __class__: openfl_system_LoaderContext,
  };
  var openfl_system_SecurityDomain = function () {};
  $hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
  openfl_system_SecurityDomain.__name__ = [
    "openfl",
    "system",
    "SecurityDomain",
  ];
  openfl_system_SecurityDomain.prototype = {
    __class__: openfl_system_SecurityDomain,
  };
  var openfl_system_System = function () {};
  $hxClasses["openfl.system.System"] = openfl_system_System;
  openfl_system_System.__name__ = ["openfl", "system", "System"];
  openfl_system_System.__properties__ = {
    get_vmVersion: "get_vmVersion",
    get_totalMemory: "get_totalMemory",
  };
  openfl_system_System.exit = function (code) {
    lime_system_System.exit(code);
  };
  openfl_system_System.gc = function () {};
  openfl_system_System.pause = function () {
    openfl_Lib.notImplemented({
      fileName: "System.hx",
      lineNumber: 40,
      className: "openfl.system.System",
      methodName: "pause",
    });
  };
  openfl_system_System.resume = function () {
    openfl_Lib.notImplemented({
      fileName: "System.hx",
      lineNumber: 47,
      className: "openfl.system.System",
      methodName: "resume",
    });
  };
  openfl_system_System.setClipboard = function (string) {
    lime_system_Clipboard.set_text(string);
  };
  openfl_system_System.get_totalMemory = function () {
    return window.performance && window.performance.memory
      ? window.performance.memory.usedJSHeapSize
      : 0;
  };
  openfl_system_System.get_vmVersion = function () {
    return "1.0.0";
  };
  var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
  $hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] =
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
  openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_AntiAliasType",
    "AntiAliasType_Impl_",
  ];
  openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "advanced":
        return 0;
      case "normal":
        return 1;
      default:
        return null;
    }
  };
  openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "advanced";
      case 1:
        return "normal";
      default:
        return null;
    }
  };
  var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
  $hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] =
    openfl_text__$FontStyle_FontStyle_$Impl_$;
  openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_FontStyle",
    "FontStyle_Impl_",
  ];
  openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function (value) {
    switch (value) {
      case "bold":
        return 0;
      case "boldItalic":
        return 1;
      case "italic":
        return 2;
      case "regular":
        return 3;
      default:
        return null;
    }
  };
  openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "bold";
      case 1:
        return "boldItalic";
      case 2:
        return "italic";
      case 3:
        return "regular";
      default:
        return null;
    }
  };
  var openfl_text__$FontType_FontType_$Impl_$ = {};
  $hxClasses["openfl.text._FontType.FontType_Impl_"] =
    openfl_text__$FontType_FontType_$Impl_$;
  openfl_text__$FontType_FontType_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_FontType",
    "FontType_Impl_",
  ];
  openfl_text__$FontType_FontType_$Impl_$.fromString = function (value) {
    switch (value) {
      case "device":
        return 0;
      case "embedded":
        return 1;
      case "embeddedCFF":
        return 2;
      default:
        return null;
    }
  };
  openfl_text__$FontType_FontType_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "device";
      case 1:
        return "embedded";
      case 2:
        return "embeddedCFF";
      default:
        return null;
    }
  };
  var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
  $hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] =
    openfl_text__$GridFitType_GridFitType_$Impl_$;
  openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_GridFitType",
    "GridFitType_Impl_",
  ];
  openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function (value) {
    switch (value) {
      case "none":
        return 0;
      case "pixel":
        return 1;
      case "subpixel":
        return 2;
      default:
        return null;
    }
  };
  openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "none";
      case 1:
        return "pixel";
      case 2:
        return "subpixel";
      default:
        return null;
    }
  };
  var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
  $hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] =
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_TextFieldAutoSize",
    "TextFieldAutoSize_Impl_",
  ];
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "center":
          return 0;
        case "left":
          return 1;
        case "none":
          return 2;
        case "right":
          return 3;
        default:
          return null;
      }
    };
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "center";
        case 1:
          return "left";
        case 2:
          return "none";
        case 3:
          return "right";
        default:
          return null;
      }
    };
  var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
  $hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] =
    openfl_text__$TextFieldType_TextFieldType_$Impl_$;
  openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_TextFieldType",
    "TextFieldType_Impl_",
  ];
  openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "dynamic":
        return 0;
      case "input":
        return 1;
      default:
        return null;
    }
  };
  openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "dynamic";
      case 1:
        return "input";
      default:
        return null;
    }
  };
  var openfl_text_TextFormat = function (
    font,
    size,
    color,
    bold,
    italic,
    underline,
    url,
    target,
    align,
    leftMargin,
    rightMargin,
    indent,
    leading
  ) {
    this.font = font;
    this.size = size;
    this.color = color;
    this.bold = bold;
    this.italic = italic;
    this.underline = underline;
    this.url = url;
    this.target = target;
    this.align = align;
    this.leftMargin = leftMargin;
    this.rightMargin = rightMargin;
    this.indent = indent;
    this.leading = leading;
  };
  $hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
  openfl_text_TextFormat.__name__ = ["openfl", "text", "TextFormat"];
  openfl_text_TextFormat.prototype = {
    align: null,
    blockIndent: null,
    bold: null,
    bullet: null,
    color: null,
    font: null,
    indent: null,
    italic: null,
    kerning: null,
    leading: null,
    leftMargin: null,
    letterSpacing: null,
    rightMargin: null,
    size: null,
    tabStops: null,
    target: null,
    underline: null,
    url: null,
    clone: function () {
      var newFormat = new openfl_text_TextFormat(
        this.font,
        this.size,
        this.color,
        this.bold,
        this.italic,
        this.underline,
        this.url,
        this.target
      );
      newFormat.align = this.align;
      newFormat.leftMargin = this.leftMargin;
      newFormat.rightMargin = this.rightMargin;
      newFormat.indent = this.indent;
      newFormat.leading = this.leading;
      newFormat.blockIndent = this.blockIndent;
      newFormat.bullet = this.bullet;
      newFormat.kerning = this.kerning;
      newFormat.letterSpacing = this.letterSpacing;
      newFormat.tabStops = this.tabStops;
      return newFormat;
    },
    __merge: function (format) {
      if (format.font != null) {
        this.font = format.font;
      }
      if (format.size != null) {
        this.size = format.size;
      }
      if (format.color != null) {
        this.color = format.color;
      }
      if (format.bold != null) {
        this.bold = format.bold;
      }
      if (format.italic != null) {
        this.italic = format.italic;
      }
      if (format.underline != null) {
        this.underline = format.underline;
      }
      if (format.url != null) {
        this.url = format.url;
      }
      if (format.target != null) {
        this.target = format.target;
      }
      if (format.align != null) {
        this.align = format.align;
      }
      if (format.leftMargin != null) {
        this.leftMargin = format.leftMargin;
      }
      if (format.rightMargin != null) {
        this.rightMargin = format.rightMargin;
      }
      if (format.indent != null) {
        this.indent = format.indent;
      }
      if (format.leading != null) {
        this.leading = format.leading;
      }
      if (format.blockIndent != null) {
        this.blockIndent = format.blockIndent;
      }
      if (format.bullet != null) {
        this.bullet = format.bullet;
      }
      if (format.kerning != null) {
        this.kerning = format.kerning;
      }
      if (format.letterSpacing != null) {
        this.letterSpacing = format.letterSpacing;
      }
      if (format.tabStops != null) {
        this.tabStops = format.tabStops;
      }
    },
    __class__: openfl_text_TextFormat,
  };
  var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
  $hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] =
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = [
    "openfl",
    "text",
    "_TextFormatAlign",
    "TextFormatAlign_Impl_",
  ];
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function (
    value
  ) {
    switch (value) {
      case "center":
        return 0;
      case "end":
        return 1;
      case "justify":
        return 2;
      case "left":
        return 3;
      case "right":
        return 4;
      case "start":
        return 5;
      default:
        return null;
    }
  };
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function (
    value
  ) {
    switch (value) {
      case 0:
        return "center";
      case 1:
        return "end";
      case 2:
        return "justify";
      case 3:
        return "left";
      case 4:
        return "right";
      case 5:
        return "start";
      default:
        return null;
    }
  };
  var openfl_text_TextLineMetrics = function (
    x,
    width,
    height,
    ascent,
    descent,
    leading
  ) {
    this.x = x;
    this.width = width;
    this.height = height;
    this.ascent = ascent;
    this.descent = descent;
    this.leading = leading;
  };
  $hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
  openfl_text_TextLineMetrics.__name__ = ["openfl", "text", "TextLineMetrics"];
  openfl_text_TextLineMetrics.prototype = {
    ascent: null,
    descent: null,
    height: null,
    leading: null,
    width: null,
    x: null,
    __class__: openfl_text_TextLineMetrics,
  };
  var openfl_ui_GameInput = function () {
    openfl_events_EventDispatcher.call(this);
    openfl_ui_GameInput.__instances.push(this);
  };
  $hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
  openfl_ui_GameInput.__name__ = ["openfl", "ui", "GameInput"];
  openfl_ui_GameInput.getDeviceAt = function (index) {
    if (index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
      return openfl_ui_GameInput.__deviceList[index];
    }
    return null;
  };
  openfl_ui_GameInput.__getDevice = function (gamepad) {
    if (gamepad == null) {
      return null;
    }
    if (openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
      var devices = lime_ui_Joystick.__getDeviceData();
      var device = devices[gamepad.id].id;
      var devices1 = lime_ui_Joystick.__getDeviceData();
      var device1 = new openfl_ui_GameInputDevice(
        device,
        devices1[gamepad.id].id
      );
      openfl_ui_GameInput.__deviceList.push(device1);
      openfl_ui_GameInput.__devices.set(gamepad, device1);
      openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
    }
    return openfl_ui_GameInput.__devices.h[gamepad.__id__];
  };
  openfl_ui_GameInput.__onGamepadAxisMove = function (gamepad, axis, value) {
    var device = openfl_ui_GameInput.__getDevice(gamepad);
    if (device == null) {
      return;
    }
    if (device.enabled) {
      if (!device.__axis.h.hasOwnProperty(axis)) {
        var control;
        switch (axis) {
          case 0:
            control = "LEFT_X";
            break;
          case 1:
            control = "LEFT_Y";
            break;
          case 2:
            control = "RIGHT_X";
            break;
          case 3:
            control = "RIGHT_Y";
            break;
          case 4:
            control = "TRIGGER_LEFT";
            break;
          case 5:
            control = "TRIGGER_RIGHT";
            break;
          default:
            control = "UNKNOWN (" + axis + ")";
        }
        var control1 = new openfl_ui_GameInputControl(
          device,
          "AXIS_" + control,
          -1,
          1
        );
        device.__axis.h[axis] = control1;
        device.__controls.push(control1);
      }
      var control2 = device.__axis.h[axis];
      control2.value = value;
      control2.dispatchEvent(new openfl_events_Event("change"));
    }
  };
  openfl_ui_GameInput.__onGamepadButtonDown = function (gamepad, button) {
    var device = openfl_ui_GameInput.__getDevice(gamepad);
    if (device == null) {
      return;
    }
    if (device.enabled) {
      if (!device.__button.h.hasOwnProperty(button)) {
        var control;
        switch (button) {
          case 0:
            control = "A";
            break;
          case 1:
            control = "B";
            break;
          case 2:
            control = "X";
            break;
          case 3:
            control = "Y";
            break;
          case 4:
            control = "BACK";
            break;
          case 5:
            control = "GUIDE";
            break;
          case 6:
            control = "START";
            break;
          case 7:
            control = "LEFT_STICK";
            break;
          case 8:
            control = "RIGHT_STICK";
            break;
          case 9:
            control = "LEFT_SHOULDER";
            break;
          case 10:
            control = "RIGHT_SHOULDER";
            break;
          case 11:
            control = "DPAD_UP";
            break;
          case 12:
            control = "DPAD_DOWN";
            break;
          case 13:
            control = "DPAD_LEFT";
            break;
          case 14:
            control = "DPAD_RIGHT";
            break;
          default:
            control = "UNKNOWN (" + button + ")";
        }
        var control1 = new openfl_ui_GameInputControl(
          device,
          "BUTTON_" + control,
          0,
          1
        );
        device.__button.h[button] = control1;
        device.__controls.push(control1);
      }
      var control2 = device.__button.h[button];
      control2.value = 1;
      control2.dispatchEvent(new openfl_events_Event("change"));
    }
  };
  openfl_ui_GameInput.__onGamepadButtonUp = function (gamepad, button) {
    var device = openfl_ui_GameInput.__getDevice(gamepad);
    if (device == null) {
      return;
    }
    if (device.enabled) {
      if (!device.__button.h.hasOwnProperty(button)) {
        var control;
        switch (button) {
          case 0:
            control = "A";
            break;
          case 1:
            control = "B";
            break;
          case 2:
            control = "X";
            break;
          case 3:
            control = "Y";
            break;
          case 4:
            control = "BACK";
            break;
          case 5:
            control = "GUIDE";
            break;
          case 6:
            control = "START";
            break;
          case 7:
            control = "LEFT_STICK";
            break;
          case 8:
            control = "RIGHT_STICK";
            break;
          case 9:
            control = "LEFT_SHOULDER";
            break;
          case 10:
            control = "RIGHT_SHOULDER";
            break;
          case 11:
            control = "DPAD_UP";
            break;
          case 12:
            control = "DPAD_DOWN";
            break;
          case 13:
            control = "DPAD_LEFT";
            break;
          case 14:
            control = "DPAD_RIGHT";
            break;
          default:
            control = "UNKNOWN (" + button + ")";
        }
        var control1 = new openfl_ui_GameInputControl(
          device,
          "BUTTON_" + control,
          0,
          1
        );
        device.__button.h[button] = control1;
        device.__controls.push(control1);
      }
      var control2 = device.__button.h[button];
      control2.value = 0;
      control2.dispatchEvent(new openfl_events_Event("change"));
    }
  };
  openfl_ui_GameInput.__onGamepadConnect = function (gamepad) {
    var device = openfl_ui_GameInput.__getDevice(gamepad);
    if (device == null) {
      return;
    }
    var _g = 0;
    var _g1 = openfl_ui_GameInput.__instances;
    while (_g < _g1.length) {
      var instance = _g1[_g];
      ++_g;
      instance.dispatchEvent(
        new openfl_events_GameInputEvent("deviceAdded", null, null, device)
      );
    }
  };
  openfl_ui_GameInput.__onGamepadDisconnect = function (gamepad) {
    var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
    if (device != null) {
      if (openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
        HxOverrides.remove(
          openfl_ui_GameInput.__deviceList,
          openfl_ui_GameInput.__devices.h[gamepad.__id__]
        );
        openfl_ui_GameInput.__devices.remove(gamepad);
      }
      openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
      var _g = 0;
      var _g1 = openfl_ui_GameInput.__instances;
      while (_g < _g1.length) {
        var instance = _g1[_g];
        ++_g;
        instance.dispatchEvent(
          new openfl_events_GameInputEvent("deviceRemoved", null, null, device)
        );
      }
    }
  };
  openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
  openfl_ui_GameInput.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      __class__: openfl_ui_GameInput,
    }
  );
  var openfl_ui_GameInputControl = function (
    device,
    id,
    minValue,
    maxValue,
    value
  ) {
    if (value == null) {
      value = 0;
    }
    openfl_events_EventDispatcher.call(this);
    this.device = device;
    this.id = id;
    this.minValue = minValue;
    this.maxValue = maxValue;
    this.value = value;
  };
  $hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
  openfl_ui_GameInputControl.__name__ = ["openfl", "ui", "GameInputControl"];
  openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
  openfl_ui_GameInputControl.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      device: null,
      id: null,
      maxValue: null,
      minValue: null,
      value: null,
      __class__: openfl_ui_GameInputControl,
    }
  );
  var openfl_ui_GameInputDevice = function (id, name) {
    this.__controls = [];
    this.__button = new haxe_ds_IntMap();
    this.__axis = new haxe_ds_IntMap();
    this.id = id;
    this.name = name;
    var control;
    var _g = 0;
    while (_g < 6) {
      var i = _g++;
      control = new openfl_ui_GameInputControl(this, "AXIS_" + i, -1, 1);
      this.__axis.h[i] = control;
      this.__controls.push(control);
    }
    var _g1 = 0;
    while (_g1 < 15) {
      var i1 = _g1++;
      control = new openfl_ui_GameInputControl(this, "BUTTON_" + i1, 0, 1);
      this.__button.h[i1] = control;
      this.__controls.push(control);
    }
  };
  $hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
  openfl_ui_GameInputDevice.__name__ = ["openfl", "ui", "GameInputDevice"];
  openfl_ui_GameInputDevice.prototype = {
    enabled: null,
    id: null,
    name: null,
    sampleInterval: null,
    __axis: null,
    __button: null,
    __controls: null,
    __gamepad: null,
    getCachedSamples: function (data, append) {
      if (append == null) {
        append = false;
      }
      return 0;
    },
    getControlAt: function (i) {
      if (i >= 0 && i < this.__controls.length) {
        return this.__controls[i];
      }
      return null;
    },
    startCachingSamples: function (numSamples, controls) {},
    stopCachingSamples: function () {},
    get_numControls: function () {
      return this.__controls.length;
    },
    __class__: openfl_ui_GameInputDevice,
    __properties__: { get_numControls: "get_numControls" },
  };
  var openfl_ui_Keyboard = function () {};
  $hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
  openfl_ui_Keyboard.__name__ = ["openfl", "ui", "Keyboard"];
  openfl_ui_Keyboard.isAccessible = function () {
    return false;
  };
  openfl_ui_Keyboard.__convertKeyCode = function (key) {
    switch (key) {
      case 8:
        return 8;
      case 9:
        return 9;
      case 13:
        return 13;
      case 27:
        return 27;
      case 32:
        return 32;
      case 33:
        return 49;
      case 34:
        return 222;
      case 35:
        return 51;
      case 36:
        return 52;
      case 37:
        return 53;
      case 38:
        return 55;
      case 39:
        return 222;
      case 40:
        return 57;
      case 41:
        return 48;
      case 42:
        return 56;
      case 44:
        return 188;
      case 45:
        return 189;
      case 46:
        return 190;
      case 47:
        return 191;
      case 48:
        return 48;
      case 49:
        return 49;
      case 50:
        return 50;
      case 51:
        return 51;
      case 52:
        return 52;
      case 53:
        return 53;
      case 54:
        return 54;
      case 55:
        return 55;
      case 56:
        return 56;
      case 57:
        return 57;
      case 58:
        return 186;
      case 59:
        return 186;
      case 60:
        return 60;
      case 61:
        return 187;
      case 62:
        return 190;
      case 63:
        return 191;
      case 64:
        return 50;
      case 91:
        return 219;
      case 92:
        return 220;
      case 93:
        return 221;
      case 94:
        return 54;
      case 95:
        return 189;
      case 96:
        return 192;
      case 97:
        return 65;
      case 98:
        return 66;
      case 99:
        return 67;
      case 100:
        return 68;
      case 101:
        return 69;
      case 102:
        return 70;
      case 103:
        return 71;
      case 104:
        return 72;
      case 105:
        return 73;
      case 106:
        return 74;
      case 107:
        return 75;
      case 108:
        return 76;
      case 109:
        return 77;
      case 110:
        return 78;
      case 111:
        return 79;
      case 112:
        return 80;
      case 113:
        return 81;
      case 114:
        return 82;
      case 115:
        return 83;
      case 116:
        return 84;
      case 117:
        return 85;
      case 118:
        return 86;
      case 119:
        return 87;
      case 120:
        return 88;
      case 121:
        return 89;
      case 122:
        return 90;
      case 127:
        return 46;
      case 1073741881:
        return 20;
      case 1073741882:
        return 112;
      case 1073741883:
        return 113;
      case 1073741884:
        return 114;
      case 1073741885:
        return 115;
      case 1073741886:
        return 116;
      case 1073741887:
        return 117;
      case 1073741888:
        return 118;
      case 1073741889:
        return 119;
      case 1073741890:
        return 120;
      case 1073741891:
        return 121;
      case 1073741892:
        return 122;
      case 1073741893:
        return 123;
      case 1073741894:
        return 301;
      case 1073741895:
        return 145;
      case 1073741896:
        return 19;
      case 1073741897:
        return 45;
      case 1073741898:
        return 36;
      case 1073741899:
        return 33;
      case 1073741901:
        return 35;
      case 1073741902:
        return 34;
      case 1073741903:
        return 39;
      case 1073741904:
        return 37;
      case 1073741905:
        return 40;
      case 1073741906:
        return 38;
      case 1073741907:
        return 144;
      case 1073741908:
        return 111;
      case 1073741909:
        return 106;
      case 1073741910:
        return 109;
      case 1073741911:
        return 107;
      case 1073741912:
        return 108;
      case 1073741913:
        return 97;
      case 1073741914:
        return 98;
      case 1073741915:
        return 99;
      case 1073741916:
        return 100;
      case 1073741917:
        return 101;
      case 1073741918:
        return 102;
      case 1073741919:
        return 103;
      case 1073741920:
        return 104;
      case 1073741921:
        return 105;
      case 1073741922:
        return 96;
      case 1073741923:
        return 110;
      case 1073741925:
        return 302;
      case 1073741928:
        return 124;
      case 1073741929:
        return 125;
      case 1073741930:
        return 126;
      case 1073741982:
        return 13;
      case 1073742044:
        return 110;
      case 1073742048:
        return 17;
      case 1073742049:
        return 16;
      case 1073742050:
        return 18;
      case 1073742051:
        return 15;
      case 1073742052:
        return 17;
      case 1073742053:
        return 16;
      case 1073742054:
        return 18;
      case 1073742055:
        return 15;
      default:
        return key;
    }
  };
  openfl_ui_Keyboard.__getCharCode = function (key, shift) {
    if (shift == null) {
      shift = false;
    }
    if (!shift) {
      switch (key) {
        case 8:
          return 8;
        case 9:
          return 9;
        case 13:
          return 13;
        case 27:
          return 27;
        case 32:
          return 32;
        case 186:
          return 59;
        case 187:
          return 61;
        case 188:
          return 44;
        case 189:
          return 45;
        case 190:
          return 46;
        case 191:
          return 47;
        case 192:
          return 96;
        case 219:
          return 91;
        case 220:
          return 92;
        case 221:
          return 93;
        case 222:
          return 39;
      }
      if (key >= 48 && key <= 57) {
        return key - 48 + 48;
      }
      if (key >= 65 && key <= 90) {
        return key - 65 + 97;
      }
    } else {
      switch (key) {
        case 48:
          return 41;
        case 49:
          return 33;
        case 50:
          return 64;
        case 51:
          return 35;
        case 52:
          return 36;
        case 53:
          return 37;
        case 54:
          return 94;
        case 55:
          return 38;
        case 56:
          return 42;
        case 57:
          return 40;
        case 186:
          return 58;
        case 187:
          return 43;
        case 188:
          return 60;
        case 189:
          return 95;
        case 190:
          return 62;
        case 191:
          return 63;
        case 192:
          return 126;
        case 219:
          return 123;
        case 220:
          return 124;
        case 221:
          return 125;
        case 222:
          return 34;
      }
      if (key >= 65 && key <= 90) {
        return key - 65 + 65;
      }
    }
    if (key >= 96 && key <= 105) {
      return key - 96 + 48;
    }
    switch (key) {
      case 8:
        return 8;
      case 13:
        return 13;
      case 46:
        return 127;
      case 106:
        return 42;
      case 107:
        return 43;
      case 108:
        return 44;
      case 110:
        return 45;
      case 111:
        return 46;
    }
    return 0;
  };
  openfl_ui_Keyboard.__getKeyLocation = function (key) {
    switch (key) {
      case 1073741908:
      case 1073741909:
      case 1073741910:
      case 1073741911:
      case 1073741912:
      case 1073741913:
      case 1073741914:
      case 1073741915:
      case 1073741916:
      case 1073741917:
      case 1073741918:
      case 1073741919:
      case 1073741920:
      case 1073741921:
      case 1073741922:
      case 1073741923:
      case 1073742044:
        return 3;
      case 1073742048:
      case 1073742049:
      case 1073742050:
      case 1073742051:
        return 1;
      case 1073742052:
      case 1073742053:
      case 1073742054:
      case 1073742055:
        return 2;
      default:
        return 0;
    }
  };
  var openfl_ui_Mouse = function () {};
  $hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
  openfl_ui_Mouse.__name__ = ["openfl", "ui", "Mouse"];
  openfl_ui_Mouse.__properties__ = {
    set_cursor: "set_cursor",
    get_cursor: "get_cursor",
  };
  openfl_ui_Mouse.hide = function () {
    lime_ui_Mouse.hide();
  };
  openfl_ui_Mouse.show = function () {
    lime_ui_Mouse.show();
  };
  openfl_ui_Mouse.get_cursor = function () {
    return openfl_ui_Mouse.__cursor;
  };
  openfl_ui_Mouse.set_cursor = function (value) {
    switch (value) {
      case "arrow":
        lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
        break;
      case "button":
        lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
        break;
      case "hand":
        lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
        break;
      case "ibeam":
        lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
        break;
      default:
    }
    return (openfl_ui_Mouse.__cursor = value);
  };
  var openfl_utils_IAssetCache = function () {};
  $hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
  openfl_utils_IAssetCache.__name__ = ["openfl", "utils", "IAssetCache"];
  openfl_utils_IAssetCache.prototype = {
    set_enabled: null,
    get_enabled: null,
    clear: null,
    getBitmapData: null,
    getFont: null,
    getSound: null,
    hasBitmapData: null,
    hasFont: null,
    hasSound: null,
    removeBitmapData: null,
    removeFont: null,
    removeSound: null,
    setBitmapData: null,
    setFont: null,
    setSound: null,
    __class__: openfl_utils_IAssetCache,
    __properties__: { set_enabled: "set_enabled", get_enabled: "get_enabled" },
  };
  var openfl_utils_AssetCache = function () {
    this.__enabled = true;
    this.bitmapData = new haxe_ds_StringMap();
    this.font = new haxe_ds_StringMap();
    this.sound = new haxe_ds_StringMap();
  };
  $hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
  openfl_utils_AssetCache.__name__ = ["openfl", "utils", "AssetCache"];
  openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
  openfl_utils_AssetCache.prototype = {
    bitmapData: null,
    font: null,
    sound: null,
    __enabled: null,
    clear: function (prefix) {
      if (prefix == null) {
        this.bitmapData = new haxe_ds_StringMap();
        this.font = new haxe_ds_StringMap();
        this.sound = new haxe_ds_StringMap();
      } else {
        var keys = this.bitmapData.keys();
        var key = keys;
        while (key.hasNext()) {
          var key1 = key.next();
          if (StringTools.startsWith(key1, prefix)) {
            this.removeBitmapData(key1);
          }
        }
        var keys1 = this.font.keys();
        var key2 = keys1;
        while (key2.hasNext()) {
          var key3 = key2.next();
          if (StringTools.startsWith(key3, prefix)) {
            this.removeFont(key3);
          }
        }
        var keys2 = this.sound.keys();
        var key4 = keys2;
        while (key4.hasNext()) {
          var key5 = key4.next();
          if (StringTools.startsWith(key5, prefix)) {
            this.removeSound(key5);
          }
        }
      }
    },
    getBitmapData: function (id) {
      var _this = this.bitmapData;
      if (__map_reserved[id] != null) {
        return _this.getReserved(id);
      } else {
        return _this.h[id];
      }
    },
    getFont: function (id) {
      var _this = this.font;
      if (__map_reserved[id] != null) {
        return _this.getReserved(id);
      } else {
        return _this.h[id];
      }
    },
    getSound: function (id) {
      var _this = this.sound;
      if (__map_reserved[id] != null) {
        return _this.getReserved(id);
      } else {
        return _this.h[id];
      }
    },
    hasBitmapData: function (id) {
      var _this = this.bitmapData;
      if (__map_reserved[id] != null) {
        return _this.existsReserved(id);
      } else {
        return _this.h.hasOwnProperty(id);
      }
    },
    hasFont: function (id) {
      var _this = this.font;
      if (__map_reserved[id] != null) {
        return _this.existsReserved(id);
      } else {
        return _this.h.hasOwnProperty(id);
      }
    },
    hasSound: function (id) {
      var _this = this.sound;
      if (__map_reserved[id] != null) {
        return _this.existsReserved(id);
      } else {
        return _this.h.hasOwnProperty(id);
      }
    },
    removeBitmapData: function (id) {
      lime_utils_Assets.cache.image.remove(id);
      return this.bitmapData.remove(id);
    },
    removeFont: function (id) {
      lime_utils_Assets.cache.font.remove(id);
      return this.font.remove(id);
    },
    removeSound: function (id) {
      lime_utils_Assets.cache.audio.remove(id);
      return this.sound.remove(id);
    },
    setBitmapData: function (id, bitmapData) {
      var _this = this.bitmapData;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, bitmapData);
      } else {
        _this.h[id] = bitmapData;
      }
    },
    setFont: function (id, font) {
      var _this = this.font;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, font);
      } else {
        _this.h[id] = font;
      }
    },
    setSound: function (id, sound) {
      var _this = this.sound;
      if (__map_reserved[id] != null) {
        _this.setReserved(id, sound);
      } else {
        _this.h[id] = sound;
      }
    },
    get_enabled: function () {
      return this.__enabled;
    },
    set_enabled: function (value) {
      return (this.__enabled = value);
    },
    __class__: openfl_utils_AssetCache,
    __properties__: { set_enabled: "set_enabled", get_enabled: "get_enabled" },
  };
  var openfl_utils_Assets = function () {};
  $hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
  openfl_utils_Assets.__name__ = ["openfl", "utils", "Assets"];
  openfl_utils_Assets.addEventListener = function (
    type,
    listener,
    useCapture,
    priority,
    useWeakReference
  ) {
    if (useWeakReference == null) {
      useWeakReference = false;
    }
    if (priority == null) {
      priority = 0;
    }
    if (useCapture == null) {
      useCapture = false;
    }
    if (
      !lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)
    ) {
      lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
    }
    openfl_utils_Assets.dispatcher.addEventListener(
      type,
      listener,
      useCapture,
      priority,
      useWeakReference
    );
  };
  openfl_utils_Assets.dispatchEvent = function (event) {
    return openfl_utils_Assets.dispatcher.dispatchEvent(event);
  };
  openfl_utils_Assets.exists = function (id, type) {
    return lime_utils_Assets.exists(id, type);
  };
  openfl_utils_Assets.getBitmapData = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    if (
      useCache &&
      openfl_utils_Assets.cache.get_enabled() &&
      openfl_utils_Assets.cache.hasBitmapData(id)
    ) {
      var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
      if (openfl_utils_Assets.isValidBitmapData(bitmapData)) {
        return bitmapData;
      }
    }
    var image = lime_utils_Assets.getImage(id, false);
    if (image != null) {
      var bitmapData1 = openfl_display_BitmapData.fromImage(image);
      if (useCache && openfl_utils_Assets.cache.get_enabled()) {
        openfl_utils_Assets.cache.setBitmapData(id, bitmapData1);
      }
      return bitmapData1;
    }
    return null;
  };
  openfl_utils_Assets.getBytes = function (id) {
    return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
      lime_utils_Assets.getBytes(id)
    );
  };
  openfl_utils_Assets.getFont = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    if (
      useCache &&
      openfl_utils_Assets.cache.get_enabled() &&
      openfl_utils_Assets.cache.hasFont(id)
    ) {
      return openfl_utils_Assets.cache.getFont(id);
    }
    var limeFont = lime_utils_Assets.getFont(id, false);
    if (limeFont != null) {
      var font = openfl_text_Font.__fromLimeFont(limeFont);
      if (useCache && openfl_utils_Assets.cache.get_enabled()) {
        openfl_utils_Assets.cache.setFont(id, font);
      }
      return font;
    }
    return new openfl_text_Font();
  };
  openfl_utils_Assets.getLibrary = function (name) {
    return lime_utils_Assets.getLibrary(name);
  };
  openfl_utils_Assets.getMovieClip = function (id) {
    var libraryName = id.substring(0, id.indexOf(":"));
    var symbolName = HxOverrides.substr(id, id.indexOf(":") + 1, null);
    var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
    if (limeLibrary != null) {
      if (js_Boot.__instanceof(limeLibrary, openfl_utils_AssetLibrary)) {
        var library = limeLibrary;
        if (library.exists(symbolName, "MOVIE_CLIP")) {
          if (library.isLocal(symbolName, "MOVIE_CLIP")) {
            return library.getMovieClip(symbolName);
          } else {
            lime_utils_Log.error(
              'MovieClip asset "' + id + '" exists, but only asynchronously',
              {
                fileName: "Assets.hx",
                lineNumber: 224,
                className: "openfl.utils.Assets",
                methodName: "getMovieClip",
              }
            );
            return null;
          }
        }
      }
      lime_utils_Log.error(
        'There is no MovieClip asset with an ID of "' + id + '"',
        {
          fileName: "Assets.hx",
          lineNumber: 233,
          className: "openfl.utils.Assets",
          methodName: "getMovieClip",
        }
      );
    } else {
      lime_utils_Log.error(
        'There is no asset library named "' + libraryName + '"',
        {
          fileName: "Assets.hx",
          lineNumber: 237,
          className: "openfl.utils.Assets",
          methodName: "getMovieClip",
        }
      );
    }
    return null;
  };
  openfl_utils_Assets.getMusic = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    return openfl_utils_Assets.getSound(id, useCache);
  };
  openfl_utils_Assets.getPath = function (id) {
    return lime_utils_Assets.getPath(id);
  };
  openfl_utils_Assets.getSound = function (id, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    if (
      useCache &&
      openfl_utils_Assets.cache.get_enabled() &&
      openfl_utils_Assets.cache.hasSound(id)
    ) {
      var sound = openfl_utils_Assets.cache.getSound(id);
      if (openfl_utils_Assets.isValidSound(sound)) {
        return sound;
      }
    }
    var buffer = lime_utils_Assets.getAudioBuffer(id, false);
    if (buffer != null) {
      var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
      if (useCache && openfl_utils_Assets.cache.get_enabled()) {
        openfl_utils_Assets.cache.setSound(id, sound1);
      }
      return sound1;
    }
    return null;
  };
  openfl_utils_Assets.getText = function (id) {
    return lime_utils_Assets.getText(id);
  };
  openfl_utils_Assets.hasEventListener = function (type) {
    return openfl_utils_Assets.dispatcher.hasEventListener(type);
  };
  openfl_utils_Assets.isLocal = function (id, type, useCache) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache && openfl_utils_Assets.cache.get_enabled()) {
      if (type == "IMAGE" || type == null) {
        if (openfl_utils_Assets.cache.hasBitmapData(id)) {
          return true;
        }
      }
      if (type == "FONT" || type == null) {
        if (openfl_utils_Assets.cache.hasFont(id)) {
          return true;
        }
      }
      if (type == "SOUND" || type == "MUSIC" || type == null) {
        if (openfl_utils_Assets.cache.hasSound(id)) {
          return true;
        }
      }
    }
    var libraryName = id.substring(0, id.indexOf(":"));
    var symbolName = HxOverrides.substr(id, id.indexOf(":") + 1, null);
    var library = openfl_utils_Assets.getLibrary(libraryName);
    if (library != null) {
      return library.isLocal(symbolName, type);
    }
    return false;
  };
  openfl_utils_Assets.isValidBitmapData = function (bitmapData) {
    return bitmapData != null && bitmapData.image != null;
  };
  openfl_utils_Assets.isValidSound = function (sound) {
    return true;
  };
  openfl_utils_Assets.list = function (type) {
    return lime_utils_Assets.list(type);
  };
  openfl_utils_Assets.loadBitmapData = function (id, useCache, handler) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache == null) {
      useCache = true;
    }
    var promise = new lime_app_Promise();
    if (handler != null) {
      promise.future.onComplete(handler);
      promise.future.onError(function (_) {
        handler(null);
      });
    }
    if (
      useCache &&
      openfl_utils_Assets.cache.get_enabled() &&
      openfl_utils_Assets.cache.hasBitmapData(id)
    ) {
      var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
      if (openfl_utils_Assets.isValidBitmapData(bitmapData)) {
        promise.complete(bitmapData);
        return promise.future;
      }
    }
    lime_utils_Assets
      .loadImage(id, false)
      .onComplete(function (image) {
        if (image != null) {
          var bitmapData1 = openfl_display_BitmapData.fromImage(image);
          if (useCache && openfl_utils_Assets.cache.get_enabled()) {
            openfl_utils_Assets.cache.setBitmapData(id, bitmapData1);
          }
          promise.complete(bitmapData1);
        } else {
          promise.error('[Assets] Could not load Image "' + id + '"');
        }
      })
      .onError($bind(promise, promise.error))
      .onProgress($bind(promise, promise.progress));
    return promise.future;
  };
  openfl_utils_Assets.loadBytes = function (id, handler) {
    var promise = new lime_app_Promise();
    var future = lime_utils_Assets.loadBytes(id);
    if (handler != null) {
      promise.future.onComplete(handler);
      promise.future.onError(function (_) {
        handler(null);
      });
    }
    future.onComplete(function (bytes) {
      promise.complete(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes)
      );
    });
    future.onProgress(function (progress, total) {
      promise.progress(progress, total);
    });
    future.onError(function (msg) {
      promise.error(msg);
    });
    return promise.future;
  };
  openfl_utils_Assets.loadFont = function (id, useCache, handler) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache == null) {
      useCache = true;
    }
    var promise = new lime_app_Promise();
    if (handler != null) {
      promise.future.onComplete(handler);
      promise.future.onError(function (_) {
        handler(null);
      });
    }
    if (
      useCache &&
      openfl_utils_Assets.cache.get_enabled() &&
      openfl_utils_Assets.cache.hasFont(id)
    ) {
      var tmp = openfl_utils_Assets.cache.getFont(id);
      promise.complete(tmp);
      return promise.future;
    }
    lime_utils_Assets
      .loadFont(id)
      .onComplete(function (limeFont) {
        var font = openfl_text_Font.__fromLimeFont(limeFont);
        if (useCache && openfl_utils_Assets.cache.get_enabled()) {
          openfl_utils_Assets.cache.setFont(id, font);
        }
        promise.complete(font);
      })
      .onError($bind(promise, promise.error))
      .onProgress($bind(promise, promise.progress));
    return promise.future;
  };
  openfl_utils_Assets.loadLibrary = function (name, handler) {
    var future = lime_utils_Assets.loadLibrary(name);
    if (handler != null) {
      future.onComplete(handler);
      future.onError(function (_) {
        handler(null);
      });
    }
    return future;
  };
  openfl_utils_Assets.loadMusic = function (id, useCache, handler) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache == null) {
      useCache = true;
    }
    return new lime_app_Future(function () {
      return openfl_utils_Assets.getMusic(id, useCache);
    });
  };
  openfl_utils_Assets.loadMovieClip = function (id, handler) {
    var promise = new lime_app_Promise();
    if (handler != null) {
      promise.future.onComplete(handler);
      promise.future.onError(function (_) {
        handler(null);
      });
    }
    var libraryName = id.substring(0, id.indexOf(":"));
    var symbolName = HxOverrides.substr(id, id.indexOf(":") + 1, null);
    var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
    if (limeLibrary != null) {
      if (js_Boot.__instanceof(limeLibrary, openfl_utils_AssetLibrary)) {
        var library = limeLibrary;
        if (library.exists(symbolName, "MOVIE_CLIP")) {
          promise.completeWith(library.loadMovieClip(symbolName));
          return promise.future;
        }
      }
      promise.error(
        '[Assets] There is no MovieClip asset with an ID of "' + id + '"'
      );
    } else {
      promise.error(
        '[Assets] There is no asset library named "' + libraryName + '"'
      );
    }
    return promise.future;
  };
  openfl_utils_Assets.loadSound = function (id, useCache, handler) {
    if (useCache == null) {
      useCache = true;
    }
    if (useCache == null) {
      useCache = true;
    }
    var promise = new lime_app_Promise();
    lime_utils_Assets
      .loadAudioBuffer(id, useCache)
      .onComplete(function (buffer) {
        if (buffer != null) {
          var sound = openfl_media_Sound.fromAudioBuffer(buffer);
          if (useCache && openfl_utils_Assets.cache.get_enabled()) {
            openfl_utils_Assets.cache.setSound(id, sound);
          }
          promise.complete(sound);
        } else {
          promise.error('[Assets] Could not load Sound "' + id + '"');
        }
      })
      .onError($bind(promise, promise.error))
      .onProgress($bind(promise, promise.progress));
    return promise.future;
  };
  openfl_utils_Assets.loadText = function (id, handler) {
    var future = lime_utils_Assets.loadText(id);
    if (handler != null) {
      future.onComplete(handler);
      future.onError(function (_) {
        handler(null);
      });
    }
    return future;
  };
  openfl_utils_Assets.registerLibrary = function (name, library) {
    lime_utils_Assets.registerLibrary(name, library);
  };
  openfl_utils_Assets.removeEventListener = function (type, listener, capture) {
    if (capture == null) {
      capture = false;
    }
    openfl_utils_Assets.dispatcher.removeEventListener(type, listener, capture);
  };
  openfl_utils_Assets.resolveClass = function (name) {
    return Type.resolveClass(name);
  };
  openfl_utils_Assets.resolveEnum = function (name) {
    var value = Type.resolveEnum(name);
    return value;
  };
  openfl_utils_Assets.unloadLibrary = function (name) {
    lime_utils_Assets.unloadLibrary(name);
  };
  openfl_utils_Assets.LimeAssets_onChange = function () {
    openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
  };
  var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
  $hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] =
    openfl_utils__$ByteArray_ByteArray_$Impl_$;
  openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = [
    "openfl",
    "utils",
    "_ByteArray",
    "ByteArray_Impl_",
  ];
  openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {
    set_length: "set_length",
    get_length: "get_length",
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function (length) {
    if (length == null) {
      length = 0;
    }
    var this1 = new openfl_utils_ByteArrayData(length);
    return this1;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function (this1, index) {
    return this1.b[index];
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function (
    this1,
    index,
    value
  ) {
    this1.__resize(index + 1);
    this1.b[index] = value & 255;
    return value;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function (
    buffer
  ) {
    if (buffer == null) {
      return null;
    }
    return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function (bytes) {
    if (bytes == null) {
      return null;
    }
    if (js_Boot.__instanceof(bytes, openfl_utils_ByteArrayData)) {
      return bytes;
    } else {
      return openfl_utils_ByteArrayData.fromBytes(bytes);
    }
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function (
    bytesData
  ) {
    if (bytesData == null) {
      return null;
    }
    return openfl_utils_ByteArrayData.fromBytes(
      haxe_io_Bytes.ofData(bytesData)
    );
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function (path) {
    return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
      lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path)
    );
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function (bytes) {
    return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function (
    byteArray
  ) {
    return byteArray.b.bufferValue;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function (byteArray) {
    return byteArray;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function (
    byteArray
  ) {
    return byteArray.b.bufferValue;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function (
    byteArray
  ) {
    return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(
      openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)
      )
    );
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function (this1) {
    return this1.length;
  };
  openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function (
    this1,
    value
  ) {
    if (value > 0) {
      this1.__resize(value);
    }
    this1.length = value;
    return value;
  };
  var openfl_utils_IDataOutput = function () {};
  $hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
  openfl_utils_IDataOutput.__name__ = ["openfl", "utils", "IDataOutput"];
  openfl_utils_IDataOutput.prototype = {
    set_endian: null,
    get_endian: null,
    objectEncoding: null,
    writeBoolean: null,
    writeByte: null,
    writeBytes: null,
    writeDouble: null,
    writeFloat: null,
    writeInt: null,
    writeMultiByte: null,
    writeShort: null,
    writeUTF: null,
    writeUTFBytes: null,
    writeUnsignedInt: null,
    __class__: openfl_utils_IDataOutput,
    __properties__: { set_endian: "set_endian", get_endian: "get_endian" },
  };
  var openfl_utils_IDataInput = function () {};
  $hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
  openfl_utils_IDataInput.__name__ = ["openfl", "utils", "IDataInput"];
  openfl_utils_IDataInput.prototype = {
    set_endian: null,
    get_endian: null,
    get_bytesAvailable: null,
    objectEncoding: null,
    readBoolean: null,
    readByte: null,
    readBytes: null,
    readDouble: null,
    readFloat: null,
    readInt: null,
    readMultiByte: null,
    readShort: null,
    readUnsignedByte: null,
    readUnsignedInt: null,
    readUnsignedShort: null,
    readUTF: null,
    readUTFBytes: null,
    __class__: openfl_utils_IDataInput,
    __properties__: {
      set_endian: "set_endian",
      get_endian: "get_endian",
      get_bytesAvailable: "get_bytesAvailable",
    },
  };
  var openfl_utils_ByteArrayData = function (length) {
    if (length == null) {
      length = 0;
    }
    var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
    haxe_io_Bytes.call(this, bytes.b.buffer);
    this.__length = length;
    this.__endian = 0;
    this.position = 0;
  };
  $hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
  openfl_utils_ByteArrayData.__name__ = ["openfl", "utils", "ByteArrayData"];
  openfl_utils_ByteArrayData.__interfaces__ = [
    openfl_utils_IDataOutput,
    openfl_utils_IDataInput,
  ];
  openfl_utils_ByteArrayData.fromBytes = function (bytes) {
    var result = new openfl_utils_ByteArrayData();
    result.__fromBytes(bytes);
    return result;
  };
  openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
  openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype, {
    objectEncoding: null,
    position: null,
    __endian: null,
    __length: null,
    clear: function () {
      this.length = 0;
      this.position = 0;
    },
    compress: function (algorithm) {
      if (algorithm == null) {
        algorithm = 2;
      }
      if (this.__length > this.length) {
        var cacheLength = this.length;
        this.length = this.__length;
        var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
        data.blit(0, this, 0, cacheLength);
        this.b = data.b;
        this.__length = data.length;
        this.data = data.data;
        this.length = cacheLength;
      }
      var bytes;
      switch (algorithm) {
        case 0:
          bytes = lime_utils_compress_Deflate.compress(this);
          break;
        case 1:
          bytes = lime_utils_compress_LZMA.compress(this);
          break;
        default:
          bytes = lime_utils_compress_Zlib.compress(this);
      }
      if (bytes != null) {
        this.b = bytes.b;
        this.__length = bytes.length;
        this.data = bytes.data;
        this.length = this.__length;
        this.position = this.length;
      }
    },
    deflate: function () {
      this.compress(0);
    },
    inflate: function () {
      this.uncompress(0);
    },
    readBoolean: function () {
      if (this.position < this.length) {
        return this.b[this.position++] != 0;
      } else {
        throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
      }
    },
    readByte: function () {
      var value = this.readUnsignedByte();
      if ((value & 128) != 0) {
        return value - 256;
      } else {
        return value;
      }
    },
    readBytes: function (bytes, offset, length) {
      if (length == null) {
        length = 0;
      }
      if (offset == null) {
        offset = 0;
      }
      if (length == 0) {
        length = this.length - this.position;
      }
      if (this.position + length > this.length) {
        throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
      }
      if (bytes.length < offset + length) {
        bytes.__resize(offset + length);
      }
      bytes.blit(offset, this, this.position, length);
      this.position += length;
    },
    readDouble: function () {
      var ch1 = this.readInt();
      var ch2 = this.readInt();
      if (this.__endian == 1) {
        return haxe_io_FPHelper.i64ToDouble(ch1, ch2);
      } else {
        return haxe_io_FPHelper.i64ToDouble(ch2, ch1);
      }
    },
    readFloat: function () {
      return haxe_io_FPHelper.i32ToFloat(this.readInt());
    },
    readInt: function () {
      var ch1 = this.readUnsignedByte();
      var ch2 = this.readUnsignedByte();
      var ch3 = this.readUnsignedByte();
      var ch4 = this.readUnsignedByte();
      if (this.__endian == 1) {
        return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
      } else {
        return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
      }
    },
    readMultiByte: function (length, charSet) {
      return this.readUTFBytes(length);
    },
    readShort: function () {
      var ch1 = this.readUnsignedByte();
      var ch2 = this.readUnsignedByte();
      var value;
      if (this.__endian == 1) {
        value = (ch2 << 8) | ch1;
      } else {
        value = (ch1 << 8) | ch2;
      }
      if ((value & 32768) != 0) {
        return value - 65536;
      } else {
        return value;
      }
    },
    readUnsignedByte: function () {
      if (this.position < this.length) {
        return this.b[this.position++];
      } else {
        throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
      }
    },
    readUnsignedInt: function () {
      var ch1 = this.readUnsignedByte();
      var ch2 = this.readUnsignedByte();
      var ch3 = this.readUnsignedByte();
      var ch4 = this.readUnsignedByte();
      if (this.__endian == 1) {
        return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
      } else {
        return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
      }
    },
    readUnsignedShort: function () {
      var ch1 = this.readUnsignedByte();
      var ch2 = this.readUnsignedByte();
      if (this.__endian == 1) {
        return (ch2 << 8) + ch1;
      } else {
        return (ch1 << 8) | ch2;
      }
    },
    readUTF: function () {
      var bytesCount = this.readUnsignedShort();
      return this.readUTFBytes(bytesCount);
    },
    readUTFBytes: function (length) {
      if (this.position + length > this.length) {
        throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
      }
      this.position += length;
      return this.getString(this.position - length, length);
    },
    uncompress: function (algorithm) {
      if (algorithm == null) {
        algorithm = 2;
      }
      if (this.__length > this.length) {
        var cacheLength = this.length;
        this.length = this.__length;
        var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
        data.blit(0, this, 0, cacheLength);
        this.b = data.b;
        this.__length = data.length;
        this.data = data.data;
        this.length = cacheLength;
      }
      var bytes;
      switch (algorithm) {
        case 0:
          bytes = lime_utils_compress_Deflate.decompress(this);
          break;
        case 1:
          bytes = lime_utils_compress_LZMA.decompress(this);
          break;
        default:
          bytes = lime_utils_compress_Zlib.decompress(this);
      }
      if (bytes != null) {
        this.b = bytes.b;
        this.__length = bytes.length;
        this.data = bytes.data;
        this.length = this.__length;
        this.position = 0;
      }
    },
    writeBoolean: function (value) {
      this.writeByte(value ? 1 : 0);
    },
    writeByte: function (value) {
      this.__resize(this.position + 1);
      this.b[this.position++] = value & 255 & 255;
    },
    writeBytes: function (bytes, offset, length) {
      if (length == null) {
        length = 0;
      }
      if (offset == null) {
        offset = 0;
      }
      if (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
        return;
      }
      if (length == 0) {
        length =
          openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
      }
      this.__resize(this.position + length);
      this.blit(this.position, bytes, offset, length);
      this.position = this.position + length;
    },
    writeDouble: function (value) {
      var int64 = haxe_io_FPHelper.doubleToI64(value);
      if (this.__endian == 1) {
        this.writeInt(int64.low);
        this.writeInt(int64.high);
      } else {
        this.writeInt(int64.high);
        this.writeInt(int64.low);
      }
    },
    writeFloat: function (value) {
      var $int = haxe_io_FPHelper.floatToI32(value);
      this.writeInt($int);
    },
    writeInt: function (value) {
      this.__resize(this.position + 4);
      if (this.__endian == 1) {
        this.b[this.position++] = value & 255 & 255;
        this.b[this.position++] = (value >> 8) & 255 & 255;
        this.b[this.position++] = (value >> 16) & 255 & 255;
        this.b[this.position++] = (value >> 24) & 255 & 255;
      } else {
        this.b[this.position++] = (value >> 24) & 255 & 255;
        this.b[this.position++] = (value >> 16) & 255 & 255;
        this.b[this.position++] = (value >> 8) & 255 & 255;
        this.b[this.position++] = value & 255 & 255;
      }
    },
    writeMultiByte: function (value, charSet) {
      this.writeUTFBytes(value);
    },
    writeShort: function (value) {
      this.__resize(this.position + 2);
      if (this.__endian == 1) {
        this.b[this.position++] = value & 255;
        this.b[this.position++] = (value >> 8) & 255;
      } else {
        this.b[this.position++] = (value >> 8) & 255;
        this.b[this.position++] = value & 255;
      }
    },
    writeUnsignedInt: function (value) {
      this.writeInt(value);
    },
    writeUTF: function (value) {
      var bytes = haxe_io_Bytes.ofString(value);
      this.writeShort(bytes.length);
      this.writeBytes(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes)
      );
    },
    writeUTFBytes: function (value) {
      var bytes = haxe_io_Bytes.ofString(value);
      this.writeBytes(
        openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(
          haxe_io_Bytes.ofString(value)
        )
      );
    },
    __fromBytes: function (bytes) {
      this.b = bytes.b;
      this.__length = bytes.length;
      this.data = bytes.data;
      this.length = bytes.length;
    },
    __resize: function (size) {
      if (size > this.__length) {
        var bytes = new haxe_io_Bytes(new ArrayBuffer(((size + 1) * 3) >> 1));
        var cacheLength = this.length;
        this.length = this.__length;
        bytes.blit(0, this, 0, this.__length);
        this.length = cacheLength;
        this.b = bytes.b;
        this.__length = bytes.length;
        this.data = bytes.data;
      }
      if (this.length < size) {
        this.length = size;
      }
    },
    __setData: function (bytes) {
      this.b = bytes.b;
      this.__length = bytes.length;
      this.data = bytes.data;
    },
    get_bytesAvailable: function () {
      return this.length - this.position;
    },
    get_endian: function () {
      return this.__endian;
    },
    set_endian: function (value) {
      return (this.__endian = value);
    },
    __class__: openfl_utils_ByteArrayData,
    __properties__: {
      set_endian: "set_endian",
      get_endian: "get_endian",
      get_bytesAvailable: "get_bytesAvailable",
    },
  });
  var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
  $hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] =
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = [
    "openfl",
    "utils",
    "_CompressionAlgorithm",
    "CompressionAlgorithm_Impl_",
  ];
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString =
    function (value) {
      switch (value) {
        case "deflate":
          return 0;
        case "lzma":
          return 1;
        case "zlib":
          return 2;
        default:
          return null;
      }
    };
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString =
    function (value) {
      switch (value) {
        case 0:
          return "deflate";
        case 1:
          return "lzma";
        case 2:
          return "zlib";
        default:
          return null;
      }
    };
  var openfl_utils__$Dictionary_Dictionary_$Impl_$ = {};
  $hxClasses["openfl.utils._Dictionary.Dictionary_Impl_"] =
    openfl_utils__$Dictionary_Dictionary_$Impl_$;
  openfl_utils__$Dictionary_Dictionary_$Impl_$.__name__ = [
    "openfl",
    "utils",
    "_Dictionary",
    "Dictionary_Impl_",
  ];
  openfl_utils__$Dictionary_Dictionary_$Impl_$.exists = function (this1, key) {
    return this1.exists(key);
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.get = function (this1, key) {
    return this1.get(key);
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.remove = function (this1, key) {
    return this1.remove(key);
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.set = function (
    this1,
    key,
    value
  ) {
    this1.set(key, value);
    return value;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.iterator = function (this1) {
    return this1.keys();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.each = function (this1) {
    return this1.iterator();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toStringMap = function (
    t,
    weakKeys
  ) {
    return new haxe_ds_StringMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toIntMap = function (
    t,
    weakKeys
  ) {
    return new haxe_ds_IntMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toFloatMap = function (
    t,
    weakKeys
  ) {
    return new openfl_utils__$Dictionary_FloatMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toEnumValueMapMap = function (
    t,
    weakKeys
  ) {
    return new haxe_ds_EnumValueMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap = function (
    t,
    weakKeys
  ) {
    return new haxe_ds_ObjectMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toUtilsObjectMap = function (
    t,
    weakKeys
  ) {
    return new openfl_utils__$Dictionary_UtilsObjectMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.toClassMap = function (
    t,
    weakKeys
  ) {
    return new openfl_utils__$Dictionary_ClassMap();
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromStringMap = function (map) {
    return map;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromIntMap = function (map) {
    return map;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromFloatMap = function (map) {
    return map;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromObjectMap = function (map) {
    return map;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromUtilsObjectMap = function (
    map
  ) {
    return map;
  };
  openfl_utils__$Dictionary_Dictionary_$Impl_$.fromClassMap = function (map) {
    return map;
  };
  var openfl_utils__$Dictionary_ClassMap = function () {
    this.types = new haxe_ds_StringMap();
    this.values = new haxe_ds_StringMap();
  };
  $hxClasses["openfl.utils._Dictionary.ClassMap"] =
    openfl_utils__$Dictionary_ClassMap;
  openfl_utils__$Dictionary_ClassMap.__name__ = [
    "openfl",
    "utils",
    "_Dictionary",
    "ClassMap",
  ];
  openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
  openfl_utils__$Dictionary_ClassMap.prototype = {
    types: null,
    values: null,
    exists: function (key) {
      var this1 = this.types;
      var key1 = Type.getClassName(key);
      var _this = this1;
      if (__map_reserved[key1] != null) {
        return _this.existsReserved(key1);
      } else {
        return _this.h.hasOwnProperty(key1);
      }
    },
    get: function (key) {
      var this1 = this.values;
      var key1 = Type.getClassName(key);
      var _this = this1;
      if (__map_reserved[key1] != null) {
        return _this.getReserved(key1);
      } else {
        return _this.h[key1];
      }
    },
    keys: function () {
      var _this = this.types;
      return new haxe_ds__$StringMap_StringMapIterator(
        _this,
        _this.arrayKeys()
      );
    },
    iterator: function () {
      var _this = this.values;
      return new haxe_ds__$StringMap_StringMapIterator(
        _this,
        _this.arrayKeys()
      );
    },
    remove: function (key) {
      var name = Type.getClassName(key);
      if (!this.types.remove(name)) {
        return this.values.remove(name);
      } else {
        return true;
      }
    },
    set: function (key, value) {
      var name = Type.getClassName(key);
      var _this = this.types;
      if (__map_reserved[name] != null) {
        _this.setReserved(name, key);
      } else {
        _this.h[name] = key;
      }
      var _this1 = this.values;
      if (__map_reserved[name] != null) {
        _this1.setReserved(name, value);
      } else {
        _this1.h[name] = value;
      }
    },
    toString: function () {
      return this.values.toString();
    },
    __class__: openfl_utils__$Dictionary_ClassMap,
  };
  var openfl_utils__$Dictionary_FloatMap = function () {
    this.floatKeys = [];
    this.values = [];
  };
  $hxClasses["openfl.utils._Dictionary.FloatMap"] =
    openfl_utils__$Dictionary_FloatMap;
  openfl_utils__$Dictionary_FloatMap.__name__ = [
    "openfl",
    "utils",
    "_Dictionary",
    "FloatMap",
  ];
  openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
  openfl_utils__$Dictionary_FloatMap.prototype = {
    floatKeys: null,
    values: null,
    exists: function (key) {
      return this.indexOf(key) > -1;
    },
    get: function (key) {
      var ind = this.indexOf(key);
      if (ind > -1) {
        return this.values[ind];
      } else {
        return null;
      }
    },
    keys: function () {
      return HxOverrides.iter(this.floatKeys.slice());
    },
    iterator: function () {
      return HxOverrides.iter(this.values.slice());
    },
    remove: function (key) {
      var ind = this.indexOf(key);
      if (ind > -1) {
        this.floatKeys.splice(ind, 1);
        this.values.splice(ind, 1);
        return true;
      }
      return false;
    },
    set: function (key, value) {
      this.insertSorted(key, value);
    },
    indexOf: function (key) {
      var len = this.floatKeys.length;
      var startIndex = 0;
      var endIndex = len - 1;
      if (len == 0) {
        return -1;
      }
      var midIndex = 0;
      while (startIndex < endIndex) {
        midIndex = Math.floor((startIndex + endIndex) / 2);
        if (this.floatKeys[midIndex] == key) {
          return midIndex;
        } else if (this.floatKeys[midIndex] > key) {
          endIndex = midIndex - 1;
        } else {
          startIndex = midIndex + 1;
        }
      }
      if (this.floatKeys[startIndex] == key) {
        return startIndex;
      } else {
        return -1;
      }
    },
    insertSorted: function (key, value) {
      var len = this.floatKeys.length;
      var startIndex = 0;
      var endIndex = len - 1;
      if (len == 0) {
        this.floatKeys.push(key);
        this.values.push(value);
        return;
      }
      var midIndex = 0;
      while (startIndex < endIndex) {
        midIndex = Math.floor((startIndex + endIndex) / 2);
        if (this.floatKeys[midIndex] == key) {
          this.values[midIndex] = value;
          return;
        } else if (this.floatKeys[midIndex] > key) {
          endIndex = midIndex - 1;
        } else {
          startIndex = midIndex + 1;
        }
      }
      if (this.floatKeys[startIndex] > key) {
        this.floatKeys.splice(startIndex, 0, key);
        this.values.splice(startIndex, 0, value);
      } else if (this.floatKeys[startIndex] < key) {
        this.floatKeys.splice(startIndex + 1, 0, key);
        this.values.splice(startIndex + 1, 0, value);
      } else {
        this.values[startIndex] = value;
      }
    },
    toString: function () {
      return this.values.toString();
    },
    __class__: openfl_utils__$Dictionary_FloatMap,
  };
  var openfl_utils__$Dictionary_UtilsObjectMap = function () {
    this.map = new haxe_ds_ObjectMap();
  };
  $hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] =
    openfl_utils__$Dictionary_UtilsObjectMap;
  openfl_utils__$Dictionary_UtilsObjectMap.__name__ = [
    "openfl",
    "utils",
    "_Dictionary",
    "UtilsObjectMap",
  ];
  openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
  openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
    map: null,
    exists: function (key) {
      return this.map.h.__keys__[key.__id__] != null;
    },
    get: function (key) {
      return this.map.h[key.__id__];
    },
    keys: function () {
      return this.map.keys();
    },
    iterator: function () {
      return this.map.iterator();
    },
    remove: function (key) {
      return this.map.remove(key);
    },
    set: function (key, value) {
      this.map.set(key, value);
    },
    toString: function () {
      return this.map.toString();
    },
    __class__: openfl_utils__$Dictionary_UtilsObjectMap,
  };
  var openfl_utils__$Endian_Endian_$Impl_$ = {};
  $hxClasses["openfl.utils._Endian.Endian_Impl_"] =
    openfl_utils__$Endian_Endian_$Impl_$;
  openfl_utils__$Endian_Endian_$Impl_$.__name__ = [
    "openfl",
    "utils",
    "_Endian",
    "Endian_Impl_",
  ];
  openfl_utils__$Endian_Endian_$Impl_$.fromString = function (value) {
    switch (value) {
      case "bigEndian":
        return 0;
      case "littleEndian":
        return 1;
      default:
        return null;
    }
  };
  openfl_utils__$Endian_Endian_$Impl_$.toString = function (value) {
    switch (value) {
      case 0:
        return "bigEndian";
      case 1:
        return "littleEndian";
      default:
        return null;
    }
  };
  var openfl_utils__$Object_Object_$Impl_$ = {};
  $hxClasses["openfl.utils._Object.Object_Impl_"] =
    openfl_utils__$Object_Object_$Impl_$;
  openfl_utils__$Object_Object_$Impl_$.__name__ = [
    "openfl",
    "utils",
    "_Object",
    "Object_Impl_",
  ];
  openfl_utils__$Object_Object_$Impl_$._new = function () {
    var this1 = {};
    return this1;
  };
  openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function (this1, name) {
    if (this1 != null) {
      return Object.prototype.hasOwnProperty.call(this1, name);
    } else {
      return false;
    }
  };
  openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function (
    this1,
    theClass
  ) {
    var o = this1;
    var c = o == null ? null : js_Boot.getClass(o);
    while (c != null) {
      if (c == theClass) {
        return true;
      }
      c = Type.getSuperClass(c);
    }
    return false;
  };
  openfl_utils__$Object_Object_$Impl_$.iterator = function (this1) {
    var fields = Reflect.fields(this1);
    if (fields == null) {
      fields = [];
    }
    return HxOverrides.iter(fields);
  };
  openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function (
    this1,
    name
  ) {
    if (this1 != null && Object.prototype.hasOwnProperty.call(this1, name)) {
      return js_Boot.__instanceof(
        Reflect.field(this1, name),
        haxe_lang_Iterable
      );
    } else {
      return false;
    }
  };
  openfl_utils__$Object_Object_$Impl_$.toLocaleString = function (this1) {
    return Std.string(this1);
  };
  openfl_utils__$Object_Object_$Impl_$.toString = function (this1) {
    return Std.string(this1);
  };
  openfl_utils__$Object_Object_$Impl_$.valueOf = function (this1) {
    return this1;
  };
  openfl_utils__$Object_Object_$Impl_$.__get = function (this1, key) {
    return Reflect.field(this1, key);
  };
  openfl_utils__$Object_Object_$Impl_$.__set = function (this1, key, value) {
    this1[key] = value;
    return value;
  };
  var haxe_lang_Iterator = function () {};
  $hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
  haxe_lang_Iterator.__name__ = ["haxe", "lang", "Iterator"];
  haxe_lang_Iterator.prototype = {
    hasNext: null,
    next: null,
    __class__: haxe_lang_Iterator,
  };
  var haxe_lang_Iterable = function () {};
  $hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
  haxe_lang_Iterable.__name__ = ["haxe", "lang", "Iterable"];
  haxe_lang_Iterable.prototype = {
    iterator: null,
    __class__: haxe_lang_Iterable,
  };
  var openfl_utils_Timer = function (delay, repeatCount) {
    if (repeatCount == null) {
      repeatCount = 0;
    }
    if (isNaN(delay) || delay < 0) {
      throw new js__$Boot_HaxeError(
        new openfl_errors_Error(
          "The delay specified is negative or not a finite number"
        )
      );
    }
    openfl_events_EventDispatcher.call(this);
    this.__delay = delay;
    this.set_repeatCount(repeatCount);
    this.running = false;
    this.currentCount = 0;
  };
  $hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
  openfl_utils_Timer.__name__ = ["openfl", "utils", "Timer"];
  openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
  openfl_utils_Timer.prototype = $extend(
    openfl_events_EventDispatcher.prototype,
    {
      currentCount: null,
      repeatCount: null,
      running: null,
      __delay: null,
      __timer: null,
      __timerID: null,
      reset: function () {
        if (this.running) {
          this.stop();
        }
        this.currentCount = 0;
      },
      start: function () {
        if (!this.running) {
          this.running = true;
          this.__timerID = window.setInterval(
            $bind(this, this.timer_onTimer),
            this.__delay | 0
          );
        }
      },
      stop: function () {
        this.running = false;
        if (this.__timerID != null) {
          window.clearInterval(this.__timerID);
          this.__timerID = null;
        }
      },
      get_delay: function () {
        return this.__delay;
      },
      set_delay: function (value) {
        this.__delay = value;
        if (this.running) {
          this.stop();
          this.start();
        }
        return this.__delay;
      },
      set_repeatCount: function (v) {
        if (this.running && v != 0 && v <= this.currentCount) {
          this.stop();
        }
        this.repeatCount = v;
        return v;
      },
      timer_onTimer: function () {
        this.currentCount++;
        if (this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
          this.stop();
          this.dispatchEvent(new openfl_events_TimerEvent("timer"));
          this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
        } else {
          this.dispatchEvent(new openfl_events_TimerEvent("timer"));
        }
      },
      __class__: openfl_utils_Timer,
      __properties__: {
        set_repeatCount: "set_repeatCount",
        set_delay: "set_delay",
        get_delay: "get_delay",
      },
    }
  );
  var spritesheet_AnimatedSprite = function (sheet, smoothing) {
    if (smoothing == null) {
      smoothing = false;
    }
    openfl_display_Sprite.call(this);
    this.smoothing = smoothing;
    this.spritesheet = sheet;
    this.behaviorQueue = [];
    this.bitmap = new openfl_display_Bitmap();
    this.addChild(this.bitmap);
  };
  $hxClasses["spritesheet.AnimatedSprite"] = spritesheet_AnimatedSprite;
  spritesheet_AnimatedSprite.__name__ = ["spritesheet", "AnimatedSprite"];
  spritesheet_AnimatedSprite.__super__ = openfl_display_Sprite;
  spritesheet_AnimatedSprite.prototype = $extend(
    openfl_display_Sprite.prototype,
    {
      bitmap: null,
      currentBehavior: null,
      currentFrameIndex: null,
      smoothing: null,
      spritesheet: null,
      behaviorComplete: null,
      behaviorQueue: null,
      behavior: null,
      loopTime: null,
      timeElapsed: null,
      getFrameData: function (index) {
        if (
          this.currentBehavior != null &&
          this.currentBehavior.frameData.length > index
        ) {
          return this.currentBehavior.frameData[index];
        } else {
          return null;
        }
      },
      queueBehavior: function (behavior) {
        var behaviorData = this.resolveBehavior(behavior);
        if (this.currentBehavior == null) {
          this.updateBehavior(behaviorData);
        } else {
          this.behaviorQueue.push(behaviorData);
        }
      },
      resolveBehavior: function (behavior) {
        if (js_Boot.__instanceof(behavior, spritesheet_data_BehaviorData)) {
          return behavior;
        } else if (typeof behavior == "string") {
          if (this.spritesheet != null) {
            var _this = this.spritesheet.behaviors;
            var key = behavior;
            if (__map_reserved[key] != null) {
              return _this.getReserved(key);
            } else {
              return _this.h[key];
            }
          }
        }
        return null;
      },
      showBehavior: function (behavior, restart) {
        if (restart == null) {
          restart = true;
        }
        this.behaviorQueue = [];
        this.updateBehavior(this.resolveBehavior(behavior), restart);
      },
      showBehaviors: function (behaviors) {
        this.behaviorQueue = [];
        var _g = 0;
        while (_g < behaviors.length) {
          var behavior = behaviors[_g];
          ++_g;
          this.behaviorQueue.push(this.resolveBehavior(behavior));
        }
        if (this.behaviorQueue.length > 0) {
          this.updateBehavior(this.behaviorQueue.shift());
        }
      },
      update: function (deltaTime) {
        if (!this.behaviorComplete) {
          this.timeElapsed += deltaTime;
          var ratio = this.timeElapsed / this.loopTime;
          if (ratio >= 1) {
            if (this.currentBehavior.loop) {
              ratio -= Math.floor(ratio);
            } else {
              this.behaviorComplete = true;
              ratio = 1;
            }
          }
          this.currentFrameIndex = Math.round(
            ratio * (this.currentBehavior.frames.length - 1)
          );
          var frame = this.spritesheet.getFrame(
            this.currentBehavior.frames[this.currentFrameIndex]
          );
          this.bitmap.set_bitmapData(frame.bitmapData);
          this.bitmap.smoothing = this.smoothing;
          this.bitmap.set_x(frame.offsetX - this.currentBehavior.originX);
          this.bitmap.set_y(frame.offsetY - this.currentBehavior.originY);
          if (this.behaviorComplete) {
            if (this.behaviorQueue.length > 0) {
              this.updateBehavior(this.behaviorQueue.shift());
            } else if (this.hasEventListener("complete")) {
              this.dispatchEvent(new openfl_events_Event("complete"));
            }
          }
        }
      },
      updateBehavior: function (behavior, restart) {
        if (restart == null) {
          restart = true;
        }
        if (behavior != null) {
          if (restart || behavior != this.currentBehavior) {
            this.currentBehavior = behavior;
            this.timeElapsed = 0;
            this.behaviorComplete = false;
            this.loopTime =
              ((behavior.frames.length / behavior.frameRate) * 1000) | 0;
            if (this.bitmap.bitmapData == null) {
              this.update(0);
            }
          }
        } else {
          this.bitmap.set_bitmapData(null);
          this.currentBehavior = null;
          this.currentFrameIndex = -1;
          this.behaviorComplete = true;
        }
      },
      __class__: spritesheet_AnimatedSprite,
    }
  );
  var spritesheet_Spritesheet = function (
    image,
    frames,
    behaviors,
    imageAlpha
  ) {
    this.sourceImage = image;
    this.sourceImageAlpha = imageAlpha;
    if (frames == null) {
      this.frames = [];
      this.totalFrames = 0;
    } else {
      this.frames = frames;
      this.totalFrames = frames.length;
    }
    if (behaviors == null) {
      this.behaviors = new haxe_ds_StringMap();
    } else {
      this.behaviors = behaviors;
    }
  };
  $hxClasses["spritesheet.Spritesheet"] = spritesheet_Spritesheet;
  spritesheet_Spritesheet.__name__ = ["spritesheet", "Spritesheet"];
  spritesheet_Spritesheet.prototype = {
    behaviors: null,
    name: null,
    totalFrames: null,
    frames: null,
    sourceImage: null,
    sourceImageAlpha: null,
    addBehavior: function (behavior) {
      var key = behavior.name;
      var _this = this.behaviors;
      if (__map_reserved[key] != null) {
        _this.setReserved(key, behavior);
      } else {
        _this.h[key] = behavior;
      }
    },
    addFrame: function (frame) {
      this.frames.push(frame);
      this.totalFrames++;
    },
    generateBitmaps: function () {
      var _g1 = 0;
      var _g = this.totalFrames;
      while (_g1 < _g) {
        var i = _g1++;
        this.generateBitmap(i);
      }
    },
    generateBitmap: function (index) {
      var frame = this.frames[index];
      var bitmapData = new openfl_display_BitmapData(
        frame.width,
        frame.height,
        true
      );
      var sourceRectangle = new openfl_geom_Rectangle(
        frame.x,
        frame.y,
        frame.width,
        frame.height
      );
      var targetPoint = new openfl_geom_Point();
      bitmapData.copyPixels(this.sourceImage, sourceRectangle, targetPoint);
      if (this.sourceImageAlpha != null) {
        bitmapData.copyChannel(
          this.sourceImageAlpha,
          sourceRectangle,
          targetPoint,
          2,
          8
        );
      }
      frame.bitmapData = bitmapData;
    },
    getFrame: function (index, autoGenerate) {
      if (autoGenerate == null) {
        autoGenerate = true;
      }
      var frame = this.frames[index];
      if (frame != null && frame.bitmapData == null && autoGenerate) {
        this.generateBitmap(index);
      }
      return frame;
    },
    getFrameIDs: function () {
      var ids = [];
      var _g1 = 0;
      var _g = this.totalFrames;
      while (_g1 < _g) {
        var i = _g1++;
        ids.push(i);
      }
      return ids;
    },
    getFrames: function () {
      return this.frames.slice();
    },
    merge: function (spritesheet1) {
      var cacheTotalFrames = this.totalFrames;
      var _g1 = 0;
      var _g = spritesheet1.frames.length;
      while (_g1 < _g) {
        var i = _g1++;
        if (
          spritesheet1.frames[i].bitmapData == null &&
          (spritesheet1.sourceImage != this.sourceImage ||
            spritesheet1.sourceImageAlpha != this.sourceImageAlpha)
        ) {
          spritesheet1.generateBitmap(i);
        }
        this.addFrame(spritesheet1.frames[i]);
      }
      var _this = spritesheet1.behaviors;
      var behavior = new haxe_ds__$StringMap_StringMapIterator(
        _this,
        _this.arrayKeys()
      );
      while (behavior.hasNext()) {
        var behavior1 = behavior.next();
        var key = behavior1.name;
        var _this1 = this.behaviors;
        if (
          !(__map_reserved[key] != null
            ? _this1.existsReserved(key)
            : _this1.h.hasOwnProperty(key))
        ) {
          var clone = behavior1.clone();
          clone.name = behavior1.name;
          var _g11 = 0;
          var _g2 = behavior1.frames.length;
          while (_g11 < _g2) {
            var i1 = _g11++;
            behavior1.frames[i1] += cacheTotalFrames;
          }
          this.addBehavior(behavior1);
        }
      }
      var ids = [];
      var _g12 = cacheTotalFrames;
      var _g3 = this.totalFrames;
      while (_g12 < _g3) {
        var i2 = _g12++;
        ids.push(i2);
      }
      return ids;
    },
    updateImage: function (image, imageAlpha) {
      this.sourceImage = image;
      this.sourceImageAlpha = imageAlpha;
      var _g = 0;
      var _g1 = this.frames;
      while (_g < _g1.length) {
        var frame = _g1[_g];
        ++_g;
        if (frame.bitmapData != null) {
          frame.bitmapData = null;
        }
      }
    },
    __class__: spritesheet_Spritesheet,
  };
  var spritesheet_data_BehaviorData = function (
    name,
    frames,
    loop,
    frameRate,
    originX,
    originY
  ) {
    if (originY == null) {
      originY = 0;
    }
    if (originX == null) {
      originX = 0;
    }
    if (frameRate == null) {
      frameRate = 30;
    }
    if (loop == null) {
      loop = false;
    }
    if (name == null) {
      name = "";
    }
    if (name == "") {
      name = "behavior" + spritesheet_data_BehaviorData.uniqueID++;
    }
    if (frames == null) {
      frames = [];
    }
    this.name = name;
    this.frames = frames;
    this.loop = loop;
    this.frameRate = frameRate;
    this.originX = originX;
    this.originY = originY;
    this.frameData = [];
    var _g1 = 0;
    var _g = this.frames.length;
    while (_g1 < _g) {
      var i = _g1++;
      this.frameData.push(null);
    }
  };
  $hxClasses["spritesheet.data.BehaviorData"] = spritesheet_data_BehaviorData;
  spritesheet_data_BehaviorData.__name__ = [
    "spritesheet",
    "data",
    "BehaviorData",
  ];
  spritesheet_data_BehaviorData.prototype = {
    frameData: null,
    frameRate: null,
    frames: null,
    loop: null,
    name: null,
    originX: null,
    originY: null,
    clone: function () {
      return new spritesheet_data_BehaviorData(
        "behavior" + spritesheet_data_BehaviorData.uniqueID++,
        this.frames.slice(),
        this.loop,
        this.frameRate,
        this.originX,
        this.originY
      );
    },
    __class__: spritesheet_data_BehaviorData,
  };
  var spritesheet_data_SpritesheetFrame = function (
    x,
    y,
    width,
    height,
    offsetX,
    offsetY
  ) {
    if (offsetY == null) {
      offsetY = 0;
    }
    if (offsetX == null) {
      offsetX = 0;
    }
    if (height == null) {
      height = 0;
    }
    if (width == null) {
      width = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x == null) {
      x = 0;
    }
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.offsetX = offsetX;
    this.offsetY = offsetY;
  };
  $hxClasses["spritesheet.data.SpritesheetFrame"] =
    spritesheet_data_SpritesheetFrame;
  spritesheet_data_SpritesheetFrame.__name__ = [
    "spritesheet",
    "data",
    "SpritesheetFrame",
  ];
  spritesheet_data_SpritesheetFrame.prototype = {
    bitmapData: null,
    height: null,
    offsetX: null,
    offsetY: null,
    width: null,
    x: null,
    y: null,
    __class__: spritesheet_data_SpritesheetFrame,
  };
  var spritesheet_importers_BitmapImporter = function () {};
  $hxClasses["spritesheet.importers.BitmapImporter"] =
    spritesheet_importers_BitmapImporter;
  spritesheet_importers_BitmapImporter.__name__ = [
    "spritesheet",
    "importers",
    "BitmapImporter",
  ];
  spritesheet_importers_BitmapImporter.create = function (
    bitmapData,
    columns,
    rows,
    tileWidth,
    tileHeight,
    adjustLength,
    scale
  ) {
    if (scale == null) {
      scale = 1;
    }
    if (adjustLength == null) {
      adjustLength = 0;
    }
    var frames = [];
    var totalLength = rows * columns + adjustLength;
    var _g1 = 0;
    var _g = rows;
    while (_g1 < _g) {
      var row = _g1++;
      var _g3 = 0;
      var _g2 = columns;
      while (_g3 < _g2) {
        var column = _g3++;
        if (frames.length < totalLength) {
          var x = tileWidth * column;
          var y = tileHeight * row;
          var frame = new spritesheet_data_SpritesheetFrame(
            x,
            y,
            tileWidth,
            tileHeight,
            0,
            0
          );
          if (scale != 1) {
            var sourceBitmapData = new openfl_display_BitmapData(
              tileWidth,
              tileHeight,
              true,
              0
            );
            sourceBitmapData.copyPixels(
              bitmapData,
              new openfl_geom_Rectangle(x, y, tileWidth, tileHeight),
              new openfl_geom_Point()
            );
            var bitmap = new openfl_display_Bitmap(sourceBitmapData);
            bitmap.smoothing = true;
            var matrix = new openfl_geom_Matrix();
            matrix.scale(scale, scale);
            var bitmapData1 = new openfl_display_BitmapData(
              Math.round(tileWidth * scale),
              Math.round(tileHeight * scale),
              true,
              0
            );
            bitmapData1.draw(bitmap, matrix);
            frame.bitmapData = bitmapData1;
          }
          frames.push(frame);
        }
      }
    }
    while (frames.length < totalLength)
      frames.push(new spritesheet_data_SpritesheetFrame());
    return new spritesheet_Spritesheet(bitmapData, frames);
  };
  function $iterator(o) {
    if (o instanceof Array)
      return function () {
        return HxOverrides.iter(o);
      };
    return typeof o.iterator == "function" ? $bind(o, o.iterator) : o.iterator;
  }
  var $_,
    $fid = 0;
  function $bind(o, m) {
    if (m == null) return null;
    if (m.__id__ == null) m.__id__ = $fid++;
    var f;
    if (o.hx__closures__ == null) o.hx__closures__ = {};
    else f = o.hx__closures__[m.__id__];
    if (f == null) {
      f = function () {
        return f.method.apply(f.scope, arguments);
      };
      f.scope = o;
      f.method = m;
      o.hx__closures__[m.__id__] = f;
    }
    return f;
  }
  $hxClasses["Math"] = Math;
  String.prototype.__class__ = $hxClasses["String"] = String;
  String.__name__ = ["String"];
  $hxClasses["Array"] = Array;
  Array.__name__ = ["Array"];
  Date.prototype.__class__ = $hxClasses["Date"] = Date;
  Date.__name__ = ["Date"];
  var Int = ($hxClasses["Int"] = { __name__: ["Int"] });
  var Dynamic = ($hxClasses["Dynamic"] = { __name__: ["Dynamic"] });
  var Float = ($hxClasses["Float"] = Number);
  Float.__name__ = ["Float"];
  var Bool = ($hxClasses["Bool"] = Boolean);
  Bool.__ename__ = ["Bool"];
  var Class = ($hxClasses["Class"] = { __name__: ["Class"] });
  var Enum = {};
  haxe_Resource.content = [
    {
      name: "__ASSET__:bitmap_CLogoY8",
      data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUg0QUFBQkhDQVlBQUFEQlZ2UHRBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBclJKUkVGVWVBSHRuVEZ1R3pFUVJiVkdxdmdBUVh3RDkrbDlBQi9DY0ZUbk5La0RRNGZ3QWR5bjF3MGNKTDNjS2pQR3NsQXpHaXgyRXVyekVhQzVxK0ZTOC84VGpmVmdCVStidVIyUHg4a09INjAvV0wrMWZtMmRkdmtPSEV6QzN2ck8rdE0wVFVlWDVMQTNCdjJ6RFQrczMvazVUZGFCRjFPMk5maS9wbm1uUDlzTFFKZmxmU0xNNGQ4NytLOTI4UDBreEltNkE5OGN2SDhDdnFnclJkK0pBejhkL0I5N2lSdTVFMS9rVHc0TzN1LzZhSU01Y0RXWVh1VE9EZ0IrMEk4QzRBRS9xQU9EeW1iSEEzNVFCd2FWL1dHSmJxdjFmangzbmYyWitIWnV6bHJ4ZjVYUDc1dWJzN3JYMHRUVytmVDZXdUlqditxYnc0T05nQjhNZUpNTCtPYkVZQ1BnQndQZTVBSytPVEhZQ1BqQmdEZTVnRzlPRERZQ2ZqRGdUZTZpQWs2N1dHbk1GR2VxaWltUmoxVjVzZU1qMTRWamdCZUdHMGtEZk9TT2NBend3bkFqYVlDUDNCR09BVjRZYmlRTjhKRTd3akhBQzhPTnBKVjlvV0t0cDJMV1dpY3lJUnZMRkZPeWEyWG5WUldOMlBGWkFtTHpBQzhHTkNzSDhGbW54T1lCWGd4b1ZnN2dzMDZKelFPOEdOQ3NITUJublJLYkIzZ3hvRms1WlUvZ1pMNUNkV25GbWFwaVNnUXJVelJha2hjN1BuSmRPQVo0WWJpUk5NQkg3Z2pIQUM4TU41SUcrTWdkNFJqZ2hlRkcwZ0FmdVNNY0E3d3czRWhhMlJNNDBadTJXRThGbkpaVE5HYUtLZEgxUzJKTGlqT1o5MkhIWjF3U25BTjRRYWdaU1lEUHVDUTRCL0NDVURPU0FKOXhTWEFPNEFXaFppUUJQdU9TNEJ6QUMwTE5TUHF2Qlp4TWdzeXBjWUFkWCtOcjk2c0N2bnRFTlFrQ3ZzYlg3bGNGZlBlSWFoSUVmSTJ2M2E4SytPNFIxU1RvNFBrWG96WGU5cnpxd2NIdmU4NlEzRW9jMkR2NFhjblNMTnF6QXp1djNFMlc0YlAxdTU0ekpiZlZISGl4bGU2djdMbTNveDFzcmZzTE5HMEhuUEhXbWZ0dWYyL3p6biswa3dmcnQ5YXYzd1A4dUhRSC9PYmQ3K04yMXAvbWpiNzVDLzdmZjJyZUhLeGVBQUFBQUVsRlRrU3VRbUND",
    },
    {
      name: "__ASSET__:bitmap_CTextLoading",
      data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUZrQUFBQVpDQVlBQUFCYVU0TERBQUFINWtsRVFWUm9nZTJhdjA4YzF4YkhQNE1STkNBbXdnMDBleXZjQk8xWVcvazFPelNrY2NUWXJ2SWFCaWtDZDIrY2Y0RHhYOEM0Z3lnS1MvT3FPQ3l5bTdqeHVJa3J4T3l6bTlBd204SnVRQXlDNGhrbG1WZk0zTHQzZG1lWHhZb1V2ZmY4bFJERHZlZmVlMzdOT2VlZXdlQy9EZDlSNFhjQ1Vrd01URklTUnZCWjVkVmZ6Vm8vR09wcGkzVlNiTVc0UVlNMWRnYXUvbzRLdjJGaFlKTmlhYnNtM01EamE5bzlhemFwQWpaZ0FVTFJRNnp0MGVRaFQwclAzT1FJSTErbkl5WEV3Q0lseXZjTTh4bVRsSkFSRXY3QUJVUXVZd01JZVVoTDA4RlVyZ09MRkZ2eE1rS2svUTBwemNLNksyRGttMjhBWHNtOHp4cVBTd1N0WXVBRHpvQzlFMUpjSHJLbjFrQ0FvVEU3Q0NrZUQzbkNKdi9Bd014SEhkQ00rZWVneVJyMzJHSUtDSyt4ZjhBYWo0WWhOUGlXT3FteWVpOXVJQW9lbVNrNEJDWDRWV2hpRUpEU3ZNYWF6dG8raGp6NjZnZ0E2Nm5GMmVVWkFKV0pDdTJMM3BkSFIzVzZTdXVreHdsOVBzYUFLZFl3SGoyaXZ3YnJ0WFhTMVpUdCtuYUg0amROeUM0RlY2ZXJiTmUzT2JoL1FMcWFxcC8xMnJwK2hwTWJVU2w0NDg0R1IxOGRLZnFEK3dkczE3ZEpWMU9XNTVhTGEwdFFuNmtqSmdWaVVtQk5aM3JaWGR3bC9udk02ZklwUzVVbGRjN0x1eStwVEZTWUdwdGlkM0dYNkVGVW9NbmhreXRZMHAwdW41S3VwdXd1N2xLZHJySlVXZXJsenhqNEppdU02bi9ZTXpZQVlsTG9HK25lRjVBcmE2bXlSUE9MWnVtbWZzM0huckZ4WGpqS3k2UUF6Y1VtOXF4ZG9MZHVXbGczTTJXNWN5NDdoenVGTmQ2OHAzaHJ4azJpazZpd3ZqcGR4Ukdadk9hNGlUZnZzZGZldzV2UElxQjd5OFVjTXdzMHpTK2FlRDk3UEhuN3BMQlBlRGZFSE8rSTdBZ0hSemdrSDVKUy9vWkJRY25tMklDM2VaTWxQWjRHZnd2VWxDNjRPK2NpSmdYMnJJMWY4M24wdWhPMmdqdUJVckJjWTAxYlN2aHVWS2VyTkJlYkJhUGJzN1lTV0tKMTBpSjhGNnE1NEUxUW1MZG5iSFZ1ZEJ3aEpvVXlocTdrNEU2Z0ZOeU1tOFRuc1RLVXJ2anJZalRQcGdES213cWUwc25TU2hQTGM4dEs4RzV2Q040RU5Pd0dqbkR3NWoyQ053SHRpemIxbVRydUxSZUF4aThOVmw2dEFKbW5KbTVSYVhKYzk2cm9PQ0s1VExCbjdWS0JGNTR2QUNSb1lTazZqckJ1V29VM3gzbmg0TjV5OFdzK1lsS29HRjJkcmlvNm5iL3dYZGozalIwV0kyV0R5V1d2ME5EeFlyL21LMlowQlFPY1haN2gvZHdwVktSaTNibnNkL0lod1h2dEZlZ2J2elI2RG5QblhLWE00RTNBN1I5dnMvQjhvWlFXc2ppZHJxYm15N3N2KzhvaERhN3ZJZDhpR1k0QUdvZWQrYjMySHVHN3NQVE1ZVkdxNUZMa3RhbE1PdERsOFNrT1dUVkErNkt0R0pNaFNLNEozNGVGT04yelR3N2QrL3g5WHowSGI0TWVXcDIrTzk3cmFNYVpSN1l2Mmlya3lNU3B2eDNkL01oMUg0c1JMYkdWdWk4anhQMFdGNWpKNnVFZWJVa2hWRXdzVVdqWm1EUk9kQndWak5JNmFSVmlzaDVySmVvemRhRFhrMSs5NzF3SzVabGxlV2dZSndBb1hGQUdZQVJaRzZZZEJla01xeG81N1ZWMm9RckpMaHNLL1pLb21CQ2w0LzFRRnJyS2hMNktMajZQQjUrakdVNGFTYUlnNTBkZ3RHeXd3UEFXcVQ2bk0yNU5XK3pJbTdkUjlHS1pST1ZlTXZ0THp5N1Fsb3dOd25YcDVma0Q1OTkzNXUxWlczbjkxTmdVM3VkbGwyRUFSRjUxWlF3WmhNcTdiOUNRRGxvYWs2ZkdwdnE4SDltckpCbjI1ajJxMDlVZUdyMWdsL0ZNSmhQcnB0VjlFU2lVY04zeDNwNjFxVXhVMUh4OXBsNWFYZWlLTC9QYStLSTRKbW5rdXRaSlM0MTVuM3ZVWityWlhXQ3hxUnltQndZQ2d5YlpaY2JQTDEzWjgrL0VlYnVDVWJJNGF1azE4RDF4eitxT1M3OWUvSm9jblIrWkFHN29FajJJTU1kTm9nY1IvcjZ2Rk84SXAxQkpTQ1h2SE82b3NxbGhOL0QzZlZVbjY4bEtLamw0RTZnS0kvd3lWUHZJdmJ1aEsxNWVyZld3MSszSlV1bjZ1c1poQTcvbXF6UC9CSGhzMGhqTk8yN1p3ZWN4WWxMZzNuSlY2YVhMRWI0TFdYaStRUHVpalJ1NnFuNzBhejdVZWs5d1E3ZVFSUHg5bjRiZHdCdzNDNWVaTXJRdjJnUnZBMlVZZVNub2grNExDaFREM2xVeEdUTERpZ2xSa0YwNlNuS1pGSGhZcWl6aDEzeHUvM2lialRzYmlFbkJ2UmYzc3V2OWVkeTVoQms0SStSbEYxQ29iNi9DWG5zUDY2bFZHdXVpNHdqN21jMWVlNjh3dm5PNGcvM01MaWJXbkY2ZXJTdnI4ZjVqbkorY3dsaDhIbU0vczFXdEsrZjBtS3JUU3BydXhwSGtRZWYvN1BLTWxWY3JpSDhLN0djMjlqT2J6M1krWStYVlNrOGVzR2R0RlViRXBPaTBKQ1pFVDZJMDhoWmZUSDVUcWt4VVNyTnBjcG1VZGEvb1hsTkNsNUQxUEh4OVVNL2dNc25VWitvRHp5azdNenJwbEhqMW1UcnhlVnhRNkxCN1ZpWXFmRFAvVGZ6OTRmZWlqUGJnL2dIV3pjeXBGcDR2TURVMmhaZ1V0RTVhVkNZcW1PT21lZ1owSGx6WlQxNEdHbGRLSnBFMXlFMnVhZzJtaEl6aThqVnRObGtpNnllTElVK0p5SnI2SDk4MDZFVkNpcC8zd2d2N3J0Zlc4V3MreVljRSs3bGRNRXA5cHE1aXRML3Y4M2kvdDhYZUJ4RnIzTzU4R2NsS0VaZE1zRExsSmFSRUdJU3FrWjhaeCt1aVQ0QUdLYUZxMk92WVlwMWk3emJSdm1iWStaanUrUjRwQW5xTUkzS0RaZWQxdnJaa05iMUJJK2ZOek1kQ3dPTWhMYjZsemgvNHVxUG9pb1FzUGllWENXSkM0QWdIYzl3aytaQmdQYlc2UTAraW5SRnJUcFI5RFBnRXNzOVpXNlJza1c3OGF5UHRoOU4vbjZiVkg2cXBwTTJkWlNnTTM3djRYOFVJcm54ODlQb1J6azlPVHlVU0hVZkZFSkxkZmdlWFJ4cU1xMG4rRDNDZG5KUXAyTG5PaDlSUG5neXd4azdlUlN4dmtuWFF4Qmp1dTU2T1Q1NnNJeXRuSGRKT0NBR3lmMWxJYVpRbThpSHdIOTlheTBieTZsSkNBQUFBQUVsRlRrU3VRbUND",
    },
    {
      name: "__ASSET__:bitmap_CBarLoading2",
      data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWxFQUFBQTNDQVlBQUFBc1RoK3dBQUFIZFVsRVFWUjRuTzNkM1hXYlNCeUg0Wi8yN0wzY1FkZ0s1SzFBYkFYMlZtQnRCVkVxa0ZLQmxRb2lWeEM3QXNrVnhLNGdjZ1dSSzJBdkJvNEE4ODNBSVBFKzU4eUZrUUlqR0liL2ZCRUpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU16cVNySFFlQjdpUjVYZTBmQUFDZ3FjbEVYMXZ2dzBaR3NnU0JkcEw4cnZZUEFBRFExR1RTUGdiNncwWkdBQUFBeG9ZZ0NnQUFvSUUvWFdjQTZNWlUwa0xTVmZqM1h0S3pxOHdBQUM0UVFSUXUxRmJTYldyYnRhVFgvck9DQWJ1UktSZVJvNlJIU1c5dXNnUGttc3JVYVo1TU9mM21ORGZETWRPcHJ1Ly92QXc4aUVwWGNCdEo3NDd5a3NmdEJVU1dPMzBNb0NUemNQeXI1N3hndUg0cVdiOUVOakxsNTZuZjdDVEU2NzZ0Q09yR2JpYlRtMzRWMjNhUTJ6STZCRm4zOEVGOW5wY0JCMUdmWkNxUGVLRzVrdlRGU1c0K21zb1U2dlFGUEVwNjZEMDM5Y3dsTFpVOHQzc05NMGh0d3F1NUhlTnpyK3dBS3JJTlAzY1J2TXhsQXY2SUwra2ZCL200TkNzbEY0eXZkVDVEL0JzbDYydkoxT0ZqRHFMdWxOOElJb2hTY2o1TFpLbmhCRkVMNVYvQUlRZFJjNW1BS2MzWDVWVFdoNXJiaCtDSFR1WDlLT2xmaDNtNWRGRWpvc2lWVENEbDRuNUk1ODEza0lkTGN5Y1ROTVZ0Wk03dEpUUWN4OGlydWIwYnJNNXJMQjNnbFcwZmdxbVNMZHcwWDZhMWR1NGVKTDFrYkM5N2NMcXlraGsrOHNOMHEvYlhZU2JwdTZSZExOM0xsSUd4VzFUOG5pL1RJOTYzUStydnJMS01lallaMjY1VnZTeTRscFgvZmQrWmlQa2xLUWpUYjVuaDU3NGRhbTd2eG9DRHFLMU1pend1cXlDNWtsZXhEYm5DVzZzOHlGdnJNaDYwdmt4NTJZZkoxM0M3dnYySzI2cWF5dHcvQzUwQ00xOG1pQnpTUFNTWjRDNklwVDZDZUsrajc5cnlSZVphN1hYcUxiRmxKZlBRaTUvem4rcnVJWGlUT3Q1dnVXbW91V3owVG1VYU5Pbnp2cE5wN0ZUeEpGTU85bUZhU3UxZnR0M1F2WkwzUmRScjIzZUQ0OXdheXpVRmdYWkJvS0JkbWdWQnNBdlRmY3Q5ZFpHK0IwbS93enpYM2MvbjhOOEdRUkQ4Q29KZzJsRitkMEUxYzRmbmRJeHBsWEVOZmxqZVg5eTg0WDV2Z2lENG1aUFhKdVYrbHBPL1R5MStlNVcwS3prL2NmTVd4N2xKSFd2VjhlOHFTNTlMZm11VGExaVVwc0dwWGt1YjkvemJkdzd6OFNQbjJFSFFiWDNmVmNxemNwU2ZtL0RZcTZCdTNXRWoxaGx3VDVSa2xxUC9FNlkyYzZHbU12TWdvbVNycCtVL21hR1hkWmc4MVY5Q1AxV3loOGpUK1hReGo5Vk1kc3ZSTm1OYm14NGp2K1huV1dZeVE4Rlo4d0J2dzgvcW5vOUZ6ZTIyRkExcHh4M1ZmT0x4cC9BNGZtemJXbTZHQnlWei9jcktWSk5yV09SVytUMDlDNHZIcVdLcGp5TWJXM1Uvc1h5dTdKWENFVS9aOS8vWXpGdjgyeWVaWHJtdmNyRVFaTUFUeTIyWnlveVJ4bS9tbzB6aHRUR2g4RW50aG9tdTliR2k2YXFMK1VYVkhxQTJoeVRUTjhlTHpuY2laeFJJZU9IZlM5bDVwY1diVERtSUt0dEhEZXQ5Vm1WejZTUnpUdW9PTVJTdGp1dlNWdFdHdHRzRXNsN0JkaGNyL3FvTWNYZ3laZERXd2hpdjRXZGRlTldwakVxbUh1cGplSDlSNFR1M01zSDF1YnpHNGxINXI1Q3A2MDZubFllSGNMOURxdnZLRGJ3bnlvWkhaUWNwVFM1NEY1NlZyS3ozNm03ZVNwWGZ2SmU5SUdlbjB4aCtsRjdrWmhLaURkR0w3aUkycjlPclRxMnB0cFZJV1JCY04waGVxTnBEYjExenYzbmxzZXQ3ODEybU1YRW8rTTVHN2VhY1BPZnN2K2lZWGZJc2Y2K0tROFBQdXZLdTB6M1cxL3hJei9MM2htQ2g1S1QyWTdpdFNiMjFWWElVWm1oek5zdGRlQkExVTM3UGk2L3FrL3E2OWtXbVZlN0xERjEyMVZQekxGUFkwOTNha2IyS3U1N3J1RmYydWZma1poS2lEZW56bG5jZVhWdXIrQnJYZllEVUtSTjF1dVczK3JqQ2FLTitXcUt2TXZkYyt2alJBOEhHcTFRMlNsNkh0YzZudDhHR1IrV1h3MjJQK1lCZDd6TFBLVDlNMTJyZWUybWpUcjJUV2F5d2tvdG4rb1VIVVdYZDlVTjZIY0dyK25ueDI0Tk13WS8zUmh4bEtueGJBZHhVeGNNSFZ5V2ZEOVdqa2cvZG9mNkdxS2NsM2FPemtiMGcyWWFzeXJqUDk4QkZ4NDhhTUw1TWtHOXJPT3RiYk4vWGNyZWFTcXErSEw3cTk2cUl5bUc4cm5tUktZUG44cExMdHZZVnZ0Tm03cDFMejJGcTB6Qlk2bFErWGxTL056dWE2N2NPMDdaRlhwcVpkTFhqSU5CT3p0OFNOMVZ4Wkh1bDg1MmZNMlI1TC9TTTIrc3lYdXc1QnQ5VmZTTHd0YzV0VHNNNGZKSjVTQlUxSEY4ay9kMVBka2FqeW5tM05iZHlqRmI2R0hoVkQyc21rL1l4MElYM1JMMnJlQVVRQVJSUWJsdnhld2NSUUEzVm16NzJDc1dsVnhMQ2pqY1ZUNkZZaXdDcWpVUEozOTBid2VxOEI1a1R1NDV0VytzOHUwL1BSWldKeXpaWEFLSmJ6enE5dkxQSVVJYzNZYnpLQkVwckpWZEdQb29IZVplaUYyVXVkWnBBZnBTNXA0YjZBdUJ6OFNCVGxxUHl2TzA5QnhjK25BZDN5b2FBUEkxcmt1MGwrS3pzMVROSGpXdWVDNEJMWUdNNGJ3UTlVWEJqS1RNUElEMlIrUkIrUmdCMWZyN0o5Q0JHMTFZNjlmSnlQUUdNRHoxUjZOaU5UbDJ0QjVtaEErYWlBUURjc3RFVFJSQUZBQUJHaDlWNUFBQUFqaEJFQVFBQU5FQVFCUUFBMEVDWHEvTzJzdnQvQ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTUNxL3dHejhpMVlITWFIY0FBQUFBQkpSVTVFcmtKZ2dnPT0",
    },
    {
      name: "__ASSET__:bitmap_CLogoIDNET",
      data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUk4QUFBQkJDQU1BQUFEZlh3ZGxBQUFBa0ZCTVZFVUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhZVnFYLy8vOGpIeUJSZ0x2SXg4ZGFWMWVSajQvRjFPaUxxdEx4OC9jMGE3QW1ZS3BEZGJYaTZmUFQzKzZvdjkzajQrTjluOHd3TFMyWnRkZXNxNnRNU1VtMnl1TFYxZFZ1bGNhZW5aMCtPenRuWldWZ2lzRzZ1Ym1EZ1lGMWMzTWJVZCtjQUFBQUVIUlNUbE1Bdno5Lzc5OWZEeS9QYjUrUEgwK3Z1bmhiYWdBQUJQbEpSRUZVYU43Tm11bDZvakFVaHNHQWlFdmxLem9ZS0tCMVg5cmUvOTJOaENPaEpDaDJsTTc3Qzhsajg1cmxuQU9wVVV1bno4d0xyTjh4ZnBNZWMxSEZaVDNqVjNENk5qTGlZSFloaUpGaDl4MmpSY2pHQXNDWHA4Z3JFNTJXSElEVnRwRVltOVQzZFBpcEdDT2pQWnh4WmhONmRZU1owYmkxSWVwYVFPSjcxL0FUd09vYXJjQUFMTHhiTEFBd293VUdBSC96YnZQR2dZSHhkQmlRaEY0VHdxU0ZFZW9DU2VRMUkwcUFKNitoRjRDSFhsTkNEcndZVDZSbktXdm4xaHF5bnBnK0hCY2duWWFjQVBkNWNXZ0E3UExmSFFpV09vVmRJQ0R2eFVNMm1Za0NzMVJhQUNtRk93Z0NuYzhNZ2t1ODNBQ2RKL25ZaUtPN2ZVSU8rd0UrcTZsZ1ZmTHBVaWQzK05DTWRmL2Q1OCtyNEUvSng4Ykd1OHVIaUdFL3c2Y1BoRC95MlFIOUovalE4S2pVKzhnQmVyeFBEL0IvNkxNQWVzVWVsWXc2QTFNdy9sWnlqeGpkTmdmZEhuM0RsVDV1SjhNd2hvaTlIL3FFd05BZ29NVm1Ucm55bEF6cEc5SW5KNXV1NWJYNmE1YXhDeXMrUkFCYjZ6UFoveEZzQWJ1WHo0Slp1djBCd096cGZSenFRYnVlUXc1aUY2aytRdEVwZkthdkFtQ2VYUWtPZThBYWlmeEl0NGtWTXVTTlFpcEw3RjZOVDdTQkpBazFQajd3b3ZoczMxOGxhdzVYSkFEKythM3I2YnpHaHlHbzhRbGpsT0ZMMWNjRFdOVm4vbDd0b3p1eU1GOVgrbjdmNm4xTUxHdDhZaWdvUGduTXFzKzYwdThjcmdzdTc4cUdHcCtaM21jR0lzamdlcDlBOFZIWTQ4eVIxdE0wZ3hxTytEeC9PSlJhVm9BQm5MUStFUm1RN2tudnN3UlVuODg1enF4bzNxWUFKdVZsWE16ZFJMZS9BRi9yczBCT0twT0R4bWVtOFRraTU0dm1EOENoV0RLQ0ZabmU0eE5BSUdObDJ0Um5qakZqek1TV1BoZkRzd0pSTEgxQXlSZDFQc2paeVpLNW9jOVhua1FZUUJQR0x5TUZvaGlnZlhNZnVvakxlNm1aeng0VzFaeDBZMEppYXhSd210bm1QZ3UxOEZnMDg1bkFyUGhRN3lvSGpZK0ZuY2FIZG5zbE5xaytLZXpiUHBQWE9qUStKbWIxUG1xYkduOGU3cFBxZkhiTmZHSU1IdXRUbDcvb1luTmovUURzdHMrV0F0RkVRZldweSsrUnVwNDMydncrWURsWGZDRERuNExpTTZxcGZ6Z0VvV3pqcXM4Q2tpcys2enc4QTdZcHNPcDlxRDZzamMvcDFYZ1lZRDdKNGRkODl2bkZGcFpEejN1VFM1MzR2WDd1bTFRLzErZXZVRTZYNGhPSlB5ZVlYUE9aRnhObURSbHpBWjVIeUpYMCtVU09lTDU0MCtWMzVDVFVtRUwxMlRYeWtVM0hPUVRiTllWRDZYT2dKakZocWNaSENteDgzNS9GMFBna1RYMjJseHBzUHpsenBNVDJBU3Q3M2lHby9oR1pMOVQ0UlB4V2ZlaWpxUTgrWDFXT3dIQ01qMHA5YUJpT2hWUlhyNzVWaElLcVQ5RFVSeXUwNXJDZFB2QmU4UkVEOUtieDhmeHZRcHRxZkQ0QlZqT2ZvUVhhWTVLcGVBVTVBajRVSDhkQ29QUHhvclNrRTFWOVlwaG1NeC9XYzRIdHREdzRlK1J2YXdabm9VUEZ4K2dETXpMd0JjV0dpMllKenNTenNHaUxaT25jTTh2eFowdFg1Rk82d1F6SFJCWjBLREFlVnhBNjlPYVNyNzR1TDZWQVNaVis5aDJjQUdhWTBFRStFa1puSTJYWXlCQTQ3RnNESlEwTFBMcExKeFRQblVOVHh6Qi9ZSmQwall6dVFQWTg3SlhmZTVnZ1RGTytEay91RVlyaW43eC9kanBNOEdMY3BKOEwvVDhIQmsxUGR5Z3lrYzRUR1pKUU14MW1QSjB1d0cvdU1ncVRRNk1GdXMzT0I5czdzSHh4cWI2bzV5MUJnNTMxMFBQbDVaWHo1U1VBYzJTMEJJVlJUa2FxRFFmTUY2TlZIQkZGTjd1d0tyUGJBTERKcGsxR1F3dG40blRoWDFpazhXLzkvd2FsR2lqWWxITitpUTRiMjdqZ2pyc3RMZUsvUFd4NmpGVFdINGtBQUFBQVNVVk9SSzVDWUlJPQ",
    },
    {
      name: "__ASSET__:bitmap_CBarLoading1",
      data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWxFQUFBQTNDQVlBQUFBc1RoK3dBQUFLTjBsRVFWUjRuTzNkelU4YmR4b0g4Tys4MmdhYmhPRWxRQktjYmtNajFWV1RBMUlqVmVHU2FsZGN1dmRlK3ovMDJ1eXh0LzFMdXFzZXlxbUhUYlJSbTBXcmFEZElUV0hKRWhaSUNERWtOamkyNTJVUHpwZ0JQT09aMzVqQk50L1BhV3pteXd3SnYwZVB4Zzh6RWdBSFJFUkVSQlNKQ2dDYURGeElTV2Q5TGtSRVJFUmRiNmZTdVA2a0FvMEdhdTZxZnFZblJFUkVSTlFMdnYrdENnQ1F6L2c4aUlpSWlIb1NteWdpSWlJaUFTb0FaRFFKTTRZU09sU3JPMWg2YmdFQTh1TXlqSng4NUQwakp5RS9ya1RLdU8vRnpSUkxOdGEyYmVGTVlWcUJya2xDbVZiSGpwSngzNHViV2R1MlVDdzVpV1YwRlNqa1ZkL3piWmRwZGV5d0dlOTdjVE5MYXlacUpoTExlTmRKcSs5em1wbFdhMVFrNDdmdXcyYTg2eVJxSm03TllaMWluWXFTWVowNlgzVXFMQlVBQmxRSkh4a25mN2dnS1V2Q2c2VTZWc29XN3Q1VThNdXFpZjJ5QXlNclllNURIU250NUtDNlgrYjZwSUxiK2RZeldaRXpCbEFyMWJDeVpZbGxUQXQzYituNDZXa3RVdWF6R3hvZXJWcW9tUkRLM0Nsb21MblU0djlBSUpQUEtWaFlyS0pZZHBMSjdEbDRvZGtvNUZVOFdxMUh5a3dhTXRiWEc4VXNha1pYZ1M5bVV4akpuYnlnS3BJWjBXUXNMRmF4YnlLUnpQcWVnMnREQ3JhS05uWjNuTVF5UVd0VUpPT3UwWDJCekVyWnd2eXNpcVUxTTFJbWJzMWhuV0tkWXAxaW5XcVhDVU1DNE53d0ZIeHplekJ5ZUhuVHhJT2xldk8xa1pVd1A1c0tQSm5qbWV1VEN1WStDUjVxRjhuY2Y5SlkwTDJRdVZQUU1ETVYzTVJHelZUclRyUFk5R05HVjRGNW4wVVpKL082WkdOaHNZcWFpYjdNaEZtaklwbE8xSUp1enJCT3NVNkpaRmluZXI5TytmbjZ4N2NBWXM1RVRZOHB5S1lQRHo0enBiWTltZU9aVnBmM09wRTV2ayszWnJKcENkTmo3UzhqUnMya05PbklZdSszek1Td0hMZ29SVE1qT1JrVHc0Zjc5RnNtekJvVnlYU2lGblJ6aG5XS2RZcDE2bnpXcVhZVUFQZEdNekkrdnhMdEZnZHU5L3ptb0hHcHpyS0JqZGMyc2huSjl4K3NWZWJaQ3d1WFJ4VU0rTnluU2lUamRxaVdEYUZNTmkyaFpwNytjWFFWcU5TQWpSMExIMHdvVUpYT1paWTNUVHo4dGRGeEo1WEpwaVdVM3ptSm5GdXg3S0JVY1FJL3h4YkozSDlTdzdPWGRtSVo5L2ZtelVFeW1YWnJWQ1FUdHhhNDYrMjBqOE02eFRvRnNFNkpaTTVyblFyeXczTGpGZ2NTQU9mcWtJeXZQazVIK2diSGgreVdONjNtWmJWV1EzZEJHYitCTTlHTU95d21rbkgzYVRjTWR6d3pNNlUwQjlkRU1rR0RiVkV6M2lHNnBESkdUc0xrc0J3NWs4dEl6UUZQa1V5cndWalJqSGZZTktsTWZseEdxZUkwZjhlVHl2aXRVWkdNZDQyS1pBclRDcloyN2NpWk9EVkhKTU02eFRvbG1tR2Q2czA2RmVTN253OEF2RytpUmpPODJTWVJFUkZSR0x6WkpoRVJFVkVNS2dEVWJlRFZnWDNXNTBKRVJFVFVNeVFBVHR1OWlJaUlpT2dJQ2NDM1BsKzc1MjU4K2Vrb2Noa1YyWlNLZ1pTS2pLNUFVeVQ4Wi9zQWI5K1p5QnRwMUMwSGYxL1p4YjgzeWdDQWpOcTRFem9SRVJGUnR5aFdEcThkZlhsekZFTnBEWU5wRllNcEJSbXQ4ZGVYYm44emJhUlJ0Mno4NVovYjJDN1YzTmhmQVR3R0doL24vY25uT1BlOEI3azhuTUdsQzJtTURhVXdQS2hqUUZmd2oyZHY4R1NqaEQ4VVJyQlRycUgwcm43WVJHa1NSakljdVNJaUlxTHVVYXdjM2hEMmp6ZEhjWGw0b05uZkdJTTYwcHJjN0c5K1h4akJxMUlWRDFmMnZFM1Vud0g4RFlnNVdLNnJSK1AvK2wrNXVaMVJlUldLaUlpSWVzL3gvc1pQMEY2UDNZM254WGR4ejRlSWlJam96T21lMjN5RjdXOVdYMVc4TC8vcmJnUTFVWHZ1UnFYR3Y5d2pJaUtpM3VlOTRmeEJ5UDVtdjJaNVg2NjVHN0dIbHNaeXZFa25FUkVSOVpjdy9VMUhKNzlmdm0wT1hVSGpURGtSRVJIMXNYQXpVYnZoUGpQMFRLNUQ4M2xBSXhFUkVkRlpTWG42ay9VUU0xRlBYK3g3WHo3MnZvZzFFeldvK3orVm1ZaUlpS2pieUo3TzU2RGV2cjhwdlRPOVg5cnp2b2oxb2R0Z1N1Rk1GQkVSRWZXVnNQME5KNWVJaUlpSUJMQ0pJaUlpSWhMQUpvcUlpSWhJUU93bTZtSkc3Y1I1RUJFUkVYV05DeUg2bTloTmxCYnkrVEpFUkVSRXZTTE04L1BZQVJFUkVSRUppTlZFalErbE9uVWVSRVJFUkYwaGJIOFQxRVJkY3pkR3NwcnZUcnpoSmhFUkVmV0t1dWRad3FPRC92M053UHYrWnVyaWtZYnFsdmRGcUNZcTZDQ0RxY01tNm5lam1lWjIxWFFDdmpVUkVSRlI4a3o3c0Q4SnZFaVVjcHVvdFBmdGk5NFhIWjJKOGpaVUZuc29JaUlpNm1NY0xDY2lJaUlTRU9yanZJek9Yb3VJaUloNm4vZVp3d01oKzV2eG84L1J1K2x1aEdxaXBvMTB3RzZ0MmZ3NGo0aUlpTHFNNldtaXd2WTNsNGFPTkZITnVhaU9YbUw2OUVxMnVWM2xVQlFSRVJIMU1Ra0F1eDBpSWlLaWlGUUEwR1RnUWtvNjYzTWhJaUlpNm5vN2xjYjFKeFZvTkZCelYvWEFBQkVSRVJFQjMvOVdCY0JiSEJBUkVSRUpZUk5GUkVSRUpFQUZnSXdtWWNZSS93eThXdDNCMHZQR3cyZnk0ektNbkh6a1BTTW5JVCt1Uk1xNDc4WE5GRXMyMXJadDRVeGhXb0d1U1VLWlZzZU9rbkhmaTV0WjI3WlFMRG1KWlhRVktPUlYzL050bDJsMTdMQVo3M3R4TTB0ckptb21Fc3Q0MTBtcjczT2FtVlpyVkNUanQrN0RacnpySkdvbWJzMWhuV0tkaXBKaG5UcGZkU29zRlFBR1ZBa2ZHU2QvdUNBcFM4S0RwVHBXeWhidTNsVHd5NnFKL2JJREl5dGg3a01kS2Uza29McGY1dnFrZ3R2NTFqTlprVE1HVUN2VnNMSmxpV1ZNQzNkdjZmanBhUzFTNXJNYkdoNnRXcWlaRU1yY0tXaVl1ZFRpLzBBZ2s4OHBXRmlzb2xoMmtzbnNPWGloMlNqa1ZUeGFyVWZLVEJveTF0Y2J4U3hxUmxlQkwyWlRHTW1kdktBcWtoblJaQ3dzVnJGdklwSE0rcDZEYTBNS3RvbzJkbmVjeERKQmExUWs0NjdSZllITVN0bkMvS3lLcFRVelVpWnV6V0dkWXAxaW5XS2RhcGNKUXdMZzNEQVVmSE43TUhKNGVkUEVnNlY2ODdXUmxUQS9td284bWVPWjY1TUs1ajRKSG1vWHlkeC8wbGpRdlpDNVU5QXdNeFhjeEViTlZPdE9zOWowWTBaWGdYbWZSUmtuODdwa1kyR3hpcHFKdnN5RVdhTWltVTdVZ203T3NFNnhUb2xrV0tkNnYwNzUrZnJIdHdCaXprUk5qeW5JcGc4UFBqT2x0ajJaNDVsV2wvYzZrVG0rVDdkbXNta0owMlB0THlOR3phUTA2Y2hpNzdmTXhMQWN1Q2hGTXlNNUdSUERoL3YwV3liTUdoWEpkS0lXZEhPR2RZcDFpblhxZk5hcGRoUUE5MFl6TWo2L0V1MFdCMjczL09hZ2Nhbk9zb0dOMXpheUdjbjNINnhWNXRrTEM1ZEhGUXo0M0tkS0pPTjJxSllOb1V3MkxhRm1udjV4ZEJXbzFJQ05IUXNmVENoUWxjNWxsamROUFB5MTBYRW5sY21tSlpUZk9ZbWNXN0hzb0ZSeEFqL0hGc25jZjFMRHM1ZDJZaG4zOStiTlFUS1pkbXRVSkJPM0ZyanI3YlNQd3pyRk9nV3dUb2xrem11ZEN2TERjdU1XQnhJQTUrcVFqSzgranZaOHZPTkRkc3ViVnZPeVdxdWh1NkNNMzhDWmFNWWRGaFBKdVB1MEc0WTducG1aVXBxRGF5S1pvTUcycUJudkVGMVNHU01uWVhKWWpwekpaYVRtZ0tkSXB0VmdyR2pHTzJ5YVZDWS9McU5VY1pxLzQwbGwvTmFvU01hN1JrVXloV2tGVzd0MjVFeWNtaU9TWVoxaW5STE5zRTcxWnAwSzh0M1BCd0RlTjFHakdkNXNrNGlJaUNnTTNteVRpSWlJS0FZVkFPbzI4T3JBUHV0eklTSWlJdW9aRWdDbjdWNUVSRVJFZElRRTROdXpQZ2tpSWlLaVh2Ti9ORUJ2NWxyNng0UUFBQUFBU1VWT1JLNUNZSUk9",
    },
    {
      name: "__ASSET__:bitmap_COrientation",
      data: "",
    },
    {
      name: "__ASSET__:bitmap_CTitlePreloader",
      data: "",
    },
    {
      name: "__ASSET__:bitmap_CBGPreloader",
      data: "",
    },
  ];
  var __map_reserved = {};
  var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
  if (ArrayBuffer.prototype.slice == null) {
    ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
  }
  var DataView = $global.DataView || js_html_compat_DataView;
  var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
  var Float64Array =
    $global.Float64Array ||
    ($global.Float32Array ? "notsupported" : null) ||
    js_html_compat_Float64Array._new;
  var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
  var this1 = new Uint32Array(256);
  lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
  var _g = 0;
  while (_g < 256) {
    var i = _g++;
    lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(
      i * 257.00392156862745
    );
  }
  var this2 = new Uint8Array(510);
  lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
  var _g1 = 0;
  while (_g1 < 255) {
    var i1 = _g1++;
    lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
  }
  var _g11 = 255;
  var _g2 = 511;
  while (_g11 < _g2) {
    var i2 = _g11++;
    lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
  }
  lime_system_CFFI.available = false;
  lime_system_CFFI.enabled = false;
  lime_utils_Log.level = 3;
  if (typeof console == "undefined") {
    console = {};
  }
  if (console.log == null) {
    console.log = function () {};
  }
  lime_utils_Log.throwErrors = true;
  openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
  openfl_display_DisplayObject.__instanceCount = 0;
  openfl_display_DisplayObject.__worldRenderDirty = 0;
  openfl_display_DisplayObject.__worldTransformDirty = 0;
  Main.SCREEN_WIDTH = 0;
  Main.SCREEN_HEIGHT = 0;
  Main.STATE_PAUSE = 0;
  Main.STATE_GAME = 1;
  openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
  openfl_text_TextField.__regexAlign = new EReg(
    "align=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexColor = new EReg(
    "color=(\"#([^\"]+)\"|'#([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexBlockIndent = new EReg(
    "blockindent=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexBreakTag = new EReg("<br\\s*/?>", "gi");
  openfl_text_TextField.__regexEntities = [
    new EReg("&quot;", "g"),
    new EReg("&apos;", "g"),
    new EReg("&amp;", "g"),
    new EReg("&lt;", "g"),
    new EReg("&gt;", "g"),
  ];
  openfl_text_TextField.__regexFace = new EReg(
    "face=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexHref = new EReg(
    "href=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexHTMLTag = new EReg("<.*?>", "g");
  openfl_text_TextField.__regexIndent = new EReg(
    " indent=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexLeading = new EReg(
    "leading=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexLeftMargin = new EReg(
    "leftmargin=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexRightMargin = new EReg(
    "rightmargin=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexTabStops = new EReg(
    "tabstops=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl_text_TextField.__regexSize = new EReg(
    "size=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  DataGame.volBgm = 0.9;
  DataGame.volVc = 0.6;
  DataGame.volClick = 0.5;
  DataGame.volAchievements = 0.4;
  DataGame.volCrack = 0.7;
  DataGame.volShake = 0.9;
  DataGame.volBloop = 1.7;
  DataGame.volIce = 0.9;
  DataGame.volLiquid = 2;
  DataGame.volCut = 1.6;
  DataGame.volEnding2 = 1.6;
  DataGame.volGlass = 2.5;
  DataGame.volGulp = 2;
  DataGame.volBubble = 1;
  DataGame.volEnding3 = 1;
  DataGame.volScream = 0.8;
  DataGame.volHorror = 1.7;
  DataGame.volAh = 1.3;
  DataGame.volPuke = 4;
  DataGame.volRainbow = 0.7;
  DataGame.volEnding6 = 0.5;
  DataGame.volEnding7 = 1.3;
  DataGame.volEnding8 = 1.2;
  DataGame.volEnding9 = 0.7;
  DataGame.volTorch = 2;
  DataGame.volSing = 1;
  DataGame.volShine1 = 1;
  DataGame.volShine = 2;
  DataGame.volSeagull = 0.6;
  DataGame.volOh = 1;
  DataGame.volSlide = 1.4;
  DataGame.isLiquid = false;
  DataGame.stopLiquid = false;
  DataGame.pauseGame = false;
  DataGame.selesaiTransisi = false;
  DataGame.namaBrowser = "";
  DataGame.jumlahPartikel = 0;
  DataGame.totalScore = 0;
  DataGame.noEnding = 1;
  DataGame.windowPrev = "MainMenu";
  DataGame.activeCheat = false;
  DataGame.sudahPlayBGM = false;
  DataGame.adaFruit = [false, false, false, false];
  DataGame.koleksiEnding = [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ];
  DataGame.totalOnOffSound = 0;
  DataGame.totalPushButton = 0;
  DataGame.totalPlayGame = 0;
  DataGame.bolTouchBotol = [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ];
  DataGame.dataBotol = [
    { nama: "", total: 0 },
    { nama: "Rum", total: 1900, warna: 13719296 },
    { nama: "Light Rum", total: 1850, warna: 13750737 },
    { nama: "Gold Rum", total: 3600, warna: 16758528 },
    { nama: "Coconut Rum", total: 2100, warna: 14147292 },
    { nama: "Blue Curacao", total: 1800, warna: 3067647 },
    { nama: "Orange Curacao", total: 3800, warna: 16758049 },
    { nama: "Sweet Sour", total: 1250, warna: 16770304 },
    { nama: "Pineapple Juice", total: 1210, warna: 13723654 },
    { nama: "Orange Juice", total: 1260, warna: 16768409 },
    { nama: "Lime Juice", total: 3900, warna: 15400801 },
    { nama: "Agricole Rum", total: 4500, warna: 13719296 },
    { nama: "Grenadine Syrup", total: 1350, warna: 16726132 },
    { nama: "Almond Syrup", total: 2400, warna: 12228998 },
    { nama: "Simple Syrup", total: 3500, warna: 13421772 },
    { nama: "Sweet Vermounth", total: 2000, warna: 3552822 },
    { nama: "Tequila", total: 1300, warna: 13221120 },
    { nama: "Vodka", total: 1600, warna: 13421772 },
    { nama: "Gin", total: 1400, warna: 13421772 },
    { nama: "Wine", total: 1500, warna: 12713984 },
    { nama: "Milk", total: 1200, warna: 16777215 },
    { nama: "Add a little ice ?", total: 500 },
    { nama: "Add a fruit !?", total: -50 },
    { nama: "Add garnish ?", total: 100 },
  ];
  openfl_geom_Point.__temp = new openfl_geom_Point();
  DataPosition.mainmenu_title = new openfl_geom_Point(45, 40);
  DataPosition.mainmenu_moreGames = new openfl_geom_Point(170, 346);
  DataPosition.mainmenu_playGame = new openfl_geom_Point(170, 278);
  DataPosition.mainmenuY8_title = new openfl_geom_Point(45, 40);
  DataPosition.mainmenuY8_playGame = new openfl_geom_Point(170, 308);
  DataPosition.BOTOL1 = { x: 46, y: 8 };
  DataPosition.BOTOL2 = { x: 107, y: 8 };
  DataPosition.BOTOL3 = { x: 168, y: 8 };
  DataPosition.BOTOL4 = { x: 229, y: 8 };
  DataPosition.BOTOL5 = { x: 291, y: 17 };
  DataPosition.BOTOL6 = { x: 352, y: 17 };
  DataPosition.BOTOL7 = { x: 410, y: 12 };
  DataPosition.BOTOL8 = { x: 471, y: 8 };
  DataPosition.BOTOL9 = { x: 532, y: 8 };
  DataPosition.BOTOL10 = { x: 593, y: 8 };
  DataPosition.BOTOL11 = { x: 103, y: 172 };
  DataPosition.BOTOL12 = { x: 162, y: 167 };
  DataPosition.BOTOL13 = { x: 219, y: 167 };
  DataPosition.BOTOL14 = { x: 272, y: 167 };
  DataPosition.BOTOL15 = { x: 315, y: 160 };
  DataPosition.BOTOL16 = { x: 379, y: 167 };
  DataPosition.BOTOL17 = { x: 441, y: 162 };
  DataPosition.BOTOL18 = { x: 496, y: 171 };
  DataPosition.BOTOL19 = { x: 548, y: 157 };
  DataPosition.BOTOL20 = { x: 594, y: 172 };
  DataPosition.AMBIL_BOTOL1 = {
    x: 214,
    y: 245,
    angle: 16,
    scale: 3.381,
    xb: 244,
    yb: 262,
    angleb: 24.7,
    xt: -378,
    yt: 81,
    scaledef: 0.265,
    xdef: 155,
    ydef: 234,
  };
  DataPosition.AMBIL_BOTOL2 = {
    x: 214,
    y: 245,
    angle: 16,
    scale: 3.127,
    xb: 244,
    yb: 262,
    angleb: 24.7,
    xt: -338,
    yt: 94,
    scaledef: 0.265,
    xdef: 155,
    ydef: 234,
  };
  DataPosition.AMBIL_BOTOL3 = {
    x: 214,
    y: 245,
    angle: 18.5,
    scale: 2.827,
    xb: 244,
    yb: 262,
    angleb: 24.7,
    xt: -270,
    yt: 90,
    scaledef: 0.265,
    xdef: 155,
    ydef: 233,
  };
  DataPosition.AMBIL_BOTOL4 = {
    x: 214,
    y: 245,
    angle: 21.7,
    scale: 2.528,
    xb: 244,
    yb: 262,
    angleb: 24.7,
    xt: -207,
    yt: 87,
    scaledef: 0.265,
    xdef: 155,
    ydef: 228,
  };
  DataPosition.AMBIL_BOTOL5 = {
    x: 214,
    y: 245,
    angle: 21.7,
    scale: 2.174,
    xb: 244,
    yb: 262,
    angleb: 30.7,
    xt: -147,
    yt: 110,
    scaledef: 0.265,
    xdef: 155,
    ydef: 228,
  };
  DataPosition.AMBIL_BOTOL6 = {
    x: 214,
    y: 245,
    angle: 28,
    scale: 1.869,
    xb: 244,
    yb: 262,
    angleb: 30.7,
    xt: -89,
    yt: 98,
    scaledef: 0.265,
    xdef: 155,
    ydef: 227,
  };
  DataPosition.AMBIL_BOTOL7 = {
    x: 214,
    y: 245,
    angle: 33.2,
    scale: 1.555,
    xb: 244,
    yb: 262,
    angleb: 30.7,
    xt: -25,
    yt: 103,
    scaledef: 0.265,
    xdef: 158,
    ydef: 224,
  };
  DataPosition.AMBIL_BOTOL8 = {
    x: 214,
    y: 245,
    angle: 43.1,
    scale: 1.262,
    xb: 244,
    yb: 262,
    angleb: 38.2,
    xt: 35,
    yt: 101,
    scaledef: 0.265,
    xdef: 164,
    ydef: 220,
  };
  DataPosition.AMBIL_BOTOL9 = {
    x: 214,
    y: 245,
    angle: 53.8,
    scale: 1.021,
    xb: 244,
    yb: 262,
    angleb: 38.2,
    xt: 91,
    yt: 103,
    scaledef: 0.265,
    xdef: 171,
    ydef: 218,
  };
  DataPosition.AMBIL_BOTOL10 = {
    x: 214,
    y: 245,
    angle: 70.4,
    scale: 0.821,
    xb: 244,
    yb: 262,
    angleb: 46.1,
    xt: 152,
    yt: 112,
    scaledef: 0.265,
    xdef: 186,
    ydef: 203,
  };
  DataPosition.AMBIL_BOTOL11 = {
    x: 214,
    y: 245,
    angle: 3.4,
    scale: 3.077,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -332,
    yt: 213,
    scaledef: 0.265,
    xdef: 148,
    ydef: 242,
  };
  DataPosition.AMBIL_BOTOL12 = {
    x: 214,
    y: 245,
    angle: 3.4,
    scale: 2.748,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -281,
    yt: 216,
    scaledef: 0.265,
    xdef: 148,
    ydef: 242,
  };
  DataPosition.AMBIL_BOTOL13 = {
    x: 214,
    y: 245,
    angle: 3.4,
    scale: 2.46,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -223,
    yt: 220,
    scaledef: 0.265,
    xdef: 148,
    ydef: 242,
  };
  DataPosition.AMBIL_BOTOL14 = {
    x: 214,
    y: 245,
    angle: 3.4,
    scale: 2.151,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -168,
    yt: 223,
    scaledef: 0.265,
    xdef: 148,
    ydef: 242,
  };
  DataPosition.AMBIL_BOTOL15 = {
    x: 214,
    y: 245,
    angle: 3.4,
    scale: 1.88,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -120,
    yt: 225,
    scaledef: 0.265,
    xdef: 148,
    ydef: 242,
  };
  DataPosition.AMBIL_BOTOL16 = {
    x: 214,
    y: 245,
    angle: 4.6,
    scale: 1.5,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: -57,
    yt: 224,
    scaledef: 0.265,
    xdef: 148,
    ydef: 241,
  };
  DataPosition.AMBIL_BOTOL17 = {
    x: 214,
    y: 245,
    angle: 7.1,
    scale: 1.195,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: 2,
    yt: 221,
    scaledef: 0.265,
    xdef: 152,
    ydef: 240,
  };
  DataPosition.AMBIL_BOTOL18 = {
    x: 214,
    y: 245,
    angle: 7.1,
    scale: 0.894,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: 54,
    yt: 227,
    scaledef: 0.265,
    xdef: 152,
    ydef: 240,
  };
  DataPosition.AMBIL_BOTOL19 = {
    x: 214,
    y: 245,
    angle: 15.3,
    scale: 0.596,
    xb: 244,
    yb: 262,
    angleb: 21.4,
    xt: 106,
    yt: 221,
    scaledef: 0.265,
    xdef: 153,
    ydef: 232,
  };
  DataPosition.AMBIL_BOTOL20 = {
    x: 214,
    y: 245,
    angle: 16,
    scale: 0.385,
    xb: 244,
    yb: 262,
    angleb: 24.7,
    xt: 139,
    yt: 231,
    scaledef: 0.265,
    xdef: 155,
    ydef: 231,
  };
  DataPosition.PIECE1 = { x: 193, y: -147, y1: 850, delay: 39, durasi: 16 };
  DataPosition.PIECE2 = { x: 827, y: 278, y1: 834, delay: 24, durasi: 16 };
  DataPosition.PIECE3 = { x: 746, y: 178, y1: 723, delay: 6, durasi: 16 };
  DataPosition.PIECE4 = { x: 741, y: 24, y1: 797, delay: 18, durasi: 16 };
  DataPosition.PIECE5 = { x: 728, y: -76, y1: 838, delay: 6, durasi: 16 };
  DataPosition.PIECE6 = { x: 597, y: -144, y1: 748, delay: 19, durasi: 16 };
  DataPosition.PIECE7 = { x: 497, y: 142, y1: 783, delay: 13, durasi: 16 };
  DataPosition.PIECE8 = { x: 566, y: 316, y1: 820, delay: 6, durasi: 16 };
  DataPosition.PIECE9 = { x: 615, y: 389, y1: 865, delay: 21, durasi: 16 };
  DataPosition.PIECE10 = { x: 391, y: -142, y1: 748, delay: 16, durasi: 16 };
  DataPosition.PIECE11 = { x: 108, y: 95, y1: 825, delay: 11, durasi: 16 };
  DataPosition.PIECE12 = { x: -96, y: -28, y1: 700, delay: 24, durasi: 16 };
  DataPosition.PIECE13 = { x: -108, y: -99, y1: 745, delay: 12, durasi: 16 };
  DataPosition.PIECE14 = { x: -2, y: -118, y1: 774, delay: 6, durasi: 16 };
  DataPosition.PIECE15 = { x: -82, y: 141, y1: 731, delay: 14, durasi: 16 };
  DataPosition.PIECE16 = { x: -51, y: 346, y1: 842, delay: 6, durasi: 16 };
  DataPosition.PIECE17 = { x: 54, y: 377, y1: 779, delay: 6, durasi: 16 };
  DataPosition.PIECE18 = { x: 158, y: 343, y1: 799, delay: 11, durasi: 16 };
  DataPosition.PIECE19 = { x: 236, y: 290, y1: 734, delay: 6, durasi: 16 };
  DataPosition.PIECE20 = { x: 314, y: 315, y1: 741, delay: 18, durasi: 16 };
  DataPosition.PIECE21 = { x: 441, y: 280, y1: 711, delay: 6, durasi: 16 };
  DataPosition.PIECE22 = { x: 636, y: -19, y1: 785, delay: 15, durasi: 16 };
  DataPosition.PIECE23 = {
    x: 110,
    y: 21,
    y1: 809,
    delay: 14,
    durasi: 0.53333333333333333,
  };
  DataPosition.PIECE24 = {
    x: 440,
    y: -21,
    y1: 749,
    delay: 23,
    durasi: 0.53333333333333333,
  };
  DataPosition.PIECE25 = {
    x: 24,
    y: 194,
    y1: 767,
    delay: 9,
    durasi: 0.53333333333333333,
  };
  DataPosition.PIECE26 = {
    x: 561,
    y: 101,
    y1: 702,
    delay: 9,
    durasi: 0.53333333333333333,
  };
  DataPosition.PIECE27 = {
    x: 206,
    y: -105,
    y1: 673,
    delay: 6,
    durasi: 0.53333333333333333,
  };
  DataPosition.PIECE28 = {
    x: 333,
    y: 151,
    y1: 677,
    delay: 0,
    durasi: 0.53333333333333333,
  };
  DataPosition.ACHIEVE1 = new openfl_geom_Point(85, 95);
  DataPosition.ACHIEVE2 = new openfl_geom_Point(85, 169);
  DataPosition.ACHIEVE3 = new openfl_geom_Point(85, 243);
  DataPosition.ACHIEVE4 = new openfl_geom_Point(85, 317);
  DataPosition.ACHIEVE5 = new openfl_geom_Point(296, 95);
  DataPosition.ACHIEVE6 = new openfl_geom_Point(296, 169);
  DataPosition.ACHIEVE7 = new openfl_geom_Point(296, 243);
  DataPosition.ACHIEVE8 = new openfl_geom_Point(296, 317);
  DataPosition.ACHIEVE9 = new openfl_geom_Point(507, 95);
  DataPosition.ACHIEVE10 = new openfl_geom_Point(507, 169);
  DataPosition.ACHIEVE11 = new openfl_geom_Point(507, 243);
  DataPosition.ACHIEVE12 = new openfl_geom_Point(507, 317);
  DataPosition.PHOTO1 = new openfl_geom_Point(107, 125);
  DataPosition.PHOTO2 = new openfl_geom_Point(225, 125);
  DataPosition.PHOTO3 = new openfl_geom_Point(342, 125);
  DataPosition.PHOTO4 = new openfl_geom_Point(458, 125);
  DataPosition.PHOTO5 = new openfl_geom_Point(575, 125);
  DataPosition.PHOTO6 = new openfl_geom_Point(107, 255);
  DataPosition.PHOTO7 = new openfl_geom_Point(225, 255);
  DataPosition.PHOTO8 = new openfl_geom_Point(342, 255);
  DataPosition.PHOTO9 = new openfl_geom_Point(458, 255);
  DataPosition.PHOTO10 = new openfl_geom_Point(575, 255);
  DataSave.achievements = [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ];
  DataSave.localStorage = js_Browser.getLocalStorage();
  DataSave.saveData = {
    totalPlayGame: 0,
    totalPushButton: 0,
    totalOnOffSound: 0,
    bolTouchBotol: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
    koleksiEnding: [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
    ],
  };
  Global.tweenPauseList = [];
  Global.alignList = [];
  Global.sptFullScreenList = [];
  Global.animationList = [];
  Global.DOMAIN = "";
  Global.linkWebsite = "http://www.retrobowl.click/?utm_source=";
  Global.linkSplash = "&utm_medium=g_prelogo&utm_campaign=";
  Global.linkLogo = "&utm_medium=g_menulogo&utm_campaign=";
  Global.linkMore = "&utm_medium=g_moregames&utm_campaign=";
  openfl_text_Font.__registeredFonts = [];
  CBGPreloader.resourceType = "image/png";
  CBGPreloader.resourceName = "__ASSET__:bitmap_CBGPreloader";
  CTitlePreloader.resourceType = "image/png";
  CTitlePreloader.resourceName = "__ASSET__:bitmap_CTitlePreloader";
  CBarLoading1.resourceType = "image/png";
  CBarLoading1.resourceName = "__ASSET__:bitmap_CBarLoading1";
  CBarLoading2.resourceType = "image/png";
  CBarLoading2.resourceName = "__ASSET__:bitmap_CBarLoading2";
  CTextLoading.resourceType = "image/png";
  CTextLoading.resourceName = "__ASSET__:bitmap_CTextLoading";
  COrientation.resourceType = "image/png";
  COrientation.resourceName = "__ASSET__:bitmap_COrientation";
  CLogoY8.resourceType = "image/png";
  CLogoY8.resourceName = "__ASSET__:bitmap_CLogoY8";
  CLogoIDNET.resourceType = "image/png";
  CLogoIDNET.resourceName = "__ASSET__:bitmap_CLogoIDNET";
  Setting.GAME_WIDTH = 800;
  Setting.GAME_HEIGHT = 480;
  Setting.GAME_WIDTHMAX = 1400;
  Setting.GAME_HEIGHTMAX = 840;
  Setting.FPS = 30;
  Setting.counterAds = 2;
  Setting.maxCounterAds = 3;
  Setting.isIDNET = true;
  Setting.APPID = "57a2fd7ae694aa1f443e0c24";
  Setting.APPSECRET =
    "2edb9cb15ac35e6c011fc57ce3667747f9f771840e793900f8387b725846dd2d";
  Setting.gameName = "bartender_make_right_mix";
  Setting.saveName = "bartender_make_right_mix_save";
  Setting.achievementsName = "bartender_make_right_mix_achievements";
  Setting.highscoresName = "highscores";
  Setting.achievementsData = [
    { name: "Shakerina", key: "c383e80125fb96a2ea5f" },
    { name: "Wataaaaa!!", key: "41c2946baeeafa51f085" },
    { name: "Dee Jhayy", key: "9a8ba7aa93b2b47a6acb" },
    { name: "Push Push", key: "10ea413f8ce395d099dd" },
    { name: "Mixy Maxy", key: "f511d5572b66ac1e0cae" },
    { name: "Touchy Touch", key: "28da59ef7c5c3d2083d7" },
    { name: "Salad Master", key: "80b8981961d4bc5dd926" },
    { name: "Bartender", key: "dbf4d6c26724e8ef5c22" },
    { name: "Idle Master", key: "05e1a0f89d5657bc36bf" },
    { name: "Steel Heart", key: "b4882c6bedd71af69f7f" },
    { name: "Oh Memory!", key: "4f5e96965d165a9d7d2e" },
    { name: "Perfectionist", key: "9333a42f9c761ae9ee7e" },
  ];
  SoundGame.isSFX = true;
  SoundGame.isMuted = false;
  Y8Api.isConnect = false;
  Y8Api.isCheckLogin = true;
  Y8Api.isCheckProtection = true;
  Y8Api.isInit = false;
  Y8Api.isResponseSponsor = false;
  Y8Api.isResponseBlacklisted = false;
  Y8Api.isLogin = false;
  Y8Api.isSponsor = false;
  Y8Api.isBlacklisted = false;
  Y8Api.isSaveOnline = false;
  Y8Api.nickname = "";
  Y8Api.PID = "";
  haxe_Serializer.USE_CACHE = false;
  haxe_Serializer.USE_ENUM_INDEX = false;
  haxe_Serializer.BASE64 =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
  haxe_Unserializer.DEFAULT_RESOLVER =
    new haxe__$Unserializer_DefaultResolver();
  haxe_Unserializer.BASE64 =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
  haxe_crypto_Base64.CHARS =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
  haxe_ds_ObjectMap.count = 0;
  haxe_io_FPHelper.i64tmp = (function ($this) {
    var $r;
    var this1 = new haxe__$Int64__$_$_$Int64(0, 0);
    $r = this1;
    return $r;
  })(this);
  haxe_io_FPHelper.LN2 = 0.6931471805599453;
  idnet_common_events_IDNetEvent.ID_INITIALIZE_COMPLETE = "id.init";
  idnet_common_events_IDNetEvent.ID_INITIALIZE_FAILED = "id.init.fail";
  idnet_common_events_IDNetEvent.ID_AUTH_RESPONSE_CHANGE =
    "auth.authResponseChange";
  idnet_common_events_IDNetEvent.ID_AUTH_FAIL = "auth.fail";
  idnet_common_events_IDNetEvent.ID_AUTH_COMPLETE = "auth.complete";
  idnet_common_events_IDNetEvent.ID_LOGOUT = "logout.complete";
  idnet_common_events_IDNetEvent.ID_SEND_FAIL = "image.send.fail";
  idnet_common_events_IDNetEvent.ID_SEND_COMPLETE = "image.send.complete";
  idnet_common_events_IDNetEvent.ID_BLACKLISTED = "blacklisted";
  idnet_common_events_IDNetEvent.IS_SPONSOR = "is_sponsor";
  idnet_common_events_IDNetEvent.ID_SAVE_STORAGE_READY = "cloudStorageReady";
  idnet_common_events_IDNetEvent.GET_SAVE_FAIL = "save.get.fail";
  idnet_common_events_IDNetEvent.ACHIEVEMENT_UNLOCKED = "achievement.unlocked";
  idnet_common_events_IDNetEvent.ID_SCORES_SENDED = "achievement.score_sended";
  openfl_events_Event.ACTIVATE = "activate";
  openfl_events_Event.ADDED = "added";
  openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
  openfl_events_Event.CANCEL = "cancel";
  openfl_events_Event.CHANGE = "change";
  openfl_events_Event.CLEAR = "clear";
  openfl_events_Event.CLOSE = "close";
  openfl_events_Event.COMPLETE = "complete";
  openfl_events_Event.CONNECT = "connect";
  openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
  openfl_events_Event.COPY = "copy";
  openfl_events_Event.CUT = "cut";
  openfl_events_Event.DEACTIVATE = "deactivate";
  openfl_events_Event.ENTER_FRAME = "enterFrame";
  openfl_events_Event.EXIT_FRAME = "exitFrame";
  openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
  openfl_events_Event.FRAME_LABEL = "frameLabel";
  openfl_events_Event.FULLSCREEN = "fullScreen";
  openfl_events_Event.ID3 = "id3";
  openfl_events_Event.INIT = "init";
  openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
  openfl_events_Event.OPEN = "open";
  openfl_events_Event.PASTE = "paste";
  openfl_events_Event.REMOVED = "removed";
  openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
  openfl_events_Event.RENDER = "render";
  openfl_events_Event.RESIZE = "resize";
  openfl_events_Event.SCROLL = "scroll";
  openfl_events_Event.SELECT = "select";
  openfl_events_Event.SELECT_ALL = "selectAll";
  openfl_events_Event.SOUND_COMPLETE = "soundComplete";
  openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
  openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
  openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
  openfl_events_Event.TEXTURE_READY = "textureReady";
  openfl_events_Event.UNLOAD = "unload";
  idnet_common_events_PostStatusEvent.FEED_POST_SUCCESS = "feed.post.success";
  idnet_common_events_PostStatusEvent.FEED_POST_FAIL = "feed.post.fail";
  idnet_common_events_PostStatusEvent.REASON_NOT_AUTHORIZED = "not.authorized";
  idnet_common_events_PostStatusEvent.REASON_UNKNOWN = "unknown";
  idnet_js__$Social.SCRIPT_ID = "id-jssdk";
  idnet_js__$Social.HTTP_API_PATH = "http://cdn.id.net/api/sdk.js";
  idnet_js__$Social.HTTPS_API_PATH = "https://scdn.id.net/api/sdk.js";
  js_Boot.__toStr = {}.toString;
  js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
  js_html_compat_Float64Array.BYTES_PER_ELEMENT = 8;
  js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
  lime__$backend_html5_HTML5HTTPRequest.activeRequests = 0;
  lime__$backend_html5_HTML5HTTPRequest.requestLimit = 4;
  lime__$backend_html5_HTML5HTTPRequest.requestQueue = new List();
  lime__$backend_html5_HTML5Window.dummyCharacter = "";
  lime__$backend_html5_HTML5Window.windowID = 0;
  lime_graphics_Image.__base64Chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
  lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
  lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
  lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
  lime_graphics_opengl_GL.POINTS = 0;
  lime_graphics_opengl_GL.LINES = 1;
  lime_graphics_opengl_GL.LINE_LOOP = 2;
  lime_graphics_opengl_GL.LINE_STRIP = 3;
  lime_graphics_opengl_GL.TRIANGLES = 4;
  lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
  lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
  lime_graphics_opengl_GL.ZERO = 0;
  lime_graphics_opengl_GL.ONE = 1;
  lime_graphics_opengl_GL.SRC_COLOR = 768;
  lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
  lime_graphics_opengl_GL.SRC_ALPHA = 770;
  lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
  lime_graphics_opengl_GL.DST_ALPHA = 772;
  lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
  lime_graphics_opengl_GL.DST_COLOR = 774;
  lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
  lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
  lime_graphics_opengl_GL.FUNC_ADD = 32774;
  lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
  lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
  lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
  lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
  lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
  lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
  lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
  lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
  lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
  lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
  lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
  lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
  lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
  lime_graphics_opengl_GL.BLEND_COLOR = 32773;
  lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
  lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
  lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
  lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
  lime_graphics_opengl_GL.STREAM_DRAW = 35040;
  lime_graphics_opengl_GL.STATIC_DRAW = 35044;
  lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
  lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
  lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
  lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
  lime_graphics_opengl_GL.FRONT = 1028;
  lime_graphics_opengl_GL.BACK = 1029;
  lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
  lime_graphics_opengl_GL.CULL_FACE = 2884;
  lime_graphics_opengl_GL.BLEND = 3042;
  lime_graphics_opengl_GL.DITHER = 3024;
  lime_graphics_opengl_GL.STENCIL_TEST = 2960;
  lime_graphics_opengl_GL.DEPTH_TEST = 2929;
  lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
  lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
  lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
  lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
  lime_graphics_opengl_GL.NO_ERROR = 0;
  lime_graphics_opengl_GL.INVALID_ENUM = 1280;
  lime_graphics_opengl_GL.INVALID_VALUE = 1281;
  lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
  lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
  lime_graphics_opengl_GL.CW = 2304;
  lime_graphics_opengl_GL.CCW = 2305;
  lime_graphics_opengl_GL.LINE_WIDTH = 2849;
  lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
  lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
  lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
  lime_graphics_opengl_GL.FRONT_FACE = 2886;
  lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
  lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
  lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
  lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
  lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
  lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
  lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
  lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
  lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
  lime_graphics_opengl_GL.STENCIL_REF = 2967;
  lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
  lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
  lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
  lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
  lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
  lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
  lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
  lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
  lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
  lime_graphics_opengl_GL.VIEWPORT = 2978;
  lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
  lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
  lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
  lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
  lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
  lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
  lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
  lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
  lime_graphics_opengl_GL.RED_BITS = 3410;
  lime_graphics_opengl_GL.GREEN_BITS = 3411;
  lime_graphics_opengl_GL.BLUE_BITS = 3412;
  lime_graphics_opengl_GL.ALPHA_BITS = 3413;
  lime_graphics_opengl_GL.DEPTH_BITS = 3414;
  lime_graphics_opengl_GL.STENCIL_BITS = 3415;
  lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
  lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
  lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
  lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
  lime_graphics_opengl_GL.SAMPLES = 32937;
  lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
  lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
  lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
  lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
  lime_graphics_opengl_GL.DONT_CARE = 4352;
  lime_graphics_opengl_GL.FASTEST = 4353;
  lime_graphics_opengl_GL.NICEST = 4354;
  lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
  lime_graphics_opengl_GL.BYTE = 5120;
  lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
  lime_graphics_opengl_GL.SHORT = 5122;
  lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
  lime_graphics_opengl_GL.INT = 5124;
  lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
  lime_graphics_opengl_GL.FLOAT = 5126;
  lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
  lime_graphics_opengl_GL.ALPHA = 6406;
  lime_graphics_opengl_GL.RGB = 6407;
  lime_graphics_opengl_GL.RGBA = 6408;
  lime_graphics_opengl_GL.LUMINANCE = 6409;
  lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
  lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
  lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
  lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
  lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
  lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
  lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
  lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
  lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
  lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
  lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
  lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
  lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
  lime_graphics_opengl_GL.SHADER_TYPE = 35663;
  lime_graphics_opengl_GL.DELETE_STATUS = 35712;
  lime_graphics_opengl_GL.LINK_STATUS = 35714;
  lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
  lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
  lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
  lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
  lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
  lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
  lime_graphics_opengl_GL.NEVER = 512;
  lime_graphics_opengl_GL.LESS = 513;
  lime_graphics_opengl_GL.EQUAL = 514;
  lime_graphics_opengl_GL.LEQUAL = 515;
  lime_graphics_opengl_GL.GREATER = 516;
  lime_graphics_opengl_GL.NOTEQUAL = 517;
  lime_graphics_opengl_GL.GEQUAL = 518;
  lime_graphics_opengl_GL.ALWAYS = 519;
  lime_graphics_opengl_GL.KEEP = 7680;
  lime_graphics_opengl_GL.REPLACE = 7681;
  lime_graphics_opengl_GL.INCR = 7682;
  lime_graphics_opengl_GL.DECR = 7683;
  lime_graphics_opengl_GL.INVERT = 5386;
  lime_graphics_opengl_GL.INCR_WRAP = 34055;
  lime_graphics_opengl_GL.DECR_WRAP = 34056;
  lime_graphics_opengl_GL.VENDOR = 7936;
  lime_graphics_opengl_GL.RENDERER = 7937;
  lime_graphics_opengl_GL.VERSION = 7938;
  lime_graphics_opengl_GL.EXTENSIONS = 7939;
  lime_graphics_opengl_GL.NEAREST = 9728;
  lime_graphics_opengl_GL.LINEAR = 9729;
  lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
  lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
  lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
  lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
  lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
  lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
  lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
  lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
  lime_graphics_opengl_GL.TEXTURE_2D = 3553;
  lime_graphics_opengl_GL.TEXTURE = 5890;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
  lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
  lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
  lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
  lime_graphics_opengl_GL.TEXTURE0 = 33984;
  lime_graphics_opengl_GL.TEXTURE1 = 33985;
  lime_graphics_opengl_GL.TEXTURE2 = 33986;
  lime_graphics_opengl_GL.TEXTURE3 = 33987;
  lime_graphics_opengl_GL.TEXTURE4 = 33988;
  lime_graphics_opengl_GL.TEXTURE5 = 33989;
  lime_graphics_opengl_GL.TEXTURE6 = 33990;
  lime_graphics_opengl_GL.TEXTURE7 = 33991;
  lime_graphics_opengl_GL.TEXTURE8 = 33992;
  lime_graphics_opengl_GL.TEXTURE9 = 33993;
  lime_graphics_opengl_GL.TEXTURE10 = 33994;
  lime_graphics_opengl_GL.TEXTURE11 = 33995;
  lime_graphics_opengl_GL.TEXTURE12 = 33996;
  lime_graphics_opengl_GL.TEXTURE13 = 33997;
  lime_graphics_opengl_GL.TEXTURE14 = 33998;
  lime_graphics_opengl_GL.TEXTURE15 = 33999;
  lime_graphics_opengl_GL.TEXTURE16 = 34000;
  lime_graphics_opengl_GL.TEXTURE17 = 34001;
  lime_graphics_opengl_GL.TEXTURE18 = 34002;
  lime_graphics_opengl_GL.TEXTURE19 = 34003;
  lime_graphics_opengl_GL.TEXTURE20 = 34004;
  lime_graphics_opengl_GL.TEXTURE21 = 34005;
  lime_graphics_opengl_GL.TEXTURE22 = 34006;
  lime_graphics_opengl_GL.TEXTURE23 = 34007;
  lime_graphics_opengl_GL.TEXTURE24 = 34008;
  lime_graphics_opengl_GL.TEXTURE25 = 34009;
  lime_graphics_opengl_GL.TEXTURE26 = 34010;
  lime_graphics_opengl_GL.TEXTURE27 = 34011;
  lime_graphics_opengl_GL.TEXTURE28 = 34012;
  lime_graphics_opengl_GL.TEXTURE29 = 34013;
  lime_graphics_opengl_GL.TEXTURE30 = 34014;
  lime_graphics_opengl_GL.TEXTURE31 = 34015;
  lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
  lime_graphics_opengl_GL.REPEAT = 10497;
  lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
  lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
  lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
  lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
  lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
  lime_graphics_opengl_GL.INT_VEC2 = 35667;
  lime_graphics_opengl_GL.INT_VEC3 = 35668;
  lime_graphics_opengl_GL.INT_VEC4 = 35669;
  lime_graphics_opengl_GL.BOOL = 35670;
  lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
  lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
  lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
  lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
  lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
  lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
  lime_graphics_opengl_GL.SAMPLER_2D = 35678;
  lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
  lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
  lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
  lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
  lime_graphics_opengl_GL.POINT_SPRITE = 34913;
  lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
  lime_graphics_opengl_GL.LOW_FLOAT = 36336;
  lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
  lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
  lime_graphics_opengl_GL.LOW_INT = 36339;
  lime_graphics_opengl_GL.MEDIUM_INT = 36340;
  lime_graphics_opengl_GL.HIGH_INT = 36341;
  lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
  lime_graphics_opengl_GL.RENDERBUFFER = 36161;
  lime_graphics_opengl_GL.RGBA4 = 32854;
  lime_graphics_opengl_GL.RGB5_A1 = 32855;
  lime_graphics_opengl_GL.RGB565 = 36194;
  lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
  lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
  lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
  lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
  lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
  lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
  lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
  lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
  lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
  lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
  lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
  lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
  lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
  lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
  lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
  lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
  lime_graphics_opengl_GL.NONE = 0;
  lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
  lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
  lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
  lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
  lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
  lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
  lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
  lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
  lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
  lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
  lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
  lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
  lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
  lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
  lime_graphics_opengl_GL.READ_BUFFER = 3074;
  lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
  lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
  lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
  lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
  lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
  lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
  lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
  lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
  lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
  lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
  lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
  lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
  lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
  lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
  lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
  lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
  lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
  lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
  lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
  lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
  lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
  lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
  lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
  lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
  lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
  lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
  lime_graphics_opengl_GL.RED = 6403;
  lime_graphics_opengl_GL.RGB8 = 32849;
  lime_graphics_opengl_GL.RGBA8 = 32856;
  lime_graphics_opengl_GL.RGB10_A2 = 32857;
  lime_graphics_opengl_GL.TEXTURE_3D = 32879;
  lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
  lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
  lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
  lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
  lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
  lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
  lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
  lime_graphics_opengl_GL.SRGB = 35904;
  lime_graphics_opengl_GL.SRGB8 = 35905;
  lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
  lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
  lime_graphics_opengl_GL.RGBA32F = 34836;
  lime_graphics_opengl_GL.RGB32F = 34837;
  lime_graphics_opengl_GL.RGBA16F = 34842;
  lime_graphics_opengl_GL.RGB16F = 34843;
  lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
  lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
  lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
  lime_graphics_opengl_GL.RGB9_E5 = 35901;
  lime_graphics_opengl_GL.RGBA32UI = 36208;
  lime_graphics_opengl_GL.RGB32UI = 36209;
  lime_graphics_opengl_GL.RGBA16UI = 36214;
  lime_graphics_opengl_GL.RGB16UI = 36215;
  lime_graphics_opengl_GL.RGBA8UI = 36220;
  lime_graphics_opengl_GL.RGB8UI = 36221;
  lime_graphics_opengl_GL.RGBA32I = 36226;
  lime_graphics_opengl_GL.RGB32I = 36227;
  lime_graphics_opengl_GL.RGBA16I = 36232;
  lime_graphics_opengl_GL.RGB16I = 36233;
  lime_graphics_opengl_GL.RGBA8I = 36238;
  lime_graphics_opengl_GL.RGB8I = 36239;
  lime_graphics_opengl_GL.RED_INTEGER = 36244;
  lime_graphics_opengl_GL.RGB_INTEGER = 36248;
  lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
  lime_graphics_opengl_GL.R8 = 33321;
  lime_graphics_opengl_GL.RG8 = 33323;
  lime_graphics_opengl_GL.R16F = 33325;
  lime_graphics_opengl_GL.R32F = 33326;
  lime_graphics_opengl_GL.RG16F = 33327;
  lime_graphics_opengl_GL.RG32F = 33328;
  lime_graphics_opengl_GL.R8I = 33329;
  lime_graphics_opengl_GL.R8UI = 33330;
  lime_graphics_opengl_GL.R16I = 33331;
  lime_graphics_opengl_GL.R16UI = 33332;
  lime_graphics_opengl_GL.R32I = 33333;
  lime_graphics_opengl_GL.R32UI = 33334;
  lime_graphics_opengl_GL.RG8I = 33335;
  lime_graphics_opengl_GL.RG8UI = 33336;
  lime_graphics_opengl_GL.RG16I = 33337;
  lime_graphics_opengl_GL.RG16UI = 33338;
  lime_graphics_opengl_GL.RG32I = 33339;
  lime_graphics_opengl_GL.RG32UI = 33340;
  lime_graphics_opengl_GL.R8_SNORM = 36756;
  lime_graphics_opengl_GL.RG8_SNORM = 36757;
  lime_graphics_opengl_GL.RGB8_SNORM = 36758;
  lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
  lime_graphics_opengl_GL.RGB10_A2UI = 36975;
  lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
  lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
  lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
  lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
  lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
  lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
  lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
  lime_graphics_opengl_GL.HALF_FLOAT = 5131;
  lime_graphics_opengl_GL.RG = 33319;
  lime_graphics_opengl_GL.RG_INTEGER = 33320;
  lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
  lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
  lime_graphics_opengl_GL.QUERY_RESULT = 34918;
  lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
  lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
  lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
  lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
  lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
  lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
  lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
  lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
  lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
  lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
  lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
  lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
  lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
  lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
  lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
  lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
  lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
  lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
  lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
  lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
  lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
  lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
  lime_graphics_opengl_GL.SAMPLER_3D = 35679;
  lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
  lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
  lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
  lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
  lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
  lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
  lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
  lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
  lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
  lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
  lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
  lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
  lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
  lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
  lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
  lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
  lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
  lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
  lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
  lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
  lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
  lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
  lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
  lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
  lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
  lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
  lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
  lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
  lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
  lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
  lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
  lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
  lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
  lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
  lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
  lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
  lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
  lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
  lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
  lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
  lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
  lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
  lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
  lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
  lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
  lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
  lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
  lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
  lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
  lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
  lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
  lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
  lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
  lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
  lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
  lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
  lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
  lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
  lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
  lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
  lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
  lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
  lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
  lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
  lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
  lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
  lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
  lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
  lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
  lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
  lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
  lime_graphics_opengl_GL.SYNC_STATUS = 37140;
  lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
  lime_graphics_opengl_GL.SYNC_FENCE = 37142;
  lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
  lime_graphics_opengl_GL.UNSIGNALED = 37144;
  lime_graphics_opengl_GL.SIGNALED = 37145;
  lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
  lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
  lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
  lime_graphics_opengl_GL.WAIT_FAILED = 37149;
  lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
  lime_graphics_opengl_GL.COLOR = 6144;
  lime_graphics_opengl_GL.DEPTH = 6145;
  lime_graphics_opengl_GL.STENCIL = 6146;
  lime_graphics_opengl_GL.MIN = 32775;
  lime_graphics_opengl_GL.MAX = 32776;
  lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
  lime_graphics_opengl_GL.STREAM_READ = 35041;
  lime_graphics_opengl_GL.STREAM_COPY = 35042;
  lime_graphics_opengl_GL.STATIC_READ = 35045;
  lime_graphics_opengl_GL.STATIC_COPY = 35046;
  lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
  lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
  lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
  lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
  lime_graphics_opengl_GL.INVALID_INDEX = -1;
  lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
  lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
  lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0,
  ];
  lime_math_Matrix3.__identity = new lime_math_Matrix3();
  lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [
    1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    1.0,
  ];
  lime_media_openal_AL.NONE = 0;
  lime_media_openal_AL.FALSE = 0;
  lime_media_openal_AL.TRUE = 1;
  lime_media_openal_AL.SOURCE_RELATIVE = 514;
  lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
  lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
  lime_media_openal_AL.PITCH = 4099;
  lime_media_openal_AL.POSITION = 4100;
  lime_media_openal_AL.DIRECTION = 4101;
  lime_media_openal_AL.VELOCITY = 4102;
  lime_media_openal_AL.LOOPING = 4103;
  lime_media_openal_AL.BUFFER = 4105;
  lime_media_openal_AL.GAIN = 4106;
  lime_media_openal_AL.MIN_GAIN = 4109;
  lime_media_openal_AL.MAX_GAIN = 4110;
  lime_media_openal_AL.ORIENTATION = 4111;
  lime_media_openal_AL.SOURCE_STATE = 4112;
  lime_media_openal_AL.INITIAL = 4113;
  lime_media_openal_AL.PLAYING = 4114;
  lime_media_openal_AL.PAUSED = 4115;
  lime_media_openal_AL.STOPPED = 4116;
  lime_media_openal_AL.BUFFERS_QUEUED = 4117;
  lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
  lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
  lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
  lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
  lime_media_openal_AL.MAX_DISTANCE = 4131;
  lime_media_openal_AL.SEC_OFFSET = 4132;
  lime_media_openal_AL.SAMPLE_OFFSET = 4133;
  lime_media_openal_AL.BYTE_OFFSET = 4134;
  lime_media_openal_AL.SOURCE_TYPE = 4135;
  lime_media_openal_AL.STATIC = 4136;
  lime_media_openal_AL.STREAMING = 4137;
  lime_media_openal_AL.UNDETERMINED = 4144;
  lime_media_openal_AL.FORMAT_MONO8 = 4352;
  lime_media_openal_AL.FORMAT_MONO16 = 4353;
  lime_media_openal_AL.FORMAT_STEREO8 = 4354;
  lime_media_openal_AL.FORMAT_STEREO16 = 4355;
  lime_media_openal_AL.FREQUENCY = 8193;
  lime_media_openal_AL.BITS = 8194;
  lime_media_openal_AL.CHANNELS = 8195;
  lime_media_openal_AL.SIZE = 8196;
  lime_media_openal_AL.NO_ERROR = 0;
  lime_media_openal_AL.INVALID_NAME = 40961;
  lime_media_openal_AL.INVALID_ENUM = 40962;
  lime_media_openal_AL.INVALID_VALUE = 40963;
  lime_media_openal_AL.INVALID_OPERATION = 40964;
  lime_media_openal_AL.OUT_OF_MEMORY = 40965;
  lime_media_openal_AL.VENDOR = 45057;
  lime_media_openal_AL.VERSION = 45058;
  lime_media_openal_AL.RENDERER = 45059;
  lime_media_openal_AL.EXTENSIONS = 45060;
  lime_media_openal_AL.DOPPLER_FACTOR = 49152;
  lime_media_openal_AL.SPEED_OF_SOUND = 49155;
  lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
  lime_media_openal_AL.DISTANCE_MODEL = 53248;
  lime_media_openal_AL.INVERSE_DISTANCE = 53249;
  lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
  lime_media_openal_AL.LINEAR_DISTANCE = 53251;
  lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
  lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
  lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
  lime_media_openal_ALC.FALSE = 0;
  lime_media_openal_ALC.TRUE = 1;
  lime_media_openal_ALC.FREQUENCY = 4103;
  lime_media_openal_ALC.REFRESH = 4104;
  lime_media_openal_ALC.SYNC = 4105;
  lime_media_openal_ALC.MONO_SOURCES = 4112;
  lime_media_openal_ALC.STEREO_SOURCES = 4113;
  lime_media_openal_ALC.NO_ERROR = 0;
  lime_media_openal_ALC.INVALID_DEVICE = 40961;
  lime_media_openal_ALC.INVALID_CONTEXT = 40962;
  lime_media_openal_ALC.INVALID_ENUM = 40963;
  lime_media_openal_ALC.INVALID_VALUE = 40964;
  lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
  lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
  lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
  lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
  lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
  lime_media_openal_ALC.EXTENSIONS = 4102;
  lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
  lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
  lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
  lime_system_System.__directories = new haxe_ds_IntMap();
  lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
  lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
  lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
  lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
  lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
  lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
  lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
  lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
  lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
  lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
  lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
  lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
  lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
  lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
  lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
  lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
  lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
  lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
  lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
  lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
  lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
  lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
  lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
  lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
  lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
  lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
  lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
  lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
  lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
  lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
  lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
  lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
  lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
  lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
  lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
  lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
  lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
  lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
  lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
  lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
  lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
  lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
  lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
  lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
  lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
  lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
  lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
  lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
  lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
  lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
  lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
  lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
  lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
  lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
  lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
  lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
  lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
  lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
  lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
  lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
  lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
  lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
  lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
  lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
  lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
  lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
  lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
  lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
  lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
  lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
  lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
  lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
  lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
  lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
  lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
  lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
  lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
  lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
  lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
  lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
  lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
  lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
  lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
  lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
  lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
  lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
  lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
  lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
  lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
  lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
  lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
  lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
  lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
  lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
  lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
  lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
  lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
  lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
  lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
  lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
  lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
  lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
  lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
  lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
  lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
  lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
  lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
  lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
  lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
  lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
  lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
  lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
  lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
  lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
  lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
  lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
  lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
  lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
  lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
  lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
  lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
  lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
  lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
  lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
  lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
  lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
  lime_ui_Gamepad.devices = new haxe_ds_IntMap();
  lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
  lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
  lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
  lime_ui_Joystick.devices = new haxe_ds_IntMap();
  lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
  lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
  lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
  lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
  lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
  lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
  lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
  lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
  lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
  lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
  lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
  lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
  lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
  lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
  lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
  lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
  lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
  lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
  lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
  lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
  lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
  lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
  lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
  lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
  lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
  lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
  lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
  lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
  lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
  lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
  lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
  lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
  lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
  lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
  lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
  lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
  lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
  lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
  lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
  lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
  lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
  lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
  lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
  lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
  lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
  lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
  lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
  lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
  lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
  lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
  lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
  lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
  lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
  lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
  lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
  lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
  lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
  lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
  lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
  lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
  lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
  lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
  lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
  lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
  lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
  lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
  lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
  lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
  lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
  lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
  lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
  lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
  lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
  lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
  lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
  lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
  lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
  lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
  lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
  lime_ui__$ScanCode_ScanCode_$Impl_$.UNKNOWN = 0;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSPACE = 42;
  lime_ui__$ScanCode_ScanCode_$Impl_$.TAB = 43;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN = 40;
  lime_ui__$ScanCode_ScanCode_$Impl_$.ESCAPE = 41;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SPACE = 44;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SINGLE_QUOTE = 52;
  lime_ui__$ScanCode_ScanCode_$Impl_$.COMMA = 54;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MINUS = 45;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PERIOD = 55;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SLASH = 56;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_0 = 39;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_1 = 30;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_2 = 31;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_3 = 32;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_4 = 33;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_5 = 34;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_6 = 35;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_7 = 36;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_8 = 37;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_9 = 38;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SEMICOLON = 51;
  lime_ui__$ScanCode_ScanCode_$Impl_$.EQUALS = 46;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_BRACKET = 47;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSLASH = 49;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_BRACKET = 48;
  lime_ui__$ScanCode_ScanCode_$Impl_$.GRAVE = 53;
  lime_ui__$ScanCode_ScanCode_$Impl_$.A = 4;
  lime_ui__$ScanCode_ScanCode_$Impl_$.B = 5;
  lime_ui__$ScanCode_ScanCode_$Impl_$.C = 6;
  lime_ui__$ScanCode_ScanCode_$Impl_$.D = 7;
  lime_ui__$ScanCode_ScanCode_$Impl_$.E = 8;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F = 9;
  lime_ui__$ScanCode_ScanCode_$Impl_$.G = 10;
  lime_ui__$ScanCode_ScanCode_$Impl_$.H = 11;
  lime_ui__$ScanCode_ScanCode_$Impl_$.I = 12;
  lime_ui__$ScanCode_ScanCode_$Impl_$.J = 13;
  lime_ui__$ScanCode_ScanCode_$Impl_$.K = 14;
  lime_ui__$ScanCode_ScanCode_$Impl_$.L = 15;
  lime_ui__$ScanCode_ScanCode_$Impl_$.M = 16;
  lime_ui__$ScanCode_ScanCode_$Impl_$.N = 17;
  lime_ui__$ScanCode_ScanCode_$Impl_$.O = 18;
  lime_ui__$ScanCode_ScanCode_$Impl_$.P = 19;
  lime_ui__$ScanCode_ScanCode_$Impl_$.Q = 20;
  lime_ui__$ScanCode_ScanCode_$Impl_$.R = 21;
  lime_ui__$ScanCode_ScanCode_$Impl_$.S = 22;
  lime_ui__$ScanCode_ScanCode_$Impl_$.T = 23;
  lime_ui__$ScanCode_ScanCode_$Impl_$.U = 24;
  lime_ui__$ScanCode_ScanCode_$Impl_$.V = 25;
  lime_ui__$ScanCode_ScanCode_$Impl_$.W = 26;
  lime_ui__$ScanCode_ScanCode_$Impl_$.X = 27;
  lime_ui__$ScanCode_ScanCode_$Impl_$.Y = 28;
  lime_ui__$ScanCode_ScanCode_$Impl_$.Z = 29;
  lime_ui__$ScanCode_ScanCode_$Impl_$.DELETE = 76;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CAPS_LOCK = 57;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F1 = 58;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F2 = 59;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F3 = 60;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F4 = 61;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F5 = 62;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F6 = 63;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F7 = 64;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F8 = 65;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F9 = 66;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F10 = 67;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F11 = 68;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F12 = 69;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PRINT_SCREEN = 70;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SCROLL_LOCK = 71;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PAUSE = 72;
  lime_ui__$ScanCode_ScanCode_$Impl_$.INSERT = 73;
  lime_ui__$ScanCode_ScanCode_$Impl_$.HOME = 74;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_UP = 75;
  lime_ui__$ScanCode_ScanCode_$Impl_$.END = 77;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_DOWN = 78;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT = 79;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT = 80;
  lime_ui__$ScanCode_ScanCode_$Impl_$.DOWN = 81;
  lime_ui__$ScanCode_ScanCode_$Impl_$.UP = 82;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUM_LOCK = 83;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DIVIDE = 84;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MULTIPLY = 85;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MINUS = 86;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS = 87;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_ENTER = 88;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_1 = 89;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_2 = 90;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_3 = 91;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_4 = 92;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_5 = 93;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_6 = 94;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_7 = 95;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_8 = 96;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_9 = 97;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_0 = 98;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERIOD = 99;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APPLICATION = 101;
  lime_ui__$ScanCode_ScanCode_$Impl_$.POWER = 102;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EQUALS = 103;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F13 = 104;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F14 = 105;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F15 = 106;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F16 = 107;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F17 = 108;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F18 = 109;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F19 = 110;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F20 = 111;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F21 = 112;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F22 = 113;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F23 = 114;
  lime_ui__$ScanCode_ScanCode_$Impl_$.F24 = 115;
  lime_ui__$ScanCode_ScanCode_$Impl_$.EXECUTE = 116;
  lime_ui__$ScanCode_ScanCode_$Impl_$.HELP = 117;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MENU = 118;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SELECT = 119;
  lime_ui__$ScanCode_ScanCode_$Impl_$.STOP = 120;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AGAIN = 121;
  lime_ui__$ScanCode_ScanCode_$Impl_$.UNDO = 122;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CUT = 123;
  lime_ui__$ScanCode_ScanCode_$Impl_$.COPY = 124;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PASTE = 125;
  lime_ui__$ScanCode_ScanCode_$Impl_$.FIND = 126;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MUTE = 127;
  lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_UP = 128;
  lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_DOWN = 129;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COMMA = 133;
  lime_ui__$ScanCode_ScanCode_$Impl_$.ALT_ERASE = 153;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SYSTEM_REQUEST = 154;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CANCEL = 155;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR = 156;
  lime_ui__$ScanCode_ScanCode_$Impl_$.PRIOR = 157;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN2 = 158;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SEPARATOR = 159;
  lime_ui__$ScanCode_ScanCode_$Impl_$.OUT = 160;
  lime_ui__$ScanCode_ScanCode_$Impl_$.OPER = 161;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR_AGAIN = 162;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CRSEL = 163;
  lime_ui__$ScanCode_ScanCode_$Impl_$.EXSEL = 164;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_00 = 176;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_000 = 177;
  lime_ui__$ScanCode_ScanCode_$Impl_$.THOUSAND_SEPARATOR = 178;
  lime_ui__$ScanCode_ScanCode_$Impl_$.DECIMAL_SEPARATOR = 179;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_UNIT = 180;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_SUBUNIT = 181;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 182;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 183;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_BRACE = 184;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_BRACE = 185;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_TAB = 186;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BACKSPACE = 187;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_A = 188;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_B = 189;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_C = 190;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_D = 191;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_E = 192;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_F = 193;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_XOR = 194;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_POWER = 195;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERCENT = 196;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LESS_THAN = 197;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_GREATER_THAN = 198;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AMPERSAND = 199;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 200;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_VERTICAL_BAR = 201;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COLON = 203;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HASH = 204;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_SPACE = 205;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AT = 206;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EXCLAMATION = 207;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_STORE = 208;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_RECALL = 209;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_CLEAR = 210;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_ADD = 211;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 212;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 213;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_DIVIDE = 214;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS_MINUS = 215;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR = 216;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 217;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BINARY = 218;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_OCTAL = 219;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DECIMAL = 220;
  lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HEXADECIMAL = 221;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_CTRL = 224;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_SHIFT = 225;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_ALT = 226;
  lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_META = 227;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_CTRL = 228;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_SHIFT = 229;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_ALT = 230;
  lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_META = 231;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MODE = 257;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_NEXT = 258;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PREVIOUS = 259;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_STOP = 260;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PLAY = 261;
  lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_MUTE = 262;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MEDIA_SELECT = 263;
  lime_ui__$ScanCode_ScanCode_$Impl_$.WWW = 264;
  lime_ui__$ScanCode_ScanCode_$Impl_$.MAIL = 265;
  lime_ui__$ScanCode_ScanCode_$Impl_$.CALCULATOR = 266;
  lime_ui__$ScanCode_ScanCode_$Impl_$.COMPUTER = 267;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_SEARCH = 268;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_HOME = 269;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BACK = 270;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_FORWARD = 271;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_STOP = 272;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_REFRESH = 273;
  lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BOOKMARKS = 274;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_DOWN = 275;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_UP = 276;
  lime_ui__$ScanCode_ScanCode_$Impl_$.DISPLAY_SWITCH = 277;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_TOGGLE = 278;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_DOWN = 279;
  lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_UP = 280;
  lime_ui__$ScanCode_ScanCode_$Impl_$.EJECT = 281;
  lime_ui__$ScanCode_ScanCode_$Impl_$.SLEEP = 282;
  lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
  lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
  lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
  lime_utils_Assets.cache = new lime_utils_AssetCache();
  lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
  lime_utils_Assets.libraries = new haxe_ds_StringMap();
  lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
  lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
  lime_utils__$Float64Array_Float64Array_$Impl_$.BYTES_PER_ELEMENT = 8;
  lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
  lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
  lime_utils__$Int8Array_Int8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
  lime_utils_Log.throwErrors = true;
  lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
  lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
  lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
  lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
  lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
  lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
  lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
  lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
  lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
  lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;
  motion_actuators_SimpleActuator.actuators = [];
  motion_actuators_SimpleActuator.actuatorsLength = 0;
  motion_actuators_SimpleActuator.addedEvent = false;
  motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
  motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
  motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
  openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
  openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
  openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
  openfl_Lib.current = new openfl_display_MovieClip();
  openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
  openfl__$internal_renderer_DrawCommandBuffer.empty =
    new openfl__$internal_renderer_DrawCommandBuffer();
  openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
  openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
  openfl__$internal_renderer_cairo_CairoGraphics.fillCommands =
    new openfl__$internal_renderer_DrawCommandBuffer();
  openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands =
    new openfl__$internal_renderer_DrawCommandBuffer();
  openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
  openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
  openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands =
    new openfl__$internal_renderer_DrawCommandBuffer();
  openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands =
    new openfl__$internal_renderer_DrawCommandBuffer();
  openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas =
    window.document.createElement("canvas");
  openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext =
    openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext(
      "2d"
    );
  openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg(
    "color=(\"#([^\"]+)\"|'#([^']+)')",
    "i"
  );
  openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg(
    "face=(\"([^\"]+)\"|'([^']+)')",
    "i"
  );
  openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg(
    "<font ([^>]+)>",
    "gi"
  );
  openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg(
    "</font>",
    "gi"
  );
  openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg(
    "size=(\"([^\"]+)\"|'([^']+)')>",
    "i"
  );
  openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
  openfl__$internal_renderer_flash_FlashTilemap.colorTransform =
    new openfl_geom_ColorTransform();
  openfl__$internal_renderer_flash_FlashTilemap.destPoint =
    new openfl_geom_Point();
  openfl__$internal_renderer_flash_FlashTilemap.sourceRect =
    new openfl_geom_Rectangle();
  openfl__$internal_renderer_flash_FlashTilemap.tileMatrix =
    new openfl_geom_Matrix();
  openfl__$internal_renderer_opengl_GLTilemap.__skippedTiles =
    new haxe_ds_IntMap();
  openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
  openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
  openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
  openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
  openfl__$internal_stage3D_GLUtils.debug = false;
  openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
  openfl__$internal_text_TextEngine.UTF8_TAB = 9;
  openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
  openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
  openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
  openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
  openfl__$internal_utils_PerlinNoise.P = [
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120,
    234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133,
    230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161,
    1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130,
    116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250,
    124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227,
    47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44,
    154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98,
    108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34,
    242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14,
    239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121,
    50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243,
    141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131,
    13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,
    240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252,
    219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125,
    136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158,
    231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245,
    40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187,
    208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198,
    173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126,
    255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223,
    183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167,
    43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,
    112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179,
    162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199,
    106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236,
    205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156,
    180,
  ];
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.HTML_FORMAT = 0;
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.RICH_TEXT_FORMAT = 1;
  openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.TEXT_FORMAT = 2;
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_ONLY = 0;
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_PREFERRED = 1;
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_ONLY = 2;
  openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_PREFERRED = 3;
  openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
  openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
  openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
  openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
  openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
  openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
  openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
  openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
  openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
  openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
  openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
  openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
  openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
  openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
  openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
  openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
  openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
  openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
  openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
  openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
  openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
  openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
  openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
  openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
  openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
  openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
  openfl_display_LoaderInfo.__rootURL = window.document.URL;
  openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
  openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
  openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
  openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
  openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
  openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
  openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
  openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
  openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
  openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
  openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
  openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
  openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
  openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
  openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
  openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
  openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
  openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
  openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
  openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
  openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
  openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
  openfl_display3D_Context3D.supportsVideoTexture = true;
  openfl_display3D_Context3D.MAX_SAMPLERS = 8;
  openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
  openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
  openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
  openfl_display3D_Context3D.DEPTH_STENCIL = 0;
  openfl_display3D_Context3D.__stateCache =
    new openfl__$internal_stage3D_Context3DStateCache();
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
  openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
  openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
  openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
  openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
  openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
  openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
  openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
  openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
  openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
  openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
  openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
  openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
  openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
  openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
  openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
  openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
  openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
  openfl_display3D_Program3D.verbose = lime_utils_Log.level == 5;
  openfl_display3D_textures_Texture.__lowMemoryMode = false;
  openfl_errors_Error.DEFAULT_TO_STRING = "Error";
  openfl_events_ActivityEvent.ACTIVITY = "activity";
  openfl_events_TextEvent.LINK = "link";
  openfl_events_TextEvent.TEXT_INPUT = "textInput";
  openfl_events_ErrorEvent.ERROR = "error";
  openfl_events_FocusEvent.FOCUS_IN = "focusIn";
  openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
  openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
  openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
  openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
  openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED =
    "fullScreenInteractiveAccepted";
  openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
  openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
  openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
  openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
  openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
  openfl_events_IOErrorEvent.IO_ERROR = "ioError";
  openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
  openfl_events_KeyboardEvent.KEY_UP = "keyUp";
  openfl_events_MouseEvent.CLICK = "click";
  openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
  openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
  openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
  openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
  openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
  openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
  openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
  openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
  openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
  openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
  openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
  openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
  openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
  openfl_events_MouseEvent.ROLL_OUT = "rollOut";
  openfl_events_MouseEvent.ROLL_OVER = "rollOver";
  openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
  openfl_events_ProgressEvent.PROGRESS = "progress";
  openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
  openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
  openfl_events_TimerEvent.TIMER = "timer";
  openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
  openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
  openfl_events_TouchEvent.TOUCH_END = "touchEnd";
  openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
  openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
  openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
  openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
  openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
  openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
  openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
  openfl_external_ExternalInterface.available = true;
  openfl_external_ExternalInterface.marshallExceptions = false;
  openfl_filters_BlurFilter.__blurShader =
    new openfl_filters__$BlurFilter_BlurShader();
  openfl_filters_ColorMatrixFilter.__colorMatrixShader =
    new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
  openfl_filters_GlowFilter.__glowShader =
    new openfl_filters__$GlowFilter_GlowShader();
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
  openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
  openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
  openfl_media_SoundMixer.__soundChannels = [];
  openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
  openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
  openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
  openfl_system_ApplicationDomain.currentDomain =
    new openfl_system_ApplicationDomain(null);
  openfl_system_SecurityDomain.currentDomain =
    new openfl_system_SecurityDomain();
  openfl_system_System.useCodePage = false;
  openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
  openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
  openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
  openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
  openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
  openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
  openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
  openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
  openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
  openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
  openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
  openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
  openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
  openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
  openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
  openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
  openfl_ui_GameInput.isSupported = true;
  openfl_ui_GameInput.numDevices = 0;
  openfl_ui_GameInput.__deviceList = [];
  openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
  openfl_ui_GameInput.__instances = [];
  openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
  openfl_ui_Keyboard.NUMBER_0 = 48;
  openfl_ui_Keyboard.NUMBER_1 = 49;
  openfl_ui_Keyboard.NUMBER_2 = 50;
  openfl_ui_Keyboard.NUMBER_3 = 51;
  openfl_ui_Keyboard.NUMBER_4 = 52;
  openfl_ui_Keyboard.NUMBER_5 = 53;
  openfl_ui_Keyboard.NUMBER_6 = 54;
  openfl_ui_Keyboard.NUMBER_7 = 55;
  openfl_ui_Keyboard.NUMBER_8 = 56;
  openfl_ui_Keyboard.NUMBER_9 = 57;
  openfl_ui_Keyboard.A = 65;
  openfl_ui_Keyboard.B = 66;
  openfl_ui_Keyboard.C = 67;
  openfl_ui_Keyboard.D = 68;
  openfl_ui_Keyboard.E = 69;
  openfl_ui_Keyboard.F = 70;
  openfl_ui_Keyboard.G = 71;
  openfl_ui_Keyboard.H = 72;
  openfl_ui_Keyboard.I = 73;
  openfl_ui_Keyboard.J = 74;
  openfl_ui_Keyboard.K = 75;
  openfl_ui_Keyboard.L = 76;
  openfl_ui_Keyboard.M = 77;
  openfl_ui_Keyboard.N = 78;
  openfl_ui_Keyboard.O = 79;
  openfl_ui_Keyboard.P = 80;
  openfl_ui_Keyboard.Q = 81;
  openfl_ui_Keyboard.R = 82;
  openfl_ui_Keyboard.S = 83;
  openfl_ui_Keyboard.T = 84;
  openfl_ui_Keyboard.U = 85;
  openfl_ui_Keyboard.V = 86;
  openfl_ui_Keyboard.W = 87;
  openfl_ui_Keyboard.X = 88;
  openfl_ui_Keyboard.Y = 89;
  openfl_ui_Keyboard.Z = 90;
  openfl_ui_Keyboard.NUMPAD_0 = 96;
  openfl_ui_Keyboard.NUMPAD_1 = 97;
  openfl_ui_Keyboard.NUMPAD_2 = 98;
  openfl_ui_Keyboard.NUMPAD_3 = 99;
  openfl_ui_Keyboard.NUMPAD_4 = 100;
  openfl_ui_Keyboard.NUMPAD_5 = 101;
  openfl_ui_Keyboard.NUMPAD_6 = 102;
  openfl_ui_Keyboard.NUMPAD_7 = 103;
  openfl_ui_Keyboard.NUMPAD_8 = 104;
  openfl_ui_Keyboard.NUMPAD_9 = 105;
  openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
  openfl_ui_Keyboard.NUMPAD_ADD = 107;
  openfl_ui_Keyboard.NUMPAD_ENTER = 108;
  openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
  openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
  openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
  openfl_ui_Keyboard.F1 = 112;
  openfl_ui_Keyboard.F2 = 113;
  openfl_ui_Keyboard.F3 = 114;
  openfl_ui_Keyboard.F4 = 115;
  openfl_ui_Keyboard.F5 = 116;
  openfl_ui_Keyboard.F6 = 117;
  openfl_ui_Keyboard.F7 = 118;
  openfl_ui_Keyboard.F8 = 119;
  openfl_ui_Keyboard.F9 = 120;
  openfl_ui_Keyboard.F10 = 121;
  openfl_ui_Keyboard.F11 = 122;
  openfl_ui_Keyboard.F12 = 123;
  openfl_ui_Keyboard.F13 = 124;
  openfl_ui_Keyboard.F14 = 125;
  openfl_ui_Keyboard.F15 = 126;
  openfl_ui_Keyboard.BACKSPACE = 8;
  openfl_ui_Keyboard.TAB = 9;
  openfl_ui_Keyboard.ALTERNATE = 18;
  openfl_ui_Keyboard.ENTER = 13;
  openfl_ui_Keyboard.COMMAND = 15;
  openfl_ui_Keyboard.SHIFT = 16;
  openfl_ui_Keyboard.CONTROL = 17;
  openfl_ui_Keyboard.BREAK = 19;
  openfl_ui_Keyboard.CAPS_LOCK = 20;
  openfl_ui_Keyboard.NUMPAD = 21;
  openfl_ui_Keyboard.ESCAPE = 27;
  openfl_ui_Keyboard.SPACE = 32;
  openfl_ui_Keyboard.PAGE_UP = 33;
  openfl_ui_Keyboard.PAGE_DOWN = 34;
  openfl_ui_Keyboard.END = 35;
  openfl_ui_Keyboard.HOME = 36;
  openfl_ui_Keyboard.LEFT = 37;
  openfl_ui_Keyboard.RIGHT = 39;
  openfl_ui_Keyboard.UP = 38;
  openfl_ui_Keyboard.DOWN = 40;
  openfl_ui_Keyboard.INSERT = 45;
  openfl_ui_Keyboard.DELETE = 46;
  openfl_ui_Keyboard.NUMLOCK = 144;
  openfl_ui_Keyboard.SEMICOLON = 186;
  openfl_ui_Keyboard.EQUAL = 187;
  openfl_ui_Keyboard.COMMA = 188;
  openfl_ui_Keyboard.MINUS = 189;
  openfl_ui_Keyboard.PERIOD = 190;
  openfl_ui_Keyboard.SLASH = 191;
  openfl_ui_Keyboard.BACKQUOTE = 192;
  openfl_ui_Keyboard.LEFTBRACKET = 219;
  openfl_ui_Keyboard.BACKSLASH = 220;
  openfl_ui_Keyboard.RIGHTBRACKET = 221;
  openfl_ui_Keyboard.QUOTE = 222;
  openfl_ui_Mouse.supportsCursor = true;
  openfl_ui_Mouse.supportsNativeCursor = true;
  openfl_ui_Mouse.__cursor = "auto";
  openfl_utils_Assets.cache = new openfl_utils_AssetCache();
  openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
  openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
  openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
  openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
  spritesheet_data_BehaviorData.uniqueID = 0;
  ApplicationMain.main();
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  typeof window != "undefined"
    ? window
    : typeof global != "undefined"
    ? global
    : typeof self != "undefined"
    ? self
    : this
);
